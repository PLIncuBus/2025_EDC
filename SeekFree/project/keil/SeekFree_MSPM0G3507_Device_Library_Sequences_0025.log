/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0025.log
 *  Created     : 03:46:59 (03/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[03:46:59.019]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:46:59.019]  
[03:46:59.019]  <debugvars>
[03:46:59.019]    // Pre-defined
[03:46:59.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:59.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:59.020]    __dp=0x00000000
[03:46:59.020]    __ap=0x00000000
[03:46:59.020]    __traceout=0x00000000      (Trace Disabled)
[03:46:59.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:59.020]    __FlashAddr=0x00000000
[03:46:59.020]    __FlashLen=0x00000000
[03:46:59.020]    __FlashArg=0x00000000
[03:46:59.020]    __FlashOp=0x00000000
[03:46:59.020]    __Result=0x00000000
[03:46:59.021]  </debugvars>
[03:46:59.021]  
[03:46:59.021]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:46:59.021]    <block atomic="false" info="">
[03:46:59.021]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:46:59.021]        // -> [isSWJ <= 0x00000001]
[03:46:59.021]      __var hasDormant = __protocol & 0x00020000;
[03:46:59.021]        // -> [hasDormant <= 0x00000000]
[03:46:59.021]      __var protType   = __protocol & 0x0000FFFF;
[03:46:59.021]        // -> [protType <= 0x00000002]
[03:46:59.022]    </block>
[03:46:59.022]    <control if="protType == 1" while="" timeout="0" info="">
[03:46:59.022]      // if-block "protType == 1"
[03:46:59.022]        // =>  FALSE
[03:46:59.022]      // skip if-block "protType == 1"
[03:46:59.022]    </control>
[03:46:59.022]    <control if="protType == 2" while="" timeout="0" info="">
[03:46:59.022]      // if-block "protType == 2"
[03:46:59.023]        // =>  TRUE
[03:46:59.023]      <control if="isSWJ" while="" timeout="0" info="">
[03:46:59.023]        // if-block "isSWJ"
[03:46:59.023]          // =>  TRUE
[03:46:59.023]        <control if="hasDormant" while="" timeout="0" info="">
[03:46:59.023]          // if-block "hasDormant"
[03:46:59.023]            // =>  FALSE
[03:46:59.024]          // skip if-block "hasDormant"
[03:46:59.024]        </control>
[03:46:59.024]        <control if="!hasDormant" while="" timeout="0" info="">
[03:46:59.024]          // if-block "!hasDormant"
[03:46:59.024]            // =>  TRUE
[03:46:59.024]          <block atomic="false" info="">
[03:46:59.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:46:59.025]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:59.025]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:46:59.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:46:59.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:46:59.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:59.029]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:46:59.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:46:59.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:46:59.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:59.035]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:46:59.036]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:46:59.037]          </block>
[03:46:59.037]          // end if-block "!hasDormant"
[03:46:59.037]        </control>
[03:46:59.037]        // end if-block "isSWJ"
[03:46:59.037]      </control>
[03:46:59.037]      <control if="!isSWJ" while="" timeout="0" info="">
[03:46:59.037]        // if-block "!isSWJ"
[03:46:59.038]          // =>  FALSE
[03:46:59.038]        // skip if-block "!isSWJ"
[03:46:59.038]      </control>
[03:46:59.038]      <block atomic="false" info="">
[03:46:59.038]        ReadDP(0x0);
[03:46:59.040]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:46:59.040]      </block>
[03:46:59.040]      // end if-block "protType == 2"
[03:46:59.040]    </control>
[03:46:59.040]  </sequence>
[03:46:59.040]  
[03:46:59.043]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:46:59.043]  
[03:46:59.043]  <debugvars>
[03:46:59.043]    // Pre-defined
[03:46:59.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:59.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:59.043]    __dp=0x00000000
[03:46:59.043]    __ap=0x00000000
[03:46:59.043]    __traceout=0x00000000      (Trace Disabled)
[03:46:59.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:59.043]    __FlashAddr=0x00000000
[03:46:59.043]    __FlashLen=0x00000000
[03:46:59.043]    __FlashArg=0x00000000
[03:46:59.044]    __FlashOp=0x00000000
[03:46:59.044]    __Result=0x00000000
[03:46:59.044]  </debugvars>
[03:46:59.044]  
[03:46:59.044]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:46:59.044]    <block atomic="false" info="">
[03:46:59.044]      __var SW_DP_ABORT       = 0x0;
[03:46:59.044]        // -> [SW_DP_ABORT <= 0x00000000]
[03:46:59.044]      __var DP_CTRL_STAT      = 0x4;
[03:46:59.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:46:59.044]      __var DP_SELECT         = 0x8;
[03:46:59.044]        // -> [DP_SELECT <= 0x00000008]
[03:46:59.045]      __var powered_down      = 0;
[03:46:59.045]        // -> [powered_down <= 0x00000000]
[03:46:59.045]      WriteDP(DP_SELECT, 0x00000000);
[03:46:59.046]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:46:59.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:46:59.049]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[03:46:59.049]        // -> [powered_down <= 0x00000000]
[03:46:59.049]    </block>
[03:46:59.049]    <control if="powered_down" while="" timeout="0" info="">
[03:46:59.049]      // if-block "powered_down"
[03:46:59.049]        // =>  FALSE
[03:46:59.049]      // skip if-block "powered_down"
[03:46:59.049]    </control>
[03:46:59.049]    <block atomic="false" info="">
[03:46:59.049]      __var DEBUG_PORT_VAL    = 0;
[03:46:59.049]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:46:59.050]      __var ACCESS_POINT_VAL  = 0;
[03:46:59.050]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:46:59.050]      __ap = 1; 
[03:46:59.050]        // -> [__ap <= 0x00000001]
[03:46:59.050]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:46:59.054]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:46:59.054]      __ap = 4;
[03:46:59.054]        // -> [__ap <= 0x00000004]
[03:46:59.054]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:46:59.058]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[03:46:59.058]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[03:46:59.058]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:46:59.058]    </block>
[03:46:59.059]    <block atomic="false" info="">
[03:46:59.059]      __var nReset = 0x80;
[03:46:59.059]        // -> [nReset <= 0x00000080]
[03:46:59.059]      __var canReadPins = 0;
[03:46:59.059]        // -> [canReadPins <= 0x00000000]
[03:46:59.059]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:46:59.061]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:46:59.061]        // -> [canReadPins <= 0x00000001]
[03:46:59.061]    </block>
[03:46:59.061]    <control if="" while="1" timeout="200" info="">
[03:46:59.061]      // while "1"  (timeout="200")
[03:46:59.062]      // while-condition  =>  TRUE
[03:46:59.062]      // while "1"  (timeout="200")
[03:46:59.062]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.063]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.063]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.063]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.063]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.063]      // while-condition  =>  TRUE
[03:46:59.063]      // while "1"  (timeout="200")
[03:46:59.064]      // while-condition  =>  TRUE
[03:46:59.064]      // while "1"  (timeout="200")
[03:46:59.064]      // while  =>  TIMEOUT
[03:46:59.064]      // end while "1"
[03:46:59.064]    </control>
[03:46:59.064]    <control if="canReadPins" while="" timeout="0" info="">
[03:46:59.064]      // if-block "canReadPins"
[03:46:59.064]        // =>  TRUE
[03:46:59.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:46:59.064]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:46:59.065]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:46:59.065]        // while-condition  =>  FALSE
[03:46:59.065]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:46:59.066]      </control>
[03:46:59.066]      // end if-block "canReadPins"
[03:46:59.066]    </control>
[03:46:59.066]    <control if="!canReadPins" while="" timeout="0" info="">
[03:46:59.066]      // if-block "!canReadPins"
[03:46:59.066]        // =>  FALSE
[03:46:59.066]      // skip if-block "!canReadPins"
[03:46:59.067]    </control>
[03:46:59.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:46:59.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:46:59.067]        // =>  FALSE
[03:46:59.067]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:46:59.067]    </control>
[03:46:59.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:46:59.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:46:59.067]        // =>  TRUE
[03:46:59.067]      <block atomic="false" info="">
[03:46:59.067]        WriteAP(0xF0, 0x01);
[03:46:59.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:46:59.072]        WriteAP(0x00, 0xF90008);
[03:46:59.075]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[03:46:59.075]        WriteAP(0xF0, 0x01);
[03:46:59.079]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:46:59.079]      </block>
[03:46:59.079]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:46:59.079]    </control>
[03:46:59.080]    <block atomic="false" info="">
[03:46:59.080]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:46:59.084]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[03:46:59.084]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[03:46:59.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:46:59.084]      __ap = 0; //lets make sure we reset the access point selection
[03:46:59.084]        // -> [__ap <= 0x00000000]
[03:46:59.084]    </block>
[03:46:59.084]  </sequence>
[03:46:59.084]  
[03:46:59.114]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:46:59.114]  
[03:46:59.114]  <debugvars>
[03:46:59.114]    // Pre-defined
[03:46:59.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:59.114]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:59.114]    __dp=0x00000000
[03:46:59.115]    __ap=0x00000000
[03:46:59.115]    __traceout=0x00000000      (Trace Disabled)
[03:46:59.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:59.115]    __FlashAddr=0x00000000
[03:46:59.115]    __FlashLen=0x00000000
[03:46:59.115]    __FlashArg=0x00000000
[03:46:59.115]    __FlashOp=0x00000000
[03:46:59.115]    __Result=0x00000000
[03:46:59.115]  </debugvars>
[03:46:59.115]  
[03:46:59.115]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:46:59.115]    <block atomic="false" info="">
[03:46:59.116]      __var deviceID = 0;
[03:46:59.116]        // -> [deviceID <= 0x00000000]
[03:46:59.116]      __var version = 0;
[03:46:59.116]        // -> [version <= 0x00000000]
[03:46:59.116]      __var partNum = 0;
[03:46:59.116]        // -> [partNum <= 0x00000000]
[03:46:59.116]      __var manuf = 0;
[03:46:59.116]        // -> [manuf <= 0x00000000]
[03:46:59.116]      __var isMSPM0G1X0X_G3X0X = 0;
[03:46:59.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:46:59.116]      __var isProduction = 0;
[03:46:59.116]        // -> [isProduction <= 0x00000000]
[03:46:59.116]      __var continueId = 0;
[03:46:59.116]        // -> [continueId <= 0x00000000]
[03:46:59.117]      deviceID =   Read32(0x41C40004);
[03:46:59.125]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:46:59.125]        // -> [deviceID <= 0x2BB8802F]
[03:46:59.126]      version = deviceID >> 28;
[03:46:59.126]        // -> [version <= 0x00000002]
[03:46:59.126]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:46:59.126]        // -> [partNum <= 0x0000BB88]
[03:46:59.126]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:46:59.126]        // -> [manuf <= 0x00000017]
[03:46:59.126]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:46:59.126]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:46:59.127]      isProduction = (version > 0);
[03:46:59.127]        // -> [isProduction <= 0x00000001]
[03:46:59.127]    </block>
[03:46:59.127]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:46:59.127]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:46:59.127]        // =>  FALSE
[03:46:59.128]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:46:59.128]    </control>
[03:46:59.128]    <control if="continueId == 4" while="" timeout="0" info="">
[03:46:59.128]      // if-block "continueId == 4"
[03:46:59.128]        // =>  FALSE
[03:46:59.129]      // skip if-block "continueId == 4"
[03:46:59.129]    </control>
[03:46:59.129]    <control if="!isProduction" while="" timeout="0" info="">
[03:46:59.129]      // if-block "!isProduction"
[03:46:59.129]        // =>  FALSE
[03:46:59.129]      // skip if-block "!isProduction"
[03:46:59.129]    </control>
[03:46:59.129]  </sequence>
[03:46:59.129]  
[03:48:21.560]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:48:21.560]  
[03:48:21.570]  <debugvars>
[03:48:21.570]    // Pre-defined
[03:48:21.570]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.570]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.570]    __dp=0x00000000
[03:48:21.570]    __ap=0x00000000
[03:48:21.570]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.570]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.570]    __FlashAddr=0x00000000
[03:48:21.571]    __FlashLen=0x00000000
[03:48:21.571]    __FlashArg=0x00000000
[03:48:21.571]    __FlashOp=0x00000000
[03:48:21.571]    __Result=0x00000000
[03:48:21.571]  </debugvars>
[03:48:21.571]  
[03:48:21.571]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:48:21.571]    <block atomic="false" info="">
[03:48:21.572]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:48:21.572]        // -> [isSWJ <= 0x00000001]
[03:48:21.572]      __var hasDormant = __protocol & 0x00020000;
[03:48:21.572]        // -> [hasDormant <= 0x00000000]
[03:48:21.572]      __var protType   = __protocol & 0x0000FFFF;
[03:48:21.572]        // -> [protType <= 0x00000002]
[03:48:21.572]    </block>
[03:48:21.572]    <control if="protType == 1" while="" timeout="0" info="">
[03:48:21.572]      // if-block "protType == 1"
[03:48:21.573]        // =>  FALSE
[03:48:21.573]      // skip if-block "protType == 1"
[03:48:21.573]    </control>
[03:48:21.573]    <control if="protType == 2" while="" timeout="0" info="">
[03:48:21.574]      // if-block "protType == 2"
[03:48:21.574]        // =>  TRUE
[03:48:21.574]      <control if="isSWJ" while="" timeout="0" info="">
[03:48:21.574]        // if-block "isSWJ"
[03:48:21.574]          // =>  TRUE
[03:48:21.574]        <control if="hasDormant" while="" timeout="0" info="">
[03:48:21.574]          // if-block "hasDormant"
[03:48:21.575]            // =>  FALSE
[03:48:21.575]          // skip if-block "hasDormant"
[03:48:21.575]        </control>
[03:48:21.575]        <control if="!hasDormant" while="" timeout="0" info="">
[03:48:21.575]          // if-block "!hasDormant"
[03:48:21.575]            // =>  TRUE
[03:48:21.575]          <block atomic="false" info="">
[03:48:21.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:48:21.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.577]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:48:21.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:48:21.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:48:21.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.581]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:48:21.582]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:48:21.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:48:21.585]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:21.585]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:48:21.587]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:48:21.587]          </block>
[03:48:21.587]          // end if-block "!hasDormant"
[03:48:21.587]        </control>
[03:48:21.587]        // end if-block "isSWJ"
[03:48:21.588]      </control>
[03:48:21.588]      <control if="!isSWJ" while="" timeout="0" info="">
[03:48:21.588]        // if-block "!isSWJ"
[03:48:21.588]          // =>  FALSE
[03:48:21.588]        // skip if-block "!isSWJ"
[03:48:21.588]      </control>
[03:48:21.588]      <block atomic="false" info="">
[03:48:21.588]        ReadDP(0x0);
[03:48:21.590]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:48:21.590]      </block>
[03:48:21.591]      // end if-block "protType == 2"
[03:48:21.591]    </control>
[03:48:21.591]  </sequence>
[03:48:21.591]  
[03:48:21.598]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:48:21.598]  
[03:48:21.598]  <debugvars>
[03:48:21.598]    // Pre-defined
[03:48:21.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.599]    __dp=0x00000000
[03:48:21.599]    __ap=0x00000000
[03:48:21.599]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.599]    __FlashAddr=0x00000000
[03:48:21.599]    __FlashLen=0x00000000
[03:48:21.599]    __FlashArg=0x00000000
[03:48:21.599]    __FlashOp=0x00000000
[03:48:21.600]    __Result=0x00000000
[03:48:21.600]  </debugvars>
[03:48:21.600]  
[03:48:21.600]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:48:21.600]    <block atomic="false" info="">
[03:48:21.601]      __var SW_DP_ABORT       = 0x0;
[03:48:21.601]        // -> [SW_DP_ABORT <= 0x00000000]
[03:48:21.601]      __var DP_CTRL_STAT      = 0x4;
[03:48:21.601]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:48:21.601]      __var DP_SELECT         = 0x8;
[03:48:21.601]        // -> [DP_SELECT <= 0x00000008]
[03:48:21.601]      __var powered_down      = 0;
[03:48:21.601]        // -> [powered_down <= 0x00000000]
[03:48:21.601]      WriteDP(DP_SELECT, 0x00000000);
[03:48:21.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:48:21.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:48:21.605]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:48:21.605]        // -> [powered_down <= 0x00000001]
[03:48:21.605]    </block>
[03:48:21.605]    <control if="powered_down" while="" timeout="0" info="">
[03:48:21.605]      // if-block "powered_down"
[03:48:21.605]        // =>  TRUE
[03:48:21.605]      <block atomic="false" info="">
[03:48:21.606]        Message(0, "Debug/System power-up request sent");
[03:48:21.606]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:48:21.608]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:48:21.608]      </block>
[03:48:21.608]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:48:21.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:48:21.610]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:48:21.610]        // while-condition  =>  FALSE
[03:48:21.611]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:48:21.611]      </control>
[03:48:21.611]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:48:21.611]        // if-block "(__protocol & 0xFFFF) == 1"
[03:48:21.611]          // =>  FALSE
[03:48:21.611]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:48:21.611]      </control>
[03:48:21.611]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:48:21.611]        // if-block "(__protocol & 0xFFFF) == 2"
[03:48:21.612]          // =>  TRUE
[03:48:21.612]        <block atomic="false" info="">
[03:48:21.612]          Message(0, "executing SWD power up");
[03:48:21.612]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:48:21.613]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:48:21.613]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:48:21.615]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:48:21.615]        </block>
[03:48:21.615]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:48:21.615]      </control>
[03:48:21.615]      // end if-block "powered_down"
[03:48:21.615]    </control>
[03:48:21.615]    <block atomic="false" info="">
[03:48:21.615]      __var DEBUG_PORT_VAL    = 0;
[03:48:21.615]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:48:21.615]      __var ACCESS_POINT_VAL  = 0;
[03:48:21.617]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:48:21.617]      __ap = 1; 
[03:48:21.617]        // -> [__ap <= 0x00000001]
[03:48:21.617]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:48:21.620]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:48:21.620]      __ap = 4;
[03:48:21.620]        // -> [__ap <= 0x00000004]
[03:48:21.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:21.624]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.624]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:48:21.624]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:21.624]    </block>
[03:48:21.624]    <block atomic="false" info="">
[03:48:21.624]      __var nReset = 0x80;
[03:48:21.624]        // -> [nReset <= 0x00000080]
[03:48:21.624]      __var canReadPins = 0;
[03:48:21.624]        // -> [canReadPins <= 0x00000000]
[03:48:21.624]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:48:21.626]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:48:21.626]        // -> [canReadPins <= 0x00000001]
[03:48:21.626]    </block>
[03:48:21.626]    <control if="" while="1" timeout="200" info="">
[03:48:21.626]      // while "1"  (timeout="200")
[03:48:21.626]      // while-condition  =>  TRUE
[03:48:21.627]      // while "1"  (timeout="200")
[03:48:21.627]      // while-condition  =>  TRUE
[03:48:21.627]      // while "1"  (timeout="200")
[03:48:21.627]      // while-condition  =>  TRUE
[03:48:21.627]      // while "1"  (timeout="200")
[03:48:21.627]      // while-condition  =>  TRUE
[03:48:21.627]      // while "1"  (timeout="200")
[03:48:21.628]      // while-condition  =>  TRUE
[03:48:21.628]      // while "1"  (timeout="200")
[03:48:21.628]      // while-condition  =>  TRUE
[03:48:21.628]      // while "1"  (timeout="200")
[03:48:21.628]      // while-condition  =>  TRUE
[03:48:21.628]      // while "1"  (timeout="200")
[03:48:21.628]      // while-condition  =>  TRUE
[03:48:21.629]      // while "1"  (timeout="200")
[03:48:21.629]      // while-condition  =>  TRUE
[03:48:21.629]      // while "1"  (timeout="200")
[03:48:21.629]      // while-condition  =>  TRUE
[03:48:21.629]      // while "1"  (timeout="200")
[03:48:21.629]      // while-condition  =>  TRUE
[03:48:21.629]      // while "1"  (timeout="200")
[03:48:21.630]      // while-condition  =>  TRUE
[03:48:21.630]      // while "1"  (timeout="200")
[03:48:21.630]      // while-condition  =>  TRUE
[03:48:21.630]      // while "1"  (timeout="200")
[03:48:21.630]      // while-condition  =>  TRUE
[03:48:21.630]      // while "1"  (timeout="200")
[03:48:21.630]      // while-condition  =>  TRUE
[03:48:21.630]      // while "1"  (timeout="200")
[03:48:21.630]      // while-condition  =>  TRUE
[03:48:21.631]      // while "1"  (timeout="200")
[03:48:21.631]      // while-condition  =>  TRUE
[03:48:21.631]      // while "1"  (timeout="200")
[03:48:21.631]      // while-condition  =>  TRUE
[03:48:21.631]      // while "1"  (timeout="200")
[03:48:21.631]      // while-condition  =>  TRUE
[03:48:21.632]      // while "1"  (timeout="200")
[03:48:21.632]      // while-condition  =>  TRUE
[03:48:21.632]      // while "1"  (timeout="200")
[03:48:21.632]      // while-condition  =>  TRUE
[03:48:21.632]      // while "1"  (timeout="200")
[03:48:21.632]      // while-condition  =>  TRUE
[03:48:21.632]      // while "1"  (timeout="200")
[03:48:21.632]      // while-condition  =>  TRUE
[03:48:21.632]      // while "1"  (timeout="200")
[03:48:21.632]      // while-condition  =>  TRUE
[03:48:21.633]      // while "1"  (timeout="200")
[03:48:21.633]      // while-condition  =>  TRUE
[03:48:21.633]      // while "1"  (timeout="200")
[03:48:21.633]      // while-condition  =>  TRUE
[03:48:21.633]      // while "1"  (timeout="200")
[03:48:21.633]      // while-condition  =>  TRUE
[03:48:21.633]      // while "1"  (timeout="200")
[03:48:21.633]      // while-condition  =>  TRUE
[03:48:21.634]      // while "1"  (timeout="200")
[03:48:21.634]      // while-condition  =>  TRUE
[03:48:21.634]      // while "1"  (timeout="200")
[03:48:21.634]      // while-condition  =>  TRUE
[03:48:21.634]      // while "1"  (timeout="200")
[03:48:21.634]      // while-condition  =>  TRUE
[03:48:21.634]      // while "1"  (timeout="200")
[03:48:21.635]      // while-condition  =>  TRUE
[03:48:21.635]      // while "1"  (timeout="200")
[03:48:21.635]      // while-condition  =>  TRUE
[03:48:21.635]      // while "1"  (timeout="200")
[03:48:21.635]      // while-condition  =>  TRUE
[03:48:21.635]      // while "1"  (timeout="200")
[03:48:21.635]      // while-condition  =>  TRUE
[03:48:21.635]      // while "1"  (timeout="200")
[03:48:21.635]      // while-condition  =>  TRUE
[03:48:21.635]      // while "1"  (timeout="200")
[03:48:21.636]      // while-condition  =>  TRUE
[03:48:21.636]      // while "1"  (timeout="200")
[03:48:21.636]      // while-condition  =>  TRUE
[03:48:21.636]      // while "1"  (timeout="200")
[03:48:21.636]      // while-condition  =>  TRUE
[03:48:21.636]      // while "1"  (timeout="200")
[03:48:21.636]      // while-condition  =>  TRUE
[03:48:21.636]      // while "1"  (timeout="200")
[03:48:21.637]      // while-condition  =>  TRUE
[03:48:21.637]      // while "1"  (timeout="200")
[03:48:21.637]      // while-condition  =>  TRUE
[03:48:21.637]      // while "1"  (timeout="200")
[03:48:21.637]      // while-condition  =>  TRUE
[03:48:21.637]      // while "1"  (timeout="200")
[03:48:21.637]      // while-condition  =>  TRUE
[03:48:21.637]      // while "1"  (timeout="200")
[03:48:21.637]      // while-condition  =>  TRUE
[03:48:21.638]      // while "1"  (timeout="200")
[03:48:21.638]      // while-condition  =>  TRUE
[03:48:21.638]      // while "1"  (timeout="200")
[03:48:21.638]      // while-condition  =>  TRUE
[03:48:21.638]      // while "1"  (timeout="200")
[03:48:21.638]      // while-condition  =>  TRUE
[03:48:21.638]      // while "1"  (timeout="200")
[03:48:21.638]      // while-condition  =>  TRUE
[03:48:21.638]      // while "1"  (timeout="200")
[03:48:21.639]      // while-condition  =>  TRUE
[03:48:21.639]      // while "1"  (timeout="200")
[03:48:21.639]      // while-condition  =>  TRUE
[03:48:21.639]      // while "1"  (timeout="200")
[03:48:21.639]      // while-condition  =>  TRUE
[03:48:21.639]      // while "1"  (timeout="200")
[03:48:21.639]      // while-condition  =>  TRUE
[03:48:21.639]      // while "1"  (timeout="200")
[03:48:21.640]      // while-condition  =>  TRUE
[03:48:21.641]      // while "1"  (timeout="200")
[03:48:21.641]      // while-condition  =>  TRUE
[03:48:21.641]      // while "1"  (timeout="200")
[03:48:21.641]      // while-condition  =>  TRUE
[03:48:21.641]      // while "1"  (timeout="200")
[03:48:21.641]      // while-condition  =>  TRUE
[03:48:21.641]      // while "1"  (timeout="200")
[03:48:21.641]      // while-condition  =>  TRUE
[03:48:21.641]      // while "1"  (timeout="200")
[03:48:21.641]      // while-condition  =>  TRUE
[03:48:21.642]      // while "1"  (timeout="200")
[03:48:21.642]      // while  =>  TIMEOUT
[03:48:21.642]      // end while "1"
[03:48:21.642]    </control>
[03:48:21.642]    <control if="canReadPins" while="" timeout="0" info="">
[03:48:21.642]      // if-block "canReadPins"
[03:48:21.642]        // =>  TRUE
[03:48:21.642]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:48:21.643]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:48:21.644]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:48:21.644]        // while-condition  =>  FALSE
[03:48:21.644]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:48:21.644]      </control>
[03:48:21.644]      // end if-block "canReadPins"
[03:48:21.644]    </control>
[03:48:21.645]    <control if="!canReadPins" while="" timeout="0" info="">
[03:48:21.645]      // if-block "!canReadPins"
[03:48:21.645]        // =>  FALSE
[03:48:21.645]      // skip if-block "!canReadPins"
[03:48:21.645]    </control>
[03:48:21.645]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:48:21.645]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:21.645]        // =>  TRUE
[03:48:21.646]      <block atomic="false" info="">
[03:48:21.646]        WriteAP(0x00, 0x190008);
[03:48:21.648]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.649]        WriteAP(0xF0, 0x01);
[03:48:21.652]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.652]      </block>
[03:48:21.652]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:21.652]    </control>
[03:48:21.652]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:48:21.652]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:21.652]        // =>  FALSE
[03:48:21.653]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:21.653]    </control>
[03:48:21.653]    <block atomic="false" info="">
[03:48:21.653]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:21.657]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:48:21.657]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:48:21.657]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:21.657]      __ap = 0; //lets make sure we reset the access point selection
[03:48:21.657]        // -> [__ap <= 0x00000000]
[03:48:21.657]    </block>
[03:48:21.657]  </sequence>
[03:48:21.658]  
[03:48:21.685]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:48:21.685]  
[03:48:21.685]  <debugvars>
[03:48:21.685]    // Pre-defined
[03:48:21.685]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:21.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:21.686]    __dp=0x00000000
[03:48:21.686]    __ap=0x00000000
[03:48:21.686]    __traceout=0x00000000      (Trace Disabled)
[03:48:21.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:21.686]    __FlashAddr=0x00000000
[03:48:21.686]    __FlashLen=0x00000000
[03:48:21.686]    __FlashArg=0x00000000
[03:48:21.687]    __FlashOp=0x00000000
[03:48:21.687]    __Result=0x00000000
[03:48:21.687]  </debugvars>
[03:48:21.687]  
[03:48:21.687]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:48:21.687]    <block atomic="false" info="">
[03:48:21.687]      __var deviceID = 0;
[03:48:21.687]        // -> [deviceID <= 0x00000000]
[03:48:21.687]      __var version = 0;
[03:48:21.688]        // -> [version <= 0x00000000]
[03:48:21.688]      __var partNum = 0;
[03:48:21.688]        // -> [partNum <= 0x00000000]
[03:48:21.688]      __var manuf = 0;
[03:48:21.688]        // -> [manuf <= 0x00000000]
[03:48:21.688]      __var isMSPM0G1X0X_G3X0X = 0;
[03:48:21.689]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:48:21.689]      __var isProduction = 0;
[03:48:21.689]        // -> [isProduction <= 0x00000000]
[03:48:21.689]      __var continueId = 0;
[03:48:21.689]        // -> [continueId <= 0x00000000]
[03:48:21.689]      deviceID =   Read32(0x41C40004);
[03:48:21.694]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:48:21.694]        // -> [deviceID <= 0x2BB8802F]
[03:48:21.694]      version = deviceID >> 28;
[03:48:21.694]        // -> [version <= 0x00000002]
[03:48:21.694]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:48:21.695]        // -> [partNum <= 0x0000BB88]
[03:48:21.695]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:48:21.695]        // -> [manuf <= 0x00000017]
[03:48:21.695]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:48:21.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:48:21.695]      isProduction = (version > 0);
[03:48:21.695]        // -> [isProduction <= 0x00000001]
[03:48:21.695]    </block>
[03:48:21.695]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:48:21.696]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:48:21.696]        // =>  FALSE
[03:48:21.696]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:48:21.696]    </control>
[03:48:21.696]    <control if="continueId == 4" while="" timeout="0" info="">
[03:48:21.696]      // if-block "continueId == 4"
[03:48:21.696]        // =>  FALSE
[03:48:21.696]      // skip if-block "continueId == 4"
[03:48:21.696]    </control>
[03:48:21.697]    <control if="!isProduction" while="" timeout="0" info="">
[03:48:21.697]      // if-block "!isProduction"
[03:48:21.697]        // =>  FALSE
[03:48:21.697]      // skip if-block "!isProduction"
[03:48:21.697]    </control>
[03:48:21.697]  </sequence>
[03:48:21.697]  
[04:01:30.769]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:01:30.769]  
[04:01:30.778]  <debugvars>
[04:01:30.778]    // Pre-defined
[04:01:30.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:30.779]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:30.779]    __dp=0x00000000
[04:01:30.779]    __ap=0x00000000
[04:01:30.779]    __traceout=0x00000000      (Trace Disabled)
[04:01:30.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:30.779]    __FlashAddr=0x00000000
[04:01:30.779]    __FlashLen=0x00000000
[04:01:30.779]    __FlashArg=0x00000000
[04:01:30.779]    __FlashOp=0x00000000
[04:01:30.779]    __Result=0x00000000
[04:01:30.780]  </debugvars>
[04:01:30.780]  
[04:01:30.780]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:01:30.780]    <block atomic="false" info="">
[04:01:30.780]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:01:30.780]        // -> [isSWJ <= 0x00000001]
[04:01:30.780]      __var hasDormant = __protocol & 0x00020000;
[04:01:30.780]        // -> [hasDormant <= 0x00000000]
[04:01:30.781]      __var protType   = __protocol & 0x0000FFFF;
[04:01:30.781]        // -> [protType <= 0x00000002]
[04:01:30.781]    </block>
[04:01:30.781]    <control if="protType == 1" while="" timeout="0" info="">
[04:01:30.781]      // if-block "protType == 1"
[04:01:30.781]        // =>  FALSE
[04:01:30.781]      // skip if-block "protType == 1"
[04:01:30.781]    </control>
[04:01:30.781]    <control if="protType == 2" while="" timeout="0" info="">
[04:01:30.782]      // if-block "protType == 2"
[04:01:30.782]        // =>  TRUE
[04:01:30.782]      <control if="isSWJ" while="" timeout="0" info="">
[04:01:30.782]        // if-block "isSWJ"
[04:01:30.782]          // =>  TRUE
[04:01:30.782]        <control if="hasDormant" while="" timeout="0" info="">
[04:01:30.782]          // if-block "hasDormant"
[04:01:30.782]            // =>  FALSE
[04:01:30.782]          // skip if-block "hasDormant"
[04:01:30.782]        </control>
[04:01:30.783]        <control if="!hasDormant" while="" timeout="0" info="">
[04:01:30.783]          // if-block "!hasDormant"
[04:01:30.783]            // =>  TRUE
[04:01:30.783]          <block atomic="false" info="">
[04:01:30.783]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:01:30.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:30.785]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:01:30.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:01:30.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:01:30.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:30.788]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:01:30.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:01:30.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:01:30.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:01:30.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:01:30.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:01:30.797]          </block>
[04:01:30.797]          // end if-block "!hasDormant"
[04:01:30.797]        </control>
[04:01:30.797]        // end if-block "isSWJ"
[04:01:30.797]      </control>
[04:01:30.798]      <control if="!isSWJ" while="" timeout="0" info="">
[04:01:30.798]        // if-block "!isSWJ"
[04:01:30.798]          // =>  FALSE
[04:01:30.798]        // skip if-block "!isSWJ"
[04:01:30.798]      </control>
[04:01:30.798]      <block atomic="false" info="">
[04:01:30.799]        ReadDP(0x0);
[04:01:30.802]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:01:30.802]      </block>
[04:01:30.802]      // end if-block "protType == 2"
[04:01:30.802]    </control>
[04:01:30.802]  </sequence>
[04:01:30.802]  
[04:01:30.805]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:01:30.805]  
[04:01:30.805]  <debugvars>
[04:01:30.805]    // Pre-defined
[04:01:30.805]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:30.805]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:30.806]    __dp=0x00000000
[04:01:30.806]    __ap=0x00000000
[04:01:30.806]    __traceout=0x00000000      (Trace Disabled)
[04:01:30.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:30.806]    __FlashAddr=0x00000000
[04:01:30.806]    __FlashLen=0x00000000
[04:01:30.806]    __FlashArg=0x00000000
[04:01:30.806]    __FlashOp=0x00000000
[04:01:30.806]    __Result=0x00000000
[04:01:30.806]  </debugvars>
[04:01:30.806]  
[04:01:30.808]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:01:30.808]    <block atomic="false" info="">
[04:01:30.808]      __var SW_DP_ABORT       = 0x0;
[04:01:30.808]        // -> [SW_DP_ABORT <= 0x00000000]
[04:01:30.808]      __var DP_CTRL_STAT      = 0x4;
[04:01:30.808]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:01:30.808]      __var DP_SELECT         = 0x8;
[04:01:30.808]        // -> [DP_SELECT <= 0x00000008]
[04:01:30.808]      __var powered_down      = 0;
[04:01:30.808]        // -> [powered_down <= 0x00000000]
[04:01:30.809]      WriteDP(DP_SELECT, 0x00000000);
[04:01:30.814]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:01:30.814]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:01:30.822]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:01:30.822]        // -> [powered_down <= 0x00000001]
[04:01:30.822]    </block>
[04:01:30.823]    <control if="powered_down" while="" timeout="0" info="">
[04:01:30.823]      // if-block "powered_down"
[04:01:30.823]        // =>  TRUE
[04:01:30.823]      <block atomic="false" info="">
[04:01:30.823]        Message(0, "Debug/System power-up request sent");
[04:01:30.825]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:01:30.829]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:01:30.829]      </block>
[04:01:30.829]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:01:30.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:01:30.839]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:01:30.840]        // while-condition  =>  FALSE
[04:01:30.840]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:01:30.840]      </control>
[04:01:30.840]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:01:30.840]        // if-block "(__protocol & 0xFFFF) == 1"
[04:01:30.840]          // =>  FALSE
[04:01:30.840]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:01:30.840]      </control>
[04:01:30.841]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:01:30.841]        // if-block "(__protocol & 0xFFFF) == 2"
[04:01:30.841]          // =>  TRUE
[04:01:30.841]        <block atomic="false" info="">
[04:01:30.841]          Message(0, "executing SWD power up");
[04:01:30.844]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:01:30.850]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:01:30.850]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:01:30.861]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:01:30.861]        </block>
[04:01:30.862]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:01:30.862]      </control>
[04:01:30.862]      // end if-block "powered_down"
[04:01:30.862]    </control>
[04:01:30.862]    <block atomic="false" info="">
[04:01:30.862]      __var DEBUG_PORT_VAL    = 0;
[04:01:30.862]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:01:30.862]      __var ACCESS_POINT_VAL  = 0;
[04:01:30.862]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:01:30.863]      __ap = 1; 
[04:01:30.863]        // -> [__ap <= 0x00000001]
[04:01:30.863]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:01:30.869]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:01:30.869]      __ap = 4;
[04:01:30.869]        // -> [__ap <= 0x00000004]
[04:01:30.869]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:01:30.889]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:01:30.889]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:01:30.889]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:01:30.891]    </block>
[04:01:30.892]    <block atomic="false" info="">
[04:01:30.892]      __var nReset = 0x80;
[04:01:30.892]        // -> [nReset <= 0x00000080]
[04:01:30.892]      __var canReadPins = 0;
[04:01:30.892]        // -> [canReadPins <= 0x00000000]
[04:01:30.892]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:01:30.896]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:01:30.896]        // -> [canReadPins <= 0x00000001]
[04:01:30.897]    </block>
[04:01:30.897]    <control if="" while="1" timeout="200" info="">
[04:01:30.897]      // while "1"  (timeout="200")
[04:01:30.897]      // while-condition  =>  TRUE
[04:01:30.897]      // while "1"  (timeout="200")
[04:01:30.897]      // while-condition  =>  TRUE
[04:01:30.898]      // while "1"  (timeout="200")
[04:01:30.898]      // while-condition  =>  TRUE
[04:01:30.898]      // while "1"  (timeout="200")
[04:01:30.898]      // while-condition  =>  TRUE
[04:01:30.898]      // while "1"  (timeout="200")
[04:01:30.898]      // while-condition  =>  TRUE
[04:01:30.898]      // while "1"  (timeout="200")
[04:01:30.899]      // while-condition  =>  TRUE
[04:01:30.899]      // while "1"  (timeout="200")
[04:01:30.899]      // while-condition  =>  TRUE
[04:01:30.899]      // while "1"  (timeout="200")
[04:01:30.899]      // while-condition  =>  TRUE
[04:01:30.899]      // while "1"  (timeout="200")
[04:01:30.899]      // while-condition  =>  TRUE
[04:01:30.899]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.900]      // while-condition  =>  TRUE
[04:01:30.900]      // while "1"  (timeout="200")
[04:01:30.901]      // while-condition  =>  TRUE
[04:01:30.901]      // while "1"  (timeout="200")
[04:01:30.901]      // while-condition  =>  TRUE
[04:01:30.901]      // while "1"  (timeout="200")
[04:01:30.901]      // while-condition  =>  TRUE
[04:01:30.901]      // while "1"  (timeout="200")
[04:01:30.901]      // while-condition  =>  TRUE
[04:01:30.901]      // while "1"  (timeout="200")
[04:01:30.901]      // while-condition  =>  TRUE
[04:01:30.901]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.902]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.902]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.902]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.902]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.902]      // while "1"  (timeout="200")
[04:01:30.902]      // while-condition  =>  TRUE
[04:01:30.903]      // while "1"  (timeout="200")
[04:01:30.903]      // while-condition  =>  TRUE
[04:01:30.903]      // while "1"  (timeout="200")
[04:01:30.903]      // while-condition  =>  TRUE
[04:01:30.903]      // while "1"  (timeout="200")
[04:01:30.903]      // while-condition  =>  TRUE
[04:01:30.903]      // while "1"  (timeout="200")
[04:01:30.903]      // while-condition  =>  TRUE
[04:01:30.903]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.905]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.905]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.905]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.905]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.905]      // while "1"  (timeout="200")
[04:01:30.905]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.906]      // while-condition  =>  TRUE
[04:01:30.906]      // while "1"  (timeout="200")
[04:01:30.907]      // while-condition  =>  TRUE
[04:01:30.907]      // while "1"  (timeout="200")
[04:01:30.907]      // while  =>  TIMEOUT
[04:01:30.907]      // end while "1"
[04:01:30.907]    </control>
[04:01:30.907]    <control if="canReadPins" while="" timeout="0" info="">
[04:01:30.907]      // if-block "canReadPins"
[04:01:30.907]        // =>  TRUE
[04:01:30.907]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:01:30.907]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:01:30.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:01:30.912]        // while-condition  =>  FALSE
[04:01:30.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:01:30.912]      </control>
[04:01:30.912]      // end if-block "canReadPins"
[04:01:30.912]    </control>
[04:01:30.912]    <control if="!canReadPins" while="" timeout="0" info="">
[04:01:30.912]      // if-block "!canReadPins"
[04:01:30.912]        // =>  FALSE
[04:01:30.912]      // skip if-block "!canReadPins"
[04:01:30.913]    </control>
[04:01:30.913]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:01:30.913]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:01:30.913]        // =>  TRUE
[04:01:30.913]      <block atomic="false" info="">
[04:01:30.914]        WriteAP(0x00, 0x190008);
[04:01:30.925]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:01:30.925]        WriteAP(0xF0, 0x01);
[04:01:30.935]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:01:30.935]      </block>
[04:01:30.936]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:01:30.936]    </control>
[04:01:30.936]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:01:30.936]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:01:30.936]        // =>  FALSE
[04:01:30.936]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:01:30.936]    </control>
[04:01:30.936]    <block atomic="false" info="">
[04:01:30.936]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:01:30.947]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:01:30.948]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:01:30.948]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:01:30.950]      __ap = 0; //lets make sure we reset the access point selection
[04:01:30.950]        // -> [__ap <= 0x00000000]
[04:01:30.950]    </block>
[04:01:30.951]  </sequence>
[04:01:30.951]  
[04:01:31.025]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:01:31.025]  
[04:01:31.026]  <debugvars>
[04:01:31.026]    // Pre-defined
[04:01:31.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:01:31.026]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:01:31.026]    __dp=0x00000000
[04:01:31.026]    __ap=0x00000000
[04:01:31.027]    __traceout=0x00000000      (Trace Disabled)
[04:01:31.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:01:31.027]    __FlashAddr=0x00000000
[04:01:31.027]    __FlashLen=0x00000000
[04:01:31.027]    __FlashArg=0x00000000
[04:01:31.027]    __FlashOp=0x00000000
[04:01:31.027]    __Result=0x00000000
[04:01:31.027]  </debugvars>
[04:01:31.028]  
[04:01:31.028]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:01:31.028]    <block atomic="false" info="">
[04:01:31.028]      __var deviceID = 0;
[04:01:31.028]        // -> [deviceID <= 0x00000000]
[04:01:31.028]      __var version = 0;
[04:01:31.028]        // -> [version <= 0x00000000]
[04:01:31.028]      __var partNum = 0;
[04:01:31.028]        // -> [partNum <= 0x00000000]
[04:01:31.029]      __var manuf = 0;
[04:01:31.029]        // -> [manuf <= 0x00000000]
[04:01:31.029]      __var isMSPM0G1X0X_G3X0X = 0;
[04:01:31.029]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:01:31.029]      __var isProduction = 0;
[04:01:31.029]        // -> [isProduction <= 0x00000000]
[04:01:31.029]      __var continueId = 0;
[04:01:31.029]        // -> [continueId <= 0x00000000]
[04:01:31.029]      deviceID =   Read32(0x41C40004);
[04:01:31.041]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:01:31.041]        // -> [deviceID <= 0x2BB8802F]
[04:01:31.041]      version = deviceID >> 28;
[04:01:31.041]        // -> [version <= 0x00000002]
[04:01:31.041]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:01:31.041]        // -> [partNum <= 0x0000BB88]
[04:01:31.041]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:01:31.041]        // -> [manuf <= 0x00000017]
[04:01:31.042]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:01:31.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:01:31.042]      isProduction = (version > 0);
[04:01:31.042]        // -> [isProduction <= 0x00000001]
[04:01:31.042]    </block>
[04:01:31.042]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:01:31.042]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:01:31.042]        // =>  FALSE
[04:01:31.042]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:01:31.043]    </control>
[04:01:31.043]    <control if="continueId == 4" while="" timeout="0" info="">
[04:01:31.043]      // if-block "continueId == 4"
[04:01:31.043]        // =>  FALSE
[04:01:31.043]      // skip if-block "continueId == 4"
[04:01:31.043]    </control>
[04:01:31.043]    <control if="!isProduction" while="" timeout="0" info="">
[04:01:31.043]      // if-block "!isProduction"
[04:01:31.043]        // =>  FALSE
[04:01:31.043]      // skip if-block "!isProduction"
[04:01:31.044]    </control>
[04:01:31.044]  </sequence>
[04:01:31.044]  
[04:07:29.203]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:07:29.203]  
[04:07:29.212]  <debugvars>
[04:07:29.212]    // Pre-defined
[04:07:29.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:29.213]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:29.213]    __dp=0x00000000
[04:07:29.213]    __ap=0x00000000
[04:07:29.213]    __traceout=0x00000000      (Trace Disabled)
[04:07:29.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:29.213]    __FlashAddr=0x00000000
[04:07:29.213]    __FlashLen=0x00000000
[04:07:29.213]    __FlashArg=0x00000000
[04:07:29.213]    __FlashOp=0x00000000
[04:07:29.214]    __Result=0x00000000
[04:07:29.214]  </debugvars>
[04:07:29.214]  
[04:07:29.214]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:07:29.214]    <block atomic="false" info="">
[04:07:29.214]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:07:29.214]        // -> [isSWJ <= 0x00000001]
[04:07:29.215]      __var hasDormant = __protocol & 0x00020000;
[04:07:29.215]        // -> [hasDormant <= 0x00000000]
[04:07:29.215]      __var protType   = __protocol & 0x0000FFFF;
[04:07:29.215]        // -> [protType <= 0x00000002]
[04:07:29.215]    </block>
[04:07:29.215]    <control if="protType == 1" while="" timeout="0" info="">
[04:07:29.215]      // if-block "protType == 1"
[04:07:29.215]        // =>  FALSE
[04:07:29.215]      // skip if-block "protType == 1"
[04:07:29.216]    </control>
[04:07:29.216]    <control if="protType == 2" while="" timeout="0" info="">
[04:07:29.216]      // if-block "protType == 2"
[04:07:29.216]        // =>  TRUE
[04:07:29.216]      <control if="isSWJ" while="" timeout="0" info="">
[04:07:29.216]        // if-block "isSWJ"
[04:07:29.216]          // =>  TRUE
[04:07:29.216]        <control if="hasDormant" while="" timeout="0" info="">
[04:07:29.216]          // if-block "hasDormant"
[04:07:29.216]            // =>  FALSE
[04:07:29.216]          // skip if-block "hasDormant"
[04:07:29.217]        </control>
[04:07:29.217]        <control if="!hasDormant" while="" timeout="0" info="">
[04:07:29.217]          // if-block "!hasDormant"
[04:07:29.217]            // =>  TRUE
[04:07:29.217]          <block atomic="false" info="">
[04:07:29.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:07:29.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:29.218]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:07:29.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:07:29.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:07:29.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:29.221]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:07:29.224]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:07:29.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:07:29.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:07:29.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:07:29.226]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:07:29.226]          </block>
[04:07:29.226]          // end if-block "!hasDormant"
[04:07:29.226]        </control>
[04:07:29.226]        // end if-block "isSWJ"
[04:07:29.226]      </control>
[04:07:29.226]      <control if="!isSWJ" while="" timeout="0" info="">
[04:07:29.226]        // if-block "!isSWJ"
[04:07:29.226]          // =>  FALSE
[04:07:29.226]        // skip if-block "!isSWJ"
[04:07:29.226]      </control>
[04:07:29.226]      <block atomic="false" info="">
[04:07:29.226]        ReadDP(0x0);
[04:07:29.229]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:07:29.229]      </block>
[04:07:29.229]      // end if-block "protType == 2"
[04:07:29.229]    </control>
[04:07:29.229]  </sequence>
[04:07:29.229]  
[04:07:29.232]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:07:29.232]  
[04:07:29.232]  <debugvars>
[04:07:29.232]    // Pre-defined
[04:07:29.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:29.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:29.233]    __dp=0x00000000
[04:07:29.233]    __ap=0x00000000
[04:07:29.233]    __traceout=0x00000000      (Trace Disabled)
[04:07:29.233]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:29.233]    __FlashAddr=0x00000000
[04:07:29.233]    __FlashLen=0x00000000
[04:07:29.233]    __FlashArg=0x00000000
[04:07:29.233]    __FlashOp=0x00000000
[04:07:29.233]    __Result=0x00000000
[04:07:29.233]  </debugvars>
[04:07:29.233]  
[04:07:29.234]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:07:29.234]    <block atomic="false" info="">
[04:07:29.234]      __var SW_DP_ABORT       = 0x0;
[04:07:29.234]        // -> [SW_DP_ABORT <= 0x00000000]
[04:07:29.234]      __var DP_CTRL_STAT      = 0x4;
[04:07:29.234]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:07:29.234]      __var DP_SELECT         = 0x8;
[04:07:29.234]        // -> [DP_SELECT <= 0x00000008]
[04:07:29.234]      __var powered_down      = 0;
[04:07:29.234]        // -> [powered_down <= 0x00000000]
[04:07:29.234]      WriteDP(DP_SELECT, 0x00000000);
[04:07:29.236]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:07:29.236]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:07:29.239]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:07:29.239]        // -> [powered_down <= 0x00000001]
[04:07:29.240]    </block>
[04:07:29.240]    <control if="powered_down" while="" timeout="0" info="">
[04:07:29.240]      // if-block "powered_down"
[04:07:29.240]        // =>  TRUE
[04:07:29.240]      <block atomic="false" info="">
[04:07:29.240]        Message(0, "Debug/System power-up request sent");
[04:07:29.242]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:07:29.245]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:07:29.245]      </block>
[04:07:29.245]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:07:29.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:07:29.247]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:07:29.247]        // while-condition  =>  FALSE
[04:07:29.247]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:07:29.248]      </control>
[04:07:29.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:07:29.248]        // if-block "(__protocol & 0xFFFF) == 1"
[04:07:29.248]          // =>  FALSE
[04:07:29.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:07:29.248]      </control>
[04:07:29.248]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:07:29.248]        // if-block "(__protocol & 0xFFFF) == 2"
[04:07:29.248]          // =>  TRUE
[04:07:29.248]        <block atomic="false" info="">
[04:07:29.250]          Message(0, "executing SWD power up");
[04:07:29.251]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:07:29.255]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:07:29.255]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:07:29.257]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:07:29.257]        </block>
[04:07:29.257]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:07:29.257]      </control>
[04:07:29.257]      // end if-block "powered_down"
[04:07:29.257]    </control>
[04:07:29.257]    <block atomic="false" info="">
[04:07:29.258]      __var DEBUG_PORT_VAL    = 0;
[04:07:29.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:07:29.258]      __var ACCESS_POINT_VAL  = 0;
[04:07:29.258]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:07:29.258]      __ap = 1; 
[04:07:29.258]        // -> [__ap <= 0x00000001]
[04:07:29.258]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:07:29.261]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:07:29.261]      __ap = 4;
[04:07:29.262]        // -> [__ap <= 0x00000004]
[04:07:29.262]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:29.267]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:07:29.267]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:07:29.267]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:29.269]    </block>
[04:07:29.269]    <block atomic="false" info="">
[04:07:29.269]      __var nReset = 0x80;
[04:07:29.269]        // -> [nReset <= 0x00000080]
[04:07:29.269]      __var canReadPins = 0;
[04:07:29.269]        // -> [canReadPins <= 0x00000000]
[04:07:29.269]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:07:29.271]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:07:29.271]        // -> [canReadPins <= 0x00000001]
[04:07:29.271]    </block>
[04:07:29.271]    <control if="" while="1" timeout="200" info="">
[04:07:29.271]      // while "1"  (timeout="200")
[04:07:29.272]      // while-condition  =>  TRUE
[04:07:29.272]      // while "1"  (timeout="200")
[04:07:29.272]      // while-condition  =>  TRUE
[04:07:29.272]      // while "1"  (timeout="200")
[04:07:29.272]      // while-condition  =>  TRUE
[04:07:29.272]      // while "1"  (timeout="200")
[04:07:29.272]      // while-condition  =>  TRUE
[04:07:29.272]      // while "1"  (timeout="200")
[04:07:29.272]      // while-condition  =>  TRUE
[04:07:29.272]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.273]      // while-condition  =>  TRUE
[04:07:29.273]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.274]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.274]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.274]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.274]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.274]      // while "1"  (timeout="200")
[04:07:29.274]      // while-condition  =>  TRUE
[04:07:29.275]      // while "1"  (timeout="200")
[04:07:29.275]      // while-condition  =>  TRUE
[04:07:29.275]      // while "1"  (timeout="200")
[04:07:29.275]      // while-condition  =>  TRUE
[04:07:29.275]      // while "1"  (timeout="200")
[04:07:29.275]      // while-condition  =>  TRUE
[04:07:29.275]      // while "1"  (timeout="200")
[04:07:29.276]      // while-condition  =>  TRUE
[04:07:29.276]      // while "1"  (timeout="200")
[04:07:29.276]      // while-condition  =>  TRUE
[04:07:29.276]      // while "1"  (timeout="200")
[04:07:29.276]      // while-condition  =>  TRUE
[04:07:29.276]      // while "1"  (timeout="200")
[04:07:29.276]      // while-condition  =>  TRUE
[04:07:29.276]      // while "1"  (timeout="200")
[04:07:29.276]      // while-condition  =>  TRUE
[04:07:29.276]      // while "1"  (timeout="200")
[04:07:29.277]      // while-condition  =>  TRUE
[04:07:29.277]      // while "1"  (timeout="200")
[04:07:29.277]      // while-condition  =>  TRUE
[04:07:29.277]      // while "1"  (timeout="200")
[04:07:29.277]      // while-condition  =>  TRUE
[04:07:29.277]      // while "1"  (timeout="200")
[04:07:29.277]      // while-condition  =>  TRUE
[04:07:29.277]      // while "1"  (timeout="200")
[04:07:29.277]      // while-condition  =>  TRUE
[04:07:29.277]      // while "1"  (timeout="200")
[04:07:29.278]      // while-condition  =>  TRUE
[04:07:29.278]      // while "1"  (timeout="200")
[04:07:29.278]      // while-condition  =>  TRUE
[04:07:29.278]      // while "1"  (timeout="200")
[04:07:29.278]      // while-condition  =>  TRUE
[04:07:29.278]      // while "1"  (timeout="200")
[04:07:29.278]      // while-condition  =>  TRUE
[04:07:29.278]      // while "1"  (timeout="200")
[04:07:29.278]      // while-condition  =>  TRUE
[04:07:29.279]      // while "1"  (timeout="200")
[04:07:29.279]      // while-condition  =>  TRUE
[04:07:29.279]      // while "1"  (timeout="200")
[04:07:29.279]      // while-condition  =>  TRUE
[04:07:29.279]      // while "1"  (timeout="200")
[04:07:29.279]      // while-condition  =>  TRUE
[04:07:29.279]      // while "1"  (timeout="200")
[04:07:29.279]      // while-condition  =>  TRUE
[04:07:29.279]      // while "1"  (timeout="200")
[04:07:29.279]      // while-condition  =>  TRUE
[04:07:29.280]      // while "1"  (timeout="200")
[04:07:29.280]      // while-condition  =>  TRUE
[04:07:29.280]      // while "1"  (timeout="200")
[04:07:29.280]      // while-condition  =>  TRUE
[04:07:29.280]      // while "1"  (timeout="200")
[04:07:29.280]      // while-condition  =>  TRUE
[04:07:29.280]      // while "1"  (timeout="200")
[04:07:29.281]      // while-condition  =>  TRUE
[04:07:29.281]      // while "1"  (timeout="200")
[04:07:29.281]      // while-condition  =>  TRUE
[04:07:29.281]      // while "1"  (timeout="200")
[04:07:29.281]      // while-condition  =>  TRUE
[04:07:29.281]      // while "1"  (timeout="200")
[04:07:29.281]      // while-condition  =>  TRUE
[04:07:29.281]      // while "1"  (timeout="200")
[04:07:29.281]      // while-condition  =>  TRUE
[04:07:29.281]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.282]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.282]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.282]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.282]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.282]      // while "1"  (timeout="200")
[04:07:29.282]      // while-condition  =>  TRUE
[04:07:29.283]      // while "1"  (timeout="200")
[04:07:29.283]      // while  =>  TIMEOUT
[04:07:29.283]      // end while "1"
[04:07:29.283]    </control>
[04:07:29.283]    <control if="canReadPins" while="" timeout="0" info="">
[04:07:29.283]      // if-block "canReadPins"
[04:07:29.283]        // =>  TRUE
[04:07:29.284]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:07:29.284]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:07:29.285]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:07:29.285]        // while-condition  =>  FALSE
[04:07:29.285]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:07:29.285]      </control>
[04:07:29.285]      // end if-block "canReadPins"
[04:07:29.285]    </control>
[04:07:29.285]    <control if="!canReadPins" while="" timeout="0" info="">
[04:07:29.285]      // if-block "!canReadPins"
[04:07:29.285]        // =>  FALSE
[04:07:29.285]      // skip if-block "!canReadPins"
[04:07:29.285]    </control>
[04:07:29.285]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:07:29.285]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:29.287]        // =>  TRUE
[04:07:29.287]      <block atomic="false" info="">
[04:07:29.287]        WriteAP(0x00, 0x190008);
[04:07:29.288]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:29.288]        WriteAP(0xF0, 0x01);
[04:07:29.294]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:07:29.294]      </block>
[04:07:29.294]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:07:29.294]    </control>
[04:07:29.294]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:07:29.294]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:29.294]        // =>  FALSE
[04:07:29.294]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:07:29.294]    </control>
[04:07:29.294]    <block atomic="false" info="">
[04:07:29.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:07:29.298]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:07:29.298]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:07:29.298]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:07:29.301]      __ap = 0; //lets make sure we reset the access point selection
[04:07:29.302]        // -> [__ap <= 0x00000000]
[04:07:29.302]    </block>
[04:07:29.302]  </sequence>
[04:07:29.302]  
[04:07:29.323]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:07:29.323]  
[04:07:29.323]  <debugvars>
[04:07:29.323]    // Pre-defined
[04:07:29.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:29.323]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:07:29.323]    __dp=0x00000000
[04:07:29.323]    __ap=0x00000000
[04:07:29.324]    __traceout=0x00000000      (Trace Disabled)
[04:07:29.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:29.324]    __FlashAddr=0x00000000
[04:07:29.324]    __FlashLen=0x00000000
[04:07:29.324]    __FlashArg=0x00000000
[04:07:29.325]    __FlashOp=0x00000000
[04:07:29.325]    __Result=0x00000000
[04:07:29.325]  </debugvars>
[04:07:29.325]  
[04:07:29.325]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:07:29.325]    <block atomic="false" info="">
[04:07:29.326]      __var deviceID = 0;
[04:07:29.326]        // -> [deviceID <= 0x00000000]
[04:07:29.326]      __var version = 0;
[04:07:29.326]        // -> [version <= 0x00000000]
[04:07:29.326]      __var partNum = 0;
[04:07:29.326]        // -> [partNum <= 0x00000000]
[04:07:29.326]      __var manuf = 0;
[04:07:29.326]        // -> [manuf <= 0x00000000]
[04:07:29.326]      __var isMSPM0G1X0X_G3X0X = 0;
[04:07:29.327]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:07:29.327]      __var isProduction = 0;
[04:07:29.327]        // -> [isProduction <= 0x00000000]
[04:07:29.327]      __var continueId = 0;
[04:07:29.327]        // -> [continueId <= 0x00000000]
[04:07:29.327]      deviceID =   Read32(0x41C40004);
[04:07:29.332]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:07:29.332]        // -> [deviceID <= 0x2BB8802F]
[04:07:29.332]      version = deviceID >> 28;
[04:07:29.332]        // -> [version <= 0x00000002]
[04:07:29.333]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:07:29.333]        // -> [partNum <= 0x0000BB88]
[04:07:29.333]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:07:29.333]        // -> [manuf <= 0x00000017]
[04:07:29.333]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:07:29.333]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:07:29.333]      isProduction = (version > 0);
[04:07:29.334]        // -> [isProduction <= 0x00000001]
[04:07:29.334]    </block>
[04:07:29.334]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:07:29.334]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:07:29.334]        // =>  FALSE
[04:07:29.334]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:07:29.334]    </control>
[04:07:29.334]    <control if="continueId == 4" while="" timeout="0" info="">
[04:07:29.334]      // if-block "continueId == 4"
[04:07:29.334]        // =>  FALSE
[04:07:29.335]      // skip if-block "continueId == 4"
[04:07:29.335]    </control>
[04:07:29.335]    <control if="!isProduction" while="" timeout="0" info="">
[04:07:29.335]      // if-block "!isProduction"
[04:07:29.335]        // =>  FALSE
[04:07:29.335]      // skip if-block "!isProduction"
[04:07:29.335]    </control>
[04:07:29.335]  </sequence>
[04:07:29.335]  
[04:10:46.840]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:10:46.840]  
[04:10:46.848]  <debugvars>
[04:10:46.848]    // Pre-defined
[04:10:46.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:46.848]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:46.848]    __dp=0x00000000
[04:10:46.849]    __ap=0x00000000
[04:10:46.849]    __traceout=0x00000000      (Trace Disabled)
[04:10:46.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:46.849]    __FlashAddr=0x00000000
[04:10:46.849]    __FlashLen=0x00000000
[04:10:46.849]    __FlashArg=0x00000000
[04:10:46.849]    __FlashOp=0x00000000
[04:10:46.849]    __Result=0x00000000
[04:10:46.849]  </debugvars>
[04:10:46.849]  
[04:10:46.849]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:10:46.850]    <block atomic="false" info="">
[04:10:46.850]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:10:46.850]        // -> [isSWJ <= 0x00000001]
[04:10:46.850]      __var hasDormant = __protocol & 0x00020000;
[04:10:46.850]        // -> [hasDormant <= 0x00000000]
[04:10:46.850]      __var protType   = __protocol & 0x0000FFFF;
[04:10:46.851]        // -> [protType <= 0x00000002]
[04:10:46.851]    </block>
[04:10:46.851]    <control if="protType == 1" while="" timeout="0" info="">
[04:10:46.851]      // if-block "protType == 1"
[04:10:46.851]        // =>  FALSE
[04:10:46.851]      // skip if-block "protType == 1"
[04:10:46.851]    </control>
[04:10:46.851]    <control if="protType == 2" while="" timeout="0" info="">
[04:10:46.851]      // if-block "protType == 2"
[04:10:46.851]        // =>  TRUE
[04:10:46.851]      <control if="isSWJ" while="" timeout="0" info="">
[04:10:46.851]        // if-block "isSWJ"
[04:10:46.852]          // =>  TRUE
[04:10:46.852]        <control if="hasDormant" while="" timeout="0" info="">
[04:10:46.852]          // if-block "hasDormant"
[04:10:46.852]            // =>  FALSE
[04:10:46.852]          // skip if-block "hasDormant"
[04:10:46.852]        </control>
[04:10:46.852]        <control if="!hasDormant" while="" timeout="0" info="">
[04:10:46.852]          // if-block "!hasDormant"
[04:10:46.852]            // =>  TRUE
[04:10:46.853]          <block atomic="false" info="">
[04:10:46.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:10:46.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:46.856]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:10:46.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:10:46.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:10:46.863]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:46.864]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:10:46.866]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:10:46.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:10:46.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:10:46.869]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:10:46.871]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:10:46.871]          </block>
[04:10:46.871]          // end if-block "!hasDormant"
[04:10:46.871]        </control>
[04:10:46.871]        // end if-block "isSWJ"
[04:10:46.871]      </control>
[04:10:46.871]      <control if="!isSWJ" while="" timeout="0" info="">
[04:10:46.871]        // if-block "!isSWJ"
[04:10:46.871]          // =>  FALSE
[04:10:46.871]        // skip if-block "!isSWJ"
[04:10:46.872]      </control>
[04:10:46.872]      <block atomic="false" info="">
[04:10:46.872]        ReadDP(0x0);
[04:10:46.873]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:10:46.873]      </block>
[04:10:46.873]      // end if-block "protType == 2"
[04:10:46.873]    </control>
[04:10:46.873]  </sequence>
[04:10:46.873]  
[04:10:46.877]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:10:46.877]  
[04:10:46.878]  <debugvars>
[04:10:46.878]    // Pre-defined
[04:10:46.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:46.878]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:46.878]    __dp=0x00000000
[04:10:46.878]    __ap=0x00000000
[04:10:46.878]    __traceout=0x00000000      (Trace Disabled)
[04:10:46.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:46.879]    __FlashAddr=0x00000000
[04:10:46.879]    __FlashLen=0x00000000
[04:10:46.879]    __FlashArg=0x00000000
[04:10:46.879]    __FlashOp=0x00000000
[04:10:46.879]    __Result=0x00000000
[04:10:46.879]  </debugvars>
[04:10:46.879]  
[04:10:46.879]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:10:46.879]    <block atomic="false" info="">
[04:10:46.879]      __var SW_DP_ABORT       = 0x0;
[04:10:46.880]        // -> [SW_DP_ABORT <= 0x00000000]
[04:10:46.880]      __var DP_CTRL_STAT      = 0x4;
[04:10:46.880]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:10:46.880]      __var DP_SELECT         = 0x8;
[04:10:46.880]        // -> [DP_SELECT <= 0x00000008]
[04:10:46.880]      __var powered_down      = 0;
[04:10:46.880]        // -> [powered_down <= 0x00000000]
[04:10:46.880]      WriteDP(DP_SELECT, 0x00000000);
[04:10:46.892]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:10:46.892]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:10:46.893]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:10:46.893]        // -> [powered_down <= 0x00000001]
[04:10:46.893]    </block>
[04:10:46.893]    <control if="powered_down" while="" timeout="0" info="">
[04:10:46.893]      // if-block "powered_down"
[04:10:46.893]        // =>  TRUE
[04:10:46.893]      <block atomic="false" info="">
[04:10:46.894]        Message(0, "Debug/System power-up request sent");
[04:10:46.896]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:10:46.903]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:10:46.903]      </block>
[04:10:46.903]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:10:46.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:10:46.910]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:10:46.910]        // while-condition  =>  FALSE
[04:10:46.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:10:46.910]      </control>
[04:10:46.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:10:46.910]        // if-block "(__protocol & 0xFFFF) == 1"
[04:10:46.910]          // =>  FALSE
[04:10:46.911]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:10:46.911]      </control>
[04:10:46.911]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:10:46.911]        // if-block "(__protocol & 0xFFFF) == 2"
[04:10:46.911]          // =>  TRUE
[04:10:46.911]        <block atomic="false" info="">
[04:10:46.912]          Message(0, "executing SWD power up");
[04:10:46.913]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:10:46.915]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:10:46.915]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:10:46.917]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:10:46.917]        </block>
[04:10:46.917]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:10:46.918]      </control>
[04:10:46.918]      // end if-block "powered_down"
[04:10:46.918]    </control>
[04:10:46.918]    <block atomic="false" info="">
[04:10:46.918]      __var DEBUG_PORT_VAL    = 0;
[04:10:46.918]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:10:46.918]      __var ACCESS_POINT_VAL  = 0;
[04:10:46.918]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:10:46.918]      __ap = 1; 
[04:10:46.918]        // -> [__ap <= 0x00000001]
[04:10:46.918]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:10:46.925]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:10:46.925]      __ap = 4;
[04:10:46.926]        // -> [__ap <= 0x00000004]
[04:10:46.926]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:10:46.929]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:10:46.929]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:10:46.929]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:10:46.933]    </block>
[04:10:46.933]    <block atomic="false" info="">
[04:10:46.934]      __var nReset = 0x80;
[04:10:46.934]        // -> [nReset <= 0x00000080]
[04:10:46.934]      __var canReadPins = 0;
[04:10:46.934]        // -> [canReadPins <= 0x00000000]
[04:10:46.934]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:10:46.935]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:10:46.936]        // -> [canReadPins <= 0x00000001]
[04:10:46.936]    </block>
[04:10:46.936]    <control if="" while="1" timeout="200" info="">
[04:10:46.936]      // while "1"  (timeout="200")
[04:10:46.936]      // while-condition  =>  TRUE
[04:10:46.936]      // while "1"  (timeout="200")
[04:10:46.936]      // while-condition  =>  TRUE
[04:10:46.936]      // while "1"  (timeout="200")
[04:10:46.936]      // while-condition  =>  TRUE
[04:10:46.936]      // while "1"  (timeout="200")
[04:10:46.936]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.937]      // while-condition  =>  TRUE
[04:10:46.937]      // while "1"  (timeout="200")
[04:10:46.938]      // while-condition  =>  TRUE
[04:10:46.938]      // while "1"  (timeout="200")
[04:10:46.938]      // while-condition  =>  TRUE
[04:10:46.938]      // while "1"  (timeout="200")
[04:10:46.938]      // while-condition  =>  TRUE
[04:10:46.938]      // while "1"  (timeout="200")
[04:10:46.938]      // while-condition  =>  TRUE
[04:10:46.938]      // while "1"  (timeout="200")
[04:10:46.938]      // while-condition  =>  TRUE
[04:10:46.938]      // while "1"  (timeout="200")
[04:10:46.939]      // while-condition  =>  TRUE
[04:10:46.939]      // while "1"  (timeout="200")
[04:10:46.939]      // while  =>  TIMEOUT
[04:10:46.939]      // end while "1"
[04:10:46.939]    </control>
[04:10:46.939]    <control if="canReadPins" while="" timeout="0" info="">
[04:10:46.939]      // if-block "canReadPins"
[04:10:46.939]        // =>  TRUE
[04:10:46.939]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:10:46.939]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:10:46.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:10:46.942]        // while-condition  =>  FALSE
[04:10:46.942]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:10:46.943]      </control>
[04:10:46.943]      // end if-block "canReadPins"
[04:10:46.943]    </control>
[04:10:46.943]    <control if="!canReadPins" while="" timeout="0" info="">
[04:10:46.943]      // if-block "!canReadPins"
[04:10:46.943]        // =>  FALSE
[04:10:46.943]      // skip if-block "!canReadPins"
[04:10:46.943]    </control>
[04:10:46.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:10:46.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:10:46.943]        // =>  TRUE
[04:10:46.944]      <block atomic="false" info="">
[04:10:46.944]        WriteAP(0x00, 0x190008);
[04:10:46.949]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:10:46.949]        WriteAP(0xF0, 0x01);
[04:10:46.959]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:10:46.959]      </block>
[04:10:46.959]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:10:46.959]    </control>
[04:10:46.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:10:46.960]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:10:46.960]        // =>  FALSE
[04:10:46.960]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:10:46.960]    </control>
[04:10:46.960]    <block atomic="false" info="">
[04:10:46.961]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:10:46.966]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:10:46.966]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:10:46.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:10:46.968]      __ap = 0; //lets make sure we reset the access point selection
[04:10:46.968]        // -> [__ap <= 0x00000000]
[04:10:46.968]    </block>
[04:10:46.968]  </sequence>
[04:10:46.969]  
[04:10:47.007]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:10:47.007]  
[04:10:47.007]  <debugvars>
[04:10:47.007]    // Pre-defined
[04:10:47.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:10:47.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:10:47.007]    __dp=0x00000000
[04:10:47.008]    __ap=0x00000000
[04:10:47.008]    __traceout=0x00000000      (Trace Disabled)
[04:10:47.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:10:47.008]    __FlashAddr=0x00000000
[04:10:47.008]    __FlashLen=0x00000000
[04:10:47.008]    __FlashArg=0x00000000
[04:10:47.008]    __FlashOp=0x00000000
[04:10:47.008]    __Result=0x00000000
[04:10:47.008]  </debugvars>
[04:10:47.008]  
[04:10:47.009]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:10:47.009]    <block atomic="false" info="">
[04:10:47.009]      __var deviceID = 0;
[04:10:47.009]        // -> [deviceID <= 0x00000000]
[04:10:47.009]      __var version = 0;
[04:10:47.009]        // -> [version <= 0x00000000]
[04:10:47.009]      __var partNum = 0;
[04:10:47.009]        // -> [partNum <= 0x00000000]
[04:10:47.009]      __var manuf = 0;
[04:10:47.009]        // -> [manuf <= 0x00000000]
[04:10:47.010]      __var isMSPM0G1X0X_G3X0X = 0;
[04:10:47.010]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:10:47.010]      __var isProduction = 0;
[04:10:47.011]        // -> [isProduction <= 0x00000000]
[04:10:47.011]      __var continueId = 0;
[04:10:47.011]        // -> [continueId <= 0x00000000]
[04:10:47.011]      deviceID =   Read32(0x41C40004);
[04:10:47.016]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:10:47.016]        // -> [deviceID <= 0x2BB8802F]
[04:10:47.017]      version = deviceID >> 28;
[04:10:47.017]        // -> [version <= 0x00000002]
[04:10:47.017]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:10:47.017]        // -> [partNum <= 0x0000BB88]
[04:10:47.017]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:10:47.017]        // -> [manuf <= 0x00000017]
[04:10:47.018]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:10:47.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:10:47.018]      isProduction = (version > 0);
[04:10:47.018]        // -> [isProduction <= 0x00000001]
[04:10:47.018]    </block>
[04:10:47.018]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:10:47.018]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:10:47.018]        // =>  FALSE
[04:10:47.018]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:10:47.018]    </control>
[04:10:47.018]    <control if="continueId == 4" while="" timeout="0" info="">
[04:10:47.018]      // if-block "continueId == 4"
[04:10:47.019]        // =>  FALSE
[04:10:47.019]      // skip if-block "continueId == 4"
[04:10:47.019]    </control>
[04:10:47.019]    <control if="!isProduction" while="" timeout="0" info="">
[04:10:47.019]      // if-block "!isProduction"
[04:10:47.019]        // =>  FALSE
[04:10:47.019]      // skip if-block "!isProduction"
[04:10:47.020]    </control>
[04:10:47.020]  </sequence>
[04:10:47.020]  
[04:17:02.589]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:17:02.589]  
[04:17:02.590]  <debugvars>
[04:17:02.590]    // Pre-defined
[04:17:02.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:17:02.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:17:02.590]    __dp=0x00000000
[04:17:02.590]    __ap=0x00000000
[04:17:02.590]    __traceout=0x00000000      (Trace Disabled)
[04:17:02.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:17:02.590]    __FlashAddr=0x00000000
[04:17:02.591]    __FlashLen=0x00000000
[04:17:02.591]    __FlashArg=0x00000000
[04:17:02.591]    __FlashOp=0x00000000
[04:17:02.591]    __Result=0x00000000
[04:17:02.591]  </debugvars>
[04:17:02.591]  
[04:17:02.591]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:17:02.591]    <block atomic="false" info="">
[04:17:02.591]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:17:02.592]        // -> [isSWJ <= 0x00000001]
[04:17:02.592]      __var hasDormant = __protocol & 0x00020000;
[04:17:02.592]        // -> [hasDormant <= 0x00000000]
[04:17:02.592]      __var protType   = __protocol & 0x0000FFFF;
[04:17:02.592]        // -> [protType <= 0x00000002]
[04:17:02.592]    </block>
[04:17:02.592]    <control if="protType == 1" while="" timeout="0" info="">
[04:17:02.593]      // if-block "protType == 1"
[04:17:02.593]        // =>  FALSE
[04:17:02.593]      // skip if-block "protType == 1"
[04:17:02.593]    </control>
[04:17:02.593]    <control if="protType == 2" while="" timeout="0" info="">
[04:17:02.593]      // if-block "protType == 2"
[04:17:02.593]        // =>  TRUE
[04:17:02.593]      <control if="isSWJ" while="" timeout="0" info="">
[04:17:02.594]        // if-block "isSWJ"
[04:17:02.594]          // =>  TRUE
[04:17:02.594]        <control if="hasDormant" while="" timeout="0" info="">
[04:17:02.594]          // if-block "hasDormant"
[04:17:02.594]            // =>  FALSE
[04:17:02.594]          // skip if-block "hasDormant"
[04:17:02.594]        </control>
[04:17:02.595]        <control if="!hasDormant" while="" timeout="0" info="">
[04:17:02.595]          // if-block "!hasDormant"
[04:17:02.595]            // =>  TRUE
[04:17:02.595]          <block atomic="false" info="">
[04:17:02.595]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:17:02.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:17:02.596]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:17:02.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:17:02.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:17:02.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:17:02.599]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:17:02.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:17:02.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:17:02.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:17:02.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:17:02.605]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:17:02.605]          </block>
[04:17:02.605]          // end if-block "!hasDormant"
[04:17:02.606]        </control>
[04:17:02.606]        // end if-block "isSWJ"
[04:17:02.606]      </control>
[04:17:02.606]      <control if="!isSWJ" while="" timeout="0" info="">
[04:17:02.606]        // if-block "!isSWJ"
[04:17:02.606]          // =>  FALSE
[04:17:02.606]        // skip if-block "!isSWJ"
[04:17:02.606]      </control>
[04:17:02.606]      <block atomic="false" info="">
[04:17:02.606]        ReadDP(0x0);
[04:17:02.609]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:17:02.609]      </block>
[04:17:02.609]      // end if-block "protType == 2"
[04:17:02.609]    </control>
[04:17:02.609]  </sequence>
[04:17:02.609]  
[04:17:02.614]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:17:02.614]  
[04:17:02.614]  <debugvars>
[04:17:02.614]    // Pre-defined
[04:17:02.614]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:17:02.614]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:17:02.615]    __dp=0x00000000
[04:17:02.615]    __ap=0x00000000
[04:17:02.615]    __traceout=0x00000000      (Trace Disabled)
[04:17:02.615]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:17:02.615]    __FlashAddr=0x00000000
[04:17:02.615]    __FlashLen=0x00000000
[04:17:02.615]    __FlashArg=0x00000000
[04:17:02.615]    __FlashOp=0x00000000
[04:17:02.615]    __Result=0x00000000
[04:17:02.616]  </debugvars>
[04:17:02.616]  
[04:17:02.616]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:17:02.616]    <block atomic="false" info="">
[04:17:02.616]      __var SW_DP_ABORT       = 0x0;
[04:17:02.617]        // -> [SW_DP_ABORT <= 0x00000000]
[04:17:02.617]      __var DP_CTRL_STAT      = 0x4;
[04:17:02.617]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:17:02.617]      __var DP_SELECT         = 0x8;
[04:17:02.617]        // -> [DP_SELECT <= 0x00000008]
[04:17:02.617]      __var powered_down      = 0;
[04:17:02.617]        // -> [powered_down <= 0x00000000]
[04:17:02.618]      WriteDP(DP_SELECT, 0x00000000);
[04:17:02.619]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:17:02.620]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:17:02.621]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:17:02.621]        // -> [powered_down <= 0x00000001]
[04:17:02.621]    </block>
[04:17:02.621]    <control if="powered_down" while="" timeout="0" info="">
[04:17:02.623]      // if-block "powered_down"
[04:17:02.623]        // =>  TRUE
[04:17:02.623]      <block atomic="false" info="">
[04:17:02.623]        Message(0, "Debug/System power-up request sent");
[04:17:02.625]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:17:02.627]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:17:02.627]      </block>
[04:17:02.627]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:17:02.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:17:02.629]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:17:02.630]        // while-condition  =>  FALSE
[04:17:02.630]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:17:02.630]      </control>
[04:17:02.630]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:17:02.630]        // if-block "(__protocol & 0xFFFF) == 1"
[04:17:02.630]          // =>  FALSE
[04:17:02.631]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:17:02.631]      </control>
[04:17:02.631]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:17:02.631]        // if-block "(__protocol & 0xFFFF) == 2"
[04:17:02.631]          // =>  TRUE
[04:17:02.631]        <block atomic="false" info="">
[04:17:02.631]          Message(0, "executing SWD power up");
[04:17:02.633]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:17:02.635]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:17:02.635]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:17:02.637]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:17:02.637]        </block>
[04:17:02.637]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:17:02.637]      </control>
[04:17:02.637]      // end if-block "powered_down"
[04:17:02.637]    </control>
[04:17:02.638]    <block atomic="false" info="">
[04:17:02.638]      __var DEBUG_PORT_VAL    = 0;
[04:17:02.638]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:17:02.638]      __var ACCESS_POINT_VAL  = 0;
[04:17:02.638]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:17:02.638]      __ap = 1; 
[04:17:02.638]        // -> [__ap <= 0x00000001]
[04:17:02.638]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:17:02.644]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:17:02.644]      __ap = 4;
[04:17:02.644]        // -> [__ap <= 0x00000004]
[04:17:02.644]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:17:02.647]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:17:02.647]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:17:02.648]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:17:02.651]    </block>
[04:17:02.651]    <block atomic="false" info="">
[04:17:02.651]      __var nReset = 0x80;
[04:17:02.651]        // -> [nReset <= 0x00000080]
[04:17:02.651]      __var canReadPins = 0;
[04:17:02.651]        // -> [canReadPins <= 0x00000000]
[04:17:02.651]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:17:02.653]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:17:02.653]        // -> [canReadPins <= 0x00000001]
[04:17:02.653]    </block>
[04:17:02.653]    <control if="" while="1" timeout="200" info="">
[04:17:02.653]      // while "1"  (timeout="200")
[04:17:02.654]      // while-condition  =>  TRUE
[04:17:02.654]      // while "1"  (timeout="200")
[04:17:02.654]      // while-condition  =>  TRUE
[04:17:02.654]      // while "1"  (timeout="200")
[04:17:02.654]      // while-condition  =>  TRUE
[04:17:02.654]      // while "1"  (timeout="200")
[04:17:02.654]      // while-condition  =>  TRUE
[04:17:02.655]      // while "1"  (timeout="200")
[04:17:02.655]      // while-condition  =>  TRUE
[04:17:02.655]      // while "1"  (timeout="200")
[04:17:02.655]      // while-condition  =>  TRUE
[04:17:02.655]      // while "1"  (timeout="200")
[04:17:02.655]      // while-condition  =>  TRUE
[04:17:02.655]      // while "1"  (timeout="200")
[04:17:02.656]      // while-condition  =>  TRUE
[04:17:02.656]      // while "1"  (timeout="200")
[04:17:02.656]      // while-condition  =>  TRUE
[04:17:02.656]      // while "1"  (timeout="200")
[04:17:02.656]      // while-condition  =>  TRUE
[04:17:02.656]      // while "1"  (timeout="200")
[04:17:02.657]      // while-condition  =>  TRUE
[04:17:02.657]      // while "1"  (timeout="200")
[04:17:02.657]      // while  =>  TIMEOUT
[04:17:02.657]      // end while "1"
[04:17:02.657]    </control>
[04:17:02.657]    <control if="canReadPins" while="" timeout="0" info="">
[04:17:02.657]      // if-block "canReadPins"
[04:17:02.657]        // =>  TRUE
[04:17:02.658]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:17:02.658]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:17:02.659]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:17:02.659]        // while-condition  =>  FALSE
[04:17:02.659]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:17:02.660]      </control>
[04:17:02.660]      // end if-block "canReadPins"
[04:17:02.660]    </control>
[04:17:02.660]    <control if="!canReadPins" while="" timeout="0" info="">
[04:17:02.660]      // if-block "!canReadPins"
[04:17:02.660]        // =>  FALSE
[04:17:02.660]      // skip if-block "!canReadPins"
[04:17:02.660]    </control>
[04:17:02.660]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:17:02.661]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:17:02.661]        // =>  TRUE
[04:17:02.661]      <block atomic="false" info="">
[04:17:02.661]        WriteAP(0x00, 0x190008);
[04:17:02.663]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:17:02.663]        WriteAP(0xF0, 0x01);
[04:17:02.667]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:17:02.667]      </block>
[04:17:02.667]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:17:02.667]    </control>
[04:17:02.667]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:17:02.667]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:17:02.667]        // =>  FALSE
[04:17:02.668]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:17:02.668]    </control>
[04:17:02.668]    <block atomic="false" info="">
[04:17:02.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:17:02.671]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:17:02.671]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:17:02.671]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:17:02.674]      __ap = 0; //lets make sure we reset the access point selection
[04:17:02.674]        // -> [__ap <= 0x00000000]
[04:17:02.674]    </block>
[04:17:02.674]  </sequence>
[04:17:02.674]  
[04:17:02.693]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:17:02.693]  
[04:17:02.693]  <debugvars>
[04:17:02.693]    // Pre-defined
[04:17:02.693]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:17:02.693]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:17:02.695]    __dp=0x00000000
[04:17:02.695]    __ap=0x00000000
[04:17:02.695]    __traceout=0x00000000      (Trace Disabled)
[04:17:02.695]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:17:02.695]    __FlashAddr=0x00000000
[04:17:02.695]    __FlashLen=0x00000000
[04:17:02.695]    __FlashArg=0x00000000
[04:17:02.695]    __FlashOp=0x00000000
[04:17:02.695]    __Result=0x00000000
[04:17:02.695]  </debugvars>
[04:17:02.695]  
[04:17:02.696]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:17:02.696]    <block atomic="false" info="">
[04:17:02.696]      __var deviceID = 0;
[04:17:02.696]        // -> [deviceID <= 0x00000000]
[04:17:02.696]      __var version = 0;
[04:17:02.696]        // -> [version <= 0x00000000]
[04:17:02.696]      __var partNum = 0;
[04:17:02.696]        // -> [partNum <= 0x00000000]
[04:17:02.696]      __var manuf = 0;
[04:17:02.696]        // -> [manuf <= 0x00000000]
[04:17:02.697]      __var isMSPM0G1X0X_G3X0X = 0;
[04:17:02.697]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:17:02.697]      __var isProduction = 0;
[04:17:02.697]        // -> [isProduction <= 0x00000000]
[04:17:02.697]      __var continueId = 0;
[04:17:02.697]        // -> [continueId <= 0x00000000]
[04:17:02.697]      deviceID =   Read32(0x41C40004);
[04:17:02.702]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:17:02.703]        // -> [deviceID <= 0x2BB8802F]
[04:17:02.703]      version = deviceID >> 28;
[04:17:02.703]        // -> [version <= 0x00000002]
[04:17:02.703]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:17:02.703]        // -> [partNum <= 0x0000BB88]
[04:17:02.703]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:17:02.703]        // -> [manuf <= 0x00000017]
[04:17:02.703]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:17:02.703]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:17:02.704]      isProduction = (version > 0);
[04:17:02.704]        // -> [isProduction <= 0x00000001]
[04:17:02.704]    </block>
[04:17:02.704]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:17:02.704]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:17:02.704]        // =>  FALSE
[04:17:02.704]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:17:02.705]    </control>
[04:17:02.705]    <control if="continueId == 4" while="" timeout="0" info="">
[04:17:02.705]      // if-block "continueId == 4"
[04:17:02.705]        // =>  FALSE
[04:17:02.705]      // skip if-block "continueId == 4"
[04:17:02.705]    </control>
[04:17:02.705]    <control if="!isProduction" while="" timeout="0" info="">
[04:17:02.705]      // if-block "!isProduction"
[04:17:02.706]        // =>  FALSE
[04:17:02.706]      // skip if-block "!isProduction"
[04:17:02.706]    </control>
[04:17:02.706]  </sequence>
[04:17:02.706]  
[04:23:57.069]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:23:57.069]  
[04:23:57.070]  <debugvars>
[04:23:57.070]    // Pre-defined
[04:23:57.070]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:23:57.070]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:23:57.070]    __dp=0x00000000
[04:23:57.070]    __ap=0x00000000
[04:23:57.070]    __traceout=0x00000000      (Trace Disabled)
[04:23:57.070]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:23:57.070]    __FlashAddr=0x00000000
[04:23:57.071]    __FlashLen=0x00000000
[04:23:57.071]    __FlashArg=0x00000000
[04:23:57.071]    __FlashOp=0x00000000
[04:23:57.071]    __Result=0x00000000
[04:23:57.071]  </debugvars>
[04:23:57.071]  
[04:23:57.071]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:23:57.071]    <block atomic="false" info="">
[04:23:57.071]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:23:57.071]        // -> [isSWJ <= 0x00000001]
[04:23:57.071]      __var hasDormant = __protocol & 0x00020000;
[04:23:57.071]        // -> [hasDormant <= 0x00000000]
[04:23:57.071]      __var protType   = __protocol & 0x0000FFFF;
[04:23:57.072]        // -> [protType <= 0x00000002]
[04:23:57.072]    </block>
[04:23:57.072]    <control if="protType == 1" while="" timeout="0" info="">
[04:23:57.072]      // if-block "protType == 1"
[04:23:57.072]        // =>  FALSE
[04:23:57.072]      // skip if-block "protType == 1"
[04:23:57.072]    </control>
[04:23:57.072]    <control if="protType == 2" while="" timeout="0" info="">
[04:23:57.072]      // if-block "protType == 2"
[04:23:57.072]        // =>  TRUE
[04:23:57.072]      <control if="isSWJ" while="" timeout="0" info="">
[04:23:57.072]        // if-block "isSWJ"
[04:23:57.072]          // =>  TRUE
[04:23:57.073]        <control if="hasDormant" while="" timeout="0" info="">
[04:23:57.073]          // if-block "hasDormant"
[04:23:57.073]            // =>  FALSE
[04:23:57.073]          // skip if-block "hasDormant"
[04:23:57.073]        </control>
[04:23:57.073]        <control if="!hasDormant" while="" timeout="0" info="">
[04:23:57.073]          // if-block "!hasDormant"
[04:23:57.074]            // =>  TRUE
[04:23:57.074]          <block atomic="false" info="">
[04:23:57.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:23:57.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:23:57.076]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:23:57.078]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:23:57.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:23:57.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:23:57.082]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:23:57.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:23:57.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:23:57.085]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:23:57.086]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:23:57.087]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:23:57.087]          </block>
[04:23:57.087]          // end if-block "!hasDormant"
[04:23:57.087]        </control>
[04:23:57.087]        // end if-block "isSWJ"
[04:23:57.087]      </control>
[04:23:57.087]      <control if="!isSWJ" while="" timeout="0" info="">
[04:23:57.088]        // if-block "!isSWJ"
[04:23:57.088]          // =>  FALSE
[04:23:57.088]        // skip if-block "!isSWJ"
[04:23:57.088]      </control>
[04:23:57.088]      <block atomic="false" info="">
[04:23:57.088]        ReadDP(0x0);
[04:23:57.091]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:23:57.091]      </block>
[04:23:57.091]      // end if-block "protType == 2"
[04:23:57.092]    </control>
[04:23:57.092]  </sequence>
[04:23:57.092]  
[04:23:57.094]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:23:57.094]  
[04:23:57.094]  <debugvars>
[04:23:57.094]    // Pre-defined
[04:23:57.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:23:57.094]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:23:57.095]    __dp=0x00000000
[04:23:57.095]    __ap=0x00000000
[04:23:57.095]    __traceout=0x00000000      (Trace Disabled)
[04:23:57.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:23:57.095]    __FlashAddr=0x00000000
[04:23:57.095]    __FlashLen=0x00000000
[04:23:57.095]    __FlashArg=0x00000000
[04:23:57.095]    __FlashOp=0x00000000
[04:23:57.095]    __Result=0x00000000
[04:23:57.095]  </debugvars>
[04:23:57.095]  
[04:23:57.095]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:23:57.096]    <block atomic="false" info="">
[04:23:57.096]      __var SW_DP_ABORT       = 0x0;
[04:23:57.096]        // -> [SW_DP_ABORT <= 0x00000000]
[04:23:57.096]      __var DP_CTRL_STAT      = 0x4;
[04:23:57.096]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:23:57.097]      __var DP_SELECT         = 0x8;
[04:23:57.097]        // -> [DP_SELECT <= 0x00000008]
[04:23:57.097]      __var powered_down      = 0;
[04:23:57.097]        // -> [powered_down <= 0x00000000]
[04:23:57.097]      WriteDP(DP_SELECT, 0x00000000);
[04:23:57.099]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:23:57.099]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:23:57.100]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:23:57.100]        // -> [powered_down <= 0x00000001]
[04:23:57.100]    </block>
[04:23:57.100]    <control if="powered_down" while="" timeout="0" info="">
[04:23:57.100]      // if-block "powered_down"
[04:23:57.100]        // =>  TRUE
[04:23:57.101]      <block atomic="false" info="">
[04:23:57.101]        Message(0, "Debug/System power-up request sent");
[04:23:57.101]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:23:57.103]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:23:57.103]      </block>
[04:23:57.103]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:23:57.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:23:57.104]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:23:57.104]        // while-condition  =>  FALSE
[04:23:57.104]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:23:57.104]      </control>
[04:23:57.105]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:23:57.105]        // if-block "(__protocol & 0xFFFF) == 1"
[04:23:57.105]          // =>  FALSE
[04:23:57.105]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:23:57.105]      </control>
[04:23:57.105]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:23:57.105]        // if-block "(__protocol & 0xFFFF) == 2"
[04:23:57.105]          // =>  TRUE
[04:23:57.105]        <block atomic="false" info="">
[04:23:57.105]          Message(0, "executing SWD power up");
[04:23:57.106]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:23:57.107]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:23:57.107]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:23:57.109]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:23:57.109]        </block>
[04:23:57.109]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:23:57.109]      </control>
[04:23:57.109]      // end if-block "powered_down"
[04:23:57.109]    </control>
[04:23:57.109]    <block atomic="false" info="">
[04:23:57.109]      __var DEBUG_PORT_VAL    = 0;
[04:23:57.110]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:23:57.110]      __var ACCESS_POINT_VAL  = 0;
[04:23:57.110]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:23:57.110]      __ap = 1; 
[04:23:57.110]        // -> [__ap <= 0x00000001]
[04:23:57.110]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:23:57.115]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:23:57.116]      __ap = 4;
[04:23:57.116]        // -> [__ap <= 0x00000004]
[04:23:57.116]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:23:57.119]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:23:57.119]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:23:57.120]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:23:57.120]    </block>
[04:23:57.121]    <block atomic="false" info="">
[04:23:57.121]      __var nReset = 0x80;
[04:23:57.121]        // -> [nReset <= 0x00000080]
[04:23:57.121]      __var canReadPins = 0;
[04:23:57.121]        // -> [canReadPins <= 0x00000000]
[04:23:57.121]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:23:57.122]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:23:57.122]        // -> [canReadPins <= 0x00000001]
[04:23:57.122]    </block>
[04:23:57.122]    <control if="" while="1" timeout="200" info="">
[04:23:57.122]      // while "1"  (timeout="200")
[04:23:57.122]      // while-condition  =>  TRUE
[04:23:57.122]      // while "1"  (timeout="200")
[04:23:57.124]      // while-condition  =>  TRUE
[04:23:57.124]      // while "1"  (timeout="200")
[04:23:57.124]      // while-condition  =>  TRUE
[04:23:57.124]      // while "1"  (timeout="200")
[04:23:57.124]      // while-condition  =>  TRUE
[04:23:57.124]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.125]      // while-condition  =>  TRUE
[04:23:57.125]      // while "1"  (timeout="200")
[04:23:57.126]      // while-condition  =>  TRUE
[04:23:57.126]      // while "1"  (timeout="200")
[04:23:57.126]      // while-condition  =>  TRUE
[04:23:57.126]      // while "1"  (timeout="200")
[04:23:57.126]      // while-condition  =>  TRUE
[04:23:57.126]      // while "1"  (timeout="200")
[04:23:57.126]      // while-condition  =>  TRUE
[04:23:57.126]      // while "1"  (timeout="200")
[04:23:57.126]      // while-condition  =>  TRUE
[04:23:57.127]      // while "1"  (timeout="200")
[04:23:57.127]      // while  =>  TIMEOUT
[04:23:57.127]      // end while "1"
[04:23:57.127]    </control>
[04:23:57.127]    <control if="canReadPins" while="" timeout="0" info="">
[04:23:57.127]      // if-block "canReadPins"
[04:23:57.128]        // =>  TRUE
[04:23:57.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:23:57.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:23:57.129]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:23:57.129]        // while-condition  =>  FALSE
[04:23:57.129]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:23:57.129]      </control>
[04:23:57.130]      // end if-block "canReadPins"
[04:23:57.130]    </control>
[04:23:57.130]    <control if="!canReadPins" while="" timeout="0" info="">
[04:23:57.130]      // if-block "!canReadPins"
[04:23:57.130]        // =>  FALSE
[04:23:57.130]      // skip if-block "!canReadPins"
[04:23:57.130]    </control>
[04:23:57.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:23:57.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:23:57.131]        // =>  TRUE
[04:23:57.131]      <block atomic="false" info="">
[04:23:57.131]        WriteAP(0x00, 0x190008);
[04:23:57.132]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:23:57.132]        WriteAP(0xF0, 0x01);
[04:23:57.138]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:23:57.138]      </block>
[04:23:57.138]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:23:57.138]    </control>
[04:23:57.139]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:23:57.139]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:23:57.139]        // =>  FALSE
[04:23:57.139]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:23:57.139]    </control>
[04:23:57.139]    <block atomic="false" info="">
[04:23:57.139]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:23:57.143]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:23:57.143]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:23:57.143]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:23:57.144]      __ap = 0; //lets make sure we reset the access point selection
[04:23:57.144]        // -> [__ap <= 0x00000000]
[04:23:57.144]    </block>
[04:23:57.144]  </sequence>
[04:23:57.144]  
[04:23:57.173]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:23:57.173]  
[04:23:57.173]  <debugvars>
[04:23:57.173]    // Pre-defined
[04:23:57.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:23:57.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:23:57.173]    __dp=0x00000000
[04:23:57.173]    __ap=0x00000000
[04:23:57.173]    __traceout=0x00000000      (Trace Disabled)
[04:23:57.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:23:57.173]    __FlashAddr=0x00000000
[04:23:57.173]    __FlashLen=0x00000000
[04:23:57.174]    __FlashArg=0x00000000
[04:23:57.174]    __FlashOp=0x00000000
[04:23:57.174]    __Result=0x00000000
[04:23:57.174]  </debugvars>
[04:23:57.174]  
[04:23:57.174]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:23:57.174]    <block atomic="false" info="">
[04:23:57.174]      __var deviceID = 0;
[04:23:57.174]        // -> [deviceID <= 0x00000000]
[04:23:57.174]      __var version = 0;
[04:23:57.175]        // -> [version <= 0x00000000]
[04:23:57.175]      __var partNum = 0;
[04:23:57.175]        // -> [partNum <= 0x00000000]
[04:23:57.175]      __var manuf = 0;
[04:23:57.175]        // -> [manuf <= 0x00000000]
[04:23:57.175]      __var isMSPM0G1X0X_G3X0X = 0;
[04:23:57.175]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:23:57.175]      __var isProduction = 0;
[04:23:57.175]        // -> [isProduction <= 0x00000000]
[04:23:57.175]      __var continueId = 0;
[04:23:57.176]        // -> [continueId <= 0x00000000]
[04:23:57.176]      deviceID =   Read32(0x41C40004);
[04:23:57.181]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:23:57.181]        // -> [deviceID <= 0x2BB8802F]
[04:23:57.181]      version = deviceID >> 28;
[04:23:57.181]        // -> [version <= 0x00000002]
[04:23:57.181]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:23:57.181]        // -> [partNum <= 0x0000BB88]
[04:23:57.181]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:23:57.181]        // -> [manuf <= 0x00000017]
[04:23:57.181]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:23:57.181]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:23:57.182]      isProduction = (version > 0);
[04:23:57.182]        // -> [isProduction <= 0x00000001]
[04:23:57.182]    </block>
[04:23:57.182]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:23:57.182]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:23:57.182]        // =>  FALSE
[04:23:57.182]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:23:57.182]    </control>
[04:23:57.182]    <control if="continueId == 4" while="" timeout="0" info="">
[04:23:57.182]      // if-block "continueId == 4"
[04:23:57.183]        // =>  FALSE
[04:23:57.183]      // skip if-block "continueId == 4"
[04:23:57.183]    </control>
[04:23:57.183]    <control if="!isProduction" while="" timeout="0" info="">
[04:23:57.183]      // if-block "!isProduction"
[04:23:57.183]        // =>  FALSE
[04:23:57.183]      // skip if-block "!isProduction"
[04:23:57.183]    </control>
[04:23:57.183]  </sequence>
[04:23:57.183]  
[04:27:48.569]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:27:48.569]  
[04:27:48.577]  <debugvars>
[04:27:48.578]    // Pre-defined
[04:27:48.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:27:48.578]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:27:48.578]    __dp=0x00000000
[04:27:48.578]    __ap=0x00000000
[04:27:48.578]    __traceout=0x00000000      (Trace Disabled)
[04:27:48.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:27:48.578]    __FlashAddr=0x00000000
[04:27:48.578]    __FlashLen=0x00000000
[04:27:48.579]    __FlashArg=0x00000000
[04:27:48.579]    __FlashOp=0x00000000
[04:27:48.579]    __Result=0x00000000
[04:27:48.579]  </debugvars>
[04:27:48.579]  
[04:27:48.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:27:48.580]    <block atomic="false" info="">
[04:27:48.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:27:48.580]        // -> [isSWJ <= 0x00000001]
[04:27:48.580]      __var hasDormant = __protocol & 0x00020000;
[04:27:48.580]        // -> [hasDormant <= 0x00000000]
[04:27:48.580]      __var protType   = __protocol & 0x0000FFFF;
[04:27:48.580]        // -> [protType <= 0x00000002]
[04:27:48.580]    </block>
[04:27:48.581]    <control if="protType == 1" while="" timeout="0" info="">
[04:27:48.581]      // if-block "protType == 1"
[04:27:48.581]        // =>  FALSE
[04:27:48.581]      // skip if-block "protType == 1"
[04:27:48.581]    </control>
[04:27:48.581]    <control if="protType == 2" while="" timeout="0" info="">
[04:27:48.581]      // if-block "protType == 2"
[04:27:48.581]        // =>  TRUE
[04:27:48.581]      <control if="isSWJ" while="" timeout="0" info="">
[04:27:48.581]        // if-block "isSWJ"
[04:27:48.582]          // =>  TRUE
[04:27:48.582]        <control if="hasDormant" while="" timeout="0" info="">
[04:27:48.582]          // if-block "hasDormant"
[04:27:48.582]            // =>  FALSE
[04:27:48.582]          // skip if-block "hasDormant"
[04:27:48.583]        </control>
[04:27:48.583]        <control if="!hasDormant" while="" timeout="0" info="">
[04:27:48.583]          // if-block "!hasDormant"
[04:27:48.583]            // =>  TRUE
[04:27:48.583]          <block atomic="false" info="">
[04:27:48.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:27:48.585]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:27:48.585]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:27:48.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:27:48.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:27:48.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:27:48.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:27:48.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:27:48.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:27:48.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:27:48.591]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:27:48.598]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:27:48.598]          </block>
[04:27:48.598]          // end if-block "!hasDormant"
[04:27:48.598]        </control>
[04:27:48.598]        // end if-block "isSWJ"
[04:27:48.599]      </control>
[04:27:48.599]      <control if="!isSWJ" while="" timeout="0" info="">
[04:27:48.599]        // if-block "!isSWJ"
[04:27:48.599]          // =>  FALSE
[04:27:48.599]        // skip if-block "!isSWJ"
[04:27:48.599]      </control>
[04:27:48.599]      <block atomic="false" info="">
[04:27:48.599]        ReadDP(0x0);
[04:27:48.601]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:27:48.601]      </block>
[04:27:48.601]      // end if-block "protType == 2"
[04:27:48.601]    </control>
[04:27:48.602]  </sequence>
[04:27:48.602]  
[04:27:48.605]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:27:48.605]  
[04:27:48.605]  <debugvars>
[04:27:48.605]    // Pre-defined
[04:27:48.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:27:48.605]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:27:48.605]    __dp=0x00000000
[04:27:48.605]    __ap=0x00000000
[04:27:48.605]    __traceout=0x00000000      (Trace Disabled)
[04:27:48.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:27:48.606]    __FlashAddr=0x00000000
[04:27:48.606]    __FlashLen=0x00000000
[04:27:48.606]    __FlashArg=0x00000000
[04:27:48.606]    __FlashOp=0x00000000
[04:27:48.606]    __Result=0x00000000
[04:27:48.606]  </debugvars>
[04:27:48.606]  
[04:27:48.607]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:27:48.607]    <block atomic="false" info="">
[04:27:48.607]      __var SW_DP_ABORT       = 0x0;
[04:27:48.607]        // -> [SW_DP_ABORT <= 0x00000000]
[04:27:48.607]      __var DP_CTRL_STAT      = 0x4;
[04:27:48.607]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:27:48.607]      __var DP_SELECT         = 0x8;
[04:27:48.607]        // -> [DP_SELECT <= 0x00000008]
[04:27:48.607]      __var powered_down      = 0;
[04:27:48.607]        // -> [powered_down <= 0x00000000]
[04:27:48.608]      WriteDP(DP_SELECT, 0x00000000);
[04:27:48.609]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:27:48.609]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:27:48.611]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:27:48.611]        // -> [powered_down <= 0x00000001]
[04:27:48.612]    </block>
[04:27:48.612]    <control if="powered_down" while="" timeout="0" info="">
[04:27:48.612]      // if-block "powered_down"
[04:27:48.612]        // =>  TRUE
[04:27:48.612]      <block atomic="false" info="">
[04:27:48.612]        Message(0, "Debug/System power-up request sent");
[04:27:48.615]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:27:48.616]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:27:48.616]      </block>
[04:27:48.617]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:27:48.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:27:48.618]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:27:48.618]        // while-condition  =>  FALSE
[04:27:48.619]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:27:48.619]      </control>
[04:27:48.619]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:27:48.619]        // if-block "(__protocol & 0xFFFF) == 1"
[04:27:48.619]          // =>  FALSE
[04:27:48.619]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:27:48.621]      </control>
[04:27:48.621]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:27:48.621]        // if-block "(__protocol & 0xFFFF) == 2"
[04:27:48.621]          // =>  TRUE
[04:27:48.621]        <block atomic="false" info="">
[04:27:48.621]          Message(0, "executing SWD power up");
[04:27:48.623]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:27:48.624]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:27:48.625]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:27:48.626]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:27:48.626]        </block>
[04:27:48.626]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:27:48.626]      </control>
[04:27:48.626]      // end if-block "powered_down"
[04:27:48.626]    </control>
[04:27:48.626]    <block atomic="false" info="">
[04:27:48.627]      __var DEBUG_PORT_VAL    = 0;
[04:27:48.627]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:27:48.627]      __var ACCESS_POINT_VAL  = 0;
[04:27:48.627]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:27:48.627]      __ap = 1; 
[04:27:48.628]        // -> [__ap <= 0x00000001]
[04:27:48.628]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:27:48.631]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:27:48.631]      __ap = 4;
[04:27:48.631]        // -> [__ap <= 0x00000004]
[04:27:48.631]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:27:48.637]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:27:48.637]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:27:48.637]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:27:48.639]    </block>
[04:27:48.639]    <block atomic="false" info="">
[04:27:48.639]      __var nReset = 0x80;
[04:27:48.639]        // -> [nReset <= 0x00000080]
[04:27:48.639]      __var canReadPins = 0;
[04:27:48.639]        // -> [canReadPins <= 0x00000000]
[04:27:48.640]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:27:48.642]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:27:48.642]        // -> [canReadPins <= 0x00000001]
[04:27:48.642]    </block>
[04:27:48.642]    <control if="" while="1" timeout="200" info="">
[04:27:48.642]      // while "1"  (timeout="200")
[04:27:48.642]      // while-condition  =>  TRUE
[04:27:48.642]      // while "1"  (timeout="200")
[04:27:48.642]      // while-condition  =>  TRUE
[04:27:48.642]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.643]      // while-condition  =>  TRUE
[04:27:48.643]      // while "1"  (timeout="200")
[04:27:48.644]      // while-condition  =>  TRUE
[04:27:48.644]      // while "1"  (timeout="200")
[04:27:48.644]      // while-condition  =>  TRUE
[04:27:48.644]      // while "1"  (timeout="200")
[04:27:48.644]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.645]      // while "1"  (timeout="200")
[04:27:48.645]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.646]      // while "1"  (timeout="200")
[04:27:48.646]      // while-condition  =>  TRUE
[04:27:48.647]      // while "1"  (timeout="200")
[04:27:48.647]      // while-condition  =>  TRUE
[04:27:48.647]      // while "1"  (timeout="200")
[04:27:48.647]      // while-condition  =>  TRUE
[04:27:48.647]      // while "1"  (timeout="200")
[04:27:48.647]      // while-condition  =>  TRUE
[04:27:48.647]      // while "1"  (timeout="200")
[04:27:48.647]      // while-condition  =>  TRUE
[04:27:48.647]      // while "1"  (timeout="200")
[04:27:48.648]      // while-condition  =>  TRUE
[04:27:48.648]      // while "1"  (timeout="200")
[04:27:48.648]      // while-condition  =>  TRUE
[04:27:48.648]      // while "1"  (timeout="200")
[04:27:48.648]      // while-condition  =>  TRUE
[04:27:48.648]      // while "1"  (timeout="200")
[04:27:48.648]      // while-condition  =>  TRUE
[04:27:48.648]      // while "1"  (timeout="200")
[04:27:48.648]      // while-condition  =>  TRUE
[04:27:48.648]      // while "1"  (timeout="200")
[04:27:48.649]      // while-condition  =>  TRUE
[04:27:48.649]      // while "1"  (timeout="200")
[04:27:48.649]      // while-condition  =>  TRUE
[04:27:48.649]      // while "1"  (timeout="200")
[04:27:48.649]      // while-condition  =>  TRUE
[04:27:48.649]      // while "1"  (timeout="200")
[04:27:48.649]      // while-condition  =>  TRUE
[04:27:48.649]      // while "1"  (timeout="200")
[04:27:48.650]      // while-condition  =>  TRUE
[04:27:48.650]      // while "1"  (timeout="200")
[04:27:48.650]      // while-condition  =>  TRUE
[04:27:48.650]      // while "1"  (timeout="200")
[04:27:48.651]      // while-condition  =>  TRUE
[04:27:48.651]      // while "1"  (timeout="200")
[04:27:48.651]      // while-condition  =>  TRUE
[04:27:48.651]      // while "1"  (timeout="200")
[04:27:48.651]      // while-condition  =>  TRUE
[04:27:48.651]      // while "1"  (timeout="200")
[04:27:48.651]      // while-condition  =>  TRUE
[04:27:48.651]      // while "1"  (timeout="200")
[04:27:48.651]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.652]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.652]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.652]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.652]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.652]      // while-condition  =>  TRUE
[04:27:48.652]      // while "1"  (timeout="200")
[04:27:48.653]      // while-condition  =>  TRUE
[04:27:48.653]      // while "1"  (timeout="200")
[04:27:48.653]      // while-condition  =>  TRUE
[04:27:48.653]      // while "1"  (timeout="200")
[04:27:48.653]      // while-condition  =>  TRUE
[04:27:48.653]      // while "1"  (timeout="200")
[04:27:48.653]      // while-condition  =>  TRUE
[04:27:48.653]      // while "1"  (timeout="200")
[04:27:48.653]      // while-condition  =>  TRUE
[04:27:48.653]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.654]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.654]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.654]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.654]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.654]      // while "1"  (timeout="200")
[04:27:48.654]      // while-condition  =>  TRUE
[04:27:48.655]      // while "1"  (timeout="200")
[04:27:48.655]      // while-condition  =>  TRUE
[04:27:48.655]      // while "1"  (timeout="200")
[04:27:48.655]      // while-condition  =>  TRUE
[04:27:48.655]      // while "1"  (timeout="200")
[04:27:48.655]      // while-condition  =>  TRUE
[04:27:48.655]      // while "1"  (timeout="200")
[04:27:48.655]      // while-condition  =>  TRUE
[04:27:48.655]      // while "1"  (timeout="200")
[04:27:48.655]      // while-condition  =>  TRUE
[04:27:48.656]      // while "1"  (timeout="200")
[04:27:48.656]      // while-condition  =>  TRUE
[04:27:48.656]      // while "1"  (timeout="200")
[04:27:48.656]      // while-condition  =>  TRUE
[04:27:48.656]      // while "1"  (timeout="200")
[04:27:48.656]      // while-condition  =>  TRUE
[04:27:48.656]      // while "1"  (timeout="200")
[04:27:48.656]      // while-condition  =>  TRUE
[04:27:48.656]      // while "1"  (timeout="200")
[04:27:48.657]      // while-condition  =>  TRUE
[04:27:48.657]      // while "1"  (timeout="200")
[04:27:48.657]      // while  =>  TIMEOUT
[04:27:48.657]      // end while "1"
[04:27:48.657]    </control>
[04:27:48.657]    <control if="canReadPins" while="" timeout="0" info="">
[04:27:48.657]      // if-block "canReadPins"
[04:27:48.657]        // =>  TRUE
[04:27:48.657]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:27:48.657]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:27:48.659]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:27:48.660]        // while-condition  =>  FALSE
[04:27:48.660]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:27:48.660]      </control>
[04:27:48.660]      // end if-block "canReadPins"
[04:27:48.660]    </control>
[04:27:48.660]    <control if="!canReadPins" while="" timeout="0" info="">
[04:27:48.660]      // if-block "!canReadPins"
[04:27:48.661]        // =>  FALSE
[04:27:48.661]      // skip if-block "!canReadPins"
[04:27:48.661]    </control>
[04:27:48.661]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:27:48.661]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:27:48.661]        // =>  TRUE
[04:27:48.661]      <block atomic="false" info="">
[04:27:48.661]        WriteAP(0x00, 0x190008);
[04:27:48.664]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:27:48.664]        WriteAP(0xF0, 0x01);
[04:27:48.684]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:27:48.685]      </block>
[04:27:48.685]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:27:48.685]    </control>
[04:27:48.685]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:27:48.685]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:27:48.685]        // =>  FALSE
[04:27:48.685]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:27:48.685]    </control>
[04:27:48.687]    <block atomic="false" info="">
[04:27:48.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:27:48.690]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:27:48.690]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:27:48.690]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:27:48.692]      __ap = 0; //lets make sure we reset the access point selection
[04:27:48.693]        // -> [__ap <= 0x00000000]
[04:27:48.693]    </block>
[04:27:48.693]  </sequence>
[04:27:48.693]  
[04:27:48.720]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:27:48.720]  
[04:27:48.720]  <debugvars>
[04:27:48.720]    // Pre-defined
[04:27:48.721]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:27:48.721]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:27:48.721]    __dp=0x00000000
[04:27:48.721]    __ap=0x00000000
[04:27:48.721]    __traceout=0x00000000      (Trace Disabled)
[04:27:48.721]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:27:48.721]    __FlashAddr=0x00000000
[04:27:48.721]    __FlashLen=0x00000000
[04:27:48.721]    __FlashArg=0x00000000
[04:27:48.721]    __FlashOp=0x00000000
[04:27:48.722]    __Result=0x00000000
[04:27:48.722]  </debugvars>
[04:27:48.722]  
[04:27:48.722]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:27:48.722]    <block atomic="false" info="">
[04:27:48.722]      __var deviceID = 0;
[04:27:48.722]        // -> [deviceID <= 0x00000000]
[04:27:48.723]      __var version = 0;
[04:27:48.723]        // -> [version <= 0x00000000]
[04:27:48.723]      __var partNum = 0;
[04:27:48.723]        // -> [partNum <= 0x00000000]
[04:27:48.723]      __var manuf = 0;
[04:27:48.723]        // -> [manuf <= 0x00000000]
[04:27:48.723]      __var isMSPM0G1X0X_G3X0X = 0;
[04:27:48.723]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:27:48.723]      __var isProduction = 0;
[04:27:48.723]        // -> [isProduction <= 0x00000000]
[04:27:48.724]      __var continueId = 0;
[04:27:48.724]        // -> [continueId <= 0x00000000]
[04:27:48.724]      deviceID =   Read32(0x41C40004);
[04:27:48.730]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:27:48.730]        // -> [deviceID <= 0x2BB8802F]
[04:27:48.730]      version = deviceID >> 28;
[04:27:48.730]        // -> [version <= 0x00000002]
[04:27:48.730]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:27:48.730]        // -> [partNum <= 0x0000BB88]
[04:27:48.731]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:27:48.731]        // -> [manuf <= 0x00000017]
[04:27:48.731]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:27:48.731]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:27:48.731]      isProduction = (version > 0);
[04:27:48.731]        // -> [isProduction <= 0x00000001]
[04:27:48.731]    </block>
[04:27:48.731]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:27:48.732]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:27:48.732]        // =>  FALSE
[04:27:48.732]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:27:48.732]    </control>
[04:27:48.732]    <control if="continueId == 4" while="" timeout="0" info="">
[04:27:48.732]      // if-block "continueId == 4"
[04:27:48.732]        // =>  FALSE
[04:27:48.732]      // skip if-block "continueId == 4"
[04:27:48.732]    </control>
[04:27:48.732]    <control if="!isProduction" while="" timeout="0" info="">
[04:27:48.732]      // if-block "!isProduction"
[04:27:48.733]        // =>  FALSE
[04:27:48.733]      // skip if-block "!isProduction"
[04:27:48.733]    </control>
[04:27:48.733]  </sequence>
[04:27:48.733]  
[04:30:23.540]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:30:23.540]  
[04:30:23.550]  <debugvars>
[04:30:23.550]    // Pre-defined
[04:30:23.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:30:23.550]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:30:23.550]    __dp=0x00000000
[04:30:23.550]    __ap=0x00000000
[04:30:23.550]    __traceout=0x00000000      (Trace Disabled)
[04:30:23.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:30:23.550]    __FlashAddr=0x00000000
[04:30:23.550]    __FlashLen=0x00000000
[04:30:23.550]    __FlashArg=0x00000000
[04:30:23.550]    __FlashOp=0x00000000
[04:30:23.551]    __Result=0x00000000
[04:30:23.551]  </debugvars>
[04:30:23.551]  
[04:30:23.551]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:30:23.551]    <block atomic="false" info="">
[04:30:23.551]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:30:23.551]        // -> [isSWJ <= 0x00000001]
[04:30:23.551]      __var hasDormant = __protocol & 0x00020000;
[04:30:23.551]        // -> [hasDormant <= 0x00000000]
[04:30:23.551]      __var protType   = __protocol & 0x0000FFFF;
[04:30:23.552]        // -> [protType <= 0x00000002]
[04:30:23.552]    </block>
[04:30:23.552]    <control if="protType == 1" while="" timeout="0" info="">
[04:30:23.552]      // if-block "protType == 1"
[04:30:23.552]        // =>  FALSE
[04:30:23.552]      // skip if-block "protType == 1"
[04:30:23.552]    </control>
[04:30:23.552]    <control if="protType == 2" while="" timeout="0" info="">
[04:30:23.553]      // if-block "protType == 2"
[04:30:23.553]        // =>  TRUE
[04:30:23.553]      <control if="isSWJ" while="" timeout="0" info="">
[04:30:23.553]        // if-block "isSWJ"
[04:30:23.553]          // =>  TRUE
[04:30:23.553]        <control if="hasDormant" while="" timeout="0" info="">
[04:30:23.553]          // if-block "hasDormant"
[04:30:23.553]            // =>  FALSE
[04:30:23.553]          // skip if-block "hasDormant"
[04:30:23.553]        </control>
[04:30:23.554]        <control if="!hasDormant" while="" timeout="0" info="">
[04:30:23.554]          // if-block "!hasDormant"
[04:30:23.554]            // =>  TRUE
[04:30:23.554]          <block atomic="false" info="">
[04:30:23.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:30:23.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:30:23.556]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:30:23.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:30:23.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:30:23.563]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:30:23.563]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:30:23.564]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:30:23.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:30:23.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:30:23.566]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:30:23.568]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:30:23.568]          </block>
[04:30:23.568]          // end if-block "!hasDormant"
[04:30:23.568]        </control>
[04:30:23.568]        // end if-block "isSWJ"
[04:30:23.568]      </control>
[04:30:23.568]      <control if="!isSWJ" while="" timeout="0" info="">
[04:30:23.568]        // if-block "!isSWJ"
[04:30:23.568]          // =>  FALSE
[04:30:23.568]        // skip if-block "!isSWJ"
[04:30:23.568]      </control>
[04:30:23.569]      <block atomic="false" info="">
[04:30:23.569]        ReadDP(0x0);
[04:30:23.570]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:30:23.570]      </block>
[04:30:23.570]      // end if-block "protType == 2"
[04:30:23.570]    </control>
[04:30:23.570]  </sequence>
[04:30:23.571]  
[04:30:23.573]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:30:23.573]  
[04:30:23.574]  <debugvars>
[04:30:23.574]    // Pre-defined
[04:30:23.574]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:30:23.574]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:30:23.574]    __dp=0x00000000
[04:30:23.574]    __ap=0x00000000
[04:30:23.574]    __traceout=0x00000000      (Trace Disabled)
[04:30:23.575]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:30:23.575]    __FlashAddr=0x00000000
[04:30:23.575]    __FlashLen=0x00000000
[04:30:23.575]    __FlashArg=0x00000000
[04:30:23.575]    __FlashOp=0x00000000
[04:30:23.575]    __Result=0x00000000
[04:30:23.575]  </debugvars>
[04:30:23.575]  
[04:30:23.575]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:30:23.575]    <block atomic="false" info="">
[04:30:23.575]      __var SW_DP_ABORT       = 0x0;
[04:30:23.575]        // -> [SW_DP_ABORT <= 0x00000000]
[04:30:23.576]      __var DP_CTRL_STAT      = 0x4;
[04:30:23.576]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:30:23.576]      __var DP_SELECT         = 0x8;
[04:30:23.576]        // -> [DP_SELECT <= 0x00000008]
[04:30:23.576]      __var powered_down      = 0;
[04:30:23.576]        // -> [powered_down <= 0x00000000]
[04:30:23.576]      WriteDP(DP_SELECT, 0x00000000);
[04:30:23.580]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:30:23.580]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:30:23.582]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:30:23.582]        // -> [powered_down <= 0x00000001]
[04:30:23.582]    </block>
[04:30:23.582]    <control if="powered_down" while="" timeout="0" info="">
[04:30:23.582]      // if-block "powered_down"
[04:30:23.582]        // =>  TRUE
[04:30:23.582]      <block atomic="false" info="">
[04:30:23.583]        Message(0, "Debug/System power-up request sent");
[04:30:23.585]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:30:23.586]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:30:23.587]      </block>
[04:30:23.587]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:30:23.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:30:23.589]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:30:23.589]        // while-condition  =>  FALSE
[04:30:23.589]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:30:23.589]      </control>
[04:30:23.589]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:30:23.589]        // if-block "(__protocol & 0xFFFF) == 1"
[04:30:23.589]          // =>  FALSE
[04:30:23.589]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:30:23.590]      </control>
[04:30:23.590]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:30:23.590]        // if-block "(__protocol & 0xFFFF) == 2"
[04:30:23.590]          // =>  TRUE
[04:30:23.590]        <block atomic="false" info="">
[04:30:23.590]          Message(0, "executing SWD power up");
[04:30:23.592]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:30:23.595]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:30:23.595]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:30:23.597]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:30:23.597]        </block>
[04:30:23.597]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:30:23.597]      </control>
[04:30:23.597]      // end if-block "powered_down"
[04:30:23.597]    </control>
[04:30:23.597]    <block atomic="false" info="">
[04:30:23.597]      __var DEBUG_PORT_VAL    = 0;
[04:30:23.597]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:30:23.598]      __var ACCESS_POINT_VAL  = 0;
[04:30:23.598]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:30:23.598]      __ap = 1; 
[04:30:23.598]        // -> [__ap <= 0x00000001]
[04:30:23.598]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:30:23.605]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:30:23.605]      __ap = 4;
[04:30:23.605]        // -> [__ap <= 0x00000004]
[04:30:23.605]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:30:23.609]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:30:23.609]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:30:23.609]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:30:23.611]    </block>
[04:30:23.612]    <block atomic="false" info="">
[04:30:23.612]      __var nReset = 0x80;
[04:30:23.612]        // -> [nReset <= 0x00000080]
[04:30:23.612]      __var canReadPins = 0;
[04:30:23.612]        // -> [canReadPins <= 0x00000000]
[04:30:23.612]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:30:23.614]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:30:23.614]        // -> [canReadPins <= 0x00000001]
[04:30:23.614]    </block>
[04:30:23.614]    <control if="" while="1" timeout="200" info="">
[04:30:23.614]      // while "1"  (timeout="200")
[04:30:23.614]      // while-condition  =>  TRUE
[04:30:23.614]      // while "1"  (timeout="200")
[04:30:23.614]      // while-condition  =>  TRUE
[04:30:23.614]      // while "1"  (timeout="200")
[04:30:23.615]      // while-condition  =>  TRUE
[04:30:23.615]      // while "1"  (timeout="200")
[04:30:23.615]      // while-condition  =>  TRUE
[04:30:23.615]      // while "1"  (timeout="200")
[04:30:23.615]      // while-condition  =>  TRUE
[04:30:23.615]      // while "1"  (timeout="200")
[04:30:23.615]      // while-condition  =>  TRUE
[04:30:23.615]      // while "1"  (timeout="200")
[04:30:23.615]      // while-condition  =>  TRUE
[04:30:23.615]      // while "1"  (timeout="200")
[04:30:23.616]      // while-condition  =>  TRUE
[04:30:23.616]      // while "1"  (timeout="200")
[04:30:23.616]      // while-condition  =>  TRUE
[04:30:23.616]      // while "1"  (timeout="200")
[04:30:23.616]      // while-condition  =>  TRUE
[04:30:23.616]      // while "1"  (timeout="200")
[04:30:23.616]      // while-condition  =>  TRUE
[04:30:23.616]      // while "1"  (timeout="200")
[04:30:23.616]      // while-condition  =>  TRUE
[04:30:23.616]      // while "1"  (timeout="200")
[04:30:23.617]      // while-condition  =>  TRUE
[04:30:23.617]      // while "1"  (timeout="200")
[04:30:23.617]      // while-condition  =>  TRUE
[04:30:23.617]      // while "1"  (timeout="200")
[04:30:23.617]      // while-condition  =>  TRUE
[04:30:23.617]      // while "1"  (timeout="200")
[04:30:23.617]      // while-condition  =>  TRUE
[04:30:23.617]      // while "1"  (timeout="200")
[04:30:23.617]      // while-condition  =>  TRUE
[04:30:23.617]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.618]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.618]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.618]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.618]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.618]      // while "1"  (timeout="200")
[04:30:23.618]      // while-condition  =>  TRUE
[04:30:23.619]      // while "1"  (timeout="200")
[04:30:23.619]      // while-condition  =>  TRUE
[04:30:23.619]      // while "1"  (timeout="200")
[04:30:23.619]      // while-condition  =>  TRUE
[04:30:23.619]      // while "1"  (timeout="200")
[04:30:23.619]      // while-condition  =>  TRUE
[04:30:23.619]      // while "1"  (timeout="200")
[04:30:23.619]      // while-condition  =>  TRUE
[04:30:23.619]      // while "1"  (timeout="200")
[04:30:23.619]      // while-condition  =>  TRUE
[04:30:23.621]      // while "1"  (timeout="200")
[04:30:23.621]      // while-condition  =>  TRUE
[04:30:23.621]      // while "1"  (timeout="200")
[04:30:23.621]      // while-condition  =>  TRUE
[04:30:23.621]      // while "1"  (timeout="200")
[04:30:23.621]      // while-condition  =>  TRUE
[04:30:23.621]      // while "1"  (timeout="200")
[04:30:23.621]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.622]      // while "1"  (timeout="200")
[04:30:23.622]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.623]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.623]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.623]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.623]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.623]      // while-condition  =>  TRUE
[04:30:23.623]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.624]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.624]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.624]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.624]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.624]      // while "1"  (timeout="200")
[04:30:23.624]      // while-condition  =>  TRUE
[04:30:23.625]      // while "1"  (timeout="200")
[04:30:23.625]      // while-condition  =>  TRUE
[04:30:23.625]      // while "1"  (timeout="200")
[04:30:23.625]      // while-condition  =>  TRUE
[04:30:23.625]      // while "1"  (timeout="200")
[04:30:23.625]      // while-condition  =>  TRUE
[04:30:23.625]      // while "1"  (timeout="200")
[04:30:23.625]      // while-condition  =>  TRUE
[04:30:23.625]      // while "1"  (timeout="200")
[04:30:23.626]      // while-condition  =>  TRUE
[04:30:23.626]      // while "1"  (timeout="200")
[04:30:23.626]      // while  =>  TIMEOUT
[04:30:23.626]      // end while "1"
[04:30:23.626]    </control>
[04:30:23.626]    <control if="canReadPins" while="" timeout="0" info="">
[04:30:23.626]      // if-block "canReadPins"
[04:30:23.626]        // =>  TRUE
[04:30:23.627]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:30:23.627]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:30:23.628]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:30:23.629]        // while-condition  =>  FALSE
[04:30:23.629]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:30:23.629]      </control>
[04:30:23.629]      // end if-block "canReadPins"
[04:30:23.629]    </control>
[04:30:23.629]    <control if="!canReadPins" while="" timeout="0" info="">
[04:30:23.630]      // if-block "!canReadPins"
[04:30:23.630]        // =>  FALSE
[04:30:23.630]      // skip if-block "!canReadPins"
[04:30:23.630]    </control>
[04:30:23.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:30:23.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:30:23.630]        // =>  TRUE
[04:30:23.630]      <block atomic="false" info="">
[04:30:23.630]        WriteAP(0x00, 0x190008);
[04:30:23.632]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:30:23.633]        WriteAP(0xF0, 0x01);
[04:30:23.637]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:30:23.638]      </block>
[04:30:23.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:30:23.638]    </control>
[04:30:23.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:30:23.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:30:23.638]        // =>  FALSE
[04:30:23.638]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:30:23.638]    </control>
[04:30:23.638]    <block atomic="false" info="">
[04:30:23.638]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:30:23.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:30:23.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:30:23.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:30:23.648]      __ap = 0; //lets make sure we reset the access point selection
[04:30:23.649]        // -> [__ap <= 0x00000000]
[04:30:23.649]    </block>
[04:30:23.649]  </sequence>
[04:30:23.649]  
[04:30:23.671]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:30:23.671]  
[04:30:23.671]  <debugvars>
[04:30:23.671]    // Pre-defined
[04:30:23.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:30:23.671]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:30:23.671]    __dp=0x00000000
[04:30:23.671]    __ap=0x00000000
[04:30:23.672]    __traceout=0x00000000      (Trace Disabled)
[04:30:23.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:30:23.672]    __FlashAddr=0x00000000
[04:30:23.672]    __FlashLen=0x00000000
[04:30:23.672]    __FlashArg=0x00000000
[04:30:23.672]    __FlashOp=0x00000000
[04:30:23.672]    __Result=0x00000000
[04:30:23.672]  </debugvars>
[04:30:23.673]  
[04:30:23.673]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:30:23.673]    <block atomic="false" info="">
[04:30:23.673]      __var deviceID = 0;
[04:30:23.673]        // -> [deviceID <= 0x00000000]
[04:30:23.673]      __var version = 0;
[04:30:23.673]        // -> [version <= 0x00000000]
[04:30:23.673]      __var partNum = 0;
[04:30:23.673]        // -> [partNum <= 0x00000000]
[04:30:23.673]      __var manuf = 0;
[04:30:23.673]        // -> [manuf <= 0x00000000]
[04:30:23.673]      __var isMSPM0G1X0X_G3X0X = 0;
[04:30:23.674]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:30:23.674]      __var isProduction = 0;
[04:30:23.674]        // -> [isProduction <= 0x00000000]
[04:30:23.674]      __var continueId = 0;
[04:30:23.674]        // -> [continueId <= 0x00000000]
[04:30:23.674]      deviceID =   Read32(0x41C40004);
[04:30:23.681]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:30:23.681]        // -> [deviceID <= 0x2BB8802F]
[04:30:23.682]      version = deviceID >> 28;
[04:30:23.682]        // -> [version <= 0x00000002]
[04:30:23.682]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:30:23.682]        // -> [partNum <= 0x0000BB88]
[04:30:23.682]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:30:23.682]        // -> [manuf <= 0x00000017]
[04:30:23.682]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:30:23.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:30:23.682]      isProduction = (version > 0);
[04:30:23.683]        // -> [isProduction <= 0x00000001]
[04:30:23.683]    </block>
[04:30:23.683]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:30:23.683]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:30:23.683]        // =>  FALSE
[04:30:23.683]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:30:23.683]    </control>
[04:30:23.683]    <control if="continueId == 4" while="" timeout="0" info="">
[04:30:23.683]      // if-block "continueId == 4"
[04:30:23.684]        // =>  FALSE
[04:30:23.684]      // skip if-block "continueId == 4"
[04:30:23.684]    </control>
[04:30:23.684]    <control if="!isProduction" while="" timeout="0" info="">
[04:30:23.684]      // if-block "!isProduction"
[04:30:23.684]        // =>  FALSE
[04:30:23.684]      // skip if-block "!isProduction"
[04:30:23.684]    </control>
[04:30:23.685]  </sequence>
[04:30:23.685]  
[04:32:20.785]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:32:20.785]  
[04:32:20.793]  <debugvars>
[04:32:20.793]    // Pre-defined
[04:32:20.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:32:20.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:32:20.793]    __dp=0x00000000
[04:32:20.793]    __ap=0x00000000
[04:32:20.793]    __traceout=0x00000000      (Trace Disabled)
[04:32:20.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:32:20.794]    __FlashAddr=0x00000000
[04:32:20.794]    __FlashLen=0x00000000
[04:32:20.794]    __FlashArg=0x00000000
[04:32:20.794]    __FlashOp=0x00000000
[04:32:20.795]    __Result=0x00000000
[04:32:20.795]  </debugvars>
[04:32:20.795]  
[04:32:20.795]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:32:20.795]    <block atomic="false" info="">
[04:32:20.795]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:32:20.795]        // -> [isSWJ <= 0x00000001]
[04:32:20.795]      __var hasDormant = __protocol & 0x00020000;
[04:32:20.795]        // -> [hasDormant <= 0x00000000]
[04:32:20.795]      __var protType   = __protocol & 0x0000FFFF;
[04:32:20.795]        // -> [protType <= 0x00000002]
[04:32:20.795]    </block>
[04:32:20.796]    <control if="protType == 1" while="" timeout="0" info="">
[04:32:20.796]      // if-block "protType == 1"
[04:32:20.796]        // =>  FALSE
[04:32:20.796]      // skip if-block "protType == 1"
[04:32:20.796]    </control>
[04:32:20.796]    <control if="protType == 2" while="" timeout="0" info="">
[04:32:20.796]      // if-block "protType == 2"
[04:32:20.796]        // =>  TRUE
[04:32:20.796]      <control if="isSWJ" while="" timeout="0" info="">
[04:32:20.797]        // if-block "isSWJ"
[04:32:20.797]          // =>  TRUE
[04:32:20.797]        <control if="hasDormant" while="" timeout="0" info="">
[04:32:20.797]          // if-block "hasDormant"
[04:32:20.797]            // =>  FALSE
[04:32:20.797]          // skip if-block "hasDormant"
[04:32:20.797]        </control>
[04:32:20.797]        <control if="!hasDormant" while="" timeout="0" info="">
[04:32:20.797]          // if-block "!hasDormant"
[04:32:20.798]            // =>  TRUE
[04:32:20.798]          <block atomic="false" info="">
[04:32:20.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:32:20.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:32:20.799]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:32:20.809]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:32:20.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:32:20.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:32:20.819]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:32:20.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:32:20.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:32:20.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:32:20.824]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:32:20.825]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:32:20.825]          </block>
[04:32:20.826]          // end if-block "!hasDormant"
[04:32:20.826]        </control>
[04:32:20.826]        // end if-block "isSWJ"
[04:32:20.826]      </control>
[04:32:20.826]      <control if="!isSWJ" while="" timeout="0" info="">
[04:32:20.826]        // if-block "!isSWJ"
[04:32:20.826]          // =>  FALSE
[04:32:20.826]        // skip if-block "!isSWJ"
[04:32:20.826]      </control>
[04:32:20.827]      <block atomic="false" info="">
[04:32:20.827]        ReadDP(0x0);
[04:32:20.828]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:32:20.828]      </block>
[04:32:20.828]      // end if-block "protType == 2"
[04:32:20.828]    </control>
[04:32:20.828]  </sequence>
[04:32:20.829]  
[04:32:20.832]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:32:20.832]  
[04:32:20.832]  <debugvars>
[04:32:20.832]    // Pre-defined
[04:32:20.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:32:20.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:32:20.832]    __dp=0x00000000
[04:32:20.832]    __ap=0x00000000
[04:32:20.832]    __traceout=0x00000000      (Trace Disabled)
[04:32:20.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:32:20.833]    __FlashAddr=0x00000000
[04:32:20.833]    __FlashLen=0x00000000
[04:32:20.833]    __FlashArg=0x00000000
[04:32:20.833]    __FlashOp=0x00000000
[04:32:20.833]    __Result=0x00000000
[04:32:20.833]  </debugvars>
[04:32:20.833]  
[04:32:20.833]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:32:20.833]    <block atomic="false" info="">
[04:32:20.833]      __var SW_DP_ABORT       = 0x0;
[04:32:20.833]        // -> [SW_DP_ABORT <= 0x00000000]
[04:32:20.833]      __var DP_CTRL_STAT      = 0x4;
[04:32:20.835]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:32:20.835]      __var DP_SELECT         = 0x8;
[04:32:20.835]        // -> [DP_SELECT <= 0x00000008]
[04:32:20.835]      __var powered_down      = 0;
[04:32:20.835]        // -> [powered_down <= 0x00000000]
[04:32:20.835]      WriteDP(DP_SELECT, 0x00000000);
[04:32:20.837]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:32:20.837]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:32:20.838]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:32:20.838]        // -> [powered_down <= 0x00000001]
[04:32:20.839]    </block>
[04:32:20.839]    <control if="powered_down" while="" timeout="0" info="">
[04:32:20.839]      // if-block "powered_down"
[04:32:20.839]        // =>  TRUE
[04:32:20.839]      <block atomic="false" info="">
[04:32:20.839]        Message(0, "Debug/System power-up request sent");
[04:32:20.842]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:32:20.860]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:32:20.860]      </block>
[04:32:20.860]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:32:20.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:32:20.875]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:32:20.875]        // while-condition  =>  FALSE
[04:32:20.875]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:32:20.876]      </control>
[04:32:20.876]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:32:20.876]        // if-block "(__protocol & 0xFFFF) == 1"
[04:32:20.876]          // =>  FALSE
[04:32:20.876]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:32:20.876]      </control>
[04:32:20.877]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:32:20.877]        // if-block "(__protocol & 0xFFFF) == 2"
[04:32:20.877]          // =>  TRUE
[04:32:20.877]        <block atomic="false" info="">
[04:32:20.877]          Message(0, "executing SWD power up");
[04:32:20.879]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:32:20.881]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:32:20.881]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:32:20.883]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:32:20.883]        </block>
[04:32:20.883]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:32:20.883]      </control>
[04:32:20.883]      // end if-block "powered_down"
[04:32:20.884]    </control>
[04:32:20.884]    <block atomic="false" info="">
[04:32:20.884]      __var DEBUG_PORT_VAL    = 0;
[04:32:20.884]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:32:20.884]      __var ACCESS_POINT_VAL  = 0;
[04:32:20.884]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:32:20.884]      __ap = 1; 
[04:32:20.885]        // -> [__ap <= 0x00000001]
[04:32:20.885]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:32:20.892]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:32:20.892]      __ap = 4;
[04:32:20.892]        // -> [__ap <= 0x00000004]
[04:32:20.892]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:32:20.896]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:32:20.896]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:32:20.896]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:32:20.898]    </block>
[04:32:20.898]    <block atomic="false" info="">
[04:32:20.899]      __var nReset = 0x80;
[04:32:20.899]        // -> [nReset <= 0x00000080]
[04:32:20.899]      __var canReadPins = 0;
[04:32:20.899]        // -> [canReadPins <= 0x00000000]
[04:32:20.899]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:32:20.900]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:32:20.901]        // -> [canReadPins <= 0x00000001]
[04:32:20.901]    </block>
[04:32:20.901]    <control if="" while="1" timeout="200" info="">
[04:32:20.901]      // while "1"  (timeout="200")
[04:32:20.901]      // while-condition  =>  TRUE
[04:32:20.902]      // while "1"  (timeout="200")
[04:32:20.902]      // while-condition  =>  TRUE
[04:32:20.902]      // while "1"  (timeout="200")
[04:32:20.902]      // while-condition  =>  TRUE
[04:32:20.902]      // while "1"  (timeout="200")
[04:32:20.903]      // while-condition  =>  TRUE
[04:32:20.903]      // while "1"  (timeout="200")
[04:32:20.903]      // while-condition  =>  TRUE
[04:32:20.903]      // while "1"  (timeout="200")
[04:32:20.903]      // while-condition  =>  TRUE
[04:32:20.903]      // while "1"  (timeout="200")
[04:32:20.903]      // while-condition  =>  TRUE
[04:32:20.904]      // while "1"  (timeout="200")
[04:32:20.904]      // while-condition  =>  TRUE
[04:32:20.904]      // while "1"  (timeout="200")
[04:32:20.904]      // while-condition  =>  TRUE
[04:32:20.905]      // while "1"  (timeout="200")
[04:32:20.905]      // while-condition  =>  TRUE
[04:32:20.905]      // while "1"  (timeout="200")
[04:32:20.905]      // while-condition  =>  TRUE
[04:32:20.906]      // while "1"  (timeout="200")
[04:32:20.906]      // while-condition  =>  TRUE
[04:32:20.906]      // while "1"  (timeout="200")
[04:32:20.906]      // while-condition  =>  TRUE
[04:32:20.906]      // while "1"  (timeout="200")
[04:32:20.906]      // while-condition  =>  TRUE
[04:32:20.906]      // while "1"  (timeout="200")
[04:32:20.906]      // while-condition  =>  TRUE
[04:32:20.906]      // while "1"  (timeout="200")
[04:32:20.906]      // while-condition  =>  TRUE
[04:32:20.907]      // while "1"  (timeout="200")
[04:32:20.907]      // while  =>  TIMEOUT
[04:32:20.907]      // end while "1"
[04:32:20.907]    </control>
[04:32:20.907]    <control if="canReadPins" while="" timeout="0" info="">
[04:32:20.907]      // if-block "canReadPins"
[04:32:20.907]        // =>  TRUE
[04:32:20.907]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:32:20.907]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:32:20.910]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:32:20.910]        // while-condition  =>  FALSE
[04:32:20.910]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:32:20.910]      </control>
[04:32:20.910]      // end if-block "canReadPins"
[04:32:20.910]    </control>
[04:32:20.910]    <control if="!canReadPins" while="" timeout="0" info="">
[04:32:20.910]      // if-block "!canReadPins"
[04:32:20.910]        // =>  FALSE
[04:32:20.911]      // skip if-block "!canReadPins"
[04:32:20.911]    </control>
[04:32:20.911]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:32:20.911]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:32:20.911]        // =>  TRUE
[04:32:20.911]      <block atomic="false" info="">
[04:32:20.911]        WriteAP(0x00, 0x190008);
[04:32:20.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:32:20.913]        WriteAP(0xF0, 0x01);
[04:32:20.927]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:32:20.928]      </block>
[04:32:20.928]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:32:20.928]    </control>
[04:32:20.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:32:20.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:32:20.928]        // =>  FALSE
[04:32:20.928]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:32:20.928]    </control>
[04:32:20.928]    <block atomic="false" info="">
[04:32:20.928]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:32:20.934]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:32:20.934]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:32:20.934]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:32:20.936]      __ap = 0; //lets make sure we reset the access point selection
[04:32:20.936]        // -> [__ap <= 0x00000000]
[04:32:20.936]    </block>
[04:32:20.936]  </sequence>
[04:32:20.936]  
[04:32:20.973]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:32:20.973]  
[04:32:20.974]  <debugvars>
[04:32:20.974]    // Pre-defined
[04:32:20.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:32:20.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:32:20.974]    __dp=0x00000000
[04:32:20.974]    __ap=0x00000000
[04:32:20.974]    __traceout=0x00000000      (Trace Disabled)
[04:32:20.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:32:20.974]    __FlashAddr=0x00000000
[04:32:20.975]    __FlashLen=0x00000000
[04:32:20.975]    __FlashArg=0x00000000
[04:32:20.975]    __FlashOp=0x00000000
[04:32:20.975]    __Result=0x00000000
[04:32:20.975]  </debugvars>
[04:32:20.975]  
[04:32:20.975]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:32:20.975]    <block atomic="false" info="">
[04:32:20.975]      __var deviceID = 0;
[04:32:20.976]        // -> [deviceID <= 0x00000000]
[04:32:20.976]      __var version = 0;
[04:32:20.976]        // -> [version <= 0x00000000]
[04:32:20.976]      __var partNum = 0;
[04:32:20.976]        // -> [partNum <= 0x00000000]
[04:32:20.976]      __var manuf = 0;
[04:32:20.976]        // -> [manuf <= 0x00000000]
[04:32:20.976]      __var isMSPM0G1X0X_G3X0X = 0;
[04:32:20.976]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:32:20.977]      __var isProduction = 0;
[04:32:20.977]        // -> [isProduction <= 0x00000000]
[04:32:20.977]      __var continueId = 0;
[04:32:20.977]        // -> [continueId <= 0x00000000]
[04:32:20.977]      deviceID =   Read32(0x41C40004);
[04:32:20.981]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:32:20.982]        // -> [deviceID <= 0x2BB8802F]
[04:32:20.982]      version = deviceID >> 28;
[04:32:20.982]        // -> [version <= 0x00000002]
[04:32:20.982]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:32:20.982]        // -> [partNum <= 0x0000BB88]
[04:32:20.983]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:32:20.983]        // -> [manuf <= 0x00000017]
[04:32:20.983]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:32:20.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:32:20.983]      isProduction = (version > 0);
[04:32:20.984]        // -> [isProduction <= 0x00000001]
[04:32:20.984]    </block>
[04:32:20.984]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:32:20.984]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:32:20.984]        // =>  FALSE
[04:32:20.984]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:32:20.984]    </control>
[04:32:20.984]    <control if="continueId == 4" while="" timeout="0" info="">
[04:32:20.984]      // if-block "continueId == 4"
[04:32:20.984]        // =>  FALSE
[04:32:20.984]      // skip if-block "continueId == 4"
[04:32:20.984]    </control>
[04:32:20.986]    <control if="!isProduction" while="" timeout="0" info="">
[04:32:20.986]      // if-block "!isProduction"
[04:32:20.986]        // =>  FALSE
[04:32:20.986]      // skip if-block "!isProduction"
[04:32:20.986]    </control>
[04:32:20.986]  </sequence>
[04:32:20.986]  
[04:34:58.131]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:34:58.131]  
[04:34:58.131]  <debugvars>
[04:34:58.131]    // Pre-defined
[04:34:58.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:58.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:58.132]    __dp=0x00000000
[04:34:58.132]    __ap=0x00000000
[04:34:58.132]    __traceout=0x00000000      (Trace Disabled)
[04:34:58.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:58.132]    __FlashAddr=0x00000000
[04:34:58.133]    __FlashLen=0x00000000
[04:34:58.133]    __FlashArg=0x00000000
[04:34:58.133]    __FlashOp=0x00000000
[04:34:58.133]    __Result=0x00000000
[04:34:58.133]  </debugvars>
[04:34:58.133]  
[04:34:58.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:34:58.133]    <block atomic="false" info="">
[04:34:58.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:34:58.133]        // -> [isSWJ <= 0x00000001]
[04:34:58.133]      __var hasDormant = __protocol & 0x00020000;
[04:34:58.133]        // -> [hasDormant <= 0x00000000]
[04:34:58.134]      __var protType   = __protocol & 0x0000FFFF;
[04:34:58.134]        // -> [protType <= 0x00000002]
[04:34:58.134]    </block>
[04:34:58.134]    <control if="protType == 1" while="" timeout="0" info="">
[04:34:58.134]      // if-block "protType == 1"
[04:34:58.134]        // =>  FALSE
[04:34:58.134]      // skip if-block "protType == 1"
[04:34:58.134]    </control>
[04:34:58.134]    <control if="protType == 2" while="" timeout="0" info="">
[04:34:58.134]      // if-block "protType == 2"
[04:34:58.134]        // =>  TRUE
[04:34:58.135]      <control if="isSWJ" while="" timeout="0" info="">
[04:34:58.135]        // if-block "isSWJ"
[04:34:58.135]          // =>  TRUE
[04:34:58.135]        <control if="hasDormant" while="" timeout="0" info="">
[04:34:58.135]          // if-block "hasDormant"
[04:34:58.135]            // =>  FALSE
[04:34:58.135]          // skip if-block "hasDormant"
[04:34:58.135]        </control>
[04:34:58.136]        <control if="!hasDormant" while="" timeout="0" info="">
[04:34:58.136]          // if-block "!hasDormant"
[04:34:58.136]            // =>  TRUE
[04:34:58.136]          <block atomic="false" info="">
[04:34:58.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:34:58.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:58.138]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:34:58.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:34:58.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:34:58.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:58.141]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:34:58.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:34:58.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:34:58.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:58.144]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:34:58.145]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:34:58.146]          </block>
[04:34:58.146]          // end if-block "!hasDormant"
[04:34:58.146]        </control>
[04:34:58.146]        // end if-block "isSWJ"
[04:34:58.146]      </control>
[04:34:58.146]      <control if="!isSWJ" while="" timeout="0" info="">
[04:34:58.146]        // if-block "!isSWJ"
[04:34:58.146]          // =>  FALSE
[04:34:58.146]        // skip if-block "!isSWJ"
[04:34:58.146]      </control>
[04:34:58.148]      <block atomic="false" info="">
[04:34:58.148]        ReadDP(0x0);
[04:34:58.149]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:34:58.149]      </block>
[04:34:58.149]      // end if-block "protType == 2"
[04:34:58.149]    </control>
[04:34:58.150]  </sequence>
[04:34:58.150]  
[04:34:58.154]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:34:58.154]  
[04:34:58.154]  <debugvars>
[04:34:58.154]    // Pre-defined
[04:34:58.154]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:58.154]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:58.154]    __dp=0x00000000
[04:34:58.154]    __ap=0x00000000
[04:34:58.154]    __traceout=0x00000000      (Trace Disabled)
[04:34:58.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:58.154]    __FlashAddr=0x00000000
[04:34:58.154]    __FlashLen=0x00000000
[04:34:58.155]    __FlashArg=0x00000000
[04:34:58.155]    __FlashOp=0x00000000
[04:34:58.155]    __Result=0x00000000
[04:34:58.155]  </debugvars>
[04:34:58.155]  
[04:34:58.155]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:34:58.155]    <block atomic="false" info="">
[04:34:58.155]      __var SW_DP_ABORT       = 0x0;
[04:34:58.155]        // -> [SW_DP_ABORT <= 0x00000000]
[04:34:58.155]      __var DP_CTRL_STAT      = 0x4;
[04:34:58.155]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:34:58.156]      __var DP_SELECT         = 0x8;
[04:34:58.156]        // -> [DP_SELECT <= 0x00000008]
[04:34:58.156]      __var powered_down      = 0;
[04:34:58.156]        // -> [powered_down <= 0x00000000]
[04:34:58.156]      WriteDP(DP_SELECT, 0x00000000);
[04:34:58.158]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:34:58.159]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:34:58.160]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:34:58.160]        // -> [powered_down <= 0x00000001]
[04:34:58.160]    </block>
[04:34:58.160]    <control if="powered_down" while="" timeout="0" info="">
[04:34:58.160]      // if-block "powered_down"
[04:34:58.161]        // =>  TRUE
[04:34:58.161]      <block atomic="false" info="">
[04:34:58.161]        Message(0, "Debug/System power-up request sent");
[04:34:58.161]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:34:58.163]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:34:58.163]      </block>
[04:34:58.163]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:34:58.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:34:58.165]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:34:58.165]        // while-condition  =>  FALSE
[04:34:58.165]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:34:58.165]      </control>
[04:34:58.165]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:34:58.165]        // if-block "(__protocol & 0xFFFF) == 1"
[04:34:58.165]          // =>  FALSE
[04:34:58.165]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:34:58.165]      </control>
[04:34:58.165]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:34:58.165]        // if-block "(__protocol & 0xFFFF) == 2"
[04:34:58.165]          // =>  TRUE
[04:34:58.166]        <block atomic="false" info="">
[04:34:58.166]          Message(0, "executing SWD power up");
[04:34:58.166]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:34:58.167]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:34:58.167]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:34:58.169]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:34:58.170]        </block>
[04:34:58.170]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:34:58.170]      </control>
[04:34:58.170]      // end if-block "powered_down"
[04:34:58.170]    </control>
[04:34:58.170]    <block atomic="false" info="">
[04:34:58.170]      __var DEBUG_PORT_VAL    = 0;
[04:34:58.171]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:34:58.171]      __var ACCESS_POINT_VAL  = 0;
[04:34:58.171]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:34:58.171]      __ap = 1; 
[04:34:58.171]        // -> [__ap <= 0x00000001]
[04:34:58.171]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:34:58.175]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:34:58.175]      __ap = 4;
[04:34:58.175]        // -> [__ap <= 0x00000004]
[04:34:58.175]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:34:58.183]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:34:58.183]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:34:58.183]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:34:58.184]    </block>
[04:34:58.184]    <block atomic="false" info="">
[04:34:58.184]      __var nReset = 0x80;
[04:34:58.184]        // -> [nReset <= 0x00000080]
[04:34:58.185]      __var canReadPins = 0;
[04:34:58.185]        // -> [canReadPins <= 0x00000000]
[04:34:58.185]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:34:58.189]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:34:58.190]        // -> [canReadPins <= 0x00000001]
[04:34:58.190]    </block>
[04:34:58.190]    <control if="" while="1" timeout="200" info="">
[04:34:58.190]      // while "1"  (timeout="200")
[04:34:58.190]      // while-condition  =>  TRUE
[04:34:58.190]      // while "1"  (timeout="200")
[04:34:58.190]      // while-condition  =>  TRUE
[04:34:58.190]      // while "1"  (timeout="200")
[04:34:58.190]      // while-condition  =>  TRUE
[04:34:58.190]      // while "1"  (timeout="200")
[04:34:58.190]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.191]      // while "1"  (timeout="200")
[04:34:58.191]      // while-condition  =>  TRUE
[04:34:58.192]      // while "1"  (timeout="200")
[04:34:58.192]      // while-condition  =>  TRUE
[04:34:58.192]      // while "1"  (timeout="200")
[04:34:58.192]      // while-condition  =>  TRUE
[04:34:58.192]      // while "1"  (timeout="200")
[04:34:58.192]      // while-condition  =>  TRUE
[04:34:58.192]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.193]      // while-condition  =>  TRUE
[04:34:58.193]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.194]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.194]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.194]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.194]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.194]      // while "1"  (timeout="200")
[04:34:58.194]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.195]      // while "1"  (timeout="200")
[04:34:58.195]      // while-condition  =>  TRUE
[04:34:58.196]      // while "1"  (timeout="200")
[04:34:58.196]      // while-condition  =>  TRUE
[04:34:58.196]      // while "1"  (timeout="200")
[04:34:58.196]      // while-condition  =>  TRUE
[04:34:58.196]      // while "1"  (timeout="200")
[04:34:58.196]      // while-condition  =>  TRUE
[04:34:58.196]      // while "1"  (timeout="200")
[04:34:58.196]      // while-condition  =>  TRUE
[04:34:58.196]      // while "1"  (timeout="200")
[04:34:58.197]      // while-condition  =>  TRUE
[04:34:58.197]      // while "1"  (timeout="200")
[04:34:58.197]      // while-condition  =>  TRUE
[04:34:58.197]      // while "1"  (timeout="200")
[04:34:58.197]      // while-condition  =>  TRUE
[04:34:58.197]      // while "1"  (timeout="200")
[04:34:58.197]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.198]      // while "1"  (timeout="200")
[04:34:58.198]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.199]      // while-condition  =>  TRUE
[04:34:58.199]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.201]      // while-condition  =>  TRUE
[04:34:58.201]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.202]      // while-condition  =>  TRUE
[04:34:58.202]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.203]      // while-condition  =>  TRUE
[04:34:58.203]      // while "1"  (timeout="200")
[04:34:58.204]      // while-condition  =>  TRUE
[04:34:58.204]      // while "1"  (timeout="200")
[04:34:58.204]      // while  =>  TIMEOUT
[04:34:58.204]      // end while "1"
[04:34:58.204]    </control>
[04:34:58.204]    <control if="canReadPins" while="" timeout="0" info="">
[04:34:58.204]      // if-block "canReadPins"
[04:34:58.204]        // =>  TRUE
[04:34:58.204]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:34:58.205]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:34:58.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:34:58.207]        // while-condition  =>  FALSE
[04:34:58.207]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:34:58.207]      </control>
[04:34:58.207]      // end if-block "canReadPins"
[04:34:58.207]    </control>
[04:34:58.207]    <control if="!canReadPins" while="" timeout="0" info="">
[04:34:58.207]      // if-block "!canReadPins"
[04:34:58.207]        // =>  FALSE
[04:34:58.207]      // skip if-block "!canReadPins"
[04:34:58.207]    </control>
[04:34:58.207]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:34:58.208]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:34:58.208]        // =>  TRUE
[04:34:58.208]      <block atomic="false" info="">
[04:34:58.208]        WriteAP(0x00, 0x190008);
[04:34:58.209]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:34:58.209]        WriteAP(0xF0, 0x01);
[04:34:58.212]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:34:58.212]      </block>
[04:34:58.214]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:34:58.214]    </control>
[04:34:58.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:34:58.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:34:58.214]        // =>  FALSE
[04:34:58.214]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:34:58.214]    </control>
[04:34:58.215]    <block atomic="false" info="">
[04:34:58.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:34:58.217]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:34:58.217]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:34:58.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:34:58.218]      __ap = 0; //lets make sure we reset the access point selection
[04:34:58.218]        // -> [__ap <= 0x00000000]
[04:34:58.218]    </block>
[04:34:58.218]  </sequence>
[04:34:58.218]  
[04:34:58.239]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:34:58.239]  
[04:34:58.239]  <debugvars>
[04:34:58.239]    // Pre-defined
[04:34:58.239]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:58.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:58.239]    __dp=0x00000000
[04:34:58.239]    __ap=0x00000000
[04:34:58.239]    __traceout=0x00000000      (Trace Disabled)
[04:34:58.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:58.239]    __FlashAddr=0x00000000
[04:34:58.240]    __FlashLen=0x00000000
[04:34:58.240]    __FlashArg=0x00000000
[04:34:58.240]    __FlashOp=0x00000000
[04:34:58.240]    __Result=0x00000000
[04:34:58.240]  </debugvars>
[04:34:58.241]  
[04:34:58.241]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:34:58.241]    <block atomic="false" info="">
[04:34:58.241]      __var deviceID = 0;
[04:34:58.241]        // -> [deviceID <= 0x00000000]
[04:34:58.241]      __var version = 0;
[04:34:58.242]        // -> [version <= 0x00000000]
[04:34:58.242]      __var partNum = 0;
[04:34:58.242]        // -> [partNum <= 0x00000000]
[04:34:58.242]      __var manuf = 0;
[04:34:58.242]        // -> [manuf <= 0x00000000]
[04:34:58.242]      __var isMSPM0G1X0X_G3X0X = 0;
[04:34:58.242]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:34:58.242]      __var isProduction = 0;
[04:34:58.242]        // -> [isProduction <= 0x00000000]
[04:34:58.242]      __var continueId = 0;
[04:34:58.242]        // -> [continueId <= 0x00000000]
[04:34:58.243]      deviceID =   Read32(0x41C40004);
[04:34:58.248]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:34:58.248]        // -> [deviceID <= 0x2BB8802F]
[04:34:58.248]      version = deviceID >> 28;
[04:34:58.248]        // -> [version <= 0x00000002]
[04:34:58.248]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:34:58.249]        // -> [partNum <= 0x0000BB88]
[04:34:58.249]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:34:58.249]        // -> [manuf <= 0x00000017]
[04:34:58.249]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:34:58.249]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:34:58.249]      isProduction = (version > 0);
[04:34:58.249]        // -> [isProduction <= 0x00000001]
[04:34:58.249]    </block>
[04:34:58.250]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:34:58.250]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:34:58.250]        // =>  FALSE
[04:34:58.250]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:34:58.250]    </control>
[04:34:58.250]    <control if="continueId == 4" while="" timeout="0" info="">
[04:34:58.250]      // if-block "continueId == 4"
[04:34:58.250]        // =>  FALSE
[04:34:58.250]      // skip if-block "continueId == 4"
[04:34:58.250]    </control>
[04:34:58.250]    <control if="!isProduction" while="" timeout="0" info="">
[04:34:58.250]      // if-block "!isProduction"
[04:34:58.250]        // =>  FALSE
[04:34:58.251]      // skip if-block "!isProduction"
[04:34:58.251]    </control>
[04:34:58.251]  </sequence>
[04:34:58.251]  
[04:36:08.743]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:36:08.743]  
[04:36:08.752]  <debugvars>
[04:36:08.753]    // Pre-defined
[04:36:08.753]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:36:08.753]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:36:08.753]    __dp=0x00000000
[04:36:08.753]    __ap=0x00000000
[04:36:08.753]    __traceout=0x00000000      (Trace Disabled)
[04:36:08.753]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:36:08.753]    __FlashAddr=0x00000000
[04:36:08.753]    __FlashLen=0x00000000
[04:36:08.753]    __FlashArg=0x00000000
[04:36:08.754]    __FlashOp=0x00000000
[04:36:08.754]    __Result=0x00000000
[04:36:08.754]  </debugvars>
[04:36:08.754]  
[04:36:08.754]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:36:08.754]    <block atomic="false" info="">
[04:36:08.754]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:36:08.754]        // -> [isSWJ <= 0x00000001]
[04:36:08.754]      __var hasDormant = __protocol & 0x00020000;
[04:36:08.754]        // -> [hasDormant <= 0x00000000]
[04:36:08.754]      __var protType   = __protocol & 0x0000FFFF;
[04:36:08.754]        // -> [protType <= 0x00000002]
[04:36:08.754]    </block>
[04:36:08.754]    <control if="protType == 1" while="" timeout="0" info="">
[04:36:08.754]      // if-block "protType == 1"
[04:36:08.754]        // =>  FALSE
[04:36:08.756]      // skip if-block "protType == 1"
[04:36:08.756]    </control>
[04:36:08.756]    <control if="protType == 2" while="" timeout="0" info="">
[04:36:08.756]      // if-block "protType == 2"
[04:36:08.756]        // =>  TRUE
[04:36:08.756]      <control if="isSWJ" while="" timeout="0" info="">
[04:36:08.756]        // if-block "isSWJ"
[04:36:08.757]          // =>  TRUE
[04:36:08.757]        <control if="hasDormant" while="" timeout="0" info="">
[04:36:08.757]          // if-block "hasDormant"
[04:36:08.757]            // =>  FALSE
[04:36:08.757]          // skip if-block "hasDormant"
[04:36:08.757]        </control>
[04:36:08.757]        <control if="!hasDormant" while="" timeout="0" info="">
[04:36:08.757]          // if-block "!hasDormant"
[04:36:08.757]            // =>  TRUE
[04:36:08.757]          <block atomic="false" info="">
[04:36:08.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:36:08.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:36:08.760]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:36:08.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:36:08.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:36:08.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:36:08.763]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:36:08.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:36:08.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:36:08.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:36:08.766]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:36:08.768]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:36:08.768]          </block>
[04:36:08.768]          // end if-block "!hasDormant"
[04:36:08.768]        </control>
[04:36:08.768]        // end if-block "isSWJ"
[04:36:08.768]      </control>
[04:36:08.768]      <control if="!isSWJ" while="" timeout="0" info="">
[04:36:08.768]        // if-block "!isSWJ"
[04:36:08.769]          // =>  FALSE
[04:36:08.769]        // skip if-block "!isSWJ"
[04:36:08.769]      </control>
[04:36:08.769]      <block atomic="false" info="">
[04:36:08.769]        ReadDP(0x0);
[04:36:08.771]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:36:08.771]      </block>
[04:36:08.772]      // end if-block "protType == 2"
[04:36:08.772]    </control>
[04:36:08.772]  </sequence>
[04:36:08.772]  
[04:36:08.774]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:36:08.774]  
[04:36:08.774]  <debugvars>
[04:36:08.775]    // Pre-defined
[04:36:08.775]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:36:08.775]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:36:08.775]    __dp=0x00000000
[04:36:08.775]    __ap=0x00000000
[04:36:08.775]    __traceout=0x00000000      (Trace Disabled)
[04:36:08.775]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:36:08.775]    __FlashAddr=0x00000000
[04:36:08.775]    __FlashLen=0x00000000
[04:36:08.775]    __FlashArg=0x00000000
[04:36:08.776]    __FlashOp=0x00000000
[04:36:08.776]    __Result=0x00000000
[04:36:08.776]  </debugvars>
[04:36:08.776]  
[04:36:08.776]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:36:08.776]    <block atomic="false" info="">
[04:36:08.776]      __var SW_DP_ABORT       = 0x0;
[04:36:08.776]        // -> [SW_DP_ABORT <= 0x00000000]
[04:36:08.776]      __var DP_CTRL_STAT      = 0x4;
[04:36:08.777]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:36:08.777]      __var DP_SELECT         = 0x8;
[04:36:08.777]        // -> [DP_SELECT <= 0x00000008]
[04:36:08.777]      __var powered_down      = 0;
[04:36:08.777]        // -> [powered_down <= 0x00000000]
[04:36:08.777]      WriteDP(DP_SELECT, 0x00000000);
[04:36:08.778]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:36:08.779]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:36:08.780]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:36:08.780]        // -> [powered_down <= 0x00000001]
[04:36:08.780]    </block>
[04:36:08.780]    <control if="powered_down" while="" timeout="0" info="">
[04:36:08.780]      // if-block "powered_down"
[04:36:08.780]        // =>  TRUE
[04:36:08.780]      <block atomic="false" info="">
[04:36:08.780]        Message(0, "Debug/System power-up request sent");
[04:36:08.784]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:36:08.786]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:36:08.786]      </block>
[04:36:08.786]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:36:08.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:36:08.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:36:08.788]        // while-condition  =>  FALSE
[04:36:08.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:36:08.788]      </control>
[04:36:08.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:36:08.789]        // if-block "(__protocol & 0xFFFF) == 1"
[04:36:08.789]          // =>  FALSE
[04:36:08.789]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:36:08.789]      </control>
[04:36:08.789]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:36:08.789]        // if-block "(__protocol & 0xFFFF) == 2"
[04:36:08.789]          // =>  TRUE
[04:36:08.789]        <block atomic="false" info="">
[04:36:08.789]          Message(0, "executing SWD power up");
[04:36:08.791]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:36:08.793]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:36:08.793]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:36:08.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:36:08.795]        </block>
[04:36:08.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:36:08.795]      </control>
[04:36:08.795]      // end if-block "powered_down"
[04:36:08.795]    </control>
[04:36:08.796]    <block atomic="false" info="">
[04:36:08.796]      __var DEBUG_PORT_VAL    = 0;
[04:36:08.796]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:36:08.796]      __var ACCESS_POINT_VAL  = 0;
[04:36:08.796]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:36:08.796]      __ap = 1; 
[04:36:08.796]        // -> [__ap <= 0x00000001]
[04:36:08.796]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:36:08.800]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:36:08.800]      __ap = 4;
[04:36:08.800]        // -> [__ap <= 0x00000004]
[04:36:08.800]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:36:08.804]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:36:08.804]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:36:08.805]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:36:08.806]    </block>
[04:36:08.807]    <block atomic="false" info="">
[04:36:08.807]      __var nReset = 0x80;
[04:36:08.807]        // -> [nReset <= 0x00000080]
[04:36:08.807]      __var canReadPins = 0;
[04:36:08.807]        // -> [canReadPins <= 0x00000000]
[04:36:08.808]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:36:08.809]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:36:08.809]        // -> [canReadPins <= 0x00000001]
[04:36:08.809]    </block>
[04:36:08.809]    <control if="" while="1" timeout="200" info="">
[04:36:08.809]      // while "1"  (timeout="200")
[04:36:08.810]      // while-condition  =>  TRUE
[04:36:08.810]      // while "1"  (timeout="200")
[04:36:08.810]      // while-condition  =>  TRUE
[04:36:08.810]      // while "1"  (timeout="200")
[04:36:08.811]      // while-condition  =>  TRUE
[04:36:08.811]      // while "1"  (timeout="200")
[04:36:08.811]      // while-condition  =>  TRUE
[04:36:08.811]      // while "1"  (timeout="200")
[04:36:08.811]      // while-condition  =>  TRUE
[04:36:08.811]      // while "1"  (timeout="200")
[04:36:08.812]      // while-condition  =>  TRUE
[04:36:08.812]      // while "1"  (timeout="200")
[04:36:08.812]      // while-condition  =>  TRUE
[04:36:08.812]      // while "1"  (timeout="200")
[04:36:08.812]      // while-condition  =>  TRUE
[04:36:08.812]      // while "1"  (timeout="200")
[04:36:08.812]      // while-condition  =>  TRUE
[04:36:08.812]      // while "1"  (timeout="200")
[04:36:08.812]      // while-condition  =>  TRUE
[04:36:08.813]      // while "1"  (timeout="200")
[04:36:08.813]      // while-condition  =>  TRUE
[04:36:08.813]      // while "1"  (timeout="200")
[04:36:08.813]      // while-condition  =>  TRUE
[04:36:08.813]      // while "1"  (timeout="200")
[04:36:08.813]      // while-condition  =>  TRUE
[04:36:08.813]      // while "1"  (timeout="200")
[04:36:08.813]      // while-condition  =>  TRUE
[04:36:08.813]      // while "1"  (timeout="200")
[04:36:08.814]      // while-condition  =>  TRUE
[04:36:08.814]      // while "1"  (timeout="200")
[04:36:08.814]      // while  =>  TIMEOUT
[04:36:08.814]      // end while "1"
[04:36:08.814]    </control>
[04:36:08.814]    <control if="canReadPins" while="" timeout="0" info="">
[04:36:08.814]      // if-block "canReadPins"
[04:36:08.814]        // =>  TRUE
[04:36:08.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:36:08.814]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:36:08.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:36:08.816]        // while-condition  =>  FALSE
[04:36:08.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:36:08.817]      </control>
[04:36:08.817]      // end if-block "canReadPins"
[04:36:08.817]    </control>
[04:36:08.817]    <control if="!canReadPins" while="" timeout="0" info="">
[04:36:08.817]      // if-block "!canReadPins"
[04:36:08.817]        // =>  FALSE
[04:36:08.817]      // skip if-block "!canReadPins"
[04:36:08.818]    </control>
[04:36:08.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:36:08.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:36:08.818]        // =>  TRUE
[04:36:08.818]      <block atomic="false" info="">
[04:36:08.818]        WriteAP(0x00, 0x190008);
[04:36:08.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:36:08.820]        WriteAP(0xF0, 0x01);
[04:36:08.823]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:36:08.823]      </block>
[04:36:08.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:36:08.823]    </control>
[04:36:08.824]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:36:08.824]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:36:08.824]        // =>  FALSE
[04:36:08.824]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:36:08.824]    </control>
[04:36:08.824]    <block atomic="false" info="">
[04:36:08.824]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:36:08.828]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:36:08.828]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:36:08.828]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:36:08.830]      __ap = 0; //lets make sure we reset the access point selection
[04:36:08.830]        // -> [__ap <= 0x00000000]
[04:36:08.830]    </block>
[04:36:08.831]  </sequence>
[04:36:08.831]  
[04:36:08.850]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:36:08.850]  
[04:36:08.850]  <debugvars>
[04:36:08.850]    // Pre-defined
[04:36:08.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:36:08.850]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:36:08.850]    __dp=0x00000000
[04:36:08.850]    __ap=0x00000000
[04:36:08.850]    __traceout=0x00000000      (Trace Disabled)
[04:36:08.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:36:08.851]    __FlashAddr=0x00000000
[04:36:08.851]    __FlashLen=0x00000000
[04:36:08.851]    __FlashArg=0x00000000
[04:36:08.851]    __FlashOp=0x00000000
[04:36:08.851]    __Result=0x00000000
[04:36:08.851]  </debugvars>
[04:36:08.851]  
[04:36:08.851]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:36:08.851]    <block atomic="false" info="">
[04:36:08.852]      __var deviceID = 0;
[04:36:08.852]        // -> [deviceID <= 0x00000000]
[04:36:08.852]      __var version = 0;
[04:36:08.852]        // -> [version <= 0x00000000]
[04:36:08.852]      __var partNum = 0;
[04:36:08.852]        // -> [partNum <= 0x00000000]
[04:36:08.852]      __var manuf = 0;
[04:36:08.853]        // -> [manuf <= 0x00000000]
[04:36:08.853]      __var isMSPM0G1X0X_G3X0X = 0;
[04:36:08.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:36:08.853]      __var isProduction = 0;
[04:36:08.853]        // -> [isProduction <= 0x00000000]
[04:36:08.853]      __var continueId = 0;
[04:36:08.853]        // -> [continueId <= 0x00000000]
[04:36:08.853]      deviceID =   Read32(0x41C40004);
[04:36:08.858]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:36:08.858]        // -> [deviceID <= 0x2BB8802F]
[04:36:08.858]      version = deviceID >> 28;
[04:36:08.858]        // -> [version <= 0x00000002]
[04:36:08.859]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:36:08.859]        // -> [partNum <= 0x0000BB88]
[04:36:08.859]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:36:08.859]        // -> [manuf <= 0x00000017]
[04:36:08.859]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:36:08.859]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:36:08.861]      isProduction = (version > 0);
[04:36:08.861]        // -> [isProduction <= 0x00000001]
[04:36:08.861]    </block>
[04:36:08.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:36:08.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:36:08.861]        // =>  FALSE
[04:36:08.861]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:36:08.861]    </control>
[04:36:08.861]    <control if="continueId == 4" while="" timeout="0" info="">
[04:36:08.861]      // if-block "continueId == 4"
[04:36:08.862]        // =>  FALSE
[04:36:08.862]      // skip if-block "continueId == 4"
[04:36:08.862]    </control>
[04:36:08.862]    <control if="!isProduction" while="" timeout="0" info="">
[04:36:08.862]      // if-block "!isProduction"
[04:36:08.862]        // =>  FALSE
[04:36:08.862]      // skip if-block "!isProduction"
[04:36:08.862]    </control>
[04:36:08.862]  </sequence>
[04:36:08.862]  
[04:42:11.156]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:42:11.156]  
[04:42:11.165]  <debugvars>
[04:42:11.165]    // Pre-defined
[04:42:11.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:42:11.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:42:11.166]    __dp=0x00000000
[04:42:11.166]    __ap=0x00000000
[04:42:11.166]    __traceout=0x00000000      (Trace Disabled)
[04:42:11.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:42:11.166]    __FlashAddr=0x00000000
[04:42:11.166]    __FlashLen=0x00000000
[04:42:11.166]    __FlashArg=0x00000000
[04:42:11.167]    __FlashOp=0x00000000
[04:42:11.167]    __Result=0x00000000
[04:42:11.167]  </debugvars>
[04:42:11.167]  
[04:42:11.167]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:42:11.167]    <block atomic="false" info="">
[04:42:11.167]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:42:11.167]        // -> [isSWJ <= 0x00000001]
[04:42:11.167]      __var hasDormant = __protocol & 0x00020000;
[04:42:11.168]        // -> [hasDormant <= 0x00000000]
[04:42:11.168]      __var protType   = __protocol & 0x0000FFFF;
[04:42:11.168]        // -> [protType <= 0x00000002]
[04:42:11.168]    </block>
[04:42:11.168]    <control if="protType == 1" while="" timeout="0" info="">
[04:42:11.168]      // if-block "protType == 1"
[04:42:11.168]        // =>  FALSE
[04:42:11.168]      // skip if-block "protType == 1"
[04:42:11.168]    </control>
[04:42:11.168]    <control if="protType == 2" while="" timeout="0" info="">
[04:42:11.169]      // if-block "protType == 2"
[04:42:11.169]        // =>  TRUE
[04:42:11.169]      <control if="isSWJ" while="" timeout="0" info="">
[04:42:11.169]        // if-block "isSWJ"
[04:42:11.169]          // =>  TRUE
[04:42:11.169]        <control if="hasDormant" while="" timeout="0" info="">
[04:42:11.169]          // if-block "hasDormant"
[04:42:11.170]            // =>  FALSE
[04:42:11.170]          // skip if-block "hasDormant"
[04:42:11.171]        </control>
[04:42:11.171]        <control if="!hasDormant" while="" timeout="0" info="">
[04:42:11.171]          // if-block "!hasDormant"
[04:42:11.171]            // =>  TRUE
[04:42:11.171]          <block atomic="false" info="">
[04:42:11.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:42:11.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:42:11.172]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:42:11.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:42:11.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:42:11.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:42:11.176]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:42:11.177]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:42:11.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:42:11.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:42:11.179]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:42:11.180]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:42:11.180]          </block>
[04:42:11.180]          // end if-block "!hasDormant"
[04:42:11.180]        </control>
[04:42:11.181]        // end if-block "isSWJ"
[04:42:11.181]      </control>
[04:42:11.181]      <control if="!isSWJ" while="" timeout="0" info="">
[04:42:11.181]        // if-block "!isSWJ"
[04:42:11.181]          // =>  FALSE
[04:42:11.181]        // skip if-block "!isSWJ"
[04:42:11.181]      </control>
[04:42:11.182]      <block atomic="false" info="">
[04:42:11.182]        ReadDP(0x0);
[04:42:11.183]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:42:11.184]      </block>
[04:42:11.184]      // end if-block "protType == 2"
[04:42:11.184]    </control>
[04:42:11.184]  </sequence>
[04:42:11.184]  
[04:42:11.186]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:42:11.186]  
[04:42:11.187]  <debugvars>
[04:42:11.187]    // Pre-defined
[04:42:11.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:42:11.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:42:11.188]    __dp=0x00000000
[04:42:11.188]    __ap=0x00000000
[04:42:11.188]    __traceout=0x00000000      (Trace Disabled)
[04:42:11.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:42:11.188]    __FlashAddr=0x00000000
[04:42:11.188]    __FlashLen=0x00000000
[04:42:11.189]    __FlashArg=0x00000000
[04:42:11.189]    __FlashOp=0x00000000
[04:42:11.189]    __Result=0x00000000
[04:42:11.189]  </debugvars>
[04:42:11.189]  
[04:42:11.189]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:42:11.189]    <block atomic="false" info="">
[04:42:11.189]      __var SW_DP_ABORT       = 0x0;
[04:42:11.189]        // -> [SW_DP_ABORT <= 0x00000000]
[04:42:11.189]      __var DP_CTRL_STAT      = 0x4;
[04:42:11.190]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:42:11.191]      __var DP_SELECT         = 0x8;
[04:42:11.191]        // -> [DP_SELECT <= 0x00000008]
[04:42:11.191]      __var powered_down      = 0;
[04:42:11.191]        // -> [powered_down <= 0x00000000]
[04:42:11.191]      WriteDP(DP_SELECT, 0x00000000);
[04:42:11.195]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:42:11.195]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:42:11.197]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:42:11.197]        // -> [powered_down <= 0x00000001]
[04:42:11.197]    </block>
[04:42:11.197]    <control if="powered_down" while="" timeout="0" info="">
[04:42:11.197]      // if-block "powered_down"
[04:42:11.197]        // =>  TRUE
[04:42:11.197]      <block atomic="false" info="">
[04:42:11.197]        Message(0, "Debug/System power-up request sent");
[04:42:11.198]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:42:11.200]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:42:11.200]      </block>
[04:42:11.200]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:42:11.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:42:11.202]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:42:11.202]        // while-condition  =>  FALSE
[04:42:11.202]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:42:11.203]      </control>
[04:42:11.203]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:42:11.203]        // if-block "(__protocol & 0xFFFF) == 1"
[04:42:11.203]          // =>  FALSE
[04:42:11.203]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:42:11.203]      </control>
[04:42:11.203]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:42:11.203]        // if-block "(__protocol & 0xFFFF) == 2"
[04:42:11.204]          // =>  TRUE
[04:42:11.204]        <block atomic="false" info="">
[04:42:11.204]          Message(0, "executing SWD power up");
[04:42:11.204]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:42:11.206]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:42:11.206]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:42:11.208]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:42:11.208]        </block>
[04:42:11.208]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:42:11.208]      </control>
[04:42:11.208]      // end if-block "powered_down"
[04:42:11.208]    </control>
[04:42:11.209]    <block atomic="false" info="">
[04:42:11.209]      __var DEBUG_PORT_VAL    = 0;
[04:42:11.209]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:42:11.209]      __var ACCESS_POINT_VAL  = 0;
[04:42:11.209]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:42:11.209]      __ap = 1; 
[04:42:11.209]        // -> [__ap <= 0x00000001]
[04:42:11.210]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:42:11.213]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:42:11.213]      __ap = 4;
[04:42:11.213]        // -> [__ap <= 0x00000004]
[04:42:11.213]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:42:11.216]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:42:11.217]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:42:11.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:42:11.217]    </block>
[04:42:11.217]    <block atomic="false" info="">
[04:42:11.217]      __var nReset = 0x80;
[04:42:11.217]        // -> [nReset <= 0x00000080]
[04:42:11.217]      __var canReadPins = 0;
[04:42:11.217]        // -> [canReadPins <= 0x00000000]
[04:42:11.218]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:42:11.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:42:11.219]        // -> [canReadPins <= 0x00000001]
[04:42:11.220]    </block>
[04:42:11.220]    <control if="" while="1" timeout="200" info="">
[04:42:11.220]      // while "1"  (timeout="200")
[04:42:11.220]      // while-condition  =>  TRUE
[04:42:11.220]      // while "1"  (timeout="200")
[04:42:11.220]      // while-condition  =>  TRUE
[04:42:11.220]      // while "1"  (timeout="200")
[04:42:11.220]      // while-condition  =>  TRUE
[04:42:11.220]      // while "1"  (timeout="200")
[04:42:11.221]      // while-condition  =>  TRUE
[04:42:11.221]      // while "1"  (timeout="200")
[04:42:11.221]      // while-condition  =>  TRUE
[04:42:11.221]      // while "1"  (timeout="200")
[04:42:11.221]      // while-condition  =>  TRUE
[04:42:11.221]      // while "1"  (timeout="200")
[04:42:11.221]      // while-condition  =>  TRUE
[04:42:11.221]      // while "1"  (timeout="200")
[04:42:11.221]      // while-condition  =>  TRUE
[04:42:11.221]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.222]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.222]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.222]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.222]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.222]      // while "1"  (timeout="200")
[04:42:11.222]      // while-condition  =>  TRUE
[04:42:11.223]      // while "1"  (timeout="200")
[04:42:11.223]      // while-condition  =>  TRUE
[04:42:11.223]      // while "1"  (timeout="200")
[04:42:11.223]      // while-condition  =>  TRUE
[04:42:11.223]      // while "1"  (timeout="200")
[04:42:11.224]      // while-condition  =>  TRUE
[04:42:11.224]      // while "1"  (timeout="200")
[04:42:11.224]      // while-condition  =>  TRUE
[04:42:11.224]      // while "1"  (timeout="200")
[04:42:11.224]      // while-condition  =>  TRUE
[04:42:11.224]      // while "1"  (timeout="200")
[04:42:11.224]      // while-condition  =>  TRUE
[04:42:11.224]      // while "1"  (timeout="200")
[04:42:11.224]      // while-condition  =>  TRUE
[04:42:11.224]      // while "1"  (timeout="200")
[04:42:11.225]      // while-condition  =>  TRUE
[04:42:11.225]      // while "1"  (timeout="200")
[04:42:11.225]      // while-condition  =>  TRUE
[04:42:11.225]      // while "1"  (timeout="200")
[04:42:11.225]      // while-condition  =>  TRUE
[04:42:11.225]      // while "1"  (timeout="200")
[04:42:11.225]      // while-condition  =>  TRUE
[04:42:11.225]      // while "1"  (timeout="200")
[04:42:11.225]      // while-condition  =>  TRUE
[04:42:11.225]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.226]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.226]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.226]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.226]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.226]      // while "1"  (timeout="200")
[04:42:11.226]      // while-condition  =>  TRUE
[04:42:11.227]      // while "1"  (timeout="200")
[04:42:11.227]      // while-condition  =>  TRUE
[04:42:11.227]      // while "1"  (timeout="200")
[04:42:11.227]      // while-condition  =>  TRUE
[04:42:11.227]      // while "1"  (timeout="200")
[04:42:11.227]      // while-condition  =>  TRUE
[04:42:11.227]      // while "1"  (timeout="200")
[04:42:11.228]      // while-condition  =>  TRUE
[04:42:11.228]      // while "1"  (timeout="200")
[04:42:11.228]      // while-condition  =>  TRUE
[04:42:11.228]      // while "1"  (timeout="200")
[04:42:11.228]      // while-condition  =>  TRUE
[04:42:11.228]      // while "1"  (timeout="200")
[04:42:11.228]      // while-condition  =>  TRUE
[04:42:11.229]      // while "1"  (timeout="200")
[04:42:11.229]      // while-condition  =>  TRUE
[04:42:11.229]      // while "1"  (timeout="200")
[04:42:11.229]      // while-condition  =>  TRUE
[04:42:11.229]      // while "1"  (timeout="200")
[04:42:11.229]      // while-condition  =>  TRUE
[04:42:11.229]      // while "1"  (timeout="200")
[04:42:11.229]      // while-condition  =>  TRUE
[04:42:11.229]      // while "1"  (timeout="200")
[04:42:11.229]      // while-condition  =>  TRUE
[04:42:11.230]      // while "1"  (timeout="200")
[04:42:11.230]      // while-condition  =>  TRUE
[04:42:11.231]      // while "1"  (timeout="200")
[04:42:11.231]      // while-condition  =>  TRUE
[04:42:11.231]      // while "1"  (timeout="200")
[04:42:11.231]      // while-condition  =>  TRUE
[04:42:11.231]      // while "1"  (timeout="200")
[04:42:11.231]      // while-condition  =>  TRUE
[04:42:11.232]      // while "1"  (timeout="200")
[04:42:11.232]      // while-condition  =>  TRUE
[04:42:11.232]      // while "1"  (timeout="200")
[04:42:11.232]      // while-condition  =>  TRUE
[04:42:11.232]      // while "1"  (timeout="200")
[04:42:11.232]      // while-condition  =>  TRUE
[04:42:11.232]      // while "1"  (timeout="200")
[04:42:11.233]      // while-condition  =>  TRUE
[04:42:11.233]      // while "1"  (timeout="200")
[04:42:11.233]      // while-condition  =>  TRUE
[04:42:11.233]      // while "1"  (timeout="200")
[04:42:11.233]      // while-condition  =>  TRUE
[04:42:11.233]      // while "1"  (timeout="200")
[04:42:11.233]      // while-condition  =>  TRUE
[04:42:11.233]      // while "1"  (timeout="200")
[04:42:11.233]      // while-condition  =>  TRUE
[04:42:11.233]      // while "1"  (timeout="200")
[04:42:11.234]      // while-condition  =>  TRUE
[04:42:11.234]      // while "1"  (timeout="200")
[04:42:11.234]      // while-condition  =>  TRUE
[04:42:11.234]      // while "1"  (timeout="200")
[04:42:11.234]      // while-condition  =>  TRUE
[04:42:11.234]      // while "1"  (timeout="200")
[04:42:11.234]      // while-condition  =>  TRUE
[04:42:11.234]      // while "1"  (timeout="200")
[04:42:11.234]      // while-condition  =>  TRUE
[04:42:11.234]      // while "1"  (timeout="200")
[04:42:11.235]      // while-condition  =>  TRUE
[04:42:11.235]      // while "1"  (timeout="200")
[04:42:11.235]      // while-condition  =>  TRUE
[04:42:11.235]      // while "1"  (timeout="200")
[04:42:11.235]      // while-condition  =>  TRUE
[04:42:11.235]      // while "1"  (timeout="200")
[04:42:11.235]      // while-condition  =>  TRUE
[04:42:11.235]      // while "1"  (timeout="200")
[04:42:11.235]      // while-condition  =>  TRUE
[04:42:11.235]      // while "1"  (timeout="200")
[04:42:11.236]      // while-condition  =>  TRUE
[04:42:11.236]      // while "1"  (timeout="200")
[04:42:11.236]      // while  =>  TIMEOUT
[04:42:11.236]      // end while "1"
[04:42:11.236]    </control>
[04:42:11.237]    <control if="canReadPins" while="" timeout="0" info="">
[04:42:11.237]      // if-block "canReadPins"
[04:42:11.237]        // =>  TRUE
[04:42:11.237]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:42:11.237]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:42:11.239]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:42:11.239]        // while-condition  =>  FALSE
[04:42:11.239]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:42:11.239]      </control>
[04:42:11.239]      // end if-block "canReadPins"
[04:42:11.239]    </control>
[04:42:11.239]    <control if="!canReadPins" while="" timeout="0" info="">
[04:42:11.239]      // if-block "!canReadPins"
[04:42:11.239]        // =>  FALSE
[04:42:11.239]      // skip if-block "!canReadPins"
[04:42:11.240]    </control>
[04:42:11.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:42:11.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:42:11.240]        // =>  TRUE
[04:42:11.240]      <block atomic="false" info="">
[04:42:11.240]        WriteAP(0x00, 0x190008);
[04:42:11.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:42:11.243]        WriteAP(0xF0, 0x01);
[04:42:11.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:42:11.246]      </block>
[04:42:11.246]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:42:11.246]    </control>
[04:42:11.246]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:42:11.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:42:11.247]        // =>  FALSE
[04:42:11.247]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:42:11.247]    </control>
[04:42:11.247]    <block atomic="false" info="">
[04:42:11.248]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:42:11.251]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:42:11.251]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:42:11.251]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:42:11.252]      __ap = 0; //lets make sure we reset the access point selection
[04:42:11.252]        // -> [__ap <= 0x00000000]
[04:42:11.252]    </block>
[04:42:11.252]  </sequence>
[04:42:11.252]  
[04:42:11.273]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:42:11.273]  
[04:42:11.273]  <debugvars>
[04:42:11.273]    // Pre-defined
[04:42:11.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:42:11.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:42:11.274]    __dp=0x00000000
[04:42:11.274]    __ap=0x00000000
[04:42:11.274]    __traceout=0x00000000      (Trace Disabled)
[04:42:11.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:42:11.274]    __FlashAddr=0x00000000
[04:42:11.274]    __FlashLen=0x00000000
[04:42:11.274]    __FlashArg=0x00000000
[04:42:11.274]    __FlashOp=0x00000000
[04:42:11.274]    __Result=0x00000000
[04:42:11.275]  </debugvars>
[04:42:11.275]  
[04:42:11.275]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:42:11.275]    <block atomic="false" info="">
[04:42:11.275]      __var deviceID = 0;
[04:42:11.275]        // -> [deviceID <= 0x00000000]
[04:42:11.275]      __var version = 0;
[04:42:11.275]        // -> [version <= 0x00000000]
[04:42:11.276]      __var partNum = 0;
[04:42:11.276]        // -> [partNum <= 0x00000000]
[04:42:11.276]      __var manuf = 0;
[04:42:11.276]        // -> [manuf <= 0x00000000]
[04:42:11.276]      __var isMSPM0G1X0X_G3X0X = 0;
[04:42:11.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:42:11.276]      __var isProduction = 0;
[04:42:11.276]        // -> [isProduction <= 0x00000000]
[04:42:11.276]      __var continueId = 0;
[04:42:11.276]        // -> [continueId <= 0x00000000]
[04:42:11.277]      deviceID =   Read32(0x41C40004);
[04:42:11.281]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:42:11.281]        // -> [deviceID <= 0x2BB8802F]
[04:42:11.282]      version = deviceID >> 28;
[04:42:11.282]        // -> [version <= 0x00000002]
[04:42:11.282]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:42:11.282]        // -> [partNum <= 0x0000BB88]
[04:42:11.282]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:42:11.282]        // -> [manuf <= 0x00000017]
[04:42:11.282]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:42:11.282]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:42:11.283]      isProduction = (version > 0);
[04:42:11.283]        // -> [isProduction <= 0x00000001]
[04:42:11.283]    </block>
[04:42:11.283]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:42:11.283]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:42:11.283]        // =>  FALSE
[04:42:11.283]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:42:11.284]    </control>
[04:42:11.284]    <control if="continueId == 4" while="" timeout="0" info="">
[04:42:11.284]      // if-block "continueId == 4"
[04:42:11.284]        // =>  FALSE
[04:42:11.284]      // skip if-block "continueId == 4"
[04:42:11.284]    </control>
[04:42:11.284]    <control if="!isProduction" while="" timeout="0" info="">
[04:42:11.284]      // if-block "!isProduction"
[04:42:11.285]        // =>  FALSE
[04:42:11.285]      // skip if-block "!isProduction"
[04:42:11.285]    </control>
[04:42:11.285]  </sequence>
[04:42:11.285]  
[04:43:45.003]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:43:45.003]  
[04:43:45.012]  <debugvars>
[04:43:45.012]    // Pre-defined
[04:43:45.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:43:45.012]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:43:45.012]    __dp=0x00000000
[04:43:45.012]    __ap=0x00000000
[04:43:45.012]    __traceout=0x00000000      (Trace Disabled)
[04:43:45.013]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:43:45.013]    __FlashAddr=0x00000000
[04:43:45.013]    __FlashLen=0x00000000
[04:43:45.013]    __FlashArg=0x00000000
[04:43:45.013]    __FlashOp=0x00000000
[04:43:45.013]    __Result=0x00000000
[04:43:45.013]  </debugvars>
[04:43:45.013]  
[04:43:45.013]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:43:45.014]    <block atomic="false" info="">
[04:43:45.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:43:45.014]        // -> [isSWJ <= 0x00000001]
[04:43:45.014]      __var hasDormant = __protocol & 0x00020000;
[04:43:45.014]        // -> [hasDormant <= 0x00000000]
[04:43:45.014]      __var protType   = __protocol & 0x0000FFFF;
[04:43:45.014]        // -> [protType <= 0x00000002]
[04:43:45.014]    </block>
[04:43:45.014]    <control if="protType == 1" while="" timeout="0" info="">
[04:43:45.014]      // if-block "protType == 1"
[04:43:45.014]        // =>  FALSE
[04:43:45.015]      // skip if-block "protType == 1"
[04:43:45.015]    </control>
[04:43:45.015]    <control if="protType == 2" while="" timeout="0" info="">
[04:43:45.015]      // if-block "protType == 2"
[04:43:45.015]        // =>  TRUE
[04:43:45.015]      <control if="isSWJ" while="" timeout="0" info="">
[04:43:45.015]        // if-block "isSWJ"
[04:43:45.015]          // =>  TRUE
[04:43:45.015]        <control if="hasDormant" while="" timeout="0" info="">
[04:43:45.015]          // if-block "hasDormant"
[04:43:45.016]            // =>  FALSE
[04:43:45.016]          // skip if-block "hasDormant"
[04:43:45.016]        </control>
[04:43:45.016]        <control if="!hasDormant" while="" timeout="0" info="">
[04:43:45.016]          // if-block "!hasDormant"
[04:43:45.016]            // =>  TRUE
[04:43:45.016]          <block atomic="false" info="">
[04:43:45.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:43:45.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:43:45.018]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:43:45.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:43:45.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:43:45.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:43:45.021]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:43:45.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:43:45.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:43:45.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:43:45.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:43:45.027]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:43:45.027]          </block>
[04:43:45.028]          // end if-block "!hasDormant"
[04:43:45.028]        </control>
[04:43:45.028]        // end if-block "isSWJ"
[04:43:45.028]      </control>
[04:43:45.028]      <control if="!isSWJ" while="" timeout="0" info="">
[04:43:45.028]        // if-block "!isSWJ"
[04:43:45.029]          // =>  FALSE
[04:43:45.029]        // skip if-block "!isSWJ"
[04:43:45.029]      </control>
[04:43:45.029]      <block atomic="false" info="">
[04:43:45.029]        ReadDP(0x0);
[04:43:45.030]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:43:45.030]      </block>
[04:43:45.031]      // end if-block "protType == 2"
[04:43:45.031]    </control>
[04:43:45.031]  </sequence>
[04:43:45.031]  
[04:43:45.034]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:43:45.034]  
[04:43:45.034]  <debugvars>
[04:43:45.034]    // Pre-defined
[04:43:45.034]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:43:45.034]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:43:45.034]    __dp=0x00000000
[04:43:45.034]    __ap=0x00000000
[04:43:45.034]    __traceout=0x00000000      (Trace Disabled)
[04:43:45.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:43:45.034]    __FlashAddr=0x00000000
[04:43:45.035]    __FlashLen=0x00000000
[04:43:45.035]    __FlashArg=0x00000000
[04:43:45.035]    __FlashOp=0x00000000
[04:43:45.035]    __Result=0x00000000
[04:43:45.035]  </debugvars>
[04:43:45.035]  
[04:43:45.035]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:43:45.035]    <block atomic="false" info="">
[04:43:45.036]      __var SW_DP_ABORT       = 0x0;
[04:43:45.036]        // -> [SW_DP_ABORT <= 0x00000000]
[04:43:45.036]      __var DP_CTRL_STAT      = 0x4;
[04:43:45.036]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:43:45.036]      __var DP_SELECT         = 0x8;
[04:43:45.036]        // -> [DP_SELECT <= 0x00000008]
[04:43:45.037]      __var powered_down      = 0;
[04:43:45.037]        // -> [powered_down <= 0x00000000]
[04:43:45.037]      WriteDP(DP_SELECT, 0x00000000);
[04:43:45.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:43:45.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:43:45.040]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:43:45.040]        // -> [powered_down <= 0x00000001]
[04:43:45.040]    </block>
[04:43:45.040]    <control if="powered_down" while="" timeout="0" info="">
[04:43:45.041]      // if-block "powered_down"
[04:43:45.041]        // =>  TRUE
[04:43:45.041]      <block atomic="false" info="">
[04:43:45.041]        Message(0, "Debug/System power-up request sent");
[04:43:45.041]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:43:45.043]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:43:45.043]      </block>
[04:43:45.043]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:43:45.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:43:45.045]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:43:45.045]        // while-condition  =>  FALSE
[04:43:45.045]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:43:45.045]      </control>
[04:43:45.046]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:43:45.046]        // if-block "(__protocol & 0xFFFF) == 1"
[04:43:45.046]          // =>  FALSE
[04:43:45.046]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:43:45.046]      </control>
[04:43:45.046]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:43:45.046]        // if-block "(__protocol & 0xFFFF) == 2"
[04:43:45.046]          // =>  TRUE
[04:43:45.046]        <block atomic="false" info="">
[04:43:45.046]          Message(0, "executing SWD power up");
[04:43:45.047]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:43:45.048]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:43:45.049]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:43:45.050]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:43:45.050]        </block>
[04:43:45.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:43:45.051]      </control>
[04:43:45.051]      // end if-block "powered_down"
[04:43:45.051]    </control>
[04:43:45.051]    <block atomic="false" info="">
[04:43:45.051]      __var DEBUG_PORT_VAL    = 0;
[04:43:45.051]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:43:45.051]      __var ACCESS_POINT_VAL  = 0;
[04:43:45.051]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:43:45.051]      __ap = 1; 
[04:43:45.052]        // -> [__ap <= 0x00000001]
[04:43:45.052]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:43:45.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:43:45.055]      __ap = 4;
[04:43:45.055]        // -> [__ap <= 0x00000004]
[04:43:45.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:43:45.058]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:43:45.058]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:43:45.058]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:43:45.058]    </block>
[04:43:45.058]    <block atomic="false" info="">
[04:43:45.058]      __var nReset = 0x80;
[04:43:45.058]        // -> [nReset <= 0x00000080]
[04:43:45.058]      __var canReadPins = 0;
[04:43:45.058]        // -> [canReadPins <= 0x00000000]
[04:43:45.058]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:43:45.061]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:43:45.061]        // -> [canReadPins <= 0x00000001]
[04:43:45.061]    </block>
[04:43:45.061]    <control if="" while="1" timeout="200" info="">
[04:43:45.061]      // while "1"  (timeout="200")
[04:43:45.061]      // while-condition  =>  TRUE
[04:43:45.061]      // while "1"  (timeout="200")
[04:43:45.062]      // while-condition  =>  TRUE
[04:43:45.062]      // while "1"  (timeout="200")
[04:43:45.062]      // while-condition  =>  TRUE
[04:43:45.062]      // while "1"  (timeout="200")
[04:43:45.062]      // while-condition  =>  TRUE
[04:43:45.062]      // while "1"  (timeout="200")
[04:43:45.062]      // while-condition  =>  TRUE
[04:43:45.062]      // while "1"  (timeout="200")
[04:43:45.062]      // while-condition  =>  TRUE
[04:43:45.062]      // while "1"  (timeout="200")
[04:43:45.063]      // while-condition  =>  TRUE
[04:43:45.063]      // while "1"  (timeout="200")
[04:43:45.063]      // while-condition  =>  TRUE
[04:43:45.063]      // while "1"  (timeout="200")
[04:43:45.063]      // while-condition  =>  TRUE
[04:43:45.063]      // while "1"  (timeout="200")
[04:43:45.063]      // while-condition  =>  TRUE
[04:43:45.063]      // while "1"  (timeout="200")
[04:43:45.063]      // while-condition  =>  TRUE
[04:43:45.063]      // while "1"  (timeout="200")
[04:43:45.064]      // while-condition  =>  TRUE
[04:43:45.064]      // while "1"  (timeout="200")
[04:43:45.064]      // while  =>  TIMEOUT
[04:43:45.064]      // end while "1"
[04:43:45.064]    </control>
[04:43:45.064]    <control if="canReadPins" while="" timeout="0" info="">
[04:43:45.064]      // if-block "canReadPins"
[04:43:45.064]        // =>  TRUE
[04:43:45.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:43:45.065]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:43:45.066]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:43:45.066]        // while-condition  =>  FALSE
[04:43:45.066]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:43:45.066]      </control>
[04:43:45.066]      // end if-block "canReadPins"
[04:43:45.066]    </control>
[04:43:45.066]    <control if="!canReadPins" while="" timeout="0" info="">
[04:43:45.067]      // if-block "!canReadPins"
[04:43:45.067]        // =>  FALSE
[04:43:45.067]      // skip if-block "!canReadPins"
[04:43:45.067]    </control>
[04:43:45.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:43:45.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:43:45.067]        // =>  TRUE
[04:43:45.067]      <block atomic="false" info="">
[04:43:45.067]        WriteAP(0x00, 0x190008);
[04:43:45.069]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:43:45.069]        WriteAP(0xF0, 0x01);
[04:43:45.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:43:45.072]      </block>
[04:43:45.073]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:43:45.073]    </control>
[04:43:45.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:43:45.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:43:45.073]        // =>  FALSE
[04:43:45.073]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:43:45.073]    </control>
[04:43:45.073]    <block atomic="false" info="">
[04:43:45.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:43:45.077]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:43:45.077]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:43:45.077]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:43:45.077]      __ap = 0; //lets make sure we reset the access point selection
[04:43:45.077]        // -> [__ap <= 0x00000000]
[04:43:45.078]    </block>
[04:43:45.078]  </sequence>
[04:43:45.078]  
[04:43:45.099]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:43:45.099]  
[04:43:45.099]  <debugvars>
[04:43:45.099]    // Pre-defined
[04:43:45.099]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:43:45.099]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:43:45.099]    __dp=0x00000000
[04:43:45.099]    __ap=0x00000000
[04:43:45.099]    __traceout=0x00000000      (Trace Disabled)
[04:43:45.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:43:45.100]    __FlashAddr=0x00000000
[04:43:45.100]    __FlashLen=0x00000000
[04:43:45.100]    __FlashArg=0x00000000
[04:43:45.100]    __FlashOp=0x00000000
[04:43:45.100]    __Result=0x00000000
[04:43:45.100]  </debugvars>
[04:43:45.100]  
[04:43:45.100]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:43:45.100]    <block atomic="false" info="">
[04:43:45.101]      __var deviceID = 0;
[04:43:45.101]        // -> [deviceID <= 0x00000000]
[04:43:45.101]      __var version = 0;
[04:43:45.101]        // -> [version <= 0x00000000]
[04:43:45.101]      __var partNum = 0;
[04:43:45.102]        // -> [partNum <= 0x00000000]
[04:43:45.102]      __var manuf = 0;
[04:43:45.102]        // -> [manuf <= 0x00000000]
[04:43:45.102]      __var isMSPM0G1X0X_G3X0X = 0;
[04:43:45.102]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:43:45.102]      __var isProduction = 0;
[04:43:45.102]        // -> [isProduction <= 0x00000000]
[04:43:45.102]      __var continueId = 0;
[04:43:45.102]        // -> [continueId <= 0x00000000]
[04:43:45.102]      deviceID =   Read32(0x41C40004);
[04:43:45.107]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:43:45.107]        // -> [deviceID <= 0x2BB8802F]
[04:43:45.107]      version = deviceID >> 28;
[04:43:45.107]        // -> [version <= 0x00000002]
[04:43:45.108]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:43:45.108]        // -> [partNum <= 0x0000BB88]
[04:43:45.108]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:43:45.108]        // -> [manuf <= 0x00000017]
[04:43:45.108]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:43:45.108]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:43:45.108]      isProduction = (version > 0);
[04:43:45.108]        // -> [isProduction <= 0x00000001]
[04:43:45.109]    </block>
[04:43:45.109]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:43:45.109]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:43:45.109]        // =>  FALSE
[04:43:45.109]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:43:45.109]    </control>
[04:43:45.109]    <control if="continueId == 4" while="" timeout="0" info="">
[04:43:45.109]      // if-block "continueId == 4"
[04:43:45.109]        // =>  FALSE
[04:43:45.109]      // skip if-block "continueId == 4"
[04:43:45.109]    </control>
[04:43:45.109]    <control if="!isProduction" while="" timeout="0" info="">
[04:43:45.109]      // if-block "!isProduction"
[04:43:45.109]        // =>  FALSE
[04:43:45.109]      // skip if-block "!isProduction"
[04:43:45.110]    </control>
[04:43:45.110]  </sequence>
[04:43:45.110]  
[04:46:01.310]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:46:01.310]  
[04:46:01.318]  <debugvars>
[04:46:01.318]    // Pre-defined
[04:46:01.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:46:01.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:46:01.318]    __dp=0x00000000
[04:46:01.318]    __ap=0x00000000
[04:46:01.318]    __traceout=0x00000000      (Trace Disabled)
[04:46:01.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:46:01.318]    __FlashAddr=0x00000000
[04:46:01.320]    __FlashLen=0x00000000
[04:46:01.320]    __FlashArg=0x00000000
[04:46:01.320]    __FlashOp=0x00000000
[04:46:01.320]    __Result=0x00000000
[04:46:01.320]  </debugvars>
[04:46:01.320]  
[04:46:01.320]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:46:01.320]    <block atomic="false" info="">
[04:46:01.320]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:46:01.320]        // -> [isSWJ <= 0x00000001]
[04:46:01.321]      __var hasDormant = __protocol & 0x00020000;
[04:46:01.321]        // -> [hasDormant <= 0x00000000]
[04:46:01.321]      __var protType   = __protocol & 0x0000FFFF;
[04:46:01.321]        // -> [protType <= 0x00000002]
[04:46:01.321]    </block>
[04:46:01.322]    <control if="protType == 1" while="" timeout="0" info="">
[04:46:01.322]      // if-block "protType == 1"
[04:46:01.322]        // =>  FALSE
[04:46:01.322]      // skip if-block "protType == 1"
[04:46:01.322]    </control>
[04:46:01.322]    <control if="protType == 2" while="" timeout="0" info="">
[04:46:01.322]      // if-block "protType == 2"
[04:46:01.322]        // =>  TRUE
[04:46:01.322]      <control if="isSWJ" while="" timeout="0" info="">
[04:46:01.322]        // if-block "isSWJ"
[04:46:01.322]          // =>  TRUE
[04:46:01.323]        <control if="hasDormant" while="" timeout="0" info="">
[04:46:01.323]          // if-block "hasDormant"
[04:46:01.323]            // =>  FALSE
[04:46:01.323]          // skip if-block "hasDormant"
[04:46:01.323]        </control>
[04:46:01.323]        <control if="!hasDormant" while="" timeout="0" info="">
[04:46:01.323]          // if-block "!hasDormant"
[04:46:01.323]            // =>  TRUE
[04:46:01.323]          <block atomic="false" info="">
[04:46:01.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:46:01.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:46:01.325]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:46:01.326]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:46:01.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:46:01.329]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:46:01.329]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:46:01.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:46:01.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:46:01.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:46:01.332]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:46:01.333]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:46:01.334]          </block>
[04:46:01.334]          // end if-block "!hasDormant"
[04:46:01.334]        </control>
[04:46:01.334]        // end if-block "isSWJ"
[04:46:01.334]      </control>
[04:46:01.334]      <control if="!isSWJ" while="" timeout="0" info="">
[04:46:01.334]        // if-block "!isSWJ"
[04:46:01.334]          // =>  FALSE
[04:46:01.334]        // skip if-block "!isSWJ"
[04:46:01.334]      </control>
[04:46:01.335]      <block atomic="false" info="">
[04:46:01.335]        ReadDP(0x0);
[04:46:01.336]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:46:01.336]      </block>
[04:46:01.336]      // end if-block "protType == 2"
[04:46:01.336]    </control>
[04:46:01.337]  </sequence>
[04:46:01.337]  
[04:46:01.339]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:46:01.339]  
[04:46:01.339]  <debugvars>
[04:46:01.339]    // Pre-defined
[04:46:01.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:46:01.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:46:01.339]    __dp=0x00000000
[04:46:01.340]    __ap=0x00000000
[04:46:01.340]    __traceout=0x00000000      (Trace Disabled)
[04:46:01.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:46:01.341]    __FlashAddr=0x00000000
[04:46:01.341]    __FlashLen=0x00000000
[04:46:01.341]    __FlashArg=0x00000000
[04:46:01.341]    __FlashOp=0x00000000
[04:46:01.341]    __Result=0x00000000
[04:46:01.341]  </debugvars>
[04:46:01.341]  
[04:46:01.342]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:46:01.342]    <block atomic="false" info="">
[04:46:01.342]      __var SW_DP_ABORT       = 0x0;
[04:46:01.342]        // -> [SW_DP_ABORT <= 0x00000000]
[04:46:01.342]      __var DP_CTRL_STAT      = 0x4;
[04:46:01.342]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:46:01.342]      __var DP_SELECT         = 0x8;
[04:46:01.342]        // -> [DP_SELECT <= 0x00000008]
[04:46:01.342]      __var powered_down      = 0;
[04:46:01.343]        // -> [powered_down <= 0x00000000]
[04:46:01.343]      WriteDP(DP_SELECT, 0x00000000);
[04:46:01.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:46:01.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:46:01.346]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:46:01.346]        // -> [powered_down <= 0x00000001]
[04:46:01.346]    </block>
[04:46:01.346]    <control if="powered_down" while="" timeout="0" info="">
[04:46:01.346]      // if-block "powered_down"
[04:46:01.346]        // =>  TRUE
[04:46:01.346]      <block atomic="false" info="">
[04:46:01.346]        Message(0, "Debug/System power-up request sent");
[04:46:01.347]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:46:01.348]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:46:01.348]      </block>
[04:46:01.349]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:46:01.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:46:01.350]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:46:01.350]        // while-condition  =>  FALSE
[04:46:01.350]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:46:01.350]      </control>
[04:46:01.351]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:46:01.351]        // if-block "(__protocol & 0xFFFF) == 1"
[04:46:01.351]          // =>  FALSE
[04:46:01.351]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:46:01.351]      </control>
[04:46:01.351]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:46:01.351]        // if-block "(__protocol & 0xFFFF) == 2"
[04:46:01.351]          // =>  TRUE
[04:46:01.351]        <block atomic="false" info="">
[04:46:01.351]          Message(0, "executing SWD power up");
[04:46:01.352]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:46:01.353]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:46:01.354]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:46:01.355]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:46:01.355]        </block>
[04:46:01.356]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:46:01.356]      </control>
[04:46:01.356]      // end if-block "powered_down"
[04:46:01.356]    </control>
[04:46:01.356]    <block atomic="false" info="">
[04:46:01.356]      __var DEBUG_PORT_VAL    = 0;
[04:46:01.356]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:46:01.356]      __var ACCESS_POINT_VAL  = 0;
[04:46:01.356]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:46:01.357]      __ap = 1; 
[04:46:01.357]        // -> [__ap <= 0x00000001]
[04:46:01.357]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:46:01.360]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:46:01.360]      __ap = 4;
[04:46:01.360]        // -> [__ap <= 0x00000004]
[04:46:01.360]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:46:01.364]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:46:01.364]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:46:01.364]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:46:01.364]    </block>
[04:46:01.365]    <block atomic="false" info="">
[04:46:01.365]      __var nReset = 0x80;
[04:46:01.365]        // -> [nReset <= 0x00000080]
[04:46:01.365]      __var canReadPins = 0;
[04:46:01.365]        // -> [canReadPins <= 0x00000000]
[04:46:01.365]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:46:01.366]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:46:01.366]        // -> [canReadPins <= 0x00000001]
[04:46:01.366]    </block>
[04:46:01.366]    <control if="" while="1" timeout="200" info="">
[04:46:01.366]      // while "1"  (timeout="200")
[04:46:01.366]      // while-condition  =>  TRUE
[04:46:01.366]      // while "1"  (timeout="200")
[04:46:01.367]      // while-condition  =>  TRUE
[04:46:01.367]      // while "1"  (timeout="200")
[04:46:01.367]      // while-condition  =>  TRUE
[04:46:01.367]      // while "1"  (timeout="200")
[04:46:01.367]      // while-condition  =>  TRUE
[04:46:01.367]      // while "1"  (timeout="200")
[04:46:01.367]      // while-condition  =>  TRUE
[04:46:01.367]      // while "1"  (timeout="200")
[04:46:01.368]      // while-condition  =>  TRUE
[04:46:01.368]      // while "1"  (timeout="200")
[04:46:01.368]      // while-condition  =>  TRUE
[04:46:01.368]      // while "1"  (timeout="200")
[04:46:01.368]      // while-condition  =>  TRUE
[04:46:01.368]      // while "1"  (timeout="200")
[04:46:01.368]      // while-condition  =>  TRUE
[04:46:01.368]      // while "1"  (timeout="200")
[04:46:01.368]      // while-condition  =>  TRUE
[04:46:01.368]      // while "1"  (timeout="200")
[04:46:01.370]      // while-condition  =>  TRUE
[04:46:01.370]      // while "1"  (timeout="200")
[04:46:01.370]      // while-condition  =>  TRUE
[04:46:01.370]      // while "1"  (timeout="200")
[04:46:01.370]      // while-condition  =>  TRUE
[04:46:01.370]      // while "1"  (timeout="200")
[04:46:01.370]      // while-condition  =>  TRUE
[04:46:01.370]      // while "1"  (timeout="200")
[04:46:01.370]      // while-condition  =>  TRUE
[04:46:01.370]      // while "1"  (timeout="200")
[04:46:01.371]      // while-condition  =>  TRUE
[04:46:01.371]      // while "1"  (timeout="200")
[04:46:01.371]      // while-condition  =>  TRUE
[04:46:01.371]      // while "1"  (timeout="200")
[04:46:01.371]      // while-condition  =>  TRUE
[04:46:01.371]      // while "1"  (timeout="200")
[04:46:01.371]      // while-condition  =>  TRUE
[04:46:01.371]      // while "1"  (timeout="200")
[04:46:01.372]      // while-condition  =>  TRUE
[04:46:01.372]      // while "1"  (timeout="200")
[04:46:01.372]      // while-condition  =>  TRUE
[04:46:01.372]      // while "1"  (timeout="200")
[04:46:01.372]      // while-condition  =>  TRUE
[04:46:01.372]      // while "1"  (timeout="200")
[04:46:01.372]      // while-condition  =>  TRUE
[04:46:01.373]      // while "1"  (timeout="200")
[04:46:01.373]      // while-condition  =>  TRUE
[04:46:01.373]      // while "1"  (timeout="200")
[04:46:01.373]      // while-condition  =>  TRUE
[04:46:01.373]      // while "1"  (timeout="200")
[04:46:01.373]      // while-condition  =>  TRUE
[04:46:01.373]      // while "1"  (timeout="200")
[04:46:01.373]      // while-condition  =>  TRUE
[04:46:01.374]      // while "1"  (timeout="200")
[04:46:01.374]      // while-condition  =>  TRUE
[04:46:01.374]      // while "1"  (timeout="200")
[04:46:01.374]      // while-condition  =>  TRUE
[04:46:01.374]      // while "1"  (timeout="200")
[04:46:01.374]      // while-condition  =>  TRUE
[04:46:01.374]      // while "1"  (timeout="200")
[04:46:01.374]      // while-condition  =>  TRUE
[04:46:01.374]      // while "1"  (timeout="200")
[04:46:01.374]      // while-condition  =>  TRUE
[04:46:01.375]      // while "1"  (timeout="200")
[04:46:01.375]      // while-condition  =>  TRUE
[04:46:01.375]      // while "1"  (timeout="200")
[04:46:01.375]      // while-condition  =>  TRUE
[04:46:01.375]      // while "1"  (timeout="200")
[04:46:01.375]      // while-condition  =>  TRUE
[04:46:01.375]      // while "1"  (timeout="200")
[04:46:01.375]      // while-condition  =>  TRUE
[04:46:01.375]      // while "1"  (timeout="200")
[04:46:01.376]      // while-condition  =>  TRUE
[04:46:01.376]      // while "1"  (timeout="200")
[04:46:01.376]      // while  =>  TIMEOUT
[04:46:01.376]      // end while "1"
[04:46:01.376]    </control>
[04:46:01.376]    <control if="canReadPins" while="" timeout="0" info="">
[04:46:01.376]      // if-block "canReadPins"
[04:46:01.376]        // =>  TRUE
[04:46:01.377]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:46:01.377]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:46:01.378]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:46:01.378]        // while-condition  =>  FALSE
[04:46:01.378]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:46:01.378]      </control>
[04:46:01.378]      // end if-block "canReadPins"
[04:46:01.378]    </control>
[04:46:01.379]    <control if="!canReadPins" while="" timeout="0" info="">
[04:46:01.379]      // if-block "!canReadPins"
[04:46:01.379]        // =>  FALSE
[04:46:01.379]      // skip if-block "!canReadPins"
[04:46:01.379]    </control>
[04:46:01.379]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:46:01.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:46:01.380]        // =>  TRUE
[04:46:01.381]      <block atomic="false" info="">
[04:46:01.381]        WriteAP(0x00, 0x190008);
[04:46:01.382]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:46:01.382]        WriteAP(0xF0, 0x01);
[04:46:01.386]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:46:01.386]      </block>
[04:46:01.386]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:46:01.387]    </control>
[04:46:01.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:46:01.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:46:01.387]        // =>  FALSE
[04:46:01.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:46:01.387]    </control>
[04:46:01.387]    <block atomic="false" info="">
[04:46:01.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:46:01.391]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:46:01.391]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:46:01.391]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:46:01.392]      __ap = 0; //lets make sure we reset the access point selection
[04:46:01.392]        // -> [__ap <= 0x00000000]
[04:46:01.392]    </block>
[04:46:01.392]  </sequence>
[04:46:01.392]  
[04:46:01.417]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:46:01.417]  
[04:46:01.417]  <debugvars>
[04:46:01.417]    // Pre-defined
[04:46:01.417]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:46:01.418]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:46:01.418]    __dp=0x00000000
[04:46:01.418]    __ap=0x00000000
[04:46:01.418]    __traceout=0x00000000      (Trace Disabled)
[04:46:01.418]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:46:01.418]    __FlashAddr=0x00000000
[04:46:01.418]    __FlashLen=0x00000000
[04:46:01.418]    __FlashArg=0x00000000
[04:46:01.419]    __FlashOp=0x00000000
[04:46:01.419]    __Result=0x00000000
[04:46:01.419]  </debugvars>
[04:46:01.419]  
[04:46:01.419]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:46:01.419]    <block atomic="false" info="">
[04:46:01.419]      __var deviceID = 0;
[04:46:01.419]        // -> [deviceID <= 0x00000000]
[04:46:01.419]      __var version = 0;
[04:46:01.419]        // -> [version <= 0x00000000]
[04:46:01.420]      __var partNum = 0;
[04:46:01.420]        // -> [partNum <= 0x00000000]
[04:46:01.420]      __var manuf = 0;
[04:46:01.420]        // -> [manuf <= 0x00000000]
[04:46:01.420]      __var isMSPM0G1X0X_G3X0X = 0;
[04:46:01.420]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:46:01.420]      __var isProduction = 0;
[04:46:01.420]        // -> [isProduction <= 0x00000000]
[04:46:01.420]      __var continueId = 0;
[04:46:01.420]        // -> [continueId <= 0x00000000]
[04:46:01.421]      deviceID =   Read32(0x41C40004);
[04:46:01.426]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:46:01.426]        // -> [deviceID <= 0x2BB8802F]
[04:46:01.426]      version = deviceID >> 28;
[04:46:01.426]        // -> [version <= 0x00000002]
[04:46:01.426]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:46:01.426]        // -> [partNum <= 0x0000BB88]
[04:46:01.426]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:46:01.426]        // -> [manuf <= 0x00000017]
[04:46:01.426]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:46:01.426]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:46:01.427]      isProduction = (version > 0);
[04:46:01.427]        // -> [isProduction <= 0x00000001]
[04:46:01.427]    </block>
[04:46:01.427]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:46:01.427]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:46:01.427]        // =>  FALSE
[04:46:01.427]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:46:01.427]    </control>
[04:46:01.427]    <control if="continueId == 4" while="" timeout="0" info="">
[04:46:01.427]      // if-block "continueId == 4"
[04:46:01.428]        // =>  FALSE
[04:46:01.428]      // skip if-block "continueId == 4"
[04:46:01.428]    </control>
[04:46:01.428]    <control if="!isProduction" while="" timeout="0" info="">
[04:46:01.428]      // if-block "!isProduction"
[04:46:01.428]        // =>  FALSE
[04:46:01.429]      // skip if-block "!isProduction"
[04:46:01.429]    </control>
[04:46:01.429]  </sequence>
[04:46:01.429]  
[04:47:05.427]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:47:05.427]  
[04:47:05.435]  <debugvars>
[04:47:05.435]    // Pre-defined
[04:47:05.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:47:05.435]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:47:05.435]    __dp=0x00000000
[04:47:05.435]    __ap=0x00000000
[04:47:05.435]    __traceout=0x00000000      (Trace Disabled)
[04:47:05.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:47:05.436]    __FlashAddr=0x00000000
[04:47:05.436]    __FlashLen=0x00000000
[04:47:05.436]    __FlashArg=0x00000000
[04:47:05.436]    __FlashOp=0x00000000
[04:47:05.436]    __Result=0x00000000
[04:47:05.436]  </debugvars>
[04:47:05.436]  
[04:47:05.436]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:47:05.436]    <block atomic="false" info="">
[04:47:05.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:47:05.438]        // -> [isSWJ <= 0x00000001]
[04:47:05.438]      __var hasDormant = __protocol & 0x00020000;
[04:47:05.438]        // -> [hasDormant <= 0x00000000]
[04:47:05.438]      __var protType   = __protocol & 0x0000FFFF;
[04:47:05.438]        // -> [protType <= 0x00000002]
[04:47:05.438]    </block>
[04:47:05.438]    <control if="protType == 1" while="" timeout="0" info="">
[04:47:05.438]      // if-block "protType == 1"
[04:47:05.438]        // =>  FALSE
[04:47:05.438]      // skip if-block "protType == 1"
[04:47:05.438]    </control>
[04:47:05.439]    <control if="protType == 2" while="" timeout="0" info="">
[04:47:05.439]      // if-block "protType == 2"
[04:47:05.439]        // =>  TRUE
[04:47:05.439]      <control if="isSWJ" while="" timeout="0" info="">
[04:47:05.439]        // if-block "isSWJ"
[04:47:05.439]          // =>  TRUE
[04:47:05.439]        <control if="hasDormant" while="" timeout="0" info="">
[04:47:05.439]          // if-block "hasDormant"
[04:47:05.439]            // =>  FALSE
[04:47:05.439]          // skip if-block "hasDormant"
[04:47:05.440]        </control>
[04:47:05.440]        <control if="!hasDormant" while="" timeout="0" info="">
[04:47:05.440]          // if-block "!hasDormant"
[04:47:05.440]            // =>  TRUE
[04:47:05.440]          <block atomic="false" info="">
[04:47:05.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:47:05.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:47:05.442]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:47:05.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:47:05.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:47:05.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:47:05.445]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:47:05.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:47:05.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:47:05.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:47:05.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:47:05.449]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:47:05.449]          </block>
[04:47:05.449]          // end if-block "!hasDormant"
[04:47:05.449]        </control>
[04:47:05.449]        // end if-block "isSWJ"
[04:47:05.449]      </control>
[04:47:05.450]      <control if="!isSWJ" while="" timeout="0" info="">
[04:47:05.450]        // if-block "!isSWJ"
[04:47:05.450]          // =>  FALSE
[04:47:05.450]        // skip if-block "!isSWJ"
[04:47:05.450]      </control>
[04:47:05.450]      <block atomic="false" info="">
[04:47:05.452]        ReadDP(0x0);
[04:47:05.453]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:47:05.453]      </block>
[04:47:05.453]      // end if-block "protType == 2"
[04:47:05.453]    </control>
[04:47:05.453]  </sequence>
[04:47:05.453]  
[04:47:05.458]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:47:05.458]  
[04:47:05.458]  <debugvars>
[04:47:05.458]    // Pre-defined
[04:47:05.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:47:05.458]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:47:05.458]    __dp=0x00000000
[04:47:05.458]    __ap=0x00000000
[04:47:05.458]    __traceout=0x00000000      (Trace Disabled)
[04:47:05.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:47:05.458]    __FlashAddr=0x00000000
[04:47:05.459]    __FlashLen=0x00000000
[04:47:05.459]    __FlashArg=0x00000000
[04:47:05.459]    __FlashOp=0x00000000
[04:47:05.459]    __Result=0x00000000
[04:47:05.459]  </debugvars>
[04:47:05.460]  
[04:47:05.460]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:47:05.460]    <block atomic="false" info="">
[04:47:05.460]      __var SW_DP_ABORT       = 0x0;
[04:47:05.460]        // -> [SW_DP_ABORT <= 0x00000000]
[04:47:05.460]      __var DP_CTRL_STAT      = 0x4;
[04:47:05.460]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:47:05.460]      __var DP_SELECT         = 0x8;
[04:47:05.460]        // -> [DP_SELECT <= 0x00000008]
[04:47:05.460]      __var powered_down      = 0;
[04:47:05.460]        // -> [powered_down <= 0x00000000]
[04:47:05.460]      WriteDP(DP_SELECT, 0x00000000);
[04:47:05.462]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:47:05.463]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:47:05.465]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:47:05.465]        // -> [powered_down <= 0x00000001]
[04:47:05.465]    </block>
[04:47:05.465]    <control if="powered_down" while="" timeout="0" info="">
[04:47:05.465]      // if-block "powered_down"
[04:47:05.466]        // =>  TRUE
[04:47:05.466]      <block atomic="false" info="">
[04:47:05.466]        Message(0, "Debug/System power-up request sent");
[04:47:05.466]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:47:05.468]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:47:05.468]      </block>
[04:47:05.468]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:47:05.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:47:05.470]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:47:05.470]        // while-condition  =>  FALSE
[04:47:05.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:47:05.471]      </control>
[04:47:05.471]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:47:05.471]        // if-block "(__protocol & 0xFFFF) == 1"
[04:47:05.471]          // =>  FALSE
[04:47:05.471]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:47:05.471]      </control>
[04:47:05.471]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:47:05.471]        // if-block "(__protocol & 0xFFFF) == 2"
[04:47:05.472]          // =>  TRUE
[04:47:05.472]        <block atomic="false" info="">
[04:47:05.472]          Message(0, "executing SWD power up");
[04:47:05.472]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:47:05.474]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:47:05.474]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:47:05.476]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:47:05.476]        </block>
[04:47:05.476]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:47:05.476]      </control>
[04:47:05.477]      // end if-block "powered_down"
[04:47:05.477]    </control>
[04:47:05.477]    <block atomic="false" info="">
[04:47:05.477]      __var DEBUG_PORT_VAL    = 0;
[04:47:05.477]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:47:05.477]      __var ACCESS_POINT_VAL  = 0;
[04:47:05.477]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:47:05.478]      __ap = 1; 
[04:47:05.478]        // -> [__ap <= 0x00000001]
[04:47:05.478]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:47:05.482]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:47:05.482]      __ap = 4;
[04:47:05.482]        // -> [__ap <= 0x00000004]
[04:47:05.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:47:05.485]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:47:05.485]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:47:05.486]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:47:05.486]    </block>
[04:47:05.486]    <block atomic="false" info="">
[04:47:05.486]      __var nReset = 0x80;
[04:47:05.486]        // -> [nReset <= 0x00000080]
[04:47:05.486]      __var canReadPins = 0;
[04:47:05.486]        // -> [canReadPins <= 0x00000000]
[04:47:05.487]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:47:05.488]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:47:05.488]        // -> [canReadPins <= 0x00000001]
[04:47:05.488]    </block>
[04:47:05.488]    <control if="" while="1" timeout="200" info="">
[04:47:05.489]      // while "1"  (timeout="200")
[04:47:05.489]      // while-condition  =>  TRUE
[04:47:05.489]      // while "1"  (timeout="200")
[04:47:05.489]      // while-condition  =>  TRUE
[04:47:05.489]      // while "1"  (timeout="200")
[04:47:05.489]      // while-condition  =>  TRUE
[04:47:05.489]      // while "1"  (timeout="200")
[04:47:05.489]      // while-condition  =>  TRUE
[04:47:05.489]      // while "1"  (timeout="200")
[04:47:05.490]      // while-condition  =>  TRUE
[04:47:05.490]      // while "1"  (timeout="200")
[04:47:05.490]      // while-condition  =>  TRUE
[04:47:05.490]      // while "1"  (timeout="200")
[04:47:05.490]      // while-condition  =>  TRUE
[04:47:05.490]      // while "1"  (timeout="200")
[04:47:05.490]      // while-condition  =>  TRUE
[04:47:05.490]      // while "1"  (timeout="200")
[04:47:05.490]      // while-condition  =>  TRUE
[04:47:05.491]      // while "1"  (timeout="200")
[04:47:05.491]      // while-condition  =>  TRUE
[04:47:05.491]      // while "1"  (timeout="200")
[04:47:05.491]      // while-condition  =>  TRUE
[04:47:05.491]      // while "1"  (timeout="200")
[04:47:05.491]      // while-condition  =>  TRUE
[04:47:05.491]      // while "1"  (timeout="200")
[04:47:05.491]      // while-condition  =>  TRUE
[04:47:05.491]      // while "1"  (timeout="200")
[04:47:05.491]      // while-condition  =>  TRUE
[04:47:05.493]      // while "1"  (timeout="200")
[04:47:05.493]      // while-condition  =>  TRUE
[04:47:05.493]      // while "1"  (timeout="200")
[04:47:05.493]      // while-condition  =>  TRUE
[04:47:05.493]      // while "1"  (timeout="200")
[04:47:05.493]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.494]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.494]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.494]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.494]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.494]      // while-condition  =>  TRUE
[04:47:05.494]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.495]      // while-condition  =>  TRUE
[04:47:05.495]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.496]      // while-condition  =>  TRUE
[04:47:05.496]      // while "1"  (timeout="200")
[04:47:05.498]      // while-condition  =>  TRUE
[04:47:05.498]      // while "1"  (timeout="200")
[04:47:05.498]      // while-condition  =>  TRUE
[04:47:05.498]      // while "1"  (timeout="200")
[04:47:05.498]      // while-condition  =>  TRUE
[04:47:05.498]      // while "1"  (timeout="200")
[04:47:05.498]      // while-condition  =>  TRUE
[04:47:05.498]      // while "1"  (timeout="200")
[04:47:05.498]      // while-condition  =>  TRUE
[04:47:05.498]      // while "1"  (timeout="200")
[04:47:05.499]      // while-condition  =>  TRUE
[04:47:05.499]      // while "1"  (timeout="200")
[04:47:05.499]      // while-condition  =>  TRUE
[04:47:05.499]      // while "1"  (timeout="200")
[04:47:05.499]      // while-condition  =>  TRUE
[04:47:05.499]      // while "1"  (timeout="200")
[04:47:05.500]      // while-condition  =>  TRUE
[04:47:05.500]      // while "1"  (timeout="200")
[04:47:05.500]      // while-condition  =>  TRUE
[04:47:05.500]      // while "1"  (timeout="200")
[04:47:05.500]      // while-condition  =>  TRUE
[04:47:05.500]      // while "1"  (timeout="200")
[04:47:05.500]      // while-condition  =>  TRUE
[04:47:05.501]      // while "1"  (timeout="200")
[04:47:05.501]      // while-condition  =>  TRUE
[04:47:05.501]      // while "1"  (timeout="200")
[04:47:05.501]      // while-condition  =>  TRUE
[04:47:05.501]      // while "1"  (timeout="200")
[04:47:05.501]      // while-condition  =>  TRUE
[04:47:05.501]      // while "1"  (timeout="200")
[04:47:05.501]      // while-condition  =>  TRUE
[04:47:05.501]      // while "1"  (timeout="200")
[04:47:05.501]      // while-condition  =>  TRUE
[04:47:05.502]      // while "1"  (timeout="200")
[04:47:05.502]      // while  =>  TIMEOUT
[04:47:05.502]      // end while "1"
[04:47:05.502]    </control>
[04:47:05.502]    <control if="canReadPins" while="" timeout="0" info="">
[04:47:05.502]      // if-block "canReadPins"
[04:47:05.502]        // =>  TRUE
[04:47:05.502]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:47:05.502]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:47:05.504]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:47:05.504]        // while-condition  =>  FALSE
[04:47:05.504]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:47:05.504]      </control>
[04:47:05.504]      // end if-block "canReadPins"
[04:47:05.504]    </control>
[04:47:05.504]    <control if="!canReadPins" while="" timeout="0" info="">
[04:47:05.505]      // if-block "!canReadPins"
[04:47:05.505]        // =>  FALSE
[04:47:05.505]      // skip if-block "!canReadPins"
[04:47:05.505]    </control>
[04:47:05.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:47:05.505]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:47:05.505]        // =>  TRUE
[04:47:05.505]      <block atomic="false" info="">
[04:47:05.506]        WriteAP(0x00, 0x190008);
[04:47:05.509]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:47:05.509]        WriteAP(0xF0, 0x01);
[04:47:05.513]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:47:05.513]      </block>
[04:47:05.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:47:05.513]    </control>
[04:47:05.514]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:47:05.514]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:47:05.514]        // =>  FALSE
[04:47:05.514]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:47:05.514]    </control>
[04:47:05.514]    <block atomic="false" info="">
[04:47:05.514]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:47:05.517]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:47:05.517]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:47:05.518]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:47:05.518]      __ap = 0; //lets make sure we reset the access point selection
[04:47:05.518]        // -> [__ap <= 0x00000000]
[04:47:05.518]    </block>
[04:47:05.518]  </sequence>
[04:47:05.519]  
[04:47:05.544]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:47:05.544]  
[04:47:05.545]  <debugvars>
[04:47:05.545]    // Pre-defined
[04:47:05.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:47:05.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:47:05.545]    __dp=0x00000000
[04:47:05.545]    __ap=0x00000000
[04:47:05.545]    __traceout=0x00000000      (Trace Disabled)
[04:47:05.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:47:05.545]    __FlashAddr=0x00000000
[04:47:05.545]    __FlashLen=0x00000000
[04:47:05.545]    __FlashArg=0x00000000
[04:47:05.545]    __FlashOp=0x00000000
[04:47:05.546]    __Result=0x00000000
[04:47:05.546]  </debugvars>
[04:47:05.546]  
[04:47:05.546]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:47:05.546]    <block atomic="false" info="">
[04:47:05.546]      __var deviceID = 0;
[04:47:05.546]        // -> [deviceID <= 0x00000000]
[04:47:05.546]      __var version = 0;
[04:47:05.546]        // -> [version <= 0x00000000]
[04:47:05.546]      __var partNum = 0;
[04:47:05.547]        // -> [partNum <= 0x00000000]
[04:47:05.547]      __var manuf = 0;
[04:47:05.547]        // -> [manuf <= 0x00000000]
[04:47:05.547]      __var isMSPM0G1X0X_G3X0X = 0;
[04:47:05.547]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:47:05.547]      __var isProduction = 0;
[04:47:05.547]        // -> [isProduction <= 0x00000000]
[04:47:05.547]      __var continueId = 0;
[04:47:05.547]        // -> [continueId <= 0x00000000]
[04:47:05.548]      deviceID =   Read32(0x41C40004);
[04:47:05.552]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:47:05.552]        // -> [deviceID <= 0x2BB8802F]
[04:47:05.552]      version = deviceID >> 28;
[04:47:05.553]        // -> [version <= 0x00000002]
[04:47:05.553]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:47:05.553]        // -> [partNum <= 0x0000BB88]
[04:47:05.553]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:47:05.553]        // -> [manuf <= 0x00000017]
[04:47:05.553]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:47:05.553]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:47:05.553]      isProduction = (version > 0);
[04:47:05.553]        // -> [isProduction <= 0x00000001]
[04:47:05.553]    </block>
[04:47:05.553]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:47:05.553]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:47:05.554]        // =>  FALSE
[04:47:05.554]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:47:05.554]    </control>
[04:47:05.554]    <control if="continueId == 4" while="" timeout="0" info="">
[04:47:05.554]      // if-block "continueId == 4"
[04:47:05.554]        // =>  FALSE
[04:47:05.554]      // skip if-block "continueId == 4"
[04:47:05.554]    </control>
[04:47:05.554]    <control if="!isProduction" while="" timeout="0" info="">
[04:47:05.554]      // if-block "!isProduction"
[04:47:05.554]        // =>  FALSE
[04:47:05.555]      // skip if-block "!isProduction"
[04:47:05.555]    </control>
[04:47:05.555]  </sequence>
[04:47:05.555]  
[04:50:53.109]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:50:53.109]  
[04:50:53.117]  <debugvars>
[04:50:53.117]    // Pre-defined
[04:50:53.117]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:50:53.117]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:50:53.117]    __dp=0x00000000
[04:50:53.117]    __ap=0x00000000
[04:50:53.117]    __traceout=0x00000000      (Trace Disabled)
[04:50:53.117]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:50:53.119]    __FlashAddr=0x00000000
[04:50:53.119]    __FlashLen=0x00000000
[04:50:53.119]    __FlashArg=0x00000000
[04:50:53.119]    __FlashOp=0x00000000
[04:50:53.119]    __Result=0x00000000
[04:50:53.119]  </debugvars>
[04:50:53.120]  
[04:50:53.120]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:50:53.120]    <block atomic="false" info="">
[04:50:53.120]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:50:53.120]        // -> [isSWJ <= 0x00000001]
[04:50:53.120]      __var hasDormant = __protocol & 0x00020000;
[04:50:53.120]        // -> [hasDormant <= 0x00000000]
[04:50:53.120]      __var protType   = __protocol & 0x0000FFFF;
[04:50:53.120]        // -> [protType <= 0x00000002]
[04:50:53.120]    </block>
[04:50:53.121]    <control if="protType == 1" while="" timeout="0" info="">
[04:50:53.121]      // if-block "protType == 1"
[04:50:53.121]        // =>  FALSE
[04:50:53.121]      // skip if-block "protType == 1"
[04:50:53.121]    </control>
[04:50:53.121]    <control if="protType == 2" while="" timeout="0" info="">
[04:50:53.121]      // if-block "protType == 2"
[04:50:53.121]        // =>  TRUE
[04:50:53.121]      <control if="isSWJ" while="" timeout="0" info="">
[04:50:53.122]        // if-block "isSWJ"
[04:50:53.122]          // =>  TRUE
[04:50:53.122]        <control if="hasDormant" while="" timeout="0" info="">
[04:50:53.122]          // if-block "hasDormant"
[04:50:53.122]            // =>  FALSE
[04:50:53.122]          // skip if-block "hasDormant"
[04:50:53.122]        </control>
[04:50:53.122]        <control if="!hasDormant" while="" timeout="0" info="">
[04:50:53.122]          // if-block "!hasDormant"
[04:50:53.122]            // =>  TRUE
[04:50:53.122]          <block atomic="false" info="">
[04:50:53.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:50:53.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:50:53.124]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:50:53.126]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:50:53.126]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:50:53.128]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:50:53.128]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:50:53.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:50:53.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:50:53.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:50:53.132]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:50:53.134]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:50:53.134]          </block>
[04:50:53.134]          // end if-block "!hasDormant"
[04:50:53.134]        </control>
[04:50:53.134]        // end if-block "isSWJ"
[04:50:53.134]      </control>
[04:50:53.134]      <control if="!isSWJ" while="" timeout="0" info="">
[04:50:53.134]        // if-block "!isSWJ"
[04:50:53.134]          // =>  FALSE
[04:50:53.134]        // skip if-block "!isSWJ"
[04:50:53.135]      </control>
[04:50:53.135]      <block atomic="false" info="">
[04:50:53.135]        ReadDP(0x0);
[04:50:53.141]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:50:53.141]      </block>
[04:50:53.141]      // end if-block "protType == 2"
[04:50:53.141]    </control>
[04:50:53.141]  </sequence>
[04:50:53.141]  
[04:50:53.145]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:50:53.145]  
[04:50:53.145]  <debugvars>
[04:50:53.145]    // Pre-defined
[04:50:53.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:50:53.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:50:53.146]    __dp=0x00000000
[04:50:53.146]    __ap=0x00000000
[04:50:53.146]    __traceout=0x00000000      (Trace Disabled)
[04:50:53.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:50:53.146]    __FlashAddr=0x00000000
[04:50:53.146]    __FlashLen=0x00000000
[04:50:53.146]    __FlashArg=0x00000000
[04:50:53.146]    __FlashOp=0x00000000
[04:50:53.146]    __Result=0x00000000
[04:50:53.146]  </debugvars>
[04:50:53.146]  
[04:50:53.147]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:50:53.147]    <block atomic="false" info="">
[04:50:53.147]      __var SW_DP_ABORT       = 0x0;
[04:50:53.147]        // -> [SW_DP_ABORT <= 0x00000000]
[04:50:53.147]      __var DP_CTRL_STAT      = 0x4;
[04:50:53.147]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:50:53.147]      __var DP_SELECT         = 0x8;
[04:50:53.147]        // -> [DP_SELECT <= 0x00000008]
[04:50:53.147]      __var powered_down      = 0;
[04:50:53.147]        // -> [powered_down <= 0x00000000]
[04:50:53.148]      WriteDP(DP_SELECT, 0x00000000);
[04:50:53.149]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:50:53.149]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:50:53.151]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:50:53.151]        // -> [powered_down <= 0x00000001]
[04:50:53.151]    </block>
[04:50:53.151]    <control if="powered_down" while="" timeout="0" info="">
[04:50:53.151]      // if-block "powered_down"
[04:50:53.152]        // =>  TRUE
[04:50:53.152]      <block atomic="false" info="">
[04:50:53.152]        Message(0, "Debug/System power-up request sent");
[04:50:53.152]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:50:53.154]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:50:53.154]      </block>
[04:50:53.154]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:50:53.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:50:53.156]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:50:53.156]        // while-condition  =>  FALSE
[04:50:53.156]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:50:53.156]      </control>
[04:50:53.156]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:50:53.156]        // if-block "(__protocol & 0xFFFF) == 1"
[04:50:53.156]          // =>  FALSE
[04:50:53.156]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:50:53.156]      </control>
[04:50:53.157]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:50:53.157]        // if-block "(__protocol & 0xFFFF) == 2"
[04:50:53.157]          // =>  TRUE
[04:50:53.157]        <block atomic="false" info="">
[04:50:53.157]          Message(0, "executing SWD power up");
[04:50:53.157]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:50:53.159]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:50:53.159]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:50:53.161]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:50:53.161]        </block>
[04:50:53.161]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:50:53.161]      </control>
[04:50:53.161]      // end if-block "powered_down"
[04:50:53.162]    </control>
[04:50:53.162]    <block atomic="false" info="">
[04:50:53.162]      __var DEBUG_PORT_VAL    = 0;
[04:50:53.162]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:50:53.162]      __var ACCESS_POINT_VAL  = 0;
[04:50:53.162]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:50:53.162]      __ap = 1; 
[04:50:53.163]        // -> [__ap <= 0x00000001]
[04:50:53.163]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:50:53.168]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:50:53.169]      __ap = 4;
[04:50:53.169]        // -> [__ap <= 0x00000004]
[04:50:53.169]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:50:53.173]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:50:53.174]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:50:53.174]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:50:53.175]    </block>
[04:50:53.175]    <block atomic="false" info="">
[04:50:53.175]      __var nReset = 0x80;
[04:50:53.175]        // -> [nReset <= 0x00000080]
[04:50:53.175]      __var canReadPins = 0;
[04:50:53.175]        // -> [canReadPins <= 0x00000000]
[04:50:53.175]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:50:53.177]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:50:53.178]        // -> [canReadPins <= 0x00000001]
[04:50:53.178]    </block>
[04:50:53.178]    <control if="" while="1" timeout="200" info="">
[04:50:53.178]      // while "1"  (timeout="200")
[04:50:53.178]      // while-condition  =>  TRUE
[04:50:53.178]      // while "1"  (timeout="200")
[04:50:53.178]      // while-condition  =>  TRUE
[04:50:53.178]      // while "1"  (timeout="200")
[04:50:53.179]      // while-condition  =>  TRUE
[04:50:53.179]      // while "1"  (timeout="200")
[04:50:53.179]      // while-condition  =>  TRUE
[04:50:53.179]      // while "1"  (timeout="200")
[04:50:53.179]      // while-condition  =>  TRUE
[04:50:53.179]      // while "1"  (timeout="200")
[04:50:53.179]      // while-condition  =>  TRUE
[04:50:53.179]      // while "1"  (timeout="200")
[04:50:53.179]      // while-condition  =>  TRUE
[04:50:53.179]      // while "1"  (timeout="200")
[04:50:53.180]      // while-condition  =>  TRUE
[04:50:53.180]      // while "1"  (timeout="200")
[04:50:53.180]      // while-condition  =>  TRUE
[04:50:53.180]      // while "1"  (timeout="200")
[04:50:53.180]      // while-condition  =>  TRUE
[04:50:53.181]      // while "1"  (timeout="200")
[04:50:53.181]      // while-condition  =>  TRUE
[04:50:53.181]      // while "1"  (timeout="200")
[04:50:53.181]      // while-condition  =>  TRUE
[04:50:53.181]      // while "1"  (timeout="200")
[04:50:53.181]      // while-condition  =>  TRUE
[04:50:53.181]      // while "1"  (timeout="200")
[04:50:53.181]      // while-condition  =>  TRUE
[04:50:53.181]      // while "1"  (timeout="200")
[04:50:53.182]      // while-condition  =>  TRUE
[04:50:53.182]      // while "1"  (timeout="200")
[04:50:53.182]      // while-condition  =>  TRUE
[04:50:53.182]      // while "1"  (timeout="200")
[04:50:53.182]      // while-condition  =>  TRUE
[04:50:53.182]      // while "1"  (timeout="200")
[04:50:53.182]      // while-condition  =>  TRUE
[04:50:53.182]      // while "1"  (timeout="200")
[04:50:53.182]      // while-condition  =>  TRUE
[04:50:53.182]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.183]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.183]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.183]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.183]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.183]      // while "1"  (timeout="200")
[04:50:53.183]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.184]      // while-condition  =>  TRUE
[04:50:53.184]      // while "1"  (timeout="200")
[04:50:53.186]      // while-condition  =>  TRUE
[04:50:53.186]      // while "1"  (timeout="200")
[04:50:53.186]      // while-condition  =>  TRUE
[04:50:53.186]      // while "1"  (timeout="200")
[04:50:53.186]      // while-condition  =>  TRUE
[04:50:53.186]      // while "1"  (timeout="200")
[04:50:53.186]      // while-condition  =>  TRUE
[04:50:53.186]      // while "1"  (timeout="200")
[04:50:53.186]      // while-condition  =>  TRUE
[04:50:53.186]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.187]      // while-condition  =>  TRUE
[04:50:53.187]      // while "1"  (timeout="200")
[04:50:53.188]      // while-condition  =>  TRUE
[04:50:53.188]      // while "1"  (timeout="200")
[04:50:53.188]      // while-condition  =>  TRUE
[04:50:53.188]      // while "1"  (timeout="200")
[04:50:53.188]      // while-condition  =>  TRUE
[04:50:53.188]      // while "1"  (timeout="200")
[04:50:53.188]      // while-condition  =>  TRUE
[04:50:53.188]      // while "1"  (timeout="200")
[04:50:53.188]      // while-condition  =>  TRUE
[04:50:53.188]      // while "1"  (timeout="200")
[04:50:53.189]      // while-condition  =>  TRUE
[04:50:53.189]      // while "1"  (timeout="200")
[04:50:53.189]      // while  =>  TIMEOUT
[04:50:53.189]      // end while "1"
[04:50:53.189]    </control>
[04:50:53.189]    <control if="canReadPins" while="" timeout="0" info="">
[04:50:53.189]      // if-block "canReadPins"
[04:50:53.189]        // =>  TRUE
[04:50:53.189]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:50:53.189]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:50:53.192]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:50:53.192]        // while-condition  =>  FALSE
[04:50:53.192]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:50:53.192]      </control>
[04:50:53.192]      // end if-block "canReadPins"
[04:50:53.192]    </control>
[04:50:53.192]    <control if="!canReadPins" while="" timeout="0" info="">
[04:50:53.192]      // if-block "!canReadPins"
[04:50:53.193]        // =>  FALSE
[04:50:53.193]      // skip if-block "!canReadPins"
[04:50:53.193]    </control>
[04:50:53.193]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:50:53.193]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:50:53.193]        // =>  TRUE
[04:50:53.193]      <block atomic="false" info="">
[04:50:53.193]        WriteAP(0x00, 0x190008);
[04:50:53.195]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:50:53.195]        WriteAP(0xF0, 0x01);
[04:50:53.200]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:50:53.200]      </block>
[04:50:53.200]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:50:53.200]    </control>
[04:50:53.200]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:50:53.200]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:50:53.200]        // =>  FALSE
[04:50:53.202]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:50:53.202]    </control>
[04:50:53.202]    <block atomic="false" info="">
[04:50:53.202]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:50:53.205]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:50:53.206]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:50:53.206]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:50:53.206]      __ap = 0; //lets make sure we reset the access point selection
[04:50:53.206]        // -> [__ap <= 0x00000000]
[04:50:53.206]    </block>
[04:50:53.206]  </sequence>
[04:50:53.206]  
[04:50:53.231]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:50:53.231]  
[04:50:53.231]  <debugvars>
[04:50:53.231]    // Pre-defined
[04:50:53.232]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:50:53.232]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:50:53.232]    __dp=0x00000000
[04:50:53.232]    __ap=0x00000000
[04:50:53.232]    __traceout=0x00000000      (Trace Disabled)
[04:50:53.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:50:53.233]    __FlashAddr=0x00000000
[04:50:53.233]    __FlashLen=0x00000000
[04:50:53.233]    __FlashArg=0x00000000
[04:50:53.233]    __FlashOp=0x00000000
[04:50:53.233]    __Result=0x00000000
[04:50:53.233]  </debugvars>
[04:50:53.233]  
[04:50:53.233]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:50:53.233]    <block atomic="false" info="">
[04:50:53.233]      __var deviceID = 0;
[04:50:53.234]        // -> [deviceID <= 0x00000000]
[04:50:53.234]      __var version = 0;
[04:50:53.234]        // -> [version <= 0x00000000]
[04:50:53.234]      __var partNum = 0;
[04:50:53.234]        // -> [partNum <= 0x00000000]
[04:50:53.234]      __var manuf = 0;
[04:50:53.235]        // -> [manuf <= 0x00000000]
[04:50:53.235]      __var isMSPM0G1X0X_G3X0X = 0;
[04:50:53.235]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:50:53.235]      __var isProduction = 0;
[04:50:53.235]        // -> [isProduction <= 0x00000000]
[04:50:53.235]      __var continueId = 0;
[04:50:53.235]        // -> [continueId <= 0x00000000]
[04:50:53.235]      deviceID =   Read32(0x41C40004);
[04:50:53.247]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:50:53.247]        // -> [deviceID <= 0x2BB8802F]
[04:50:53.247]      version = deviceID >> 28;
[04:50:53.247]        // -> [version <= 0x00000002]
[04:50:53.247]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:50:53.247]        // -> [partNum <= 0x0000BB88]
[04:50:53.247]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:50:53.247]        // -> [manuf <= 0x00000017]
[04:50:53.248]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:50:53.248]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:50:53.248]      isProduction = (version > 0);
[04:50:53.248]        // -> [isProduction <= 0x00000001]
[04:50:53.248]    </block>
[04:50:53.248]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:50:53.248]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:50:53.248]        // =>  FALSE
[04:50:53.248]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:50:53.248]    </control>
[04:50:53.248]    <control if="continueId == 4" while="" timeout="0" info="">
[04:50:53.249]      // if-block "continueId == 4"
[04:50:53.249]        // =>  FALSE
[04:50:53.249]      // skip if-block "continueId == 4"
[04:50:53.249]    </control>
[04:50:53.249]    <control if="!isProduction" while="" timeout="0" info="">
[04:50:53.249]      // if-block "!isProduction"
[04:50:53.249]        // =>  FALSE
[04:50:53.249]      // skip if-block "!isProduction"
[04:50:53.249]    </control>
[04:50:53.251]  </sequence>
[04:50:53.251]  
[04:54:02.932]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:54:02.932]  
[04:54:02.932]  <debugvars>
[04:54:02.933]    // Pre-defined
[04:54:02.933]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:02.933]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:02.933]    __dp=0x00000000
[04:54:02.934]    __ap=0x00000000
[04:54:02.934]    __traceout=0x00000000      (Trace Disabled)
[04:54:02.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:02.935]    __FlashAddr=0x00000000
[04:54:02.935]    __FlashLen=0x00000000
[04:54:02.935]    __FlashArg=0x00000000
[04:54:02.935]    __FlashOp=0x00000000
[04:54:02.935]    __Result=0x00000000
[04:54:02.935]  </debugvars>
[04:54:02.935]  
[04:54:02.935]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:54:02.936]    <block atomic="false" info="">
[04:54:02.936]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:54:02.936]        // -> [isSWJ <= 0x00000001]
[04:54:02.936]      __var hasDormant = __protocol & 0x00020000;
[04:54:02.936]        // -> [hasDormant <= 0x00000000]
[04:54:02.936]      __var protType   = __protocol & 0x0000FFFF;
[04:54:02.936]        // -> [protType <= 0x00000002]
[04:54:02.936]    </block>
[04:54:02.936]    <control if="protType == 1" while="" timeout="0" info="">
[04:54:02.937]      // if-block "protType == 1"
[04:54:02.937]        // =>  FALSE
[04:54:02.937]      // skip if-block "protType == 1"
[04:54:02.937]    </control>
[04:54:02.937]    <control if="protType == 2" while="" timeout="0" info="">
[04:54:02.937]      // if-block "protType == 2"
[04:54:02.937]        // =>  TRUE
[04:54:02.937]      <control if="isSWJ" while="" timeout="0" info="">
[04:54:02.938]        // if-block "isSWJ"
[04:54:02.938]          // =>  TRUE
[04:54:02.938]        <control if="hasDormant" while="" timeout="0" info="">
[04:54:02.938]          // if-block "hasDormant"
[04:54:02.938]            // =>  FALSE
[04:54:02.938]          // skip if-block "hasDormant"
[04:54:02.938]        </control>
[04:54:02.938]        <control if="!hasDormant" while="" timeout="0" info="">
[04:54:02.938]          // if-block "!hasDormant"
[04:54:02.939]            // =>  TRUE
[04:54:02.939]          <block atomic="false" info="">
[04:54:02.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:54:02.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:02.940]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:54:02.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:54:02.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:54:02.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:02.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:54:02.948]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:54:02.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:54:02.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:02.951]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:54:02.952]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:54:02.953]          </block>
[04:54:02.953]          // end if-block "!hasDormant"
[04:54:02.953]        </control>
[04:54:02.953]        // end if-block "isSWJ"
[04:54:02.953]      </control>
[04:54:02.953]      <control if="!isSWJ" while="" timeout="0" info="">
[04:54:02.953]        // if-block "!isSWJ"
[04:54:02.953]          // =>  FALSE
[04:54:02.953]        // skip if-block "!isSWJ"
[04:54:02.953]      </control>
[04:54:02.954]      <block atomic="false" info="">
[04:54:02.954]        ReadDP(0x0);
[04:54:02.955]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:54:02.956]      </block>
[04:54:02.956]      // end if-block "protType == 2"
[04:54:02.956]    </control>
[04:54:02.956]  </sequence>
[04:54:02.956]  
[04:54:02.959]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:54:02.959]  
[04:54:02.959]  <debugvars>
[04:54:02.959]    // Pre-defined
[04:54:02.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:02.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:02.959]    __dp=0x00000000
[04:54:02.959]    __ap=0x00000000
[04:54:02.959]    __traceout=0x00000000      (Trace Disabled)
[04:54:02.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:02.960]    __FlashAddr=0x00000000
[04:54:02.960]    __FlashLen=0x00000000
[04:54:02.960]    __FlashArg=0x00000000
[04:54:02.960]    __FlashOp=0x00000000
[04:54:02.960]    __Result=0x00000000
[04:54:02.960]  </debugvars>
[04:54:02.960]  
[04:54:02.960]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:54:02.960]    <block atomic="false" info="">
[04:54:02.961]      __var SW_DP_ABORT       = 0x0;
[04:54:02.961]        // -> [SW_DP_ABORT <= 0x00000000]
[04:54:02.961]      __var DP_CTRL_STAT      = 0x4;
[04:54:02.961]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:54:02.961]      __var DP_SELECT         = 0x8;
[04:54:02.961]        // -> [DP_SELECT <= 0x00000008]
[04:54:02.961]      __var powered_down      = 0;
[04:54:02.961]        // -> [powered_down <= 0x00000000]
[04:54:02.961]      WriteDP(DP_SELECT, 0x00000000);
[04:54:02.963]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:54:02.964]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:54:02.965]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:54:02.965]        // -> [powered_down <= 0x00000001]
[04:54:02.965]    </block>
[04:54:02.965]    <control if="powered_down" while="" timeout="0" info="">
[04:54:02.965]      // if-block "powered_down"
[04:54:02.965]        // =>  TRUE
[04:54:02.965]      <block atomic="false" info="">
[04:54:02.967]        Message(0, "Debug/System power-up request sent");
[04:54:02.967]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:54:02.968]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:54:02.968]      </block>
[04:54:02.969]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:54:02.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:54:02.971]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:54:02.971]        // while-condition  =>  FALSE
[04:54:02.971]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:54:02.971]      </control>
[04:54:02.971]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:54:02.971]        // if-block "(__protocol & 0xFFFF) == 1"
[04:54:02.971]          // =>  FALSE
[04:54:02.971]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:54:02.971]      </control>
[04:54:02.972]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:54:02.972]        // if-block "(__protocol & 0xFFFF) == 2"
[04:54:02.972]          // =>  TRUE
[04:54:02.972]        <block atomic="false" info="">
[04:54:02.972]          Message(0, "executing SWD power up");
[04:54:02.972]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:54:02.974]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:54:02.974]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:54:02.976]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:54:02.976]        </block>
[04:54:02.976]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:54:02.976]      </control>
[04:54:02.976]      // end if-block "powered_down"
[04:54:02.976]    </control>
[04:54:02.976]    <block atomic="false" info="">
[04:54:02.976]      __var DEBUG_PORT_VAL    = 0;
[04:54:02.976]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:54:02.976]      __var ACCESS_POINT_VAL  = 0;
[04:54:02.976]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:54:02.977]      __ap = 1; 
[04:54:02.977]        // -> [__ap <= 0x00000001]
[04:54:02.977]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:54:02.980]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:54:02.980]      __ap = 4;
[04:54:02.980]        // -> [__ap <= 0x00000004]
[04:54:02.980]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:02.984]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:54:02.984]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:54:02.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:02.984]    </block>
[04:54:02.985]    <block atomic="false" info="">
[04:54:02.985]      __var nReset = 0x80;
[04:54:02.985]        // -> [nReset <= 0x00000080]
[04:54:02.985]      __var canReadPins = 0;
[04:54:02.985]        // -> [canReadPins <= 0x00000000]
[04:54:02.985]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:54:02.987]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:54:02.987]        // -> [canReadPins <= 0x00000001]
[04:54:02.987]    </block>
[04:54:02.988]    <control if="" while="1" timeout="200" info="">
[04:54:02.988]      // while "1"  (timeout="200")
[04:54:02.988]      // while-condition  =>  TRUE
[04:54:02.988]      // while "1"  (timeout="200")
[04:54:02.988]      // while-condition  =>  TRUE
[04:54:02.988]      // while "1"  (timeout="200")
[04:54:02.988]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.990]      // while "1"  (timeout="200")
[04:54:02.990]      // while-condition  =>  TRUE
[04:54:02.991]      // while "1"  (timeout="200")
[04:54:02.991]      // while-condition  =>  TRUE
[04:54:02.991]      // while "1"  (timeout="200")
[04:54:02.991]      // while-condition  =>  TRUE
[04:54:02.991]      // while "1"  (timeout="200")
[04:54:02.991]      // while-condition  =>  TRUE
[04:54:02.991]      // while "1"  (timeout="200")
[04:54:02.991]      // while-condition  =>  TRUE
[04:54:02.991]      // while "1"  (timeout="200")
[04:54:02.991]      // while-condition  =>  TRUE
[04:54:02.992]      // while "1"  (timeout="200")
[04:54:02.992]      // while-condition  =>  TRUE
[04:54:02.992]      // while "1"  (timeout="200")
[04:54:02.992]      // while-condition  =>  TRUE
[04:54:02.992]      // while "1"  (timeout="200")
[04:54:02.992]      // while-condition  =>  TRUE
[04:54:02.992]      // while "1"  (timeout="200")
[04:54:02.992]      // while-condition  =>  TRUE
[04:54:02.992]      // while "1"  (timeout="200")
[04:54:02.992]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.993]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.993]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.993]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.993]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.993]      // while-condition  =>  TRUE
[04:54:02.993]      // while "1"  (timeout="200")
[04:54:02.994]      // while-condition  =>  TRUE
[04:54:02.994]      // while "1"  (timeout="200")
[04:54:02.994]      // while-condition  =>  TRUE
[04:54:02.994]      // while "1"  (timeout="200")
[04:54:02.994]      // while-condition  =>  TRUE
[04:54:02.994]      // while "1"  (timeout="200")
[04:54:02.994]      // while-condition  =>  TRUE
[04:54:02.994]      // while "1"  (timeout="200")
[04:54:02.995]      // while-condition  =>  TRUE
[04:54:02.995]      // while "1"  (timeout="200")
[04:54:02.995]      // while-condition  =>  TRUE
[04:54:02.995]      // while "1"  (timeout="200")
[04:54:02.995]      // while-condition  =>  TRUE
[04:54:02.995]      // while "1"  (timeout="200")
[04:54:02.995]      // while-condition  =>  TRUE
[04:54:02.995]      // while "1"  (timeout="200")
[04:54:02.997]      // while-condition  =>  TRUE
[04:54:02.997]      // while "1"  (timeout="200")
[04:54:02.997]      // while-condition  =>  TRUE
[04:54:02.997]      // while "1"  (timeout="200")
[04:54:02.997]      // while-condition  =>  TRUE
[04:54:02.997]      // while "1"  (timeout="200")
[04:54:02.998]      // while-condition  =>  TRUE
[04:54:02.998]      // while "1"  (timeout="200")
[04:54:02.998]      // while-condition  =>  TRUE
[04:54:02.998]      // while "1"  (timeout="200")
[04:54:02.998]      // while-condition  =>  TRUE
[04:54:02.999]      // while "1"  (timeout="200")
[04:54:02.999]      // while-condition  =>  TRUE
[04:54:02.999]      // while "1"  (timeout="200")
[04:54:02.999]      // while-condition  =>  TRUE
[04:54:02.999]      // while "1"  (timeout="200")
[04:54:02.999]      // while-condition  =>  TRUE
[04:54:02.999]      // while "1"  (timeout="200")
[04:54:02.999]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.000]      // while-condition  =>  TRUE
[04:54:03.000]      // while "1"  (timeout="200")
[04:54:03.001]      // while-condition  =>  TRUE
[04:54:03.001]      // while "1"  (timeout="200")
[04:54:03.001]      // while  =>  TIMEOUT
[04:54:03.001]      // end while "1"
[04:54:03.001]    </control>
[04:54:03.001]    <control if="canReadPins" while="" timeout="0" info="">
[04:54:03.001]      // if-block "canReadPins"
[04:54:03.002]        // =>  TRUE
[04:54:03.002]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:54:03.002]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:54:03.004]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:54:03.004]        // while-condition  =>  FALSE
[04:54:03.004]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:54:03.004]      </control>
[04:54:03.004]      // end if-block "canReadPins"
[04:54:03.004]    </control>
[04:54:03.005]    <control if="!canReadPins" while="" timeout="0" info="">
[04:54:03.005]      // if-block "!canReadPins"
[04:54:03.005]        // =>  FALSE
[04:54:03.005]      // skip if-block "!canReadPins"
[04:54:03.005]    </control>
[04:54:03.005]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:54:03.005]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:03.005]        // =>  TRUE
[04:54:03.005]      <block atomic="false" info="">
[04:54:03.006]        WriteAP(0x00, 0x190008);
[04:54:03.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:03.007]        WriteAP(0xF0, 0x01);
[04:54:03.010]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:03.010]      </block>
[04:54:03.010]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:03.010]    </control>
[04:54:03.010]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:54:03.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:03.011]        // =>  FALSE
[04:54:03.011]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:03.011]    </control>
[04:54:03.011]    <block atomic="false" info="">
[04:54:03.011]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:03.014]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:54:03.015]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:54:03.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:03.015]      __ap = 0; //lets make sure we reset the access point selection
[04:54:03.015]        // -> [__ap <= 0x00000000]
[04:54:03.015]    </block>
[04:54:03.015]  </sequence>
[04:54:03.015]  
[04:54:03.037]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:54:03.037]  
[04:54:03.037]  <debugvars>
[04:54:03.038]    // Pre-defined
[04:54:03.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:03.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:03.038]    __dp=0x00000000
[04:54:03.038]    __ap=0x00000000
[04:54:03.038]    __traceout=0x00000000      (Trace Disabled)
[04:54:03.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:03.038]    __FlashAddr=0x00000000
[04:54:03.038]    __FlashLen=0x00000000
[04:54:03.038]    __FlashArg=0x00000000
[04:54:03.038]    __FlashOp=0x00000000
[04:54:03.039]    __Result=0x00000000
[04:54:03.039]  </debugvars>
[04:54:03.039]  
[04:54:03.039]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:54:03.039]    <block atomic="false" info="">
[04:54:03.039]      __var deviceID = 0;
[04:54:03.039]        // -> [deviceID <= 0x00000000]
[04:54:03.039]      __var version = 0;
[04:54:03.039]        // -> [version <= 0x00000000]
[04:54:03.040]      __var partNum = 0;
[04:54:03.040]        // -> [partNum <= 0x00000000]
[04:54:03.040]      __var manuf = 0;
[04:54:03.040]        // -> [manuf <= 0x00000000]
[04:54:03.040]      __var isMSPM0G1X0X_G3X0X = 0;
[04:54:03.040]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:54:03.040]      __var isProduction = 0;
[04:54:03.040]        // -> [isProduction <= 0x00000000]
[04:54:03.040]      __var continueId = 0;
[04:54:03.040]        // -> [continueId <= 0x00000000]
[04:54:03.040]      deviceID =   Read32(0x41C40004);
[04:54:03.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:54:03.046]        // -> [deviceID <= 0x2BB8802F]
[04:54:03.046]      version = deviceID >> 28;
[04:54:03.046]        // -> [version <= 0x00000002]
[04:54:03.046]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:54:03.046]        // -> [partNum <= 0x0000BB88]
[04:54:03.046]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:54:03.046]        // -> [manuf <= 0x00000017]
[04:54:03.046]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:54:03.047]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:54:03.047]      isProduction = (version > 0);
[04:54:03.047]        // -> [isProduction <= 0x00000001]
[04:54:03.047]    </block>
[04:54:03.047]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:54:03.047]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:54:03.047]        // =>  FALSE
[04:54:03.047]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:54:03.048]    </control>
[04:54:03.048]    <control if="continueId == 4" while="" timeout="0" info="">
[04:54:03.048]      // if-block "continueId == 4"
[04:54:03.048]        // =>  FALSE
[04:54:03.048]      // skip if-block "continueId == 4"
[04:54:03.048]    </control>
[04:54:03.048]    <control if="!isProduction" while="" timeout="0" info="">
[04:54:03.048]      // if-block "!isProduction"
[04:54:03.048]        // =>  FALSE
[04:54:03.049]      // skip if-block "!isProduction"
[04:54:03.049]    </control>
[04:54:03.049]  </sequence>
[04:54:03.049]  
[04:54:52.120]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:54:52.120]  
[04:54:52.128]  <debugvars>
[04:54:52.128]    // Pre-defined
[04:54:52.128]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:52.129]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:52.129]    __dp=0x00000000
[04:54:52.129]    __ap=0x00000000
[04:54:52.129]    __traceout=0x00000000      (Trace Disabled)
[04:54:52.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:52.129]    __FlashAddr=0x00000000
[04:54:52.129]    __FlashLen=0x00000000
[04:54:52.129]    __FlashArg=0x00000000
[04:54:52.129]    __FlashOp=0x00000000
[04:54:52.129]    __Result=0x00000000
[04:54:52.129]  </debugvars>
[04:54:52.130]  
[04:54:52.130]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:54:52.130]    <block atomic="false" info="">
[04:54:52.130]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:54:52.130]        // -> [isSWJ <= 0x00000001]
[04:54:52.130]      __var hasDormant = __protocol & 0x00020000;
[04:54:52.130]        // -> [hasDormant <= 0x00000000]
[04:54:52.130]      __var protType   = __protocol & 0x0000FFFF;
[04:54:52.130]        // -> [protType <= 0x00000002]
[04:54:52.130]    </block>
[04:54:52.130]    <control if="protType == 1" while="" timeout="0" info="">
[04:54:52.130]      // if-block "protType == 1"
[04:54:52.130]        // =>  FALSE
[04:54:52.130]      // skip if-block "protType == 1"
[04:54:52.131]    </control>
[04:54:52.131]    <control if="protType == 2" while="" timeout="0" info="">
[04:54:52.131]      // if-block "protType == 2"
[04:54:52.131]        // =>  TRUE
[04:54:52.131]      <control if="isSWJ" while="" timeout="0" info="">
[04:54:52.131]        // if-block "isSWJ"
[04:54:52.131]          // =>  TRUE
[04:54:52.131]        <control if="hasDormant" while="" timeout="0" info="">
[04:54:52.131]          // if-block "hasDormant"
[04:54:52.131]            // =>  FALSE
[04:54:52.132]          // skip if-block "hasDormant"
[04:54:52.132]        </control>
[04:54:52.132]        <control if="!hasDormant" while="" timeout="0" info="">
[04:54:52.132]          // if-block "!hasDormant"
[04:54:52.132]            // =>  TRUE
[04:54:52.132]          <block atomic="false" info="">
[04:54:52.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:54:52.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:52.134]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:54:52.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:54:52.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:54:52.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:52.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:54:52.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:54:52.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:54:52.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:52.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:54:52.146]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:54:52.146]          </block>
[04:54:52.146]          // end if-block "!hasDormant"
[04:54:52.146]        </control>
[04:54:52.147]        // end if-block "isSWJ"
[04:54:52.147]      </control>
[04:54:52.147]      <control if="!isSWJ" while="" timeout="0" info="">
[04:54:52.147]        // if-block "!isSWJ"
[04:54:52.147]          // =>  FALSE
[04:54:52.147]        // skip if-block "!isSWJ"
[04:54:52.147]      </control>
[04:54:52.147]      <block atomic="false" info="">
[04:54:52.147]        ReadDP(0x0);
[04:54:52.149]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:54:52.149]      </block>
[04:54:52.150]      // end if-block "protType == 2"
[04:54:52.150]    </control>
[04:54:52.150]  </sequence>
[04:54:52.150]  
[04:54:52.152]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:54:52.152]  
[04:54:52.152]  <debugvars>
[04:54:52.152]    // Pre-defined
[04:54:52.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:52.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:52.152]    __dp=0x00000000
[04:54:52.152]    __ap=0x00000000
[04:54:52.152]    __traceout=0x00000000      (Trace Disabled)
[04:54:52.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:52.153]    __FlashAddr=0x00000000
[04:54:52.153]    __FlashLen=0x00000000
[04:54:52.153]    __FlashArg=0x00000000
[04:54:52.153]    __FlashOp=0x00000000
[04:54:52.153]    __Result=0x00000000
[04:54:52.153]  </debugvars>
[04:54:52.153]  
[04:54:52.153]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:54:52.153]    <block atomic="false" info="">
[04:54:52.153]      __var SW_DP_ABORT       = 0x0;
[04:54:52.153]        // -> [SW_DP_ABORT <= 0x00000000]
[04:54:52.154]      __var DP_CTRL_STAT      = 0x4;
[04:54:52.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:54:52.154]      __var DP_SELECT         = 0x8;
[04:54:52.154]        // -> [DP_SELECT <= 0x00000008]
[04:54:52.154]      __var powered_down      = 0;
[04:54:52.154]        // -> [powered_down <= 0x00000000]
[04:54:52.154]      WriteDP(DP_SELECT, 0x00000000);
[04:54:52.155]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:54:52.155]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:54:52.162]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:54:52.162]        // -> [powered_down <= 0x00000001]
[04:54:52.162]    </block>
[04:54:52.162]    <control if="powered_down" while="" timeout="0" info="">
[04:54:52.163]      // if-block "powered_down"
[04:54:52.163]        // =>  TRUE
[04:54:52.163]      <block atomic="false" info="">
[04:54:52.163]        Message(0, "Debug/System power-up request sent");
[04:54:52.163]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:54:52.165]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:54:52.165]      </block>
[04:54:52.165]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:54:52.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:54:52.167]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:54:52.167]        // while-condition  =>  FALSE
[04:54:52.167]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:54:52.167]      </control>
[04:54:52.168]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:54:52.168]        // if-block "(__protocol & 0xFFFF) == 1"
[04:54:52.168]          // =>  FALSE
[04:54:52.168]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:54:52.168]      </control>
[04:54:52.168]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:54:52.168]        // if-block "(__protocol & 0xFFFF) == 2"
[04:54:52.168]          // =>  TRUE
[04:54:52.168]        <block atomic="false" info="">
[04:54:52.168]          Message(0, "executing SWD power up");
[04:54:52.169]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:54:52.170]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:54:52.171]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:54:52.172]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:54:52.172]        </block>
[04:54:52.173]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:54:52.173]      </control>
[04:54:52.173]      // end if-block "powered_down"
[04:54:52.173]    </control>
[04:54:52.173]    <block atomic="false" info="">
[04:54:52.173]      __var DEBUG_PORT_VAL    = 0;
[04:54:52.173]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:54:52.173]      __var ACCESS_POINT_VAL  = 0;
[04:54:52.174]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:54:52.174]      __ap = 1; 
[04:54:52.174]        // -> [__ap <= 0x00000001]
[04:54:52.174]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:54:52.177]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:54:52.178]      __ap = 4;
[04:54:52.178]        // -> [__ap <= 0x00000004]
[04:54:52.178]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:52.181]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:54:52.181]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:54:52.181]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:52.181]    </block>
[04:54:52.183]    <block atomic="false" info="">
[04:54:52.183]      __var nReset = 0x80;
[04:54:52.183]        // -> [nReset <= 0x00000080]
[04:54:52.183]      __var canReadPins = 0;
[04:54:52.183]        // -> [canReadPins <= 0x00000000]
[04:54:52.183]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:54:52.185]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:54:52.185]        // -> [canReadPins <= 0x00000001]
[04:54:52.185]    </block>
[04:54:52.185]    <control if="" while="1" timeout="200" info="">
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.185]      // while-condition  =>  TRUE
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.185]      // while-condition  =>  TRUE
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.185]      // while-condition  =>  TRUE
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.185]      // while-condition  =>  TRUE
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.185]      // while-condition  =>  TRUE
[04:54:52.185]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.186]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.186]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.186]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.186]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.186]      // while "1"  (timeout="200")
[04:54:52.186]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.187]      // while "1"  (timeout="200")
[04:54:52.187]      // while-condition  =>  TRUE
[04:54:52.188]      // while "1"  (timeout="200")
[04:54:52.188]      // while-condition  =>  TRUE
[04:54:52.188]      // while "1"  (timeout="200")
[04:54:52.188]      // while-condition  =>  TRUE
[04:54:52.188]      // while "1"  (timeout="200")
[04:54:52.188]      // while-condition  =>  TRUE
[04:54:52.189]      // while "1"  (timeout="200")
[04:54:52.189]      // while  =>  TIMEOUT
[04:54:52.189]      // end while "1"
[04:54:52.189]    </control>
[04:54:52.189]    <control if="canReadPins" while="" timeout="0" info="">
[04:54:52.189]      // if-block "canReadPins"
[04:54:52.189]        // =>  TRUE
[04:54:52.189]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:54:52.189]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:54:52.191]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:54:52.191]        // while-condition  =>  FALSE
[04:54:52.191]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:54:52.191]      </control>
[04:54:52.191]      // end if-block "canReadPins"
[04:54:52.192]    </control>
[04:54:52.192]    <control if="!canReadPins" while="" timeout="0" info="">
[04:54:52.192]      // if-block "!canReadPins"
[04:54:52.192]        // =>  FALSE
[04:54:52.192]      // skip if-block "!canReadPins"
[04:54:52.192]    </control>
[04:54:52.192]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:54:52.192]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:52.192]        // =>  TRUE
[04:54:52.192]      <block atomic="false" info="">
[04:54:52.192]        WriteAP(0x00, 0x190008);
[04:54:52.195]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:52.195]        WriteAP(0xF0, 0x01);
[04:54:52.199]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:52.199]      </block>
[04:54:52.199]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:52.199]    </control>
[04:54:52.199]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:54:52.199]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:52.199]        // =>  FALSE
[04:54:52.200]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:52.200]    </control>
[04:54:52.200]    <block atomic="false" info="">
[04:54:52.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:52.203]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:54:52.203]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:54:52.203]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:52.204]      __ap = 0; //lets make sure we reset the access point selection
[04:54:52.204]        // -> [__ap <= 0x00000000]
[04:54:52.204]    </block>
[04:54:52.204]  </sequence>
[04:54:52.204]  
[04:54:52.228]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:54:52.228]  
[04:54:52.229]  <debugvars>
[04:54:52.229]    // Pre-defined
[04:54:52.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:52.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:52.229]    __dp=0x00000000
[04:54:52.229]    __ap=0x00000000
[04:54:52.229]    __traceout=0x00000000      (Trace Disabled)
[04:54:52.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:52.229]    __FlashAddr=0x00000000
[04:54:52.229]    __FlashLen=0x00000000
[04:54:52.229]    __FlashArg=0x00000000
[04:54:52.230]    __FlashOp=0x00000000
[04:54:52.230]    __Result=0x00000000
[04:54:52.230]  </debugvars>
[04:54:52.230]  
[04:54:52.230]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:54:52.230]    <block atomic="false" info="">
[04:54:52.230]      __var deviceID = 0;
[04:54:52.230]        // -> [deviceID <= 0x00000000]
[04:54:52.230]      __var version = 0;
[04:54:52.230]        // -> [version <= 0x00000000]
[04:54:52.231]      __var partNum = 0;
[04:54:52.231]        // -> [partNum <= 0x00000000]
[04:54:52.231]      __var manuf = 0;
[04:54:52.231]        // -> [manuf <= 0x00000000]
[04:54:52.231]      __var isMSPM0G1X0X_G3X0X = 0;
[04:54:52.231]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:54:52.231]      __var isProduction = 0;
[04:54:52.231]        // -> [isProduction <= 0x00000000]
[04:54:52.231]      __var continueId = 0;
[04:54:52.231]        // -> [continueId <= 0x00000000]
[04:54:52.231]      deviceID =   Read32(0x41C40004);
[04:54:52.237]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:54:52.237]        // -> [deviceID <= 0x2BB8802F]
[04:54:52.237]      version = deviceID >> 28;
[04:54:52.237]        // -> [version <= 0x00000002]
[04:54:52.237]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:54:52.238]        // -> [partNum <= 0x0000BB88]
[04:54:52.238]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:54:52.238]        // -> [manuf <= 0x00000017]
[04:54:52.238]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:54:52.238]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:54:52.238]      isProduction = (version > 0);
[04:54:52.238]        // -> [isProduction <= 0x00000001]
[04:54:52.238]    </block>
[04:54:52.238]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:54:52.238]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:54:52.239]        // =>  FALSE
[04:54:52.239]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:54:52.239]    </control>
[04:54:52.239]    <control if="continueId == 4" while="" timeout="0" info="">
[04:54:52.239]      // if-block "continueId == 4"
[04:54:52.239]        // =>  FALSE
[04:54:52.239]      // skip if-block "continueId == 4"
[04:54:52.240]    </control>
[04:54:52.240]    <control if="!isProduction" while="" timeout="0" info="">
[04:54:52.240]      // if-block "!isProduction"
[04:54:52.240]        // =>  FALSE
[04:54:52.240]      // skip if-block "!isProduction"
[04:54:52.240]    </control>
[04:54:52.240]  </sequence>
[04:54:52.240]  
[04:59:12.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:59:12.346]  
[04:59:12.355]  <debugvars>
[04:59:12.355]    // Pre-defined
[04:59:12.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:59:12.355]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:59:12.355]    __dp=0x00000000
[04:59:12.355]    __ap=0x00000000
[04:59:12.355]    __traceout=0x00000000      (Trace Disabled)
[04:59:12.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:59:12.356]    __FlashAddr=0x00000000
[04:59:12.356]    __FlashLen=0x00000000
[04:59:12.356]    __FlashArg=0x00000000
[04:59:12.356]    __FlashOp=0x00000000
[04:59:12.356]    __Result=0x00000000
[04:59:12.356]  </debugvars>
[04:59:12.356]  
[04:59:12.356]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:59:12.357]    <block atomic="false" info="">
[04:59:12.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:59:12.357]        // -> [isSWJ <= 0x00000001]
[04:59:12.357]      __var hasDormant = __protocol & 0x00020000;
[04:59:12.357]        // -> [hasDormant <= 0x00000000]
[04:59:12.357]      __var protType   = __protocol & 0x0000FFFF;
[04:59:12.357]        // -> [protType <= 0x00000002]
[04:59:12.357]    </block>
[04:59:12.358]    <control if="protType == 1" while="" timeout="0" info="">
[04:59:12.358]      // if-block "protType == 1"
[04:59:12.358]        // =>  FALSE
[04:59:12.358]      // skip if-block "protType == 1"
[04:59:12.358]    </control>
[04:59:12.358]    <control if="protType == 2" while="" timeout="0" info="">
[04:59:12.358]      // if-block "protType == 2"
[04:59:12.358]        // =>  TRUE
[04:59:12.359]      <control if="isSWJ" while="" timeout="0" info="">
[04:59:12.359]        // if-block "isSWJ"
[04:59:12.359]          // =>  TRUE
[04:59:12.359]        <control if="hasDormant" while="" timeout="0" info="">
[04:59:12.359]          // if-block "hasDormant"
[04:59:12.359]            // =>  FALSE
[04:59:12.359]          // skip if-block "hasDormant"
[04:59:12.359]        </control>
[04:59:12.360]        <control if="!hasDormant" while="" timeout="0" info="">
[04:59:12.360]          // if-block "!hasDormant"
[04:59:12.360]            // =>  TRUE
[04:59:12.360]          <block atomic="false" info="">
[04:59:12.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:59:12.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:59:12.361]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:59:12.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:59:12.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:59:12.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:59:12.365]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:59:12.366]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:59:12.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:59:12.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:59:12.368]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:59:12.370]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:59:12.370]          </block>
[04:59:12.370]          // end if-block "!hasDormant"
[04:59:12.370]        </control>
[04:59:12.370]        // end if-block "isSWJ"
[04:59:12.370]      </control>
[04:59:12.370]      <control if="!isSWJ" while="" timeout="0" info="">
[04:59:12.371]        // if-block "!isSWJ"
[04:59:12.371]          // =>  FALSE
[04:59:12.371]        // skip if-block "!isSWJ"
[04:59:12.371]      </control>
[04:59:12.371]      <block atomic="false" info="">
[04:59:12.371]        ReadDP(0x0);
[04:59:12.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:59:12.372]      </block>
[04:59:12.373]      // end if-block "protType == 2"
[04:59:12.373]    </control>
[04:59:12.373]  </sequence>
[04:59:12.373]  
[04:59:12.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:59:12.375]  
[04:59:12.376]  <debugvars>
[04:59:12.376]    // Pre-defined
[04:59:12.376]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:59:12.376]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:59:12.376]    __dp=0x00000000
[04:59:12.376]    __ap=0x00000000
[04:59:12.376]    __traceout=0x00000000      (Trace Disabled)
[04:59:12.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:59:12.376]    __FlashAddr=0x00000000
[04:59:12.376]    __FlashLen=0x00000000
[04:59:12.376]    __FlashArg=0x00000000
[04:59:12.377]    __FlashOp=0x00000000
[04:59:12.377]    __Result=0x00000000
[04:59:12.377]  </debugvars>
[04:59:12.377]  
[04:59:12.377]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:59:12.377]    <block atomic="false" info="">
[04:59:12.377]      __var SW_DP_ABORT       = 0x0;
[04:59:12.377]        // -> [SW_DP_ABORT <= 0x00000000]
[04:59:12.378]      __var DP_CTRL_STAT      = 0x4;
[04:59:12.378]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:59:12.378]      __var DP_SELECT         = 0x8;
[04:59:12.378]        // -> [DP_SELECT <= 0x00000008]
[04:59:12.378]      __var powered_down      = 0;
[04:59:12.378]        // -> [powered_down <= 0x00000000]
[04:59:12.378]      WriteDP(DP_SELECT, 0x00000000);
[04:59:12.381]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:59:12.381]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:59:12.382]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:59:12.382]        // -> [powered_down <= 0x00000001]
[04:59:12.382]    </block>
[04:59:12.382]    <control if="powered_down" while="" timeout="0" info="">
[04:59:12.382]      // if-block "powered_down"
[04:59:12.382]        // =>  TRUE
[04:59:12.382]      <block atomic="false" info="">
[04:59:12.383]        Message(0, "Debug/System power-up request sent");
[04:59:12.383]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:59:12.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:59:12.385]      </block>
[04:59:12.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:59:12.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:59:12.387]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:59:12.387]        // while-condition  =>  FALSE
[04:59:12.387]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:59:12.387]      </control>
[04:59:12.387]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:59:12.387]        // if-block "(__protocol & 0xFFFF) == 1"
[04:59:12.387]          // =>  FALSE
[04:59:12.387]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:59:12.389]      </control>
[04:59:12.389]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:59:12.389]        // if-block "(__protocol & 0xFFFF) == 2"
[04:59:12.389]          // =>  TRUE
[04:59:12.389]        <block atomic="false" info="">
[04:59:12.389]          Message(0, "executing SWD power up");
[04:59:12.389]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:59:12.390]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:59:12.391]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:59:12.392]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:59:12.392]        </block>
[04:59:12.392]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:59:12.392]      </control>
[04:59:12.392]      // end if-block "powered_down"
[04:59:12.392]    </control>
[04:59:12.393]    <block atomic="false" info="">
[04:59:12.393]      __var DEBUG_PORT_VAL    = 0;
[04:59:12.393]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:59:12.393]      __var ACCESS_POINT_VAL  = 0;
[04:59:12.393]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:59:12.393]      __ap = 1; 
[04:59:12.393]        // -> [__ap <= 0x00000001]
[04:59:12.393]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:59:12.396]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:59:12.397]      __ap = 4;
[04:59:12.397]        // -> [__ap <= 0x00000004]
[04:59:12.397]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:59:12.401]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:59:12.401]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:59:12.401]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:59:12.401]    </block>
[04:59:12.401]    <block atomic="false" info="">
[04:59:12.401]      __var nReset = 0x80;
[04:59:12.401]        // -> [nReset <= 0x00000080]
[04:59:12.401]      __var canReadPins = 0;
[04:59:12.401]        // -> [canReadPins <= 0x00000000]
[04:59:12.401]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:59:12.404]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:59:12.404]        // -> [canReadPins <= 0x00000001]
[04:59:12.404]    </block>
[04:59:12.404]    <control if="" while="1" timeout="200" info="">
[04:59:12.404]      // while "1"  (timeout="200")
[04:59:12.404]      // while-condition  =>  TRUE
[04:59:12.404]      // while "1"  (timeout="200")
[04:59:12.404]      // while-condition  =>  TRUE
[04:59:12.404]      // while "1"  (timeout="200")
[04:59:12.404]      // while-condition  =>  TRUE
[04:59:12.404]      // while "1"  (timeout="200")
[04:59:12.404]      // while-condition  =>  TRUE
[04:59:12.405]      // while "1"  (timeout="200")
[04:59:12.405]      // while-condition  =>  TRUE
[04:59:12.405]      // while "1"  (timeout="200")
[04:59:12.405]      // while-condition  =>  TRUE
[04:59:12.405]      // while "1"  (timeout="200")
[04:59:12.405]      // while-condition  =>  TRUE
[04:59:12.406]      // while "1"  (timeout="200")
[04:59:12.406]      // while-condition  =>  TRUE
[04:59:12.406]      // while "1"  (timeout="200")
[04:59:12.406]      // while-condition  =>  TRUE
[04:59:12.406]      // while "1"  (timeout="200")
[04:59:12.406]      // while-condition  =>  TRUE
[04:59:12.406]      // while "1"  (timeout="200")
[04:59:12.407]      // while-condition  =>  TRUE
[04:59:12.407]      // while "1"  (timeout="200")
[04:59:12.407]      // while-condition  =>  TRUE
[04:59:12.407]      // while "1"  (timeout="200")
[04:59:12.407]      // while-condition  =>  TRUE
[04:59:12.407]      // while "1"  (timeout="200")
[04:59:12.407]      // while-condition  =>  TRUE
[04:59:12.407]      // while "1"  (timeout="200")
[04:59:12.407]      // while-condition  =>  TRUE
[04:59:12.407]      // while "1"  (timeout="200")
[04:59:12.408]      // while-condition  =>  TRUE
[04:59:12.408]      // while "1"  (timeout="200")
[04:59:12.408]      // while  =>  TIMEOUT
[04:59:12.408]      // end while "1"
[04:59:12.409]    </control>
[04:59:12.409]    <control if="canReadPins" while="" timeout="0" info="">
[04:59:12.409]      // if-block "canReadPins"
[04:59:12.409]        // =>  TRUE
[04:59:12.409]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:59:12.409]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:59:12.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:59:12.411]        // while-condition  =>  FALSE
[04:59:12.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:59:12.411]      </control>
[04:59:12.411]      // end if-block "canReadPins"
[04:59:12.411]    </control>
[04:59:12.411]    <control if="!canReadPins" while="" timeout="0" info="">
[04:59:12.411]      // if-block "!canReadPins"
[04:59:12.411]        // =>  FALSE
[04:59:12.411]      // skip if-block "!canReadPins"
[04:59:12.411]    </control>
[04:59:12.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:59:12.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:59:12.412]        // =>  TRUE
[04:59:12.412]      <block atomic="false" info="">
[04:59:12.412]        WriteAP(0x00, 0x190008);
[04:59:12.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:59:12.414]        WriteAP(0xF0, 0x01);
[04:59:12.418]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:59:12.418]      </block>
[04:59:12.418]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:59:12.418]    </control>
[04:59:12.418]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:59:12.418]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:59:12.418]        // =>  FALSE
[04:59:12.419]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:59:12.419]    </control>
[04:59:12.419]    <block atomic="false" info="">
[04:59:12.419]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:59:12.424]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:59:12.424]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:59:12.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:59:12.424]      __ap = 0; //lets make sure we reset the access point selection
[04:59:12.424]        // -> [__ap <= 0x00000000]
[04:59:12.424]    </block>
[04:59:12.424]  </sequence>
[04:59:12.424]  
[04:59:12.446]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:59:12.446]  
[04:59:12.447]  <debugvars>
[04:59:12.447]    // Pre-defined
[04:59:12.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:59:12.447]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:59:12.447]    __dp=0x00000000
[04:59:12.448]    __ap=0x00000000
[04:59:12.448]    __traceout=0x00000000      (Trace Disabled)
[04:59:12.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:59:12.448]    __FlashAddr=0x00000000
[04:59:12.448]    __FlashLen=0x00000000
[04:59:12.448]    __FlashArg=0x00000000
[04:59:12.448]    __FlashOp=0x00000000
[04:59:12.448]    __Result=0x00000000
[04:59:12.448]  </debugvars>
[04:59:12.448]  
[04:59:12.448]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:59:12.448]    <block atomic="false" info="">
[04:59:12.448]      __var deviceID = 0;
[04:59:12.448]        // -> [deviceID <= 0x00000000]
[04:59:12.450]      __var version = 0;
[04:59:12.450]        // -> [version <= 0x00000000]
[04:59:12.450]      __var partNum = 0;
[04:59:12.450]        // -> [partNum <= 0x00000000]
[04:59:12.450]      __var manuf = 0;
[04:59:12.450]        // -> [manuf <= 0x00000000]
[04:59:12.450]      __var isMSPM0G1X0X_G3X0X = 0;
[04:59:12.450]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:59:12.450]      __var isProduction = 0;
[04:59:12.451]        // -> [isProduction <= 0x00000000]
[04:59:12.451]      __var continueId = 0;
[04:59:12.451]        // -> [continueId <= 0x00000000]
[04:59:12.451]      deviceID =   Read32(0x41C40004);
[04:59:12.465]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:59:12.465]        // -> [deviceID <= 0x2BB8802F]
[04:59:12.465]      version = deviceID >> 28;
[04:59:12.466]        // -> [version <= 0x00000002]
[04:59:12.466]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:59:12.466]        // -> [partNum <= 0x0000BB88]
[04:59:12.466]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:59:12.466]        // -> [manuf <= 0x00000017]
[04:59:12.466]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:59:12.466]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:59:12.466]      isProduction = (version > 0);
[04:59:12.467]        // -> [isProduction <= 0x00000001]
[04:59:12.467]    </block>
[04:59:12.467]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:59:12.467]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:59:12.467]        // =>  FALSE
[04:59:12.467]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:59:12.467]    </control>
[04:59:12.467]    <control if="continueId == 4" while="" timeout="0" info="">
[04:59:12.467]      // if-block "continueId == 4"
[04:59:12.467]        // =>  FALSE
[04:59:12.468]      // skip if-block "continueId == 4"
[04:59:12.468]    </control>
[04:59:12.468]    <control if="!isProduction" while="" timeout="0" info="">
[04:59:12.468]      // if-block "!isProduction"
[04:59:12.468]        // =>  FALSE
[04:59:12.468]      // skip if-block "!isProduction"
[04:59:12.468]    </control>
[04:59:12.468]  </sequence>
[04:59:12.468]  
[05:05:37.076]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:05:37.076]  
[05:05:37.077]  <debugvars>
[05:05:37.077]    // Pre-defined
[05:05:37.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:05:37.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:05:37.077]    __dp=0x00000000
[05:05:37.077]    __ap=0x00000000
[05:05:37.077]    __traceout=0x00000000      (Trace Disabled)
[05:05:37.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:05:37.078]    __FlashAddr=0x00000000
[05:05:37.078]    __FlashLen=0x00000000
[05:05:37.078]    __FlashArg=0x00000000
[05:05:37.078]    __FlashOp=0x00000000
[05:05:37.078]    __Result=0x00000000
[05:05:37.078]  </debugvars>
[05:05:37.078]  
[05:05:37.078]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:05:37.078]    <block atomic="false" info="">
[05:05:37.079]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:05:37.079]        // -> [isSWJ <= 0x00000001]
[05:05:37.079]      __var hasDormant = __protocol & 0x00020000;
[05:05:37.079]        // -> [hasDormant <= 0x00000000]
[05:05:37.079]      __var protType   = __protocol & 0x0000FFFF;
[05:05:37.079]        // -> [protType <= 0x00000002]
[05:05:37.079]    </block>
[05:05:37.079]    <control if="protType == 1" while="" timeout="0" info="">
[05:05:37.079]      // if-block "protType == 1"
[05:05:37.080]        // =>  FALSE
[05:05:37.080]      // skip if-block "protType == 1"
[05:05:37.080]    </control>
[05:05:37.080]    <control if="protType == 2" while="" timeout="0" info="">
[05:05:37.080]      // if-block "protType == 2"
[05:05:37.080]        // =>  TRUE
[05:05:37.080]      <control if="isSWJ" while="" timeout="0" info="">
[05:05:37.080]        // if-block "isSWJ"
[05:05:37.081]          // =>  TRUE
[05:05:37.081]        <control if="hasDormant" while="" timeout="0" info="">
[05:05:37.081]          // if-block "hasDormant"
[05:05:37.081]            // =>  FALSE
[05:05:37.081]          // skip if-block "hasDormant"
[05:05:37.081]        </control>
[05:05:37.081]        <control if="!hasDormant" while="" timeout="0" info="">
[05:05:37.082]          // if-block "!hasDormant"
[05:05:37.082]            // =>  TRUE
[05:05:37.082]          <block atomic="false" info="">
[05:05:37.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:05:37.087]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:05:37.087]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:05:37.090]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:05:37.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:05:37.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:05:37.091]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:05:37.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:05:37.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:05:37.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:05:37.095]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:05:37.096]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:05:37.096]          </block>
[05:05:37.096]          // end if-block "!hasDormant"
[05:05:37.097]        </control>
[05:05:37.097]        // end if-block "isSWJ"
[05:05:37.097]      </control>
[05:05:37.097]      <control if="!isSWJ" while="" timeout="0" info="">
[05:05:37.097]        // if-block "!isSWJ"
[05:05:37.097]          // =>  FALSE
[05:05:37.097]        // skip if-block "!isSWJ"
[05:05:37.097]      </control>
[05:05:37.097]      <block atomic="false" info="">
[05:05:37.097]        ReadDP(0x0);
[05:05:37.104]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:05:37.104]      </block>
[05:05:37.104]      // end if-block "protType == 2"
[05:05:37.104]    </control>
[05:05:37.104]  </sequence>
[05:05:37.104]  
[05:05:37.108]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:05:37.108]  
[05:05:37.108]  <debugvars>
[05:05:37.108]    // Pre-defined
[05:05:37.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:05:37.109]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:05:37.109]    __dp=0x00000000
[05:05:37.109]    __ap=0x00000000
[05:05:37.109]    __traceout=0x00000000      (Trace Disabled)
[05:05:37.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:05:37.109]    __FlashAddr=0x00000000
[05:05:37.109]    __FlashLen=0x00000000
[05:05:37.109]    __FlashArg=0x00000000
[05:05:37.109]    __FlashOp=0x00000000
[05:05:37.109]    __Result=0x00000000
[05:05:37.109]  </debugvars>
[05:05:37.109]  
[05:05:37.110]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:05:37.110]    <block atomic="false" info="">
[05:05:37.110]      __var SW_DP_ABORT       = 0x0;
[05:05:37.110]        // -> [SW_DP_ABORT <= 0x00000000]
[05:05:37.110]      __var DP_CTRL_STAT      = 0x4;
[05:05:37.111]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:05:37.111]      __var DP_SELECT         = 0x8;
[05:05:37.111]        // -> [DP_SELECT <= 0x00000008]
[05:05:37.111]      __var powered_down      = 0;
[05:05:37.111]        // -> [powered_down <= 0x00000000]
[05:05:37.111]      WriteDP(DP_SELECT, 0x00000000);
[05:05:37.112]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:05:37.112]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:05:37.113]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:05:37.113]        // -> [powered_down <= 0x00000001]
[05:05:37.113]    </block>
[05:05:37.115]    <control if="powered_down" while="" timeout="0" info="">
[05:05:37.115]      // if-block "powered_down"
[05:05:37.115]        // =>  TRUE
[05:05:37.115]      <block atomic="false" info="">
[05:05:37.115]        Message(0, "Debug/System power-up request sent");
[05:05:37.116]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:05:37.117]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:05:37.118]      </block>
[05:05:37.118]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:05:37.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:05:37.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:05:37.120]        // while-condition  =>  FALSE
[05:05:37.120]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:05:37.120]      </control>
[05:05:37.120]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:05:37.121]        // if-block "(__protocol & 0xFFFF) == 1"
[05:05:37.121]          // =>  FALSE
[05:05:37.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:05:37.121]      </control>
[05:05:37.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:05:37.121]        // if-block "(__protocol & 0xFFFF) == 2"
[05:05:37.121]          // =>  TRUE
[05:05:37.121]        <block atomic="false" info="">
[05:05:37.121]          Message(0, "executing SWD power up");
[05:05:37.121]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:05:37.123]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:05:37.123]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:05:37.125]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:05:37.125]        </block>
[05:05:37.125]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:05:37.125]      </control>
[05:05:37.125]      // end if-block "powered_down"
[05:05:37.125]    </control>
[05:05:37.125]    <block atomic="false" info="">
[05:05:37.125]      __var DEBUG_PORT_VAL    = 0;
[05:05:37.126]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:05:37.126]      __var ACCESS_POINT_VAL  = 0;
[05:05:37.126]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:05:37.126]      __ap = 1; 
[05:05:37.126]        // -> [__ap <= 0x00000001]
[05:05:37.126]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:05:37.133]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:05:37.133]      __ap = 4;
[05:05:37.133]        // -> [__ap <= 0x00000004]
[05:05:37.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:05:37.137]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:05:37.137]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:05:37.137]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:05:37.137]    </block>
[05:05:37.138]    <block atomic="false" info="">
[05:05:37.138]      __var nReset = 0x80;
[05:05:37.138]        // -> [nReset <= 0x00000080]
[05:05:37.138]      __var canReadPins = 0;
[05:05:37.138]        // -> [canReadPins <= 0x00000000]
[05:05:37.138]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:05:37.140]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:05:37.141]        // -> [canReadPins <= 0x00000001]
[05:05:37.141]    </block>
[05:05:37.141]    <control if="" while="1" timeout="200" info="">
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.141]      // while-condition  =>  TRUE
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.141]      // while-condition  =>  TRUE
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.141]      // while-condition  =>  TRUE
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.141]      // while-condition  =>  TRUE
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.141]      // while-condition  =>  TRUE
[05:05:37.141]      // while "1"  (timeout="200")
[05:05:37.142]      // while-condition  =>  TRUE
[05:05:37.142]      // while "1"  (timeout="200")
[05:05:37.142]      // while  =>  TIMEOUT
[05:05:37.142]      // end while "1"
[05:05:37.142]    </control>
[05:05:37.142]    <control if="canReadPins" while="" timeout="0" info="">
[05:05:37.142]      // if-block "canReadPins"
[05:05:37.142]        // =>  TRUE
[05:05:37.142]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:05:37.143]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:05:37.144]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:05:37.144]        // while-condition  =>  FALSE
[05:05:37.144]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:05:37.144]      </control>
[05:05:37.144]      // end if-block "canReadPins"
[05:05:37.145]    </control>
[05:05:37.145]    <control if="!canReadPins" while="" timeout="0" info="">
[05:05:37.145]      // if-block "!canReadPins"
[05:05:37.145]        // =>  FALSE
[05:05:37.145]      // skip if-block "!canReadPins"
[05:05:37.145]    </control>
[05:05:37.145]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:05:37.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:05:37.146]        // =>  TRUE
[05:05:37.146]      <block atomic="false" info="">
[05:05:37.146]        WriteAP(0x00, 0x190008);
[05:05:37.147]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:05:37.148]        WriteAP(0xF0, 0x01);
[05:05:37.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:05:37.151]      </block>
[05:05:37.152]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:05:37.152]    </control>
[05:05:37.152]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:05:37.152]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:05:37.152]        // =>  FALSE
[05:05:37.152]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:05:37.152]    </control>
[05:05:37.152]    <block atomic="false" info="">
[05:05:37.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:05:37.155]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:05:37.155]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:05:37.155]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:05:37.155]      __ap = 0; //lets make sure we reset the access point selection
[05:05:37.156]        // -> [__ap <= 0x00000000]
[05:05:37.156]    </block>
[05:05:37.156]  </sequence>
[05:05:37.156]  
[05:05:37.181]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:05:37.181]  
[05:05:37.182]  <debugvars>
[05:05:37.182]    // Pre-defined
[05:05:37.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:05:37.182]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:05:37.182]    __dp=0x00000000
[05:05:37.182]    __ap=0x00000000
[05:05:37.183]    __traceout=0x00000000      (Trace Disabled)
[05:05:37.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:05:37.183]    __FlashAddr=0x00000000
[05:05:37.183]    __FlashLen=0x00000000
[05:05:37.183]    __FlashArg=0x00000000
[05:05:37.183]    __FlashOp=0x00000000
[05:05:37.183]    __Result=0x00000000
[05:05:37.183]  </debugvars>
[05:05:37.183]  
[05:05:37.184]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:05:37.184]    <block atomic="false" info="">
[05:05:37.184]      __var deviceID = 0;
[05:05:37.184]        // -> [deviceID <= 0x00000000]
[05:05:37.184]      __var version = 0;
[05:05:37.184]        // -> [version <= 0x00000000]
[05:05:37.184]      __var partNum = 0;
[05:05:37.184]        // -> [partNum <= 0x00000000]
[05:05:37.184]      __var manuf = 0;
[05:05:37.184]        // -> [manuf <= 0x00000000]
[05:05:37.185]      __var isMSPM0G1X0X_G3X0X = 0;
[05:05:37.185]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:05:37.185]      __var isProduction = 0;
[05:05:37.185]        // -> [isProduction <= 0x00000000]
[05:05:37.185]      __var continueId = 0;
[05:05:37.185]        // -> [continueId <= 0x00000000]
[05:05:37.185]      deviceID =   Read32(0x41C40004);
[05:05:37.189]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:05:37.189]        // -> [deviceID <= 0x2BB8802F]
[05:05:37.190]      version = deviceID >> 28;
[05:05:37.190]        // -> [version <= 0x00000002]
[05:05:37.190]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:05:37.190]        // -> [partNum <= 0x0000BB88]
[05:05:37.190]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:05:37.190]        // -> [manuf <= 0x00000017]
[05:05:37.190]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:05:37.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:05:37.190]      isProduction = (version > 0);
[05:05:37.190]        // -> [isProduction <= 0x00000001]
[05:05:37.192]    </block>
[05:05:37.192]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:05:37.192]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:05:37.192]        // =>  FALSE
[05:05:37.192]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:05:37.192]    </control>
[05:05:37.192]    <control if="continueId == 4" while="" timeout="0" info="">
[05:05:37.192]      // if-block "continueId == 4"
[05:05:37.192]        // =>  FALSE
[05:05:37.193]      // skip if-block "continueId == 4"
[05:05:37.193]    </control>
[05:05:37.193]    <control if="!isProduction" while="" timeout="0" info="">
[05:05:37.193]      // if-block "!isProduction"
[05:05:37.193]        // =>  FALSE
[05:05:37.193]      // skip if-block "!isProduction"
[05:05:37.193]    </control>
[05:05:37.193]  </sequence>
[05:05:37.193]  
[05:11:09.748]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:11:09.748]  
[05:11:09.749]  <debugvars>
[05:11:09.749]    // Pre-defined
[05:11:09.749]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:09.749]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:09.749]    __dp=0x00000000
[05:11:09.750]    __ap=0x00000000
[05:11:09.750]    __traceout=0x00000000      (Trace Disabled)
[05:11:09.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:09.750]    __FlashAddr=0x00000000
[05:11:09.750]    __FlashLen=0x00000000
[05:11:09.750]    __FlashArg=0x00000000
[05:11:09.750]    __FlashOp=0x00000000
[05:11:09.750]    __Result=0x00000000
[05:11:09.750]  </debugvars>
[05:11:09.751]  
[05:11:09.751]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:11:09.751]    <block atomic="false" info="">
[05:11:09.751]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:11:09.751]        // -> [isSWJ <= 0x00000001]
[05:11:09.751]      __var hasDormant = __protocol & 0x00020000;
[05:11:09.751]        // -> [hasDormant <= 0x00000000]
[05:11:09.751]      __var protType   = __protocol & 0x0000FFFF;
[05:11:09.751]        // -> [protType <= 0x00000002]
[05:11:09.751]    </block>
[05:11:09.751]    <control if="protType == 1" while="" timeout="0" info="">
[05:11:09.752]      // if-block "protType == 1"
[05:11:09.752]        // =>  FALSE
[05:11:09.752]      // skip if-block "protType == 1"
[05:11:09.752]    </control>
[05:11:09.752]    <control if="protType == 2" while="" timeout="0" info="">
[05:11:09.752]      // if-block "protType == 2"
[05:11:09.752]        // =>  TRUE
[05:11:09.752]      <control if="isSWJ" while="" timeout="0" info="">
[05:11:09.752]        // if-block "isSWJ"
[05:11:09.753]          // =>  TRUE
[05:11:09.753]        <control if="hasDormant" while="" timeout="0" info="">
[05:11:09.753]          // if-block "hasDormant"
[05:11:09.753]            // =>  FALSE
[05:11:09.753]          // skip if-block "hasDormant"
[05:11:09.753]        </control>
[05:11:09.753]        <control if="!hasDormant" while="" timeout="0" info="">
[05:11:09.753]          // if-block "!hasDormant"
[05:11:09.753]            // =>  TRUE
[05:11:09.753]          <block atomic="false" info="">
[05:11:09.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:11:09.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:09.755]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:11:09.757]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:11:09.757]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:11:09.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:09.760]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:11:09.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:11:09.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:11:09.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:09.763]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:11:09.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:11:09.764]          </block>
[05:11:09.764]          // end if-block "!hasDormant"
[05:11:09.764]        </control>
[05:11:09.764]        // end if-block "isSWJ"
[05:11:09.764]      </control>
[05:11:09.764]      <control if="!isSWJ" while="" timeout="0" info="">
[05:11:09.765]        // if-block "!isSWJ"
[05:11:09.765]          // =>  FALSE
[05:11:09.765]        // skip if-block "!isSWJ"
[05:11:09.765]      </control>
[05:11:09.765]      <block atomic="false" info="">
[05:11:09.765]        ReadDP(0x0);
[05:11:09.766]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:11:09.767]      </block>
[05:11:09.767]      // end if-block "protType == 2"
[05:11:09.767]    </control>
[05:11:09.767]  </sequence>
[05:11:09.767]  
[05:11:09.770]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:11:09.770]  
[05:11:09.770]  <debugvars>
[05:11:09.770]    // Pre-defined
[05:11:09.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:09.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:09.770]    __dp=0x00000000
[05:11:09.770]    __ap=0x00000000
[05:11:09.770]    __traceout=0x00000000      (Trace Disabled)
[05:11:09.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:09.772]    __FlashAddr=0x00000000
[05:11:09.772]    __FlashLen=0x00000000
[05:11:09.772]    __FlashArg=0x00000000
[05:11:09.772]    __FlashOp=0x00000000
[05:11:09.772]    __Result=0x00000000
[05:11:09.772]  </debugvars>
[05:11:09.772]  
[05:11:09.772]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:11:09.772]    <block atomic="false" info="">
[05:11:09.773]      __var SW_DP_ABORT       = 0x0;
[05:11:09.773]        // -> [SW_DP_ABORT <= 0x00000000]
[05:11:09.773]      __var DP_CTRL_STAT      = 0x4;
[05:11:09.773]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:11:09.773]      __var DP_SELECT         = 0x8;
[05:11:09.773]        // -> [DP_SELECT <= 0x00000008]
[05:11:09.773]      __var powered_down      = 0;
[05:11:09.773]        // -> [powered_down <= 0x00000000]
[05:11:09.773]      WriteDP(DP_SELECT, 0x00000000);
[05:11:09.775]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:11:09.775]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:11:09.777]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:11:09.778]        // -> [powered_down <= 0x00000001]
[05:11:09.778]    </block>
[05:11:09.778]    <control if="powered_down" while="" timeout="0" info="">
[05:11:09.778]      // if-block "powered_down"
[05:11:09.778]        // =>  TRUE
[05:11:09.778]      <block atomic="false" info="">
[05:11:09.778]        Message(0, "Debug/System power-up request sent");
[05:11:09.778]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:11:09.781]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:11:09.782]      </block>
[05:11:09.782]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:11:09.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:11:09.783]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:11:09.784]        // while-condition  =>  FALSE
[05:11:09.784]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:11:09.784]      </control>
[05:11:09.784]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:11:09.784]        // if-block "(__protocol & 0xFFFF) == 1"
[05:11:09.784]          // =>  FALSE
[05:11:09.784]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:11:09.784]      </control>
[05:11:09.784]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:11:09.784]        // if-block "(__protocol & 0xFFFF) == 2"
[05:11:09.785]          // =>  TRUE
[05:11:09.785]        <block atomic="false" info="">
[05:11:09.785]          Message(0, "executing SWD power up");
[05:11:09.785]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:11:09.787]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:11:09.787]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:11:09.788]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:11:09.788]        </block>
[05:11:09.789]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:11:09.789]      </control>
[05:11:09.789]      // end if-block "powered_down"
[05:11:09.789]    </control>
[05:11:09.789]    <block atomic="false" info="">
[05:11:09.789]      __var DEBUG_PORT_VAL    = 0;
[05:11:09.789]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:11:09.789]      __var ACCESS_POINT_VAL  = 0;
[05:11:09.790]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:11:09.790]      __ap = 1; 
[05:11:09.790]        // -> [__ap <= 0x00000001]
[05:11:09.790]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:11:09.794]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:11:09.794]      __ap = 4;
[05:11:09.794]        // -> [__ap <= 0x00000004]
[05:11:09.794]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:09.797]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:11:09.797]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:11:09.797]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:09.797]    </block>
[05:11:09.797]    <block atomic="false" info="">
[05:11:09.797]      __var nReset = 0x80;
[05:11:09.797]        // -> [nReset <= 0x00000080]
[05:11:09.797]      __var canReadPins = 0;
[05:11:09.797]        // -> [canReadPins <= 0x00000000]
[05:11:09.798]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:11:09.799]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:11:09.799]        // -> [canReadPins <= 0x00000001]
[05:11:09.799]    </block>
[05:11:09.799]    <control if="" while="1" timeout="200" info="">
[05:11:09.799]      // while "1"  (timeout="200")
[05:11:09.799]      // while-condition  =>  TRUE
[05:11:09.799]      // while "1"  (timeout="200")
[05:11:09.799]      // while-condition  =>  TRUE
[05:11:09.799]      // while "1"  (timeout="200")
[05:11:09.799]      // while-condition  =>  TRUE
[05:11:09.799]      // while "1"  (timeout="200")
[05:11:09.801]      // while-condition  =>  TRUE
[05:11:09.801]      // while "1"  (timeout="200")
[05:11:09.801]      // while-condition  =>  TRUE
[05:11:09.801]      // while "1"  (timeout="200")
[05:11:09.801]      // while-condition  =>  TRUE
[05:11:09.801]      // while "1"  (timeout="200")
[05:11:09.801]      // while-condition  =>  TRUE
[05:11:09.801]      // while "1"  (timeout="200")
[05:11:09.801]      // while-condition  =>  TRUE
[05:11:09.801]      // while "1"  (timeout="200")
[05:11:09.802]      // while-condition  =>  TRUE
[05:11:09.802]      // while "1"  (timeout="200")
[05:11:09.802]      // while-condition  =>  TRUE
[05:11:09.802]      // while "1"  (timeout="200")
[05:11:09.802]      // while-condition  =>  TRUE
[05:11:09.802]      // while "1"  (timeout="200")
[05:11:09.803]      // while-condition  =>  TRUE
[05:11:09.803]      // while "1"  (timeout="200")
[05:11:09.803]      // while-condition  =>  TRUE
[05:11:09.803]      // while "1"  (timeout="200")
[05:11:09.803]      // while-condition  =>  TRUE
[05:11:09.803]      // while "1"  (timeout="200")
[05:11:09.803]      // while-condition  =>  TRUE
[05:11:09.803]      // while "1"  (timeout="200")
[05:11:09.804]      // while-condition  =>  TRUE
[05:11:09.804]      // while "1"  (timeout="200")
[05:11:09.804]      // while-condition  =>  TRUE
[05:11:09.804]      // while "1"  (timeout="200")
[05:11:09.804]      // while-condition  =>  TRUE
[05:11:09.804]      // while "1"  (timeout="200")
[05:11:09.804]      // while-condition  =>  TRUE
[05:11:09.804]      // while "1"  (timeout="200")
[05:11:09.804]      // while-condition  =>  TRUE
[05:11:09.804]      // while "1"  (timeout="200")
[05:11:09.805]      // while-condition  =>  TRUE
[05:11:09.805]      // while "1"  (timeout="200")
[05:11:09.805]      // while-condition  =>  TRUE
[05:11:09.805]      // while "1"  (timeout="200")
[05:11:09.805]      // while-condition  =>  TRUE
[05:11:09.805]      // while "1"  (timeout="200")
[05:11:09.805]      // while-condition  =>  TRUE
[05:11:09.805]      // while "1"  (timeout="200")
[05:11:09.805]      // while-condition  =>  TRUE
[05:11:09.806]      // while "1"  (timeout="200")
[05:11:09.806]      // while-condition  =>  TRUE
[05:11:09.806]      // while "1"  (timeout="200")
[05:11:09.806]      // while-condition  =>  TRUE
[05:11:09.806]      // while "1"  (timeout="200")
[05:11:09.806]      // while-condition  =>  TRUE
[05:11:09.806]      // while "1"  (timeout="200")
[05:11:09.806]      // while-condition  =>  TRUE
[05:11:09.806]      // while "1"  (timeout="200")
[05:11:09.807]      // while-condition  =>  TRUE
[05:11:09.807]      // while "1"  (timeout="200")
[05:11:09.807]      // while-condition  =>  TRUE
[05:11:09.807]      // while "1"  (timeout="200")
[05:11:09.807]      // while-condition  =>  TRUE
[05:11:09.807]      // while "1"  (timeout="200")
[05:11:09.807]      // while-condition  =>  TRUE
[05:11:09.807]      // while "1"  (timeout="200")
[05:11:09.807]      // while-condition  =>  TRUE
[05:11:09.807]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.808]      // while "1"  (timeout="200")
[05:11:09.808]      // while-condition  =>  TRUE
[05:11:09.809]      // while "1"  (timeout="200")
[05:11:09.809]      // while-condition  =>  TRUE
[05:11:09.809]      // while "1"  (timeout="200")
[05:11:09.809]      // while-condition  =>  TRUE
[05:11:09.809]      // while "1"  (timeout="200")
[05:11:09.809]      // while-condition  =>  TRUE
[05:11:09.809]      // while "1"  (timeout="200")
[05:11:09.809]      // while-condition  =>  TRUE
[05:11:09.810]      // while "1"  (timeout="200")
[05:11:09.810]      // while-condition  =>  TRUE
[05:11:09.810]      // while "1"  (timeout="200")
[05:11:09.810]      // while-condition  =>  TRUE
[05:11:09.810]      // while "1"  (timeout="200")
[05:11:09.810]      // while-condition  =>  TRUE
[05:11:09.811]      // while "1"  (timeout="200")
[05:11:09.811]      // while-condition  =>  TRUE
[05:11:09.811]      // while "1"  (timeout="200")
[05:11:09.811]      // while-condition  =>  TRUE
[05:11:09.811]      // while "1"  (timeout="200")
[05:11:09.811]      // while-condition  =>  TRUE
[05:11:09.811]      // while "1"  (timeout="200")
[05:11:09.811]      // while-condition  =>  TRUE
[05:11:09.812]      // while "1"  (timeout="200")
[05:11:09.812]      // while-condition  =>  TRUE
[05:11:09.812]      // while "1"  (timeout="200")
[05:11:09.812]      // while-condition  =>  TRUE
[05:11:09.812]      // while "1"  (timeout="200")
[05:11:09.812]      // while-condition  =>  TRUE
[05:11:09.812]      // while "1"  (timeout="200")
[05:11:09.812]      // while-condition  =>  TRUE
[05:11:09.812]      // while "1"  (timeout="200")
[05:11:09.813]      // while-condition  =>  TRUE
[05:11:09.813]      // while "1"  (timeout="200")
[05:11:09.813]      // while  =>  TIMEOUT
[05:11:09.813]      // end while "1"
[05:11:09.813]    </control>
[05:11:09.813]    <control if="canReadPins" while="" timeout="0" info="">
[05:11:09.814]      // if-block "canReadPins"
[05:11:09.814]        // =>  TRUE
[05:11:09.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:11:09.814]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:11:09.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:11:09.816]        // while-condition  =>  FALSE
[05:11:09.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:11:09.816]      </control>
[05:11:09.816]      // end if-block "canReadPins"
[05:11:09.817]    </control>
[05:11:09.817]    <control if="!canReadPins" while="" timeout="0" info="">
[05:11:09.817]      // if-block "!canReadPins"
[05:11:09.817]        // =>  FALSE
[05:11:09.817]      // skip if-block "!canReadPins"
[05:11:09.817]    </control>
[05:11:09.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:11:09.819]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:09.819]        // =>  TRUE
[05:11:09.819]      <block atomic="false" info="">
[05:11:09.819]        WriteAP(0x00, 0x190008);
[05:11:09.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:09.820]        WriteAP(0xF0, 0x01);
[05:11:09.824]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:09.824]      </block>
[05:11:09.824]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:09.824]    </control>
[05:11:09.824]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:11:09.824]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:09.824]        // =>  FALSE
[05:11:09.824]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:09.824]    </control>
[05:11:09.825]    <block atomic="false" info="">
[05:11:09.825]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:09.828]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:11:09.828]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:11:09.828]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:09.828]      __ap = 0; //lets make sure we reset the access point selection
[05:11:09.828]        // -> [__ap <= 0x00000000]
[05:11:09.828]    </block>
[05:11:09.828]  </sequence>
[05:11:09.828]  
[05:11:09.852]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:11:09.852]  
[05:11:09.853]  <debugvars>
[05:11:09.853]    // Pre-defined
[05:11:09.853]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:09.853]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:09.854]    __dp=0x00000000
[05:11:09.854]    __ap=0x00000000
[05:11:09.854]    __traceout=0x00000000      (Trace Disabled)
[05:11:09.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:09.854]    __FlashAddr=0x00000000
[05:11:09.854]    __FlashLen=0x00000000
[05:11:09.854]    __FlashArg=0x00000000
[05:11:09.854]    __FlashOp=0x00000000
[05:11:09.854]    __Result=0x00000000
[05:11:09.855]  </debugvars>
[05:11:09.855]  
[05:11:09.855]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:11:09.855]    <block atomic="false" info="">
[05:11:09.855]      __var deviceID = 0;
[05:11:09.855]        // -> [deviceID <= 0x00000000]
[05:11:09.855]      __var version = 0;
[05:11:09.855]        // -> [version <= 0x00000000]
[05:11:09.855]      __var partNum = 0;
[05:11:09.855]        // -> [partNum <= 0x00000000]
[05:11:09.855]      __var manuf = 0;
[05:11:09.856]        // -> [manuf <= 0x00000000]
[05:11:09.856]      __var isMSPM0G1X0X_G3X0X = 0;
[05:11:09.856]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:11:09.856]      __var isProduction = 0;
[05:11:09.856]        // -> [isProduction <= 0x00000000]
[05:11:09.856]      __var continueId = 0;
[05:11:09.856]        // -> [continueId <= 0x00000000]
[05:11:09.857]      deviceID =   Read32(0x41C40004);
[05:11:09.863]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:11:09.863]        // -> [deviceID <= 0x2BB8802F]
[05:11:09.864]      version = deviceID >> 28;
[05:11:09.864]        // -> [version <= 0x00000002]
[05:11:09.864]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:11:09.864]        // -> [partNum <= 0x0000BB88]
[05:11:09.864]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:11:09.864]        // -> [manuf <= 0x00000017]
[05:11:09.864]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:11:09.864]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:11:09.865]      isProduction = (version > 0);
[05:11:09.865]        // -> [isProduction <= 0x00000001]
[05:11:09.865]    </block>
[05:11:09.865]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:11:09.865]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:11:09.865]        // =>  FALSE
[05:11:09.865]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:11:09.865]    </control>
[05:11:09.865]    <control if="continueId == 4" while="" timeout="0" info="">
[05:11:09.866]      // if-block "continueId == 4"
[05:11:09.866]        // =>  FALSE
[05:11:09.866]      // skip if-block "continueId == 4"
[05:11:09.866]    </control>
[05:11:09.866]    <control if="!isProduction" while="" timeout="0" info="">
[05:11:09.866]      // if-block "!isProduction"
[05:11:09.866]        // =>  FALSE
[05:11:09.866]      // skip if-block "!isProduction"
[05:11:09.866]    </control>
[05:11:09.866]  </sequence>
[05:11:09.867]  
[05:12:39.486]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:12:39.486]  
[05:12:39.494]  <debugvars>
[05:12:39.494]    // Pre-defined
[05:12:39.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:12:39.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:12:39.495]    __dp=0x00000000
[05:12:39.495]    __ap=0x00000000
[05:12:39.495]    __traceout=0x00000000      (Trace Disabled)
[05:12:39.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:12:39.495]    __FlashAddr=0x00000000
[05:12:39.495]    __FlashLen=0x00000000
[05:12:39.496]    __FlashArg=0x00000000
[05:12:39.496]    __FlashOp=0x00000000
[05:12:39.496]    __Result=0x00000000
[05:12:39.496]  </debugvars>
[05:12:39.496]  
[05:12:39.496]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:12:39.496]    <block atomic="false" info="">
[05:12:39.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:12:39.497]        // -> [isSWJ <= 0x00000001]
[05:12:39.497]      __var hasDormant = __protocol & 0x00020000;
[05:12:39.497]        // -> [hasDormant <= 0x00000000]
[05:12:39.497]      __var protType   = __protocol & 0x0000FFFF;
[05:12:39.497]        // -> [protType <= 0x00000002]
[05:12:39.497]    </block>
[05:12:39.497]    <control if="protType == 1" while="" timeout="0" info="">
[05:12:39.497]      // if-block "protType == 1"
[05:12:39.497]        // =>  FALSE
[05:12:39.498]      // skip if-block "protType == 1"
[05:12:39.498]    </control>
[05:12:39.498]    <control if="protType == 2" while="" timeout="0" info="">
[05:12:39.498]      // if-block "protType == 2"
[05:12:39.498]        // =>  TRUE
[05:12:39.498]      <control if="isSWJ" while="" timeout="0" info="">
[05:12:39.498]        // if-block "isSWJ"
[05:12:39.498]          // =>  TRUE
[05:12:39.498]        <control if="hasDormant" while="" timeout="0" info="">
[05:12:39.498]          // if-block "hasDormant"
[05:12:39.499]            // =>  FALSE
[05:12:39.499]          // skip if-block "hasDormant"
[05:12:39.499]        </control>
[05:12:39.500]        <control if="!hasDormant" while="" timeout="0" info="">
[05:12:39.500]          // if-block "!hasDormant"
[05:12:39.500]            // =>  TRUE
[05:12:39.500]          <block atomic="false" info="">
[05:12:39.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:12:39.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:12:39.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:12:39.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:12:39.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:12:39.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:12:39.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:12:39.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:12:39.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:12:39.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:12:39.509]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:12:39.511]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:12:39.511]          </block>
[05:12:39.511]          // end if-block "!hasDormant"
[05:12:39.511]        </control>
[05:12:39.511]        // end if-block "isSWJ"
[05:12:39.511]      </control>
[05:12:39.511]      <control if="!isSWJ" while="" timeout="0" info="">
[05:12:39.511]        // if-block "!isSWJ"
[05:12:39.512]          // =>  FALSE
[05:12:39.512]        // skip if-block "!isSWJ"
[05:12:39.512]      </control>
[05:12:39.512]      <block atomic="false" info="">
[05:12:39.512]        ReadDP(0x0);
[05:12:39.513]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:12:39.514]      </block>
[05:12:39.514]      // end if-block "protType == 2"
[05:12:39.514]    </control>
[05:12:39.514]  </sequence>
[05:12:39.514]  
[05:12:39.517]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:12:39.517]  
[05:12:39.517]  <debugvars>
[05:12:39.517]    // Pre-defined
[05:12:39.518]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:12:39.518]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:12:39.518]    __dp=0x00000000
[05:12:39.518]    __ap=0x00000000
[05:12:39.518]    __traceout=0x00000000      (Trace Disabled)
[05:12:39.518]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:12:39.518]    __FlashAddr=0x00000000
[05:12:39.518]    __FlashLen=0x00000000
[05:12:39.519]    __FlashArg=0x00000000
[05:12:39.519]    __FlashOp=0x00000000
[05:12:39.519]    __Result=0x00000000
[05:12:39.519]  </debugvars>
[05:12:39.519]  
[05:12:39.519]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:12:39.519]    <block atomic="false" info="">
[05:12:39.519]      __var SW_DP_ABORT       = 0x0;
[05:12:39.519]        // -> [SW_DP_ABORT <= 0x00000000]
[05:12:39.519]      __var DP_CTRL_STAT      = 0x4;
[05:12:39.520]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:12:39.520]      __var DP_SELECT         = 0x8;
[05:12:39.520]        // -> [DP_SELECT <= 0x00000008]
[05:12:39.520]      __var powered_down      = 0;
[05:12:39.520]        // -> [powered_down <= 0x00000000]
[05:12:39.520]      WriteDP(DP_SELECT, 0x00000000);
[05:12:39.524]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:12:39.524]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:12:39.526]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:12:39.526]        // -> [powered_down <= 0x00000001]
[05:12:39.526]    </block>
[05:12:39.526]    <control if="powered_down" while="" timeout="0" info="">
[05:12:39.526]      // if-block "powered_down"
[05:12:39.526]        // =>  TRUE
[05:12:39.526]      <block atomic="false" info="">
[05:12:39.526]        Message(0, "Debug/System power-up request sent");
[05:12:39.526]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:12:39.528]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:12:39.528]      </block>
[05:12:39.528]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:12:39.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:12:39.530]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:12:39.530]        // while-condition  =>  FALSE
[05:12:39.530]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:12:39.530]      </control>
[05:12:39.530]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:12:39.530]        // if-block "(__protocol & 0xFFFF) == 1"
[05:12:39.530]          // =>  FALSE
[05:12:39.530]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:12:39.531]      </control>
[05:12:39.531]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:12:39.531]        // if-block "(__protocol & 0xFFFF) == 2"
[05:12:39.531]          // =>  TRUE
[05:12:39.531]        <block atomic="false" info="">
[05:12:39.531]          Message(0, "executing SWD power up");
[05:12:39.531]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:12:39.533]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:12:39.533]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:12:39.535]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:12:39.535]        </block>
[05:12:39.535]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:12:39.535]      </control>
[05:12:39.535]      // end if-block "powered_down"
[05:12:39.537]    </control>
[05:12:39.537]    <block atomic="false" info="">
[05:12:39.537]      __var DEBUG_PORT_VAL    = 0;
[05:12:39.537]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:12:39.537]      __var ACCESS_POINT_VAL  = 0;
[05:12:39.537]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:12:39.537]      __ap = 1; 
[05:12:39.537]        // -> [__ap <= 0x00000001]
[05:12:39.537]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:12:39.540]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:12:39.540]      __ap = 4;
[05:12:39.540]        // -> [__ap <= 0x00000004]
[05:12:39.540]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:12:39.544]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:12:39.544]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:12:39.544]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:12:39.544]    </block>
[05:12:39.545]    <block atomic="false" info="">
[05:12:39.545]      __var nReset = 0x80;
[05:12:39.545]        // -> [nReset <= 0x00000080]
[05:12:39.545]      __var canReadPins = 0;
[05:12:39.545]        // -> [canReadPins <= 0x00000000]
[05:12:39.545]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:12:39.547]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:12:39.547]        // -> [canReadPins <= 0x00000001]
[05:12:39.547]    </block>
[05:12:39.547]    <control if="" while="1" timeout="200" info="">
[05:12:39.547]      // while "1"  (timeout="200")
[05:12:39.547]      // while-condition  =>  TRUE
[05:12:39.547]      // while "1"  (timeout="200")
[05:12:39.547]      // while-condition  =>  TRUE
[05:12:39.548]      // while "1"  (timeout="200")
[05:12:39.548]      // while  =>  TIMEOUT
[05:12:39.548]      // end while "1"
[05:12:39.548]    </control>
[05:12:39.548]    <control if="canReadPins" while="" timeout="0" info="">
[05:12:39.548]      // if-block "canReadPins"
[05:12:39.548]        // =>  TRUE
[05:12:39.548]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:12:39.548]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:12:39.550]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:12:39.550]        // while-condition  =>  FALSE
[05:12:39.550]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:12:39.550]      </control>
[05:12:39.550]      // end if-block "canReadPins"
[05:12:39.550]    </control>
[05:12:39.551]    <control if="!canReadPins" while="" timeout="0" info="">
[05:12:39.551]      // if-block "!canReadPins"
[05:12:39.551]        // =>  FALSE
[05:12:39.551]      // skip if-block "!canReadPins"
[05:12:39.551]    </control>
[05:12:39.551]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:12:39.551]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:12:39.551]        // =>  TRUE
[05:12:39.551]      <block atomic="false" info="">
[05:12:39.551]        WriteAP(0x00, 0x190008);
[05:12:39.553]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:12:39.554]        WriteAP(0xF0, 0x01);
[05:12:39.557]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:12:39.557]      </block>
[05:12:39.557]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:12:39.557]    </control>
[05:12:39.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:12:39.558]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:12:39.558]        // =>  FALSE
[05:12:39.558]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:12:39.558]    </control>
[05:12:39.558]    <block atomic="false" info="">
[05:12:39.558]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:12:39.561]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:12:39.561]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:12:39.562]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:12:39.562]      __ap = 0; //lets make sure we reset the access point selection
[05:12:39.562]        // -> [__ap <= 0x00000000]
[05:12:39.562]    </block>
[05:12:39.563]  </sequence>
[05:12:39.563]  
[05:12:39.584]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:12:39.584]  
[05:12:39.584]  <debugvars>
[05:12:39.584]    // Pre-defined
[05:12:39.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:12:39.584]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:12:39.584]    __dp=0x00000000
[05:12:39.584]    __ap=0x00000000
[05:12:39.584]    __traceout=0x00000000      (Trace Disabled)
[05:12:39.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:12:39.585]    __FlashAddr=0x00000000
[05:12:39.585]    __FlashLen=0x00000000
[05:12:39.585]    __FlashArg=0x00000000
[05:12:39.585]    __FlashOp=0x00000000
[05:12:39.585]    __Result=0x00000000
[05:12:39.585]  </debugvars>
[05:12:39.585]  
[05:12:39.585]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:12:39.586]    <block atomic="false" info="">
[05:12:39.586]      __var deviceID = 0;
[05:12:39.586]        // -> [deviceID <= 0x00000000]
[05:12:39.586]      __var version = 0;
[05:12:39.586]        // -> [version <= 0x00000000]
[05:12:39.586]      __var partNum = 0;
[05:12:39.586]        // -> [partNum <= 0x00000000]
[05:12:39.586]      __var manuf = 0;
[05:12:39.586]        // -> [manuf <= 0x00000000]
[05:12:39.586]      __var isMSPM0G1X0X_G3X0X = 0;
[05:12:39.587]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:12:39.587]      __var isProduction = 0;
[05:12:39.587]        // -> [isProduction <= 0x00000000]
[05:12:39.587]      __var continueId = 0;
[05:12:39.587]        // -> [continueId <= 0x00000000]
[05:12:39.587]      deviceID =   Read32(0x41C40004);
[05:12:39.593]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:12:39.593]        // -> [deviceID <= 0x2BB8802F]
[05:12:39.594]      version = deviceID >> 28;
[05:12:39.594]        // -> [version <= 0x00000002]
[05:12:39.594]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:12:39.594]        // -> [partNum <= 0x0000BB88]
[05:12:39.594]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:12:39.594]        // -> [manuf <= 0x00000017]
[05:12:39.594]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:12:39.594]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:12:39.595]      isProduction = (version > 0);
[05:12:39.595]        // -> [isProduction <= 0x00000001]
[05:12:39.595]    </block>
[05:12:39.595]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:12:39.595]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:12:39.595]        // =>  FALSE
[05:12:39.595]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:12:39.595]    </control>
[05:12:39.596]    <control if="continueId == 4" while="" timeout="0" info="">
[05:12:39.596]      // if-block "continueId == 4"
[05:12:39.596]        // =>  FALSE
[05:12:39.596]      // skip if-block "continueId == 4"
[05:12:39.596]    </control>
[05:12:39.596]    <control if="!isProduction" while="" timeout="0" info="">
[05:12:39.596]      // if-block "!isProduction"
[05:12:39.596]        // =>  FALSE
[05:12:39.596]      // skip if-block "!isProduction"
[05:12:39.596]    </control>
[05:12:39.596]  </sequence>
[05:12:39.596]  
[05:13:57.626]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:13:57.626]  
[05:13:57.635]  <debugvars>
[05:13:57.635]    // Pre-defined
[05:13:57.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:57.635]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:57.636]    __dp=0x00000000
[05:13:57.636]    __ap=0x00000000
[05:13:57.636]    __traceout=0x00000000      (Trace Disabled)
[05:13:57.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:57.636]    __FlashAddr=0x00000000
[05:13:57.636]    __FlashLen=0x00000000
[05:13:57.636]    __FlashArg=0x00000000
[05:13:57.636]    __FlashOp=0x00000000
[05:13:57.636]    __Result=0x00000000
[05:13:57.637]  </debugvars>
[05:13:57.637]  
[05:13:57.637]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:13:57.637]    <block atomic="false" info="">
[05:13:57.637]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:13:57.637]        // -> [isSWJ <= 0x00000001]
[05:13:57.637]      __var hasDormant = __protocol & 0x00020000;
[05:13:57.637]        // -> [hasDormant <= 0x00000000]
[05:13:57.637]      __var protType   = __protocol & 0x0000FFFF;
[05:13:57.637]        // -> [protType <= 0x00000002]
[05:13:57.638]    </block>
[05:13:57.638]    <control if="protType == 1" while="" timeout="0" info="">
[05:13:57.638]      // if-block "protType == 1"
[05:13:57.638]        // =>  FALSE
[05:13:57.638]      // skip if-block "protType == 1"
[05:13:57.638]    </control>
[05:13:57.638]    <control if="protType == 2" while="" timeout="0" info="">
[05:13:57.638]      // if-block "protType == 2"
[05:13:57.638]        // =>  TRUE
[05:13:57.639]      <control if="isSWJ" while="" timeout="0" info="">
[05:13:57.639]        // if-block "isSWJ"
[05:13:57.639]          // =>  TRUE
[05:13:57.639]        <control if="hasDormant" while="" timeout="0" info="">
[05:13:57.639]          // if-block "hasDormant"
[05:13:57.639]            // =>  FALSE
[05:13:57.639]          // skip if-block "hasDormant"
[05:13:57.639]        </control>
[05:13:57.639]        <control if="!hasDormant" while="" timeout="0" info="">
[05:13:57.640]          // if-block "!hasDormant"
[05:13:57.640]            // =>  TRUE
[05:13:57.640]          <block atomic="false" info="">
[05:13:57.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:13:57.642]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:57.642]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:13:57.643]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:13:57.643]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:13:57.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:57.644]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:13:57.646]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:13:57.646]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:13:57.647]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:57.647]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:13:57.649]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:13:57.649]          </block>
[05:13:57.649]          // end if-block "!hasDormant"
[05:13:57.649]        </control>
[05:13:57.649]        // end if-block "isSWJ"
[05:13:57.650]      </control>
[05:13:57.650]      <control if="!isSWJ" while="" timeout="0" info="">
[05:13:57.650]        // if-block "!isSWJ"
[05:13:57.650]          // =>  FALSE
[05:13:57.650]        // skip if-block "!isSWJ"
[05:13:57.650]      </control>
[05:13:57.650]      <block atomic="false" info="">
[05:13:57.650]        ReadDP(0x0);
[05:13:57.652]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:13:57.652]      </block>
[05:13:57.652]      // end if-block "protType == 2"
[05:13:57.652]    </control>
[05:13:57.652]  </sequence>
[05:13:57.653]  
[05:13:57.655]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:13:57.655]  
[05:13:57.655]  <debugvars>
[05:13:57.655]    // Pre-defined
[05:13:57.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:57.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:57.656]    __dp=0x00000000
[05:13:57.656]    __ap=0x00000000
[05:13:57.656]    __traceout=0x00000000      (Trace Disabled)
[05:13:57.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:57.656]    __FlashAddr=0x00000000
[05:13:57.656]    __FlashLen=0x00000000
[05:13:57.656]    __FlashArg=0x00000000
[05:13:57.656]    __FlashOp=0x00000000
[05:13:57.657]    __Result=0x00000000
[05:13:57.657]  </debugvars>
[05:13:57.657]  
[05:13:57.657]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:13:57.657]    <block atomic="false" info="">
[05:13:57.657]      __var SW_DP_ABORT       = 0x0;
[05:13:57.657]        // -> [SW_DP_ABORT <= 0x00000000]
[05:13:57.657]      __var DP_CTRL_STAT      = 0x4;
[05:13:57.658]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:13:57.658]      __var DP_SELECT         = 0x8;
[05:13:57.658]        // -> [DP_SELECT <= 0x00000008]
[05:13:57.658]      __var powered_down      = 0;
[05:13:57.658]        // -> [powered_down <= 0x00000000]
[05:13:57.658]      WriteDP(DP_SELECT, 0x00000000);
[05:13:57.659]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:13:57.660]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:13:57.661]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:13:57.661]        // -> [powered_down <= 0x00000001]
[05:13:57.661]    </block>
[05:13:57.661]    <control if="powered_down" while="" timeout="0" info="">
[05:13:57.662]      // if-block "powered_down"
[05:13:57.662]        // =>  TRUE
[05:13:57.662]      <block atomic="false" info="">
[05:13:57.662]        Message(0, "Debug/System power-up request sent");
[05:13:57.662]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:13:57.664]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:13:57.665]      </block>
[05:13:57.665]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:13:57.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:13:57.666]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:13:57.666]        // while-condition  =>  FALSE
[05:13:57.667]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:13:57.667]      </control>
[05:13:57.667]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:13:57.667]        // if-block "(__protocol & 0xFFFF) == 1"
[05:13:57.667]          // =>  FALSE
[05:13:57.667]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:13:57.667]      </control>
[05:13:57.668]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:13:57.668]        // if-block "(__protocol & 0xFFFF) == 2"
[05:13:57.668]          // =>  TRUE
[05:13:57.668]        <block atomic="false" info="">
[05:13:57.668]          Message(0, "executing SWD power up");
[05:13:57.669]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:13:57.670]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:13:57.671]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:13:57.673]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:13:57.673]        </block>
[05:13:57.673]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:13:57.673]      </control>
[05:13:57.673]      // end if-block "powered_down"
[05:13:57.673]    </control>
[05:13:57.673]    <block atomic="false" info="">
[05:13:57.673]      __var DEBUG_PORT_VAL    = 0;
[05:13:57.673]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:13:57.674]      __var ACCESS_POINT_VAL  = 0;
[05:13:57.674]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:13:57.674]      __ap = 1; 
[05:13:57.674]        // -> [__ap <= 0x00000001]
[05:13:57.674]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:13:57.677]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:13:57.677]      __ap = 4;
[05:13:57.677]        // -> [__ap <= 0x00000004]
[05:13:57.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:57.681]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:13:57.681]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:13:57.681]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:57.681]    </block>
[05:13:57.681]    <block atomic="false" info="">
[05:13:57.681]      __var nReset = 0x80;
[05:13:57.681]        // -> [nReset <= 0x00000080]
[05:13:57.681]      __var canReadPins = 0;
[05:13:57.682]        // -> [canReadPins <= 0x00000000]
[05:13:57.682]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:13:57.683]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:13:57.683]        // -> [canReadPins <= 0x00000001]
[05:13:57.683]    </block>
[05:13:57.683]    <control if="" while="1" timeout="200" info="">
[05:13:57.683]      // while "1"  (timeout="200")
[05:13:57.684]      // while-condition  =>  TRUE
[05:13:57.684]      // while "1"  (timeout="200")
[05:13:57.684]      // while-condition  =>  TRUE
[05:13:57.684]      // while "1"  (timeout="200")
[05:13:57.684]      // while-condition  =>  TRUE
[05:13:57.684]      // while "1"  (timeout="200")
[05:13:57.684]      // while-condition  =>  TRUE
[05:13:57.684]      // while "1"  (timeout="200")
[05:13:57.684]      // while-condition  =>  TRUE
[05:13:57.685]      // while "1"  (timeout="200")
[05:13:57.685]      // while-condition  =>  TRUE
[05:13:57.685]      // while "1"  (timeout="200")
[05:13:57.685]      // while-condition  =>  TRUE
[05:13:57.685]      // while "1"  (timeout="200")
[05:13:57.686]      // while-condition  =>  TRUE
[05:13:57.686]      // while "1"  (timeout="200")
[05:13:57.686]      // while-condition  =>  TRUE
[05:13:57.686]      // while "1"  (timeout="200")
[05:13:57.686]      // while-condition  =>  TRUE
[05:13:57.686]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.687]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.687]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.687]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.687]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.687]      // while "1"  (timeout="200")
[05:13:57.687]      // while-condition  =>  TRUE
[05:13:57.688]      // while "1"  (timeout="200")
[05:13:57.688]      // while-condition  =>  TRUE
[05:13:57.688]      // while "1"  (timeout="200")
[05:13:57.688]      // while-condition  =>  TRUE
[05:13:57.688]      // while "1"  (timeout="200")
[05:13:57.688]      // while-condition  =>  TRUE
[05:13:57.688]      // while "1"  (timeout="200")
[05:13:57.688]      // while-condition  =>  TRUE
[05:13:57.688]      // while "1"  (timeout="200")
[05:13:57.688]      // while-condition  =>  TRUE
[05:13:57.689]      // while "1"  (timeout="200")
[05:13:57.689]      // while  =>  TIMEOUT
[05:13:57.689]      // end while "1"
[05:13:57.689]    </control>
[05:13:57.689]    <control if="canReadPins" while="" timeout="0" info="">
[05:13:57.689]      // if-block "canReadPins"
[05:13:57.689]        // =>  TRUE
[05:13:57.689]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:13:57.689]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:13:57.691]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:13:57.691]        // while-condition  =>  FALSE
[05:13:57.691]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:13:57.691]      </control>
[05:13:57.691]      // end if-block "canReadPins"
[05:13:57.691]    </control>
[05:13:57.691]    <control if="!canReadPins" while="" timeout="0" info="">
[05:13:57.691]      // if-block "!canReadPins"
[05:13:57.691]        // =>  FALSE
[05:13:57.691]      // skip if-block "!canReadPins"
[05:13:57.691]    </control>
[05:13:57.691]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:13:57.692]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:57.692]        // =>  TRUE
[05:13:57.692]      <block atomic="false" info="">
[05:13:57.692]        WriteAP(0x00, 0x190008);
[05:13:57.694]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:57.694]        WriteAP(0xF0, 0x01);
[05:13:57.701]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:57.701]      </block>
[05:13:57.702]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:57.702]    </control>
[05:13:57.702]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:13:57.702]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:57.702]        // =>  FALSE
[05:13:57.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:57.703]    </control>
[05:13:57.703]    <block atomic="false" info="">
[05:13:57.703]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:57.707]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:13:57.707]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:13:57.708]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:57.708]      __ap = 0; //lets make sure we reset the access point selection
[05:13:57.708]        // -> [__ap <= 0x00000000]
[05:13:57.708]    </block>
[05:13:57.708]  </sequence>
[05:13:57.708]  
[05:13:57.732]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:13:57.732]  
[05:13:57.732]  <debugvars>
[05:13:57.732]    // Pre-defined
[05:13:57.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:57.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:57.732]    __dp=0x00000000
[05:13:57.733]    __ap=0x00000000
[05:13:57.733]    __traceout=0x00000000      (Trace Disabled)
[05:13:57.733]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:57.733]    __FlashAddr=0x00000000
[05:13:57.733]    __FlashLen=0x00000000
[05:13:57.733]    __FlashArg=0x00000000
[05:13:57.733]    __FlashOp=0x00000000
[05:13:57.733]    __Result=0x00000000
[05:13:57.733]  </debugvars>
[05:13:57.734]  
[05:13:57.734]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:13:57.734]    <block atomic="false" info="">
[05:13:57.734]      __var deviceID = 0;
[05:13:57.734]        // -> [deviceID <= 0x00000000]
[05:13:57.734]      __var version = 0;
[05:13:57.734]        // -> [version <= 0x00000000]
[05:13:57.734]      __var partNum = 0;
[05:13:57.734]        // -> [partNum <= 0x00000000]
[05:13:57.735]      __var manuf = 0;
[05:13:57.735]        // -> [manuf <= 0x00000000]
[05:13:57.735]      __var isMSPM0G1X0X_G3X0X = 0;
[05:13:57.735]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:13:57.735]      __var isProduction = 0;
[05:13:57.735]        // -> [isProduction <= 0x00000000]
[05:13:57.735]      __var continueId = 0;
[05:13:57.735]        // -> [continueId <= 0x00000000]
[05:13:57.735]      deviceID =   Read32(0x41C40004);
[05:13:57.740]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:13:57.740]        // -> [deviceID <= 0x2BB8802F]
[05:13:57.740]      version = deviceID >> 28;
[05:13:57.741]        // -> [version <= 0x00000002]
[05:13:57.741]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:13:57.741]        // -> [partNum <= 0x0000BB88]
[05:13:57.741]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:13:57.741]        // -> [manuf <= 0x00000017]
[05:13:57.741]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:13:57.741]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:13:57.741]      isProduction = (version > 0);
[05:13:57.741]        // -> [isProduction <= 0x00000001]
[05:13:57.741]    </block>
[05:13:57.742]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:13:57.742]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:13:57.742]        // =>  FALSE
[05:13:57.742]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:13:57.742]    </control>
[05:13:57.742]    <control if="continueId == 4" while="" timeout="0" info="">
[05:13:57.742]      // if-block "continueId == 4"
[05:13:57.742]        // =>  FALSE
[05:13:57.743]      // skip if-block "continueId == 4"
[05:13:57.743]    </control>
[05:13:57.743]    <control if="!isProduction" while="" timeout="0" info="">
[05:13:57.743]      // if-block "!isProduction"
[05:13:57.743]        // =>  FALSE
[05:13:57.743]      // skip if-block "!isProduction"
[05:13:57.743]    </control>
[05:13:57.744]  </sequence>
[05:13:57.744]  
[05:15:07.004]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:15:07.004]  
[05:15:07.014]  <debugvars>
[05:15:07.014]    // Pre-defined
[05:15:07.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:15:07.014]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:15:07.014]    __dp=0x00000000
[05:15:07.014]    __ap=0x00000000
[05:15:07.014]    __traceout=0x00000000      (Trace Disabled)
[05:15:07.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:15:07.014]    __FlashAddr=0x00000000
[05:15:07.014]    __FlashLen=0x00000000
[05:15:07.014]    __FlashArg=0x00000000
[05:15:07.014]    __FlashOp=0x00000000
[05:15:07.014]    __Result=0x00000000
[05:15:07.014]  </debugvars>
[05:15:07.014]  
[05:15:07.014]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:15:07.014]    <block atomic="false" info="">
[05:15:07.016]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:15:07.016]        // -> [isSWJ <= 0x00000001]
[05:15:07.016]      __var hasDormant = __protocol & 0x00020000;
[05:15:07.016]        // -> [hasDormant <= 0x00000000]
[05:15:07.016]      __var protType   = __protocol & 0x0000FFFF;
[05:15:07.016]        // -> [protType <= 0x00000002]
[05:15:07.016]    </block>
[05:15:07.016]    <control if="protType == 1" while="" timeout="0" info="">
[05:15:07.016]      // if-block "protType == 1"
[05:15:07.016]        // =>  FALSE
[05:15:07.016]      // skip if-block "protType == 1"
[05:15:07.017]    </control>
[05:15:07.017]    <control if="protType == 2" while="" timeout="0" info="">
[05:15:07.017]      // if-block "protType == 2"
[05:15:07.017]        // =>  TRUE
[05:15:07.017]      <control if="isSWJ" while="" timeout="0" info="">
[05:15:07.017]        // if-block "isSWJ"
[05:15:07.017]          // =>  TRUE
[05:15:07.017]        <control if="hasDormant" while="" timeout="0" info="">
[05:15:07.017]          // if-block "hasDormant"
[05:15:07.017]            // =>  FALSE
[05:15:07.018]          // skip if-block "hasDormant"
[05:15:07.018]        </control>
[05:15:07.018]        <control if="!hasDormant" while="" timeout="0" info="">
[05:15:07.018]          // if-block "!hasDormant"
[05:15:07.018]            // =>  TRUE
[05:15:07.018]          <block atomic="false" info="">
[05:15:07.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:15:07.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:15:07.021]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:15:07.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:15:07.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:15:07.025]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:15:07.025]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:15:07.026]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:15:07.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:15:07.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:15:07.027]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:15:07.029]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:15:07.029]          </block>
[05:15:07.030]          // end if-block "!hasDormant"
[05:15:07.030]        </control>
[05:15:07.030]        // end if-block "isSWJ"
[05:15:07.030]      </control>
[05:15:07.030]      <control if="!isSWJ" while="" timeout="0" info="">
[05:15:07.030]        // if-block "!isSWJ"
[05:15:07.030]          // =>  FALSE
[05:15:07.030]        // skip if-block "!isSWJ"
[05:15:07.030]      </control>
[05:15:07.030]      <block atomic="false" info="">
[05:15:07.030]        ReadDP(0x0);
[05:15:07.032]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:15:07.033]      </block>
[05:15:07.033]      // end if-block "protType == 2"
[05:15:07.033]    </control>
[05:15:07.033]  </sequence>
[05:15:07.033]  
[05:15:07.036]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:15:07.036]  
[05:15:07.036]  <debugvars>
[05:15:07.036]    // Pre-defined
[05:15:07.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:15:07.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:15:07.036]    __dp=0x00000000
[05:15:07.036]    __ap=0x00000000
[05:15:07.036]    __traceout=0x00000000      (Trace Disabled)
[05:15:07.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:15:07.036]    __FlashAddr=0x00000000
[05:15:07.037]    __FlashLen=0x00000000
[05:15:07.037]    __FlashArg=0x00000000
[05:15:07.037]    __FlashOp=0x00000000
[05:15:07.037]    __Result=0x00000000
[05:15:07.037]  </debugvars>
[05:15:07.037]  
[05:15:07.037]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:15:07.037]    <block atomic="false" info="">
[05:15:07.037]      __var SW_DP_ABORT       = 0x0;
[05:15:07.038]        // -> [SW_DP_ABORT <= 0x00000000]
[05:15:07.038]      __var DP_CTRL_STAT      = 0x4;
[05:15:07.038]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:15:07.038]      __var DP_SELECT         = 0x8;
[05:15:07.038]        // -> [DP_SELECT <= 0x00000008]
[05:15:07.038]      __var powered_down      = 0;
[05:15:07.038]        // -> [powered_down <= 0x00000000]
[05:15:07.039]      WriteDP(DP_SELECT, 0x00000000);
[05:15:07.041]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:15:07.042]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:15:07.043]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:15:07.043]        // -> [powered_down <= 0x00000001]
[05:15:07.043]    </block>
[05:15:07.043]    <control if="powered_down" while="" timeout="0" info="">
[05:15:07.043]      // if-block "powered_down"
[05:15:07.044]        // =>  TRUE
[05:15:07.044]      <block atomic="false" info="">
[05:15:07.044]        Message(0, "Debug/System power-up request sent");
[05:15:07.045]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:15:07.047]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:15:07.047]      </block>
[05:15:07.048]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:15:07.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:15:07.050]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:15:07.050]        // while-condition  =>  FALSE
[05:15:07.051]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:15:07.051]      </control>
[05:15:07.051]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:15:07.051]        // if-block "(__protocol & 0xFFFF) == 1"
[05:15:07.051]          // =>  FALSE
[05:15:07.051]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:15:07.051]      </control>
[05:15:07.052]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:15:07.052]        // if-block "(__protocol & 0xFFFF) == 2"
[05:15:07.052]          // =>  TRUE
[05:15:07.052]        <block atomic="false" info="">
[05:15:07.052]          Message(0, "executing SWD power up");
[05:15:07.052]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:15:07.054]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:15:07.054]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:15:07.056]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:15:07.056]        </block>
[05:15:07.056]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:15:07.056]      </control>
[05:15:07.056]      // end if-block "powered_down"
[05:15:07.056]    </control>
[05:15:07.056]    <block atomic="false" info="">
[05:15:07.057]      __var DEBUG_PORT_VAL    = 0;
[05:15:07.057]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:15:07.057]      __var ACCESS_POINT_VAL  = 0;
[05:15:07.057]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:15:07.057]      __ap = 1; 
[05:15:07.057]        // -> [__ap <= 0x00000001]
[05:15:07.057]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:15:07.061]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:15:07.061]      __ap = 4;
[05:15:07.061]        // -> [__ap <= 0x00000004]
[05:15:07.061]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:15:07.064]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:15:07.064]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:15:07.064]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:15:07.064]    </block>
[05:15:07.064]    <block atomic="false" info="">
[05:15:07.064]      __var nReset = 0x80;
[05:15:07.064]        // -> [nReset <= 0x00000080]
[05:15:07.064]      __var canReadPins = 0;
[05:15:07.064]        // -> [canReadPins <= 0x00000000]
[05:15:07.064]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:15:07.066]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:15:07.066]        // -> [canReadPins <= 0x00000001]
[05:15:07.066]    </block>
[05:15:07.066]    <control if="" while="1" timeout="200" info="">
[05:15:07.066]      // while "1"  (timeout="200")
[05:15:07.066]      // while-condition  =>  TRUE
[05:15:07.066]      // while "1"  (timeout="200")
[05:15:07.068]      // while-condition  =>  TRUE
[05:15:07.068]      // while "1"  (timeout="200")
[05:15:07.068]      // while-condition  =>  TRUE
[05:15:07.068]      // while "1"  (timeout="200")
[05:15:07.068]      // while-condition  =>  TRUE
[05:15:07.068]      // while "1"  (timeout="200")
[05:15:07.068]      // while-condition  =>  TRUE
[05:15:07.068]      // while "1"  (timeout="200")
[05:15:07.068]      // while-condition  =>  TRUE
[05:15:07.068]      // while "1"  (timeout="200")
[05:15:07.069]      // while-condition  =>  TRUE
[05:15:07.069]      // while "1"  (timeout="200")
[05:15:07.069]      // while-condition  =>  TRUE
[05:15:07.069]      // while "1"  (timeout="200")
[05:15:07.069]      // while-condition  =>  TRUE
[05:15:07.069]      // while "1"  (timeout="200")
[05:15:07.069]      // while-condition  =>  TRUE
[05:15:07.069]      // while "1"  (timeout="200")
[05:15:07.069]      // while-condition  =>  TRUE
[05:15:07.069]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.070]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.070]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.070]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.070]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.070]      // while "1"  (timeout="200")
[05:15:07.070]      // while-condition  =>  TRUE
[05:15:07.071]      // while "1"  (timeout="200")
[05:15:07.071]      // while-condition  =>  TRUE
[05:15:07.071]      // while "1"  (timeout="200")
[05:15:07.071]      // while-condition  =>  TRUE
[05:15:07.071]      // while "1"  (timeout="200")
[05:15:07.071]      // while-condition  =>  TRUE
[05:15:07.071]      // while "1"  (timeout="200")
[05:15:07.071]      // while-condition  =>  TRUE
[05:15:07.071]      // while "1"  (timeout="200")
[05:15:07.071]      // while-condition  =>  TRUE
[05:15:07.072]      // while "1"  (timeout="200")
[05:15:07.072]      // while-condition  =>  TRUE
[05:15:07.072]      // while "1"  (timeout="200")
[05:15:07.072]      // while-condition  =>  TRUE
[05:15:07.072]      // while "1"  (timeout="200")
[05:15:07.072]      // while-condition  =>  TRUE
[05:15:07.072]      // while "1"  (timeout="200")
[05:15:07.072]      // while-condition  =>  TRUE
[05:15:07.072]      // while "1"  (timeout="200")
[05:15:07.073]      // while-condition  =>  TRUE
[05:15:07.073]      // while "1"  (timeout="200")
[05:15:07.073]      // while-condition  =>  TRUE
[05:15:07.073]      // while "1"  (timeout="200")
[05:15:07.073]      // while-condition  =>  TRUE
[05:15:07.073]      // while "1"  (timeout="200")
[05:15:07.074]      // while-condition  =>  TRUE
[05:15:07.074]      // while "1"  (timeout="200")
[05:15:07.074]      // while-condition  =>  TRUE
[05:15:07.074]      // while "1"  (timeout="200")
[05:15:07.074]      // while-condition  =>  TRUE
[05:15:07.074]      // while "1"  (timeout="200")
[05:15:07.075]      // while-condition  =>  TRUE
[05:15:07.075]      // while "1"  (timeout="200")
[05:15:07.075]      // while-condition  =>  TRUE
[05:15:07.075]      // while "1"  (timeout="200")
[05:15:07.075]      // while-condition  =>  TRUE
[05:15:07.075]      // while "1"  (timeout="200")
[05:15:07.075]      // while-condition  =>  TRUE
[05:15:07.076]      // while "1"  (timeout="200")
[05:15:07.076]      // while-condition  =>  TRUE
[05:15:07.076]      // while "1"  (timeout="200")
[05:15:07.076]      // while-condition  =>  TRUE
[05:15:07.076]      // while "1"  (timeout="200")
[05:15:07.076]      // while-condition  =>  TRUE
[05:15:07.076]      // while "1"  (timeout="200")
[05:15:07.076]      // while-condition  =>  TRUE
[05:15:07.076]      // while "1"  (timeout="200")
[05:15:07.076]      // while-condition  =>  TRUE
[05:15:07.077]      // while "1"  (timeout="200")
[05:15:07.077]      // while-condition  =>  TRUE
[05:15:07.077]      // while "1"  (timeout="200")
[05:15:07.077]      // while-condition  =>  TRUE
[05:15:07.077]      // while "1"  (timeout="200")
[05:15:07.077]      // while-condition  =>  TRUE
[05:15:07.077]      // while "1"  (timeout="200")
[05:15:07.077]      // while-condition  =>  TRUE
[05:15:07.077]      // while "1"  (timeout="200")
[05:15:07.077]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.078]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.078]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.078]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.078]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.078]      // while-condition  =>  TRUE
[05:15:07.078]      // while "1"  (timeout="200")
[05:15:07.079]      // while-condition  =>  TRUE
[05:15:07.079]      // while "1"  (timeout="200")
[05:15:07.079]      // while  =>  TIMEOUT
[05:15:07.079]      // end while "1"
[05:15:07.079]    </control>
[05:15:07.079]    <control if="canReadPins" while="" timeout="0" info="">
[05:15:07.079]      // if-block "canReadPins"
[05:15:07.079]        // =>  TRUE
[05:15:07.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:15:07.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:15:07.085]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:15:07.085]        // while-condition  =>  FALSE
[05:15:07.085]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:15:07.085]      </control>
[05:15:07.085]      // end if-block "canReadPins"
[05:15:07.085]    </control>
[05:15:07.085]    <control if="!canReadPins" while="" timeout="0" info="">
[05:15:07.085]      // if-block "!canReadPins"
[05:15:07.086]        // =>  FALSE
[05:15:07.086]      // skip if-block "!canReadPins"
[05:15:07.086]    </control>
[05:15:07.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:15:07.086]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:15:07.086]        // =>  TRUE
[05:15:07.086]      <block atomic="false" info="">
[05:15:07.087]        WriteAP(0x00, 0x190008);
[05:15:07.088]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:15:07.088]        WriteAP(0xF0, 0x01);
[05:15:07.092]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:15:07.092]      </block>
[05:15:07.092]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:15:07.092]    </control>
[05:15:07.092]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:15:07.092]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:15:07.092]        // =>  FALSE
[05:15:07.093]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:15:07.093]    </control>
[05:15:07.093]    <block atomic="false" info="">
[05:15:07.093]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:15:07.096]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:15:07.096]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:15:07.096]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:15:07.096]      __ap = 0; //lets make sure we reset the access point selection
[05:15:07.097]        // -> [__ap <= 0x00000000]
[05:15:07.097]    </block>
[05:15:07.097]  </sequence>
[05:15:07.097]  
[05:15:07.116]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:15:07.116]  
[05:15:07.116]  <debugvars>
[05:15:07.116]    // Pre-defined
[05:15:07.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:15:07.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:15:07.116]    __dp=0x00000000
[05:15:07.116]    __ap=0x00000000
[05:15:07.118]    __traceout=0x00000000      (Trace Disabled)
[05:15:07.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:15:07.118]    __FlashAddr=0x00000000
[05:15:07.118]    __FlashLen=0x00000000
[05:15:07.118]    __FlashArg=0x00000000
[05:15:07.118]    __FlashOp=0x00000000
[05:15:07.118]    __Result=0x00000000
[05:15:07.118]  </debugvars>
[05:15:07.118]  
[05:15:07.119]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:15:07.119]    <block atomic="false" info="">
[05:15:07.119]      __var deviceID = 0;
[05:15:07.119]        // -> [deviceID <= 0x00000000]
[05:15:07.119]      __var version = 0;
[05:15:07.119]        // -> [version <= 0x00000000]
[05:15:07.119]      __var partNum = 0;
[05:15:07.119]        // -> [partNum <= 0x00000000]
[05:15:07.119]      __var manuf = 0;
[05:15:07.120]        // -> [manuf <= 0x00000000]
[05:15:07.120]      __var isMSPM0G1X0X_G3X0X = 0;
[05:15:07.120]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:15:07.120]      __var isProduction = 0;
[05:15:07.120]        // -> [isProduction <= 0x00000000]
[05:15:07.120]      __var continueId = 0;
[05:15:07.120]        // -> [continueId <= 0x00000000]
[05:15:07.121]      deviceID =   Read32(0x41C40004);
[05:15:07.127]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:15:07.127]        // -> [deviceID <= 0x2BB8802F]
[05:15:07.127]      version = deviceID >> 28;
[05:15:07.127]        // -> [version <= 0x00000002]
[05:15:07.127]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:15:07.127]        // -> [partNum <= 0x0000BB88]
[05:15:07.127]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:15:07.127]        // -> [manuf <= 0x00000017]
[05:15:07.127]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:15:07.128]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:15:07.128]      isProduction = (version > 0);
[05:15:07.128]        // -> [isProduction <= 0x00000001]
[05:15:07.128]    </block>
[05:15:07.129]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:15:07.129]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:15:07.129]        // =>  FALSE
[05:15:07.129]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:15:07.129]    </control>
[05:15:07.129]    <control if="continueId == 4" while="" timeout="0" info="">
[05:15:07.129]      // if-block "continueId == 4"
[05:15:07.129]        // =>  FALSE
[05:15:07.129]      // skip if-block "continueId == 4"
[05:15:07.130]    </control>
[05:15:07.130]    <control if="!isProduction" while="" timeout="0" info="">
[05:15:07.130]      // if-block "!isProduction"
[05:15:07.130]        // =>  FALSE
[05:15:07.130]      // skip if-block "!isProduction"
[05:15:07.130]    </control>
[05:15:07.130]  </sequence>
[05:15:07.130]  
[05:19:26.182]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:19:26.182]  
[05:19:26.191]  <debugvars>
[05:19:26.192]    // Pre-defined
[05:19:26.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:26.192]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:26.192]    __dp=0x00000000
[05:19:26.192]    __ap=0x00000000
[05:19:26.192]    __traceout=0x00000000      (Trace Disabled)
[05:19:26.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:26.192]    __FlashAddr=0x00000000
[05:19:26.192]    __FlashLen=0x00000000
[05:19:26.192]    __FlashArg=0x00000000
[05:19:26.192]    __FlashOp=0x00000000
[05:19:26.193]    __Result=0x00000000
[05:19:26.193]  </debugvars>
[05:19:26.193]  
[05:19:26.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:19:26.193]    <block atomic="false" info="">
[05:19:26.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:19:26.193]        // -> [isSWJ <= 0x00000001]
[05:19:26.193]      __var hasDormant = __protocol & 0x00020000;
[05:19:26.193]        // -> [hasDormant <= 0x00000000]
[05:19:26.193]      __var protType   = __protocol & 0x0000FFFF;
[05:19:26.194]        // -> [protType <= 0x00000002]
[05:19:26.194]    </block>
[05:19:26.194]    <control if="protType == 1" while="" timeout="0" info="">
[05:19:26.194]      // if-block "protType == 1"
[05:19:26.194]        // =>  FALSE
[05:19:26.194]      // skip if-block "protType == 1"
[05:19:26.194]    </control>
[05:19:26.194]    <control if="protType == 2" while="" timeout="0" info="">
[05:19:26.194]      // if-block "protType == 2"
[05:19:26.194]        // =>  TRUE
[05:19:26.194]      <control if="isSWJ" while="" timeout="0" info="">
[05:19:26.194]        // if-block "isSWJ"
[05:19:26.195]          // =>  TRUE
[05:19:26.195]        <control if="hasDormant" while="" timeout="0" info="">
[05:19:26.195]          // if-block "hasDormant"
[05:19:26.195]            // =>  FALSE
[05:19:26.195]          // skip if-block "hasDormant"
[05:19:26.195]        </control>
[05:19:26.195]        <control if="!hasDormant" while="" timeout="0" info="">
[05:19:26.195]          // if-block "!hasDormant"
[05:19:26.195]            // =>  TRUE
[05:19:26.196]          <block atomic="false" info="">
[05:19:26.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:19:26.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:26.199]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:19:26.200]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:19:26.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:19:26.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:26.202]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:19:26.204]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:19:26.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:19:26.206]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:26.206]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:19:26.208]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:19:26.208]          </block>
[05:19:26.208]          // end if-block "!hasDormant"
[05:19:26.208]        </control>
[05:19:26.208]        // end if-block "isSWJ"
[05:19:26.209]      </control>
[05:19:26.209]      <control if="!isSWJ" while="" timeout="0" info="">
[05:19:26.209]        // if-block "!isSWJ"
[05:19:26.209]          // =>  FALSE
[05:19:26.209]        // skip if-block "!isSWJ"
[05:19:26.209]      </control>
[05:19:26.209]      <block atomic="false" info="">
[05:19:26.209]        ReadDP(0x0);
[05:19:26.211]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:19:26.211]      </block>
[05:19:26.211]      // end if-block "protType == 2"
[05:19:26.211]    </control>
[05:19:26.211]  </sequence>
[05:19:26.211]  
[05:19:26.214]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:19:26.214]  
[05:19:26.214]  <debugvars>
[05:19:26.214]    // Pre-defined
[05:19:26.214]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:26.214]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:26.214]    __dp=0x00000000
[05:19:26.214]    __ap=0x00000000
[05:19:26.215]    __traceout=0x00000000      (Trace Disabled)
[05:19:26.215]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:26.215]    __FlashAddr=0x00000000
[05:19:26.215]    __FlashLen=0x00000000
[05:19:26.215]    __FlashArg=0x00000000
[05:19:26.216]    __FlashOp=0x00000000
[05:19:26.216]    __Result=0x00000000
[05:19:26.216]  </debugvars>
[05:19:26.216]  
[05:19:26.216]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:19:26.216]    <block atomic="false" info="">
[05:19:26.217]      __var SW_DP_ABORT       = 0x0;
[05:19:26.217]        // -> [SW_DP_ABORT <= 0x00000000]
[05:19:26.217]      __var DP_CTRL_STAT      = 0x4;
[05:19:26.217]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:19:26.217]      __var DP_SELECT         = 0x8;
[05:19:26.217]        // -> [DP_SELECT <= 0x00000008]
[05:19:26.217]      __var powered_down      = 0;
[05:19:26.217]        // -> [powered_down <= 0x00000000]
[05:19:26.217]      WriteDP(DP_SELECT, 0x00000000);
[05:19:26.220]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:19:26.220]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:19:26.222]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:19:26.223]        // -> [powered_down <= 0x00000001]
[05:19:26.223]    </block>
[05:19:26.223]    <control if="powered_down" while="" timeout="0" info="">
[05:19:26.223]      // if-block "powered_down"
[05:19:26.223]        // =>  TRUE
[05:19:26.224]      <block atomic="false" info="">
[05:19:26.224]        Message(0, "Debug/System power-up request sent");
[05:19:26.224]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:19:26.226]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:19:26.227]      </block>
[05:19:26.227]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:19:26.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:19:26.228]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:19:26.228]        // while-condition  =>  FALSE
[05:19:26.229]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:19:26.229]      </control>
[05:19:26.229]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:19:26.229]        // if-block "(__protocol & 0xFFFF) == 1"
[05:19:26.229]          // =>  FALSE
[05:19:26.229]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:19:26.229]      </control>
[05:19:26.229]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:19:26.229]        // if-block "(__protocol & 0xFFFF) == 2"
[05:19:26.230]          // =>  TRUE
[05:19:26.230]        <block atomic="false" info="">
[05:19:26.230]          Message(0, "executing SWD power up");
[05:19:26.230]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:19:26.232]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:19:26.233]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:19:26.234]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:19:26.234]        </block>
[05:19:26.234]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:19:26.235]      </control>
[05:19:26.235]      // end if-block "powered_down"
[05:19:26.235]    </control>
[05:19:26.235]    <block atomic="false" info="">
[05:19:26.235]      __var DEBUG_PORT_VAL    = 0;
[05:19:26.235]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:19:26.235]      __var ACCESS_POINT_VAL  = 0;
[05:19:26.235]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:19:26.235]      __ap = 1; 
[05:19:26.236]        // -> [__ap <= 0x00000001]
[05:19:26.236]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:19:26.239]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:19:26.239]      __ap = 4;
[05:19:26.239]        // -> [__ap <= 0x00000004]
[05:19:26.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:26.243]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:19:26.243]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:19:26.243]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:26.243]    </block>
[05:19:26.243]    <block atomic="false" info="">
[05:19:26.243]      __var nReset = 0x80;
[05:19:26.243]        // -> [nReset <= 0x00000080]
[05:19:26.244]      __var canReadPins = 0;
[05:19:26.244]        // -> [canReadPins <= 0x00000000]
[05:19:26.244]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:19:26.245]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:19:26.245]        // -> [canReadPins <= 0x00000001]
[05:19:26.245]    </block>
[05:19:26.246]    <control if="" while="1" timeout="200" info="">
[05:19:26.246]      // while "1"  (timeout="200")
[05:19:26.246]      // while-condition  =>  TRUE
[05:19:26.246]      // while "1"  (timeout="200")
[05:19:26.246]      // while-condition  =>  TRUE
[05:19:26.246]      // while "1"  (timeout="200")
[05:19:26.246]      // while-condition  =>  TRUE
[05:19:26.247]      // while "1"  (timeout="200")
[05:19:26.247]      // while-condition  =>  TRUE
[05:19:26.247]      // while "1"  (timeout="200")
[05:19:26.247]      // while-condition  =>  TRUE
[05:19:26.247]      // while "1"  (timeout="200")
[05:19:26.247]      // while-condition  =>  TRUE
[05:19:26.247]      // while "1"  (timeout="200")
[05:19:26.247]      // while-condition  =>  TRUE
[05:19:26.247]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.248]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.248]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.248]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.248]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.248]      // while "1"  (timeout="200")
[05:19:26.248]      // while-condition  =>  TRUE
[05:19:26.249]      // while "1"  (timeout="200")
[05:19:26.249]      // while-condition  =>  TRUE
[05:19:26.249]      // while "1"  (timeout="200")
[05:19:26.249]      // while-condition  =>  TRUE
[05:19:26.249]      // while "1"  (timeout="200")
[05:19:26.249]      // while-condition  =>  TRUE
[05:19:26.249]      // while "1"  (timeout="200")
[05:19:26.249]      // while-condition  =>  TRUE
[05:19:26.249]      // while "1"  (timeout="200")
[05:19:26.250]      // while-condition  =>  TRUE
[05:19:26.250]      // while "1"  (timeout="200")
[05:19:26.250]      // while-condition  =>  TRUE
[05:19:26.250]      // while "1"  (timeout="200")
[05:19:26.250]      // while-condition  =>  TRUE
[05:19:26.250]      // while "1"  (timeout="200")
[05:19:26.251]      // while-condition  =>  TRUE
[05:19:26.251]      // while "1"  (timeout="200")
[05:19:26.251]      // while  =>  TIMEOUT
[05:19:26.251]      // end while "1"
[05:19:26.251]    </control>
[05:19:26.251]    <control if="canReadPins" while="" timeout="0" info="">
[05:19:26.251]      // if-block "canReadPins"
[05:19:26.253]        // =>  TRUE
[05:19:26.253]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:19:26.253]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:19:26.257]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:19:26.258]        // while-condition  =>  FALSE
[05:19:26.258]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:19:26.258]      </control>
[05:19:26.258]      // end if-block "canReadPins"
[05:19:26.258]    </control>
[05:19:26.258]    <control if="!canReadPins" while="" timeout="0" info="">
[05:19:26.258]      // if-block "!canReadPins"
[05:19:26.258]        // =>  FALSE
[05:19:26.258]      // skip if-block "!canReadPins"
[05:19:26.259]    </control>
[05:19:26.259]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:19:26.259]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:26.259]        // =>  TRUE
[05:19:26.259]      <block atomic="false" info="">
[05:19:26.259]        WriteAP(0x00, 0x190008);
[05:19:26.261]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:26.261]        WriteAP(0xF0, 0x01);
[05:19:26.264]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:26.264]      </block>
[05:19:26.264]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:26.264]    </control>
[05:19:26.264]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:19:26.264]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:26.264]        // =>  FALSE
[05:19:26.264]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:26.265]    </control>
[05:19:26.265]    <block atomic="false" info="">
[05:19:26.265]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:26.268]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:19:26.268]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:19:26.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:26.268]      __ap = 0; //lets make sure we reset the access point selection
[05:19:26.268]        // -> [__ap <= 0x00000000]
[05:19:26.268]    </block>
[05:19:26.269]  </sequence>
[05:19:26.269]  
[05:19:26.288]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:19:26.288]  
[05:19:26.288]  <debugvars>
[05:19:26.288]    // Pre-defined
[05:19:26.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:26.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:26.289]    __dp=0x00000000
[05:19:26.289]    __ap=0x00000000
[05:19:26.289]    __traceout=0x00000000      (Trace Disabled)
[05:19:26.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:26.289]    __FlashAddr=0x00000000
[05:19:26.289]    __FlashLen=0x00000000
[05:19:26.290]    __FlashArg=0x00000000
[05:19:26.290]    __FlashOp=0x00000000
[05:19:26.290]    __Result=0x00000000
[05:19:26.290]  </debugvars>
[05:19:26.290]  
[05:19:26.290]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:19:26.290]    <block atomic="false" info="">
[05:19:26.291]      __var deviceID = 0;
[05:19:26.291]        // -> [deviceID <= 0x00000000]
[05:19:26.291]      __var version = 0;
[05:19:26.291]        // -> [version <= 0x00000000]
[05:19:26.291]      __var partNum = 0;
[05:19:26.291]        // -> [partNum <= 0x00000000]
[05:19:26.291]      __var manuf = 0;
[05:19:26.291]        // -> [manuf <= 0x00000000]
[05:19:26.291]      __var isMSPM0G1X0X_G3X0X = 0;
[05:19:26.292]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:19:26.292]      __var isProduction = 0;
[05:19:26.292]        // -> [isProduction <= 0x00000000]
[05:19:26.292]      __var continueId = 0;
[05:19:26.292]        // -> [continueId <= 0x00000000]
[05:19:26.292]      deviceID =   Read32(0x41C40004);
[05:19:26.299]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:19:26.300]        // -> [deviceID <= 0x2BB8802F]
[05:19:26.301]      version = deviceID >> 28;
[05:19:26.301]        // -> [version <= 0x00000002]
[05:19:26.301]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:19:26.301]        // -> [partNum <= 0x0000BB88]
[05:19:26.301]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:19:26.301]        // -> [manuf <= 0x00000017]
[05:19:26.301]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:19:26.301]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:19:26.301]      isProduction = (version > 0);
[05:19:26.302]        // -> [isProduction <= 0x00000001]
[05:19:26.302]    </block>
[05:19:26.302]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:19:26.302]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:19:26.302]        // =>  FALSE
[05:19:26.302]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:19:26.302]    </control>
[05:19:26.302]    <control if="continueId == 4" while="" timeout="0" info="">
[05:19:26.302]      // if-block "continueId == 4"
[05:19:26.302]        // =>  FALSE
[05:19:26.302]      // skip if-block "continueId == 4"
[05:19:26.302]    </control>
[05:19:26.303]    <control if="!isProduction" while="" timeout="0" info="">
[05:19:26.303]      // if-block "!isProduction"
[05:19:26.303]        // =>  FALSE
[05:19:26.303]      // skip if-block "!isProduction"
[05:19:26.303]    </control>
[05:19:26.303]  </sequence>
[05:19:26.303]  
[05:20:46.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:20:46.346]  
[05:20:46.347]  <debugvars>
[05:20:46.347]    // Pre-defined
[05:20:46.347]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:20:46.347]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:20:46.347]    __dp=0x00000000
[05:20:46.347]    __ap=0x00000000
[05:20:46.348]    __traceout=0x00000000      (Trace Disabled)
[05:20:46.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:20:46.348]    __FlashAddr=0x00000000
[05:20:46.348]    __FlashLen=0x00000000
[05:20:46.348]    __FlashArg=0x00000000
[05:20:46.348]    __FlashOp=0x00000000
[05:20:46.348]    __Result=0x00000000
[05:20:46.349]  </debugvars>
[05:20:46.349]  
[05:20:46.349]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:20:46.349]    <block atomic="false" info="">
[05:20:46.349]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:20:46.349]        // -> [isSWJ <= 0x00000001]
[05:20:46.349]      __var hasDormant = __protocol & 0x00020000;
[05:20:46.349]        // -> [hasDormant <= 0x00000000]
[05:20:46.350]      __var protType   = __protocol & 0x0000FFFF;
[05:20:46.350]        // -> [protType <= 0x00000002]
[05:20:46.350]    </block>
[05:20:46.350]    <control if="protType == 1" while="" timeout="0" info="">
[05:20:46.350]      // if-block "protType == 1"
[05:20:46.350]        // =>  FALSE
[05:20:46.350]      // skip if-block "protType == 1"
[05:20:46.350]    </control>
[05:20:46.351]    <control if="protType == 2" while="" timeout="0" info="">
[05:20:46.351]      // if-block "protType == 2"
[05:20:46.351]        // =>  TRUE
[05:20:46.351]      <control if="isSWJ" while="" timeout="0" info="">
[05:20:46.351]        // if-block "isSWJ"
[05:20:46.351]          // =>  TRUE
[05:20:46.351]        <control if="hasDormant" while="" timeout="0" info="">
[05:20:46.351]          // if-block "hasDormant"
[05:20:46.351]            // =>  FALSE
[05:20:46.352]          // skip if-block "hasDormant"
[05:20:46.353]        </control>
[05:20:46.353]        <control if="!hasDormant" while="" timeout="0" info="">
[05:20:46.353]          // if-block "!hasDormant"
[05:20:46.353]            // =>  TRUE
[05:20:46.353]          <block atomic="false" info="">
[05:20:46.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:20:46.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:20:46.354]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:20:46.356]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:20:46.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:20:46.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:20:46.358]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:20:46.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:20:46.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:20:46.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:20:46.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:20:46.362]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:20:46.362]          </block>
[05:20:46.362]          // end if-block "!hasDormant"
[05:20:46.362]        </control>
[05:20:46.362]        // end if-block "isSWJ"
[05:20:46.362]      </control>
[05:20:46.362]      <control if="!isSWJ" while="" timeout="0" info="">
[05:20:46.362]        // if-block "!isSWJ"
[05:20:46.362]          // =>  FALSE
[05:20:46.362]        // skip if-block "!isSWJ"
[05:20:46.362]      </control>
[05:20:46.364]      <block atomic="false" info="">
[05:20:46.364]        ReadDP(0x0);
[05:20:46.365]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:20:46.365]      </block>
[05:20:46.365]      // end if-block "protType == 2"
[05:20:46.365]    </control>
[05:20:46.365]  </sequence>
[05:20:46.365]  
[05:20:46.368]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:20:46.368]  
[05:20:46.368]  <debugvars>
[05:20:46.368]    // Pre-defined
[05:20:46.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:20:46.368]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:20:46.368]    __dp=0x00000000
[05:20:46.368]    __ap=0x00000000
[05:20:46.368]    __traceout=0x00000000      (Trace Disabled)
[05:20:46.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:20:46.368]    __FlashAddr=0x00000000
[05:20:46.368]    __FlashLen=0x00000000
[05:20:46.370]    __FlashArg=0x00000000
[05:20:46.370]    __FlashOp=0x00000000
[05:20:46.370]    __Result=0x00000000
[05:20:46.370]  </debugvars>
[05:20:46.370]  
[05:20:46.370]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:20:46.370]    <block atomic="false" info="">
[05:20:46.370]      __var SW_DP_ABORT       = 0x0;
[05:20:46.370]        // -> [SW_DP_ABORT <= 0x00000000]
[05:20:46.370]      __var DP_CTRL_STAT      = 0x4;
[05:20:46.370]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:20:46.370]      __var DP_SELECT         = 0x8;
[05:20:46.370]        // -> [DP_SELECT <= 0x00000008]
[05:20:46.371]      __var powered_down      = 0;
[05:20:46.371]        // -> [powered_down <= 0x00000000]
[05:20:46.371]      WriteDP(DP_SELECT, 0x00000000);
[05:20:46.372]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:20:46.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:20:46.374]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:20:46.374]        // -> [powered_down <= 0x00000001]
[05:20:46.374]    </block>
[05:20:46.374]    <control if="powered_down" while="" timeout="0" info="">
[05:20:46.374]      // if-block "powered_down"
[05:20:46.374]        // =>  TRUE
[05:20:46.374]      <block atomic="false" info="">
[05:20:46.374]        Message(0, "Debug/System power-up request sent");
[05:20:46.375]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:20:46.378]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:20:46.378]      </block>
[05:20:46.378]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:20:46.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:20:46.380]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:20:46.380]        // while-condition  =>  FALSE
[05:20:46.380]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:20:46.380]      </control>
[05:20:46.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:20:46.381]        // if-block "(__protocol & 0xFFFF) == 1"
[05:20:46.381]          // =>  FALSE
[05:20:46.381]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:20:46.381]      </control>
[05:20:46.381]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:20:46.381]        // if-block "(__protocol & 0xFFFF) == 2"
[05:20:46.381]          // =>  TRUE
[05:20:46.381]        <block atomic="false" info="">
[05:20:46.381]          Message(0, "executing SWD power up");
[05:20:46.382]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:20:46.383]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:20:46.383]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:20:46.385]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:20:46.385]        </block>
[05:20:46.385]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:20:46.385]      </control>
[05:20:46.385]      // end if-block "powered_down"
[05:20:46.386]    </control>
[05:20:46.386]    <block atomic="false" info="">
[05:20:46.386]      __var DEBUG_PORT_VAL    = 0;
[05:20:46.386]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:20:46.386]      __var ACCESS_POINT_VAL  = 0;
[05:20:46.386]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:20:46.386]      __ap = 1; 
[05:20:46.386]        // -> [__ap <= 0x00000001]
[05:20:46.386]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:20:46.389]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:20:46.389]      __ap = 4;
[05:20:46.390]        // -> [__ap <= 0x00000004]
[05:20:46.390]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:20:46.393]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:20:46.393]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:20:46.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:20:46.393]    </block>
[05:20:46.393]    <block atomic="false" info="">
[05:20:46.393]      __var nReset = 0x80;
[05:20:46.394]        // -> [nReset <= 0x00000080]
[05:20:46.394]      __var canReadPins = 0;
[05:20:46.394]        // -> [canReadPins <= 0x00000000]
[05:20:46.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:20:46.395]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:20:46.395]        // -> [canReadPins <= 0x00000001]
[05:20:46.396]    </block>
[05:20:46.396]    <control if="" while="1" timeout="200" info="">
[05:20:46.396]      // while "1"  (timeout="200")
[05:20:46.396]      // while-condition  =>  TRUE
[05:20:46.396]      // while "1"  (timeout="200")
[05:20:46.396]      // while-condition  =>  TRUE
[05:20:46.396]      // while "1"  (timeout="200")
[05:20:46.397]      // while-condition  =>  TRUE
[05:20:46.397]      // while "1"  (timeout="200")
[05:20:46.397]      // while-condition  =>  TRUE
[05:20:46.397]      // while "1"  (timeout="200")
[05:20:46.397]      // while-condition  =>  TRUE
[05:20:46.397]      // while "1"  (timeout="200")
[05:20:46.397]      // while-condition  =>  TRUE
[05:20:46.397]      // while "1"  (timeout="200")
[05:20:46.397]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.398]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.398]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.398]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.398]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.398]      // while-condition  =>  TRUE
[05:20:46.398]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.399]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.399]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.399]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.399]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.399]      // while "1"  (timeout="200")
[05:20:46.399]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.400]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.400]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.400]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.400]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.400]      // while-condition  =>  TRUE
[05:20:46.400]      // while "1"  (timeout="200")
[05:20:46.401]      // while-condition  =>  TRUE
[05:20:46.401]      // while "1"  (timeout="200")
[05:20:46.401]      // while-condition  =>  TRUE
[05:20:46.401]      // while "1"  (timeout="200")
[05:20:46.401]      // while-condition  =>  TRUE
[05:20:46.401]      // while "1"  (timeout="200")
[05:20:46.401]      // while-condition  =>  TRUE
[05:20:46.401]      // while "1"  (timeout="200")
[05:20:46.401]      // while-condition  =>  TRUE
[05:20:46.401]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.403]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.403]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.403]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.403]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.403]      // while "1"  (timeout="200")
[05:20:46.403]      // while-condition  =>  TRUE
[05:20:46.404]      // while "1"  (timeout="200")
[05:20:46.404]      // while-condition  =>  TRUE
[05:20:46.404]      // while "1"  (timeout="200")
[05:20:46.404]      // while-condition  =>  TRUE
[05:20:46.404]      // while "1"  (timeout="200")
[05:20:46.404]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.405]      // while "1"  (timeout="200")
[05:20:46.405]      // while-condition  =>  TRUE
[05:20:46.406]      // while "1"  (timeout="200")
[05:20:46.406]      // while-condition  =>  TRUE
[05:20:46.406]      // while "1"  (timeout="200")
[05:20:46.406]      // while-condition  =>  TRUE
[05:20:46.406]      // while "1"  (timeout="200")
[05:20:46.406]      // while-condition  =>  TRUE
[05:20:46.406]      // while "1"  (timeout="200")
[05:20:46.406]      // while-condition  =>  TRUE
[05:20:46.406]      // while "1"  (timeout="200")
[05:20:46.406]      // while-condition  =>  TRUE
[05:20:46.407]      // while "1"  (timeout="200")
[05:20:46.407]      // while  =>  TIMEOUT
[05:20:46.407]      // end while "1"
[05:20:46.407]    </control>
[05:20:46.407]    <control if="canReadPins" while="" timeout="0" info="">
[05:20:46.407]      // if-block "canReadPins"
[05:20:46.407]        // =>  TRUE
[05:20:46.407]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:20:46.407]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:20:46.409]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:20:46.410]        // while-condition  =>  FALSE
[05:20:46.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:20:46.410]      </control>
[05:20:46.410]      // end if-block "canReadPins"
[05:20:46.410]    </control>
[05:20:46.410]    <control if="!canReadPins" while="" timeout="0" info="">
[05:20:46.410]      // if-block "!canReadPins"
[05:20:46.411]        // =>  FALSE
[05:20:46.411]      // skip if-block "!canReadPins"
[05:20:46.411]    </control>
[05:20:46.411]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:20:46.411]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:20:46.411]        // =>  TRUE
[05:20:46.411]      <block atomic="false" info="">
[05:20:46.411]        WriteAP(0x00, 0x190008);
[05:20:46.413]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:20:46.413]        WriteAP(0xF0, 0x01);
[05:20:46.418]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:20:46.418]      </block>
[05:20:46.418]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:20:46.418]    </control>
[05:20:46.418]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:20:46.418]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:20:46.418]        // =>  FALSE
[05:20:46.419]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:20:46.419]    </control>
[05:20:46.419]    <block atomic="false" info="">
[05:20:46.419]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:20:46.424]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:20:46.424]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:20:46.424]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:20:46.425]      __ap = 0; //lets make sure we reset the access point selection
[05:20:46.425]        // -> [__ap <= 0x00000000]
[05:20:46.425]    </block>
[05:20:46.425]  </sequence>
[05:20:46.425]  
[05:20:46.444]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:20:46.444]  
[05:20:46.444]  <debugvars>
[05:20:46.444]    // Pre-defined
[05:20:46.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:20:46.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:20:46.444]    __dp=0x00000000
[05:20:46.444]    __ap=0x00000000
[05:20:46.444]    __traceout=0x00000000      (Trace Disabled)
[05:20:46.445]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:20:46.445]    __FlashAddr=0x00000000
[05:20:46.445]    __FlashLen=0x00000000
[05:20:46.445]    __FlashArg=0x00000000
[05:20:46.445]    __FlashOp=0x00000000
[05:20:46.445]    __Result=0x00000000
[05:20:46.445]  </debugvars>
[05:20:46.445]  
[05:20:46.445]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:20:46.446]    <block atomic="false" info="">
[05:20:46.446]      __var deviceID = 0;
[05:20:46.446]        // -> [deviceID <= 0x00000000]
[05:20:46.446]      __var version = 0;
[05:20:46.446]        // -> [version <= 0x00000000]
[05:20:46.446]      __var partNum = 0;
[05:20:46.446]        // -> [partNum <= 0x00000000]
[05:20:46.446]      __var manuf = 0;
[05:20:46.446]        // -> [manuf <= 0x00000000]
[05:20:46.446]      __var isMSPM0G1X0X_G3X0X = 0;
[05:20:46.447]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:20:46.447]      __var isProduction = 0;
[05:20:46.447]        // -> [isProduction <= 0x00000000]
[05:20:46.447]      __var continueId = 0;
[05:20:46.447]        // -> [continueId <= 0x00000000]
[05:20:46.447]      deviceID =   Read32(0x41C40004);
[05:20:46.453]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:20:46.453]        // -> [deviceID <= 0x2BB8802F]
[05:20:46.453]      version = deviceID >> 28;
[05:20:46.453]        // -> [version <= 0x00000002]
[05:20:46.453]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:20:46.454]        // -> [partNum <= 0x0000BB88]
[05:20:46.454]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:20:46.454]        // -> [manuf <= 0x00000017]
[05:20:46.454]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:20:46.454]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:20:46.454]      isProduction = (version > 0);
[05:20:46.454]        // -> [isProduction <= 0x00000001]
[05:20:46.455]    </block>
[05:20:46.455]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:20:46.455]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:20:46.455]        // =>  FALSE
[05:20:46.455]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:20:46.455]    </control>
[05:20:46.455]    <control if="continueId == 4" while="" timeout="0" info="">
[05:20:46.456]      // if-block "continueId == 4"
[05:20:46.456]        // =>  FALSE
[05:20:46.456]      // skip if-block "continueId == 4"
[05:20:46.456]    </control>
[05:20:46.456]    <control if="!isProduction" while="" timeout="0" info="">
[05:20:46.456]      // if-block "!isProduction"
[05:20:46.456]        // =>  FALSE
[05:20:46.456]      // skip if-block "!isProduction"
[05:20:46.457]    </control>
[05:20:46.457]  </sequence>
[05:20:46.457]  
[05:29:32.177]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:29:32.177]  
[05:29:32.185]  <debugvars>
[05:29:32.185]    // Pre-defined
[05:29:32.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:32.185]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:32.185]    __dp=0x00000000
[05:29:32.185]    __ap=0x00000000
[05:29:32.185]    __traceout=0x00000000      (Trace Disabled)
[05:29:32.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:32.185]    __FlashAddr=0x00000000
[05:29:32.185]    __FlashLen=0x00000000
[05:29:32.185]    __FlashArg=0x00000000
[05:29:32.187]    __FlashOp=0x00000000
[05:29:32.187]    __Result=0x00000000
[05:29:32.187]  </debugvars>
[05:29:32.187]  
[05:29:32.187]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:29:32.188]    <block atomic="false" info="">
[05:29:32.188]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:29:32.188]        // -> [isSWJ <= 0x00000001]
[05:29:32.188]      __var hasDormant = __protocol & 0x00020000;
[05:29:32.188]        // -> [hasDormant <= 0x00000000]
[05:29:32.189]      __var protType   = __protocol & 0x0000FFFF;
[05:29:32.189]        // -> [protType <= 0x00000002]
[05:29:32.189]    </block>
[05:29:32.189]    <control if="protType == 1" while="" timeout="0" info="">
[05:29:32.189]      // if-block "protType == 1"
[05:29:32.189]        // =>  FALSE
[05:29:32.190]      // skip if-block "protType == 1"
[05:29:32.190]    </control>
[05:29:32.190]    <control if="protType == 2" while="" timeout="0" info="">
[05:29:32.190]      // if-block "protType == 2"
[05:29:32.190]        // =>  TRUE
[05:29:32.190]      <control if="isSWJ" while="" timeout="0" info="">
[05:29:32.191]        // if-block "isSWJ"
[05:29:32.191]          // =>  TRUE
[05:29:32.191]        <control if="hasDormant" while="" timeout="0" info="">
[05:29:32.191]          // if-block "hasDormant"
[05:29:32.191]            // =>  FALSE
[05:29:32.191]          // skip if-block "hasDormant"
[05:29:32.191]        </control>
[05:29:32.191]        <control if="!hasDormant" while="" timeout="0" info="">
[05:29:32.191]          // if-block "!hasDormant"
[05:29:32.192]            // =>  TRUE
[05:29:32.192]          <block atomic="false" info="">
[05:29:32.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:29:32.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:32.193]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:29:32.195]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:29:32.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:29:32.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:32.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:29:32.199]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:29:32.199]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:29:32.200]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:32.201]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:29:32.203]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:29:32.203]          </block>
[05:29:32.203]          // end if-block "!hasDormant"
[05:29:32.203]        </control>
[05:29:32.203]        // end if-block "isSWJ"
[05:29:32.203]      </control>
[05:29:32.204]      <control if="!isSWJ" while="" timeout="0" info="">
[05:29:32.204]        // if-block "!isSWJ"
[05:29:32.204]          // =>  FALSE
[05:29:32.204]        // skip if-block "!isSWJ"
[05:29:32.204]      </control>
[05:29:32.204]      <block atomic="false" info="">
[05:29:32.204]        ReadDP(0x0);
[05:29:32.205]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:29:32.205]      </block>
[05:29:32.205]      // end if-block "protType == 2"
[05:29:32.206]    </control>
[05:29:32.206]  </sequence>
[05:29:32.207]  
[05:29:32.209]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:29:32.209]  
[05:29:32.209]  <debugvars>
[05:29:32.209]    // Pre-defined
[05:29:32.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:32.210]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:32.210]    __dp=0x00000000
[05:29:32.210]    __ap=0x00000000
[05:29:32.210]    __traceout=0x00000000      (Trace Disabled)
[05:29:32.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:32.210]    __FlashAddr=0x00000000
[05:29:32.210]    __FlashLen=0x00000000
[05:29:32.210]    __FlashArg=0x00000000
[05:29:32.211]    __FlashOp=0x00000000
[05:29:32.211]    __Result=0x00000000
[05:29:32.211]  </debugvars>
[05:29:32.211]  
[05:29:32.211]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:29:32.211]    <block atomic="false" info="">
[05:29:32.211]      __var SW_DP_ABORT       = 0x0;
[05:29:32.212]        // -> [SW_DP_ABORT <= 0x00000000]
[05:29:32.212]      __var DP_CTRL_STAT      = 0x4;
[05:29:32.212]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:29:32.212]      __var DP_SELECT         = 0x8;
[05:29:32.212]        // -> [DP_SELECT <= 0x00000008]
[05:29:32.212]      __var powered_down      = 0;
[05:29:32.212]        // -> [powered_down <= 0x00000000]
[05:29:32.212]      WriteDP(DP_SELECT, 0x00000000);
[05:29:32.214]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:29:32.214]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:29:32.215]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:29:32.215]        // -> [powered_down <= 0x00000001]
[05:29:32.215]    </block>
[05:29:32.215]    <control if="powered_down" while="" timeout="0" info="">
[05:29:32.215]      // if-block "powered_down"
[05:29:32.215]        // =>  TRUE
[05:29:32.215]      <block atomic="false" info="">
[05:29:32.217]        Message(0, "Debug/System power-up request sent");
[05:29:32.217]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:29:32.218]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:29:32.218]      </block>
[05:29:32.218]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:29:32.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:29:32.220]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:29:32.220]        // while-condition  =>  FALSE
[05:29:32.220]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:29:32.220]      </control>
[05:29:32.220]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:29:32.220]        // if-block "(__protocol & 0xFFFF) == 1"
[05:29:32.221]          // =>  FALSE
[05:29:32.221]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:29:32.221]      </control>
[05:29:32.221]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:29:32.221]        // if-block "(__protocol & 0xFFFF) == 2"
[05:29:32.221]          // =>  TRUE
[05:29:32.221]        <block atomic="false" info="">
[05:29:32.222]          Message(0, "executing SWD power up");
[05:29:32.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:29:32.224]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:29:32.224]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:29:32.225]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:29:32.225]        </block>
[05:29:32.225]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:29:32.225]      </control>
[05:29:32.226]      // end if-block "powered_down"
[05:29:32.226]    </control>
[05:29:32.226]    <block atomic="false" info="">
[05:29:32.226]      __var DEBUG_PORT_VAL    = 0;
[05:29:32.226]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:29:32.226]      __var ACCESS_POINT_VAL  = 0;
[05:29:32.226]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:29:32.226]      __ap = 1; 
[05:29:32.226]        // -> [__ap <= 0x00000001]
[05:29:32.227]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:29:32.230]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:29:32.230]      __ap = 4;
[05:29:32.230]        // -> [__ap <= 0x00000004]
[05:29:32.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:32.235]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:29:32.236]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:29:32.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:32.236]    </block>
[05:29:32.236]    <block atomic="false" info="">
[05:29:32.236]      __var nReset = 0x80;
[05:29:32.238]        // -> [nReset <= 0x00000080]
[05:29:32.238]      __var canReadPins = 0;
[05:29:32.238]        // -> [canReadPins <= 0x00000000]
[05:29:32.238]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:29:32.239]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:29:32.239]        // -> [canReadPins <= 0x00000001]
[05:29:32.239]    </block>
[05:29:32.239]    <control if="" while="1" timeout="200" info="">
[05:29:32.239]      // while "1"  (timeout="200")
[05:29:32.239]      // while-condition  =>  TRUE
[05:29:32.240]      // while "1"  (timeout="200")
[05:29:32.240]      // while-condition  =>  TRUE
[05:29:32.240]      // while "1"  (timeout="200")
[05:29:32.240]      // while-condition  =>  TRUE
[05:29:32.240]      // while "1"  (timeout="200")
[05:29:32.240]      // while-condition  =>  TRUE
[05:29:32.241]      // while "1"  (timeout="200")
[05:29:32.241]      // while-condition  =>  TRUE
[05:29:32.241]      // while "1"  (timeout="200")
[05:29:32.242]      // while-condition  =>  TRUE
[05:29:32.242]      // while "1"  (timeout="200")
[05:29:32.242]      // while-condition  =>  TRUE
[05:29:32.242]      // while "1"  (timeout="200")
[05:29:32.242]      // while-condition  =>  TRUE
[05:29:32.242]      // while "1"  (timeout="200")
[05:29:32.242]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.243]      // while-condition  =>  TRUE
[05:29:32.243]      // while "1"  (timeout="200")
[05:29:32.244]      // while-condition  =>  TRUE
[05:29:32.244]      // while "1"  (timeout="200")
[05:29:32.244]      // while-condition  =>  TRUE
[05:29:32.244]      // while "1"  (timeout="200")
[05:29:32.244]      // while-condition  =>  TRUE
[05:29:32.244]      // while "1"  (timeout="200")
[05:29:32.244]      // while-condition  =>  TRUE
[05:29:32.244]      // while "1"  (timeout="200")
[05:29:32.244]      // while-condition  =>  TRUE
[05:29:32.244]      // while "1"  (timeout="200")
[05:29:32.245]      // while-condition  =>  TRUE
[05:29:32.245]      // while "1"  (timeout="200")
[05:29:32.245]      // while-condition  =>  TRUE
[05:29:32.245]      // while "1"  (timeout="200")
[05:29:32.245]      // while-condition  =>  TRUE
[05:29:32.246]      // while "1"  (timeout="200")
[05:29:32.246]      // while-condition  =>  TRUE
[05:29:32.246]      // while "1"  (timeout="200")
[05:29:32.246]      // while-condition  =>  TRUE
[05:29:32.246]      // while "1"  (timeout="200")
[05:29:32.246]      // while-condition  =>  TRUE
[05:29:32.247]      // while "1"  (timeout="200")
[05:29:32.247]      // while-condition  =>  TRUE
[05:29:32.247]      // while "1"  (timeout="200")
[05:29:32.247]      // while-condition  =>  TRUE
[05:29:32.247]      // while "1"  (timeout="200")
[05:29:32.248]      // while-condition  =>  TRUE
[05:29:32.248]      // while "1"  (timeout="200")
[05:29:32.248]      // while-condition  =>  TRUE
[05:29:32.248]      // while "1"  (timeout="200")
[05:29:32.248]      // while-condition  =>  TRUE
[05:29:32.248]      // while "1"  (timeout="200")
[05:29:32.248]      // while-condition  =>  TRUE
[05:29:32.249]      // while "1"  (timeout="200")
[05:29:32.249]      // while-condition  =>  TRUE
[05:29:32.249]      // while "1"  (timeout="200")
[05:29:32.249]      // while-condition  =>  TRUE
[05:29:32.249]      // while "1"  (timeout="200")
[05:29:32.249]      // while-condition  =>  TRUE
[05:29:32.249]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.250]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.250]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.250]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.250]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.250]      // while "1"  (timeout="200")
[05:29:32.250]      // while-condition  =>  TRUE
[05:29:32.251]      // while "1"  (timeout="200")
[05:29:32.251]      // while  =>  TIMEOUT
[05:29:32.251]      // end while "1"
[05:29:32.251]    </control>
[05:29:32.251]    <control if="canReadPins" while="" timeout="0" info="">
[05:29:32.251]      // if-block "canReadPins"
[05:29:32.251]        // =>  TRUE
[05:29:32.251]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:29:32.251]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:29:32.254]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:29:32.254]        // while-condition  =>  FALSE
[05:29:32.254]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:29:32.254]      </control>
[05:29:32.254]      // end if-block "canReadPins"
[05:29:32.254]    </control>
[05:29:32.254]    <control if="!canReadPins" while="" timeout="0" info="">
[05:29:32.255]      // if-block "!canReadPins"
[05:29:32.255]        // =>  FALSE
[05:29:32.255]      // skip if-block "!canReadPins"
[05:29:32.255]    </control>
[05:29:32.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:29:32.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:32.255]        // =>  TRUE
[05:29:32.256]      <block atomic="false" info="">
[05:29:32.256]        WriteAP(0x00, 0x190008);
[05:29:32.258]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:32.258]        WriteAP(0xF0, 0x01);
[05:29:32.262]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:32.262]      </block>
[05:29:32.262]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:32.262]    </control>
[05:29:32.262]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:29:32.262]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:32.263]        // =>  FALSE
[05:29:32.263]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:32.263]    </control>
[05:29:32.263]    <block atomic="false" info="">
[05:29:32.263]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:32.267]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:29:32.267]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:29:32.267]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:32.268]      __ap = 0; //lets make sure we reset the access point selection
[05:29:32.268]        // -> [__ap <= 0x00000000]
[05:29:32.268]    </block>
[05:29:32.268]  </sequence>
[05:29:32.268]  
[05:29:32.291]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:29:32.291]  
[05:29:32.291]  <debugvars>
[05:29:32.291]    // Pre-defined
[05:29:32.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:32.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:32.291]    __dp=0x00000000
[05:29:32.291]    __ap=0x00000000
[05:29:32.291]    __traceout=0x00000000      (Trace Disabled)
[05:29:32.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:32.292]    __FlashAddr=0x00000000
[05:29:32.292]    __FlashLen=0x00000000
[05:29:32.292]    __FlashArg=0x00000000
[05:29:32.292]    __FlashOp=0x00000000
[05:29:32.292]    __Result=0x00000000
[05:29:32.292]  </debugvars>
[05:29:32.293]  
[05:29:32.293]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:29:32.293]    <block atomic="false" info="">
[05:29:32.293]      __var deviceID = 0;
[05:29:32.293]        // -> [deviceID <= 0x00000000]
[05:29:32.293]      __var version = 0;
[05:29:32.294]        // -> [version <= 0x00000000]
[05:29:32.294]      __var partNum = 0;
[05:29:32.294]        // -> [partNum <= 0x00000000]
[05:29:32.294]      __var manuf = 0;
[05:29:32.294]        // -> [manuf <= 0x00000000]
[05:29:32.294]      __var isMSPM0G1X0X_G3X0X = 0;
[05:29:32.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:29:32.294]      __var isProduction = 0;
[05:29:32.294]        // -> [isProduction <= 0x00000000]
[05:29:32.294]      __var continueId = 0;
[05:29:32.294]        // -> [continueId <= 0x00000000]
[05:29:32.294]      deviceID =   Read32(0x41C40004);
[05:29:32.300]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:29:32.300]        // -> [deviceID <= 0x2BB8802F]
[05:29:32.300]      version = deviceID >> 28;
[05:29:32.300]        // -> [version <= 0x00000002]
[05:29:32.301]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:29:32.301]        // -> [partNum <= 0x0000BB88]
[05:29:32.301]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:29:32.301]        // -> [manuf <= 0x00000017]
[05:29:32.301]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:29:32.301]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:29:32.301]      isProduction = (version > 0);
[05:29:32.301]        // -> [isProduction <= 0x00000001]
[05:29:32.302]    </block>
[05:29:32.302]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:29:32.302]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:29:32.302]        // =>  FALSE
[05:29:32.302]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:29:32.302]    </control>
[05:29:32.302]    <control if="continueId == 4" while="" timeout="0" info="">
[05:29:32.302]      // if-block "continueId == 4"
[05:29:32.302]        // =>  FALSE
[05:29:32.302]      // skip if-block "continueId == 4"
[05:29:32.302]    </control>
[05:29:32.302]    <control if="!isProduction" while="" timeout="0" info="">
[05:29:32.303]      // if-block "!isProduction"
[05:29:32.303]        // =>  FALSE
[05:29:32.303]      // skip if-block "!isProduction"
[05:29:32.303]    </control>
[05:29:32.303]  </sequence>
[05:29:32.303]  
[05:30:36.724]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:30:36.724]  
[05:30:36.732]  <debugvars>
[05:30:36.732]    // Pre-defined
[05:30:36.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:36.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:36.732]    __dp=0x00000000
[05:30:36.732]    __ap=0x00000000
[05:30:36.732]    __traceout=0x00000000      (Trace Disabled)
[05:30:36.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:36.733]    __FlashAddr=0x00000000
[05:30:36.733]    __FlashLen=0x00000000
[05:30:36.733]    __FlashArg=0x00000000
[05:30:36.733]    __FlashOp=0x00000000
[05:30:36.733]    __Result=0x00000000
[05:30:36.733]  </debugvars>
[05:30:36.733]  
[05:30:36.733]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:30:36.733]    <block atomic="false" info="">
[05:30:36.734]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:30:36.734]        // -> [isSWJ <= 0x00000001]
[05:30:36.734]      __var hasDormant = __protocol & 0x00020000;
[05:30:36.734]        // -> [hasDormant <= 0x00000000]
[05:30:36.734]      __var protType   = __protocol & 0x0000FFFF;
[05:30:36.734]        // -> [protType <= 0x00000002]
[05:30:36.734]    </block>
[05:30:36.734]    <control if="protType == 1" while="" timeout="0" info="">
[05:30:36.734]      // if-block "protType == 1"
[05:30:36.734]        // =>  FALSE
[05:30:36.734]      // skip if-block "protType == 1"
[05:30:36.735]    </control>
[05:30:36.735]    <control if="protType == 2" while="" timeout="0" info="">
[05:30:36.735]      // if-block "protType == 2"
[05:30:36.735]        // =>  TRUE
[05:30:36.735]      <control if="isSWJ" while="" timeout="0" info="">
[05:30:36.735]        // if-block "isSWJ"
[05:30:36.735]          // =>  TRUE
[05:30:36.735]        <control if="hasDormant" while="" timeout="0" info="">
[05:30:36.735]          // if-block "hasDormant"
[05:30:36.735]            // =>  FALSE
[05:30:36.735]          // skip if-block "hasDormant"
[05:30:36.736]        </control>
[05:30:36.736]        <control if="!hasDormant" while="" timeout="0" info="">
[05:30:36.736]          // if-block "!hasDormant"
[05:30:36.736]            // =>  TRUE
[05:30:36.736]          <block atomic="false" info="">
[05:30:36.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:30:36.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:36.738]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:30:36.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:30:36.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:30:36.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:36.741]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:30:36.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:30:36.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:30:36.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:36.744]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:30:36.745]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:30:36.745]          </block>
[05:30:36.745]          // end if-block "!hasDormant"
[05:30:36.745]        </control>
[05:30:36.745]        // end if-block "isSWJ"
[05:30:36.745]      </control>
[05:30:36.746]      <control if="!isSWJ" while="" timeout="0" info="">
[05:30:36.746]        // if-block "!isSWJ"
[05:30:36.746]          // =>  FALSE
[05:30:36.746]        // skip if-block "!isSWJ"
[05:30:36.746]      </control>
[05:30:36.746]      <block atomic="false" info="">
[05:30:36.746]        ReadDP(0x0);
[05:30:36.748]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:30:36.748]      </block>
[05:30:36.748]      // end if-block "protType == 2"
[05:30:36.748]    </control>
[05:30:36.748]  </sequence>
[05:30:36.749]  
[05:30:36.751]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:30:36.751]  
[05:30:36.751]  <debugvars>
[05:30:36.751]    // Pre-defined
[05:30:36.751]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:36.751]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:36.751]    __dp=0x00000000
[05:30:36.751]    __ap=0x00000000
[05:30:36.751]    __traceout=0x00000000      (Trace Disabled)
[05:30:36.751]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:36.752]    __FlashAddr=0x00000000
[05:30:36.752]    __FlashLen=0x00000000
[05:30:36.752]    __FlashArg=0x00000000
[05:30:36.752]    __FlashOp=0x00000000
[05:30:36.752]    __Result=0x00000000
[05:30:36.752]  </debugvars>
[05:30:36.752]  
[05:30:36.752]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:30:36.753]    <block atomic="false" info="">
[05:30:36.753]      __var SW_DP_ABORT       = 0x0;
[05:30:36.753]        // -> [SW_DP_ABORT <= 0x00000000]
[05:30:36.753]      __var DP_CTRL_STAT      = 0x4;
[05:30:36.753]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:30:36.753]      __var DP_SELECT         = 0x8;
[05:30:36.753]        // -> [DP_SELECT <= 0x00000008]
[05:30:36.753]      __var powered_down      = 0;
[05:30:36.753]        // -> [powered_down <= 0x00000000]
[05:30:36.753]      WriteDP(DP_SELECT, 0x00000000);
[05:30:36.757]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:30:36.757]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:30:36.759]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:30:36.759]        // -> [powered_down <= 0x00000001]
[05:30:36.759]    </block>
[05:30:36.759]    <control if="powered_down" while="" timeout="0" info="">
[05:30:36.759]      // if-block "powered_down"
[05:30:36.759]        // =>  TRUE
[05:30:36.760]      <block atomic="false" info="">
[05:30:36.760]        Message(0, "Debug/System power-up request sent");
[05:30:36.760]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:30:36.762]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:30:36.762]      </block>
[05:30:36.762]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:30:36.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:30:36.764]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:30:36.764]        // while-condition  =>  FALSE
[05:30:36.764]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:30:36.764]      </control>
[05:30:36.764]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:30:36.764]        // if-block "(__protocol & 0xFFFF) == 1"
[05:30:36.764]          // =>  FALSE
[05:30:36.764]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:30:36.765]      </control>
[05:30:36.765]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:30:36.765]        // if-block "(__protocol & 0xFFFF) == 2"
[05:30:36.765]          // =>  TRUE
[05:30:36.765]        <block atomic="false" info="">
[05:30:36.765]          Message(0, "executing SWD power up");
[05:30:36.765]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:30:36.767]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:30:36.767]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:30:36.769]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:30:36.769]        </block>
[05:30:36.769]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:30:36.769]      </control>
[05:30:36.769]      // end if-block "powered_down"
[05:30:36.769]    </control>
[05:30:36.769]    <block atomic="false" info="">
[05:30:36.769]      __var DEBUG_PORT_VAL    = 0;
[05:30:36.769]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:30:36.769]      __var ACCESS_POINT_VAL  = 0;
[05:30:36.770]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:30:36.770]      __ap = 1; 
[05:30:36.770]        // -> [__ap <= 0x00000001]
[05:30:36.770]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:30:36.778]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:30:36.778]      __ap = 4;
[05:30:36.779]        // -> [__ap <= 0x00000004]
[05:30:36.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:30:36.782]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:30:36.782]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:30:36.782]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:30:36.783]    </block>
[05:30:36.783]    <block atomic="false" info="">
[05:30:36.783]      __var nReset = 0x80;
[05:30:36.783]        // -> [nReset <= 0x00000080]
[05:30:36.783]      __var canReadPins = 0;
[05:30:36.783]        // -> [canReadPins <= 0x00000000]
[05:30:36.783]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:30:36.784]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:30:36.784]        // -> [canReadPins <= 0x00000001]
[05:30:36.784]    </block>
[05:30:36.784]    <control if="" while="1" timeout="200" info="">
[05:30:36.786]      // while "1"  (timeout="200")
[05:30:36.786]      // while-condition  =>  TRUE
[05:30:36.786]      // while "1"  (timeout="200")
[05:30:36.786]      // while-condition  =>  TRUE
[05:30:36.786]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.787]      // while-condition  =>  TRUE
[05:30:36.787]      // while "1"  (timeout="200")
[05:30:36.788]      // while-condition  =>  TRUE
[05:30:36.788]      // while "1"  (timeout="200")
[05:30:36.788]      // while-condition  =>  TRUE
[05:30:36.788]      // while "1"  (timeout="200")
[05:30:36.788]      // while-condition  =>  TRUE
[05:30:36.788]      // while "1"  (timeout="200")
[05:30:36.789]      // while-condition  =>  TRUE
[05:30:36.789]      // while "1"  (timeout="200")
[05:30:36.789]      // while-condition  =>  TRUE
[05:30:36.789]      // while "1"  (timeout="200")
[05:30:36.789]      // while-condition  =>  TRUE
[05:30:36.789]      // while "1"  (timeout="200")
[05:30:36.789]      // while-condition  =>  TRUE
[05:30:36.789]      // while "1"  (timeout="200")
[05:30:36.791]      // while-condition  =>  TRUE
[05:30:36.791]      // while "1"  (timeout="200")
[05:30:36.791]      // while-condition  =>  TRUE
[05:30:36.791]      // while "1"  (timeout="200")
[05:30:36.791]      // while-condition  =>  TRUE
[05:30:36.791]      // while "1"  (timeout="200")
[05:30:36.791]      // while-condition  =>  TRUE
[05:30:36.791]      // while "1"  (timeout="200")
[05:30:36.791]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.792]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.792]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.792]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.792]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.792]      // while-condition  =>  TRUE
[05:30:36.792]      // while "1"  (timeout="200")
[05:30:36.793]      // while-condition  =>  TRUE
[05:30:36.793]      // while "1"  (timeout="200")
[05:30:36.793]      // while-condition  =>  TRUE
[05:30:36.793]      // while "1"  (timeout="200")
[05:30:36.793]      // while-condition  =>  TRUE
[05:30:36.794]      // while "1"  (timeout="200")
[05:30:36.794]      // while-condition  =>  TRUE
[05:30:36.794]      // while "1"  (timeout="200")
[05:30:36.794]      // while-condition  =>  TRUE
[05:30:36.794]      // while "1"  (timeout="200")
[05:30:36.794]      // while-condition  =>  TRUE
[05:30:36.794]      // while "1"  (timeout="200")
[05:30:36.795]      // while-condition  =>  TRUE
[05:30:36.795]      // while "1"  (timeout="200")
[05:30:36.795]      // while-condition  =>  TRUE
[05:30:36.795]      // while "1"  (timeout="200")
[05:30:36.795]      // while-condition  =>  TRUE
[05:30:36.795]      // while "1"  (timeout="200")
[05:30:36.795]      // while-condition  =>  TRUE
[05:30:36.795]      // while "1"  (timeout="200")
[05:30:36.796]      // while-condition  =>  TRUE
[05:30:36.796]      // while "1"  (timeout="200")
[05:30:36.796]      // while-condition  =>  TRUE
[05:30:36.796]      // while "1"  (timeout="200")
[05:30:36.796]      // while-condition  =>  TRUE
[05:30:36.796]      // while "1"  (timeout="200")
[05:30:36.796]      // while-condition  =>  TRUE
[05:30:36.796]      // while "1"  (timeout="200")
[05:30:36.796]      // while-condition  =>  TRUE
[05:30:36.796]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.797]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.797]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.797]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.797]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.797]      // while "1"  (timeout="200")
[05:30:36.797]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.798]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.798]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.798]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.798]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.798]      // while-condition  =>  TRUE
[05:30:36.798]      // while "1"  (timeout="200")
[05:30:36.799]      // while-condition  =>  TRUE
[05:30:36.799]      // while "1"  (timeout="200")
[05:30:36.799]      // while  =>  TIMEOUT
[05:30:36.799]      // end while "1"
[05:30:36.799]    </control>
[05:30:36.799]    <control if="canReadPins" while="" timeout="0" info="">
[05:30:36.799]      // if-block "canReadPins"
[05:30:36.800]        // =>  TRUE
[05:30:36.800]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:30:36.800]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:30:36.801]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:30:36.802]        // while-condition  =>  FALSE
[05:30:36.802]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:30:36.802]      </control>
[05:30:36.802]      // end if-block "canReadPins"
[05:30:36.802]    </control>
[05:30:36.802]    <control if="!canReadPins" while="" timeout="0" info="">
[05:30:36.802]      // if-block "!canReadPins"
[05:30:36.802]        // =>  FALSE
[05:30:36.802]      // skip if-block "!canReadPins"
[05:30:36.803]    </control>
[05:30:36.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:30:36.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:30:36.803]        // =>  TRUE
[05:30:36.803]      <block atomic="false" info="">
[05:30:36.803]        WriteAP(0x00, 0x190008);
[05:30:36.805]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:30:36.805]        WriteAP(0xF0, 0x01);
[05:30:36.810]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:30:36.810]      </block>
[05:30:36.810]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:30:36.810]    </control>
[05:30:36.810]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:30:36.811]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:30:36.811]        // =>  FALSE
[05:30:36.811]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:30:36.811]    </control>
[05:30:36.811]    <block atomic="false" info="">
[05:30:36.811]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:30:36.815]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:30:36.815]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:30:36.815]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:30:36.815]      __ap = 0; //lets make sure we reset the access point selection
[05:30:36.815]        // -> [__ap <= 0x00000000]
[05:30:36.815]    </block>
[05:30:36.815]  </sequence>
[05:30:36.815]  
[05:30:36.834]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:30:36.834]  
[05:30:36.834]  <debugvars>
[05:30:36.835]    // Pre-defined
[05:30:36.835]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:36.835]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:36.835]    __dp=0x00000000
[05:30:36.835]    __ap=0x00000000
[05:30:36.836]    __traceout=0x00000000      (Trace Disabled)
[05:30:36.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:36.836]    __FlashAddr=0x00000000
[05:30:36.836]    __FlashLen=0x00000000
[05:30:36.836]    __FlashArg=0x00000000
[05:30:36.836]    __FlashOp=0x00000000
[05:30:36.836]    __Result=0x00000000
[05:30:36.836]  </debugvars>
[05:30:36.836]  
[05:30:36.837]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:30:36.837]    <block atomic="false" info="">
[05:30:36.837]      __var deviceID = 0;
[05:30:36.837]        // -> [deviceID <= 0x00000000]
[05:30:36.837]      __var version = 0;
[05:30:36.837]        // -> [version <= 0x00000000]
[05:30:36.837]      __var partNum = 0;
[05:30:36.837]        // -> [partNum <= 0x00000000]
[05:30:36.837]      __var manuf = 0;
[05:30:36.837]        // -> [manuf <= 0x00000000]
[05:30:36.838]      __var isMSPM0G1X0X_G3X0X = 0;
[05:30:36.838]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:30:36.838]      __var isProduction = 0;
[05:30:36.838]        // -> [isProduction <= 0x00000000]
[05:30:36.838]      __var continueId = 0;
[05:30:36.838]        // -> [continueId <= 0x00000000]
[05:30:36.838]      deviceID =   Read32(0x41C40004);
[05:30:36.844]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:30:36.844]        // -> [deviceID <= 0x2BB8802F]
[05:30:36.844]      version = deviceID >> 28;
[05:30:36.844]        // -> [version <= 0x00000002]
[05:30:36.844]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:30:36.845]        // -> [partNum <= 0x0000BB88]
[05:30:36.845]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:30:36.845]        // -> [manuf <= 0x00000017]
[05:30:36.845]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:30:36.845]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:30:36.845]      isProduction = (version > 0);
[05:30:36.845]        // -> [isProduction <= 0x00000001]
[05:30:36.846]    </block>
[05:30:36.846]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:30:36.846]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:30:36.846]        // =>  FALSE
[05:30:36.846]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:30:36.846]    </control>
[05:30:36.846]    <control if="continueId == 4" while="" timeout="0" info="">
[05:30:36.847]      // if-block "continueId == 4"
[05:30:36.847]        // =>  FALSE
[05:30:36.847]      // skip if-block "continueId == 4"
[05:30:36.847]    </control>
[05:30:36.847]    <control if="!isProduction" while="" timeout="0" info="">
[05:30:36.847]      // if-block "!isProduction"
[05:30:36.847]        // =>  FALSE
[05:30:36.847]      // skip if-block "!isProduction"
[05:30:36.847]    </control>
[05:30:36.847]  </sequence>
[05:30:36.847]  
[05:31:45.067]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:31:45.067]  
[05:31:45.076]  <debugvars>
[05:31:45.076]    // Pre-defined
[05:31:45.076]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:45.076]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:45.076]    __dp=0x00000000
[05:31:45.076]    __ap=0x00000000
[05:31:45.076]    __traceout=0x00000000      (Trace Disabled)
[05:31:45.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:45.076]    __FlashAddr=0x00000000
[05:31:45.076]    __FlashLen=0x00000000
[05:31:45.076]    __FlashArg=0x00000000
[05:31:45.076]    __FlashOp=0x00000000
[05:31:45.076]    __Result=0x00000000
[05:31:45.076]  </debugvars>
[05:31:45.076]  
[05:31:45.077]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:31:45.077]    <block atomic="false" info="">
[05:31:45.077]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:31:45.077]        // -> [isSWJ <= 0x00000001]
[05:31:45.077]      __var hasDormant = __protocol & 0x00020000;
[05:31:45.077]        // -> [hasDormant <= 0x00000000]
[05:31:45.077]      __var protType   = __protocol & 0x0000FFFF;
[05:31:45.077]        // -> [protType <= 0x00000002]
[05:31:45.077]    </block>
[05:31:45.078]    <control if="protType == 1" while="" timeout="0" info="">
[05:31:45.078]      // if-block "protType == 1"
[05:31:45.078]        // =>  FALSE
[05:31:45.078]      // skip if-block "protType == 1"
[05:31:45.078]    </control>
[05:31:45.078]    <control if="protType == 2" while="" timeout="0" info="">
[05:31:45.078]      // if-block "protType == 2"
[05:31:45.078]        // =>  TRUE
[05:31:45.078]      <control if="isSWJ" while="" timeout="0" info="">
[05:31:45.078]        // if-block "isSWJ"
[05:31:45.078]          // =>  TRUE
[05:31:45.078]        <control if="hasDormant" while="" timeout="0" info="">
[05:31:45.079]          // if-block "hasDormant"
[05:31:45.079]            // =>  FALSE
[05:31:45.079]          // skip if-block "hasDormant"
[05:31:45.079]        </control>
[05:31:45.079]        <control if="!hasDormant" while="" timeout="0" info="">
[05:31:45.080]          // if-block "!hasDormant"
[05:31:45.080]            // =>  TRUE
[05:31:45.080]          <block atomic="false" info="">
[05:31:45.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:31:45.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:45.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:31:45.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:31:45.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:31:45.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:45.086]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:31:45.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:31:45.088]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:31:45.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:45.089]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:31:45.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:31:45.091]          </block>
[05:31:45.091]          // end if-block "!hasDormant"
[05:31:45.091]        </control>
[05:31:45.091]        // end if-block "isSWJ"
[05:31:45.091]      </control>
[05:31:45.091]      <control if="!isSWJ" while="" timeout="0" info="">
[05:31:45.091]        // if-block "!isSWJ"
[05:31:45.091]          // =>  FALSE
[05:31:45.092]        // skip if-block "!isSWJ"
[05:31:45.092]      </control>
[05:31:45.092]      <block atomic="false" info="">
[05:31:45.092]        ReadDP(0x0);
[05:31:45.094]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:31:45.094]      </block>
[05:31:45.094]      // end if-block "protType == 2"
[05:31:45.094]    </control>
[05:31:45.094]  </sequence>
[05:31:45.094]  
[05:31:45.098]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:31:45.098]  
[05:31:45.098]  <debugvars>
[05:31:45.098]    // Pre-defined
[05:31:45.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:45.098]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:45.098]    __dp=0x00000000
[05:31:45.098]    __ap=0x00000000
[05:31:45.098]    __traceout=0x00000000      (Trace Disabled)
[05:31:45.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:45.098]    __FlashAddr=0x00000000
[05:31:45.098]    __FlashLen=0x00000000
[05:31:45.098]    __FlashArg=0x00000000
[05:31:45.099]    __FlashOp=0x00000000
[05:31:45.099]    __Result=0x00000000
[05:31:45.099]  </debugvars>
[05:31:45.099]  
[05:31:45.099]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:31:45.099]    <block atomic="false" info="">
[05:31:45.099]      __var SW_DP_ABORT       = 0x0;
[05:31:45.099]        // -> [SW_DP_ABORT <= 0x00000000]
[05:31:45.099]      __var DP_CTRL_STAT      = 0x4;
[05:31:45.099]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:31:45.099]      __var DP_SELECT         = 0x8;
[05:31:45.099]        // -> [DP_SELECT <= 0x00000008]
[05:31:45.099]      __var powered_down      = 0;
[05:31:45.099]        // -> [powered_down <= 0x00000000]
[05:31:45.100]      WriteDP(DP_SELECT, 0x00000000);
[05:31:45.101]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:31:45.101]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:31:45.103]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:31:45.103]        // -> [powered_down <= 0x00000001]
[05:31:45.103]    </block>
[05:31:45.103]    <control if="powered_down" while="" timeout="0" info="">
[05:31:45.103]      // if-block "powered_down"
[05:31:45.103]        // =>  TRUE
[05:31:45.103]      <block atomic="false" info="">
[05:31:45.103]        Message(0, "Debug/System power-up request sent");
[05:31:45.103]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:31:45.106]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:31:45.106]      </block>
[05:31:45.106]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:31:45.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:31:45.107]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:31:45.108]        // while-condition  =>  FALSE
[05:31:45.108]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:31:45.108]      </control>
[05:31:45.108]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:31:45.108]        // if-block "(__protocol & 0xFFFF) == 1"
[05:31:45.108]          // =>  FALSE
[05:31:45.109]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:31:45.109]      </control>
[05:31:45.109]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:31:45.109]        // if-block "(__protocol & 0xFFFF) == 2"
[05:31:45.109]          // =>  TRUE
[05:31:45.109]        <block atomic="false" info="">
[05:31:45.109]          Message(0, "executing SWD power up");
[05:31:45.109]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:31:45.111]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:31:45.112]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:31:45.113]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:31:45.113]        </block>
[05:31:45.113]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:31:45.113]      </control>
[05:31:45.114]      // end if-block "powered_down"
[05:31:45.114]    </control>
[05:31:45.114]    <block atomic="false" info="">
[05:31:45.114]      __var DEBUG_PORT_VAL    = 0;
[05:31:45.114]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:31:45.114]      __var ACCESS_POINT_VAL  = 0;
[05:31:45.114]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:31:45.114]      __ap = 1; 
[05:31:45.114]        // -> [__ap <= 0x00000001]
[05:31:45.114]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:31:45.118]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:31:45.118]      __ap = 4;
[05:31:45.118]        // -> [__ap <= 0x00000004]
[05:31:45.118]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:31:45.122]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:31:45.123]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:31:45.123]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:31:45.123]    </block>
[05:31:45.123]    <block atomic="false" info="">
[05:31:45.123]      __var nReset = 0x80;
[05:31:45.124]        // -> [nReset <= 0x00000080]
[05:31:45.124]      __var canReadPins = 0;
[05:31:45.124]        // -> [canReadPins <= 0x00000000]
[05:31:45.124]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:31:45.125]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:31:45.126]        // -> [canReadPins <= 0x00000001]
[05:31:45.126]    </block>
[05:31:45.126]    <control if="" while="1" timeout="200" info="">
[05:31:45.126]      // while "1"  (timeout="200")
[05:31:45.126]      // while-condition  =>  TRUE
[05:31:45.126]      // while "1"  (timeout="200")
[05:31:45.126]      // while-condition  =>  TRUE
[05:31:45.126]      // while "1"  (timeout="200")
[05:31:45.126]      // while-condition  =>  TRUE
[05:31:45.126]      // while "1"  (timeout="200")
[05:31:45.126]      // while-condition  =>  TRUE
[05:31:45.127]      // while "1"  (timeout="200")
[05:31:45.127]      // while  =>  TIMEOUT
[05:31:45.127]      // end while "1"
[05:31:45.127]    </control>
[05:31:45.127]    <control if="canReadPins" while="" timeout="0" info="">
[05:31:45.127]      // if-block "canReadPins"
[05:31:45.128]        // =>  TRUE
[05:31:45.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:31:45.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:31:45.129]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:31:45.129]        // while-condition  =>  FALSE
[05:31:45.130]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:31:45.130]      </control>
[05:31:45.130]      // end if-block "canReadPins"
[05:31:45.130]    </control>
[05:31:45.130]    <control if="!canReadPins" while="" timeout="0" info="">
[05:31:45.130]      // if-block "!canReadPins"
[05:31:45.130]        // =>  FALSE
[05:31:45.131]      // skip if-block "!canReadPins"
[05:31:45.131]    </control>
[05:31:45.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:31:45.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:31:45.131]        // =>  TRUE
[05:31:45.131]      <block atomic="false" info="">
[05:31:45.131]        WriteAP(0x00, 0x190008);
[05:31:45.133]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:31:45.134]        WriteAP(0xF0, 0x01);
[05:31:45.137]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:31:45.137]      </block>
[05:31:45.138]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:31:45.138]    </control>
[05:31:45.138]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:31:45.138]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:31:45.138]        // =>  FALSE
[05:31:45.138]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:31:45.138]    </control>
[05:31:45.138]    <block atomic="false" info="">
[05:31:45.139]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:31:45.142]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:31:45.142]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:31:45.142]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:31:45.142]      __ap = 0; //lets make sure we reset the access point selection
[05:31:45.142]        // -> [__ap <= 0x00000000]
[05:31:45.142]    </block>
[05:31:45.142]  </sequence>
[05:31:45.142]  
[05:31:45.163]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:31:45.163]  
[05:31:45.163]  <debugvars>
[05:31:45.163]    // Pre-defined
[05:31:45.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:45.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:45.163]    __dp=0x00000000
[05:31:45.163]    __ap=0x00000000
[05:31:45.163]    __traceout=0x00000000      (Trace Disabled)
[05:31:45.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:45.163]    __FlashAddr=0x00000000
[05:31:45.163]    __FlashLen=0x00000000
[05:31:45.163]    __FlashArg=0x00000000
[05:31:45.165]    __FlashOp=0x00000000
[05:31:45.165]    __Result=0x00000000
[05:31:45.165]  </debugvars>
[05:31:45.165]  
[05:31:45.165]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:31:45.165]    <block atomic="false" info="">
[05:31:45.165]      __var deviceID = 0;
[05:31:45.165]        // -> [deviceID <= 0x00000000]
[05:31:45.165]      __var version = 0;
[05:31:45.165]        // -> [version <= 0x00000000]
[05:31:45.165]      __var partNum = 0;
[05:31:45.166]        // -> [partNum <= 0x00000000]
[05:31:45.166]      __var manuf = 0;
[05:31:45.166]        // -> [manuf <= 0x00000000]
[05:31:45.166]      __var isMSPM0G1X0X_G3X0X = 0;
[05:31:45.166]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:31:45.166]      __var isProduction = 0;
[05:31:45.167]        // -> [isProduction <= 0x00000000]
[05:31:45.167]      __var continueId = 0;
[05:31:45.167]        // -> [continueId <= 0x00000000]
[05:31:45.167]      deviceID =   Read32(0x41C40004);
[05:31:45.171]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:31:45.171]        // -> [deviceID <= 0x2BB8802F]
[05:31:45.171]      version = deviceID >> 28;
[05:31:45.171]        // -> [version <= 0x00000002]
[05:31:45.171]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:31:45.171]        // -> [partNum <= 0x0000BB88]
[05:31:45.171]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:31:45.171]        // -> [manuf <= 0x00000017]
[05:31:45.173]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:31:45.173]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:31:45.173]      isProduction = (version > 0);
[05:31:45.173]        // -> [isProduction <= 0x00000001]
[05:31:45.173]    </block>
[05:31:45.173]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:31:45.173]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:31:45.173]        // =>  FALSE
[05:31:45.173]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:31:45.173]    </control>
[05:31:45.173]    <control if="continueId == 4" while="" timeout="0" info="">
[05:31:45.174]      // if-block "continueId == 4"
[05:31:45.174]        // =>  FALSE
[05:31:45.174]      // skip if-block "continueId == 4"
[05:31:45.174]    </control>
[05:31:45.174]    <control if="!isProduction" while="" timeout="0" info="">
[05:31:45.174]      // if-block "!isProduction"
[05:31:45.174]        // =>  FALSE
[05:31:45.174]      // skip if-block "!isProduction"
[05:31:45.174]    </control>
[05:31:45.174]  </sequence>
[05:31:45.174]  
[05:33:28.318]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:33:28.318]  
[05:33:28.318]  <debugvars>
[05:33:28.318]    // Pre-defined
[05:33:28.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:33:28.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:33:28.319]    __dp=0x00000000
[05:33:28.319]    __ap=0x00000000
[05:33:28.319]    __traceout=0x00000000      (Trace Disabled)
[05:33:28.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:33:28.319]    __FlashAddr=0x00000000
[05:33:28.319]    __FlashLen=0x00000000
[05:33:28.319]    __FlashArg=0x00000000
[05:33:28.320]    __FlashOp=0x00000000
[05:33:28.320]    __Result=0x00000000
[05:33:28.320]  </debugvars>
[05:33:28.320]  
[05:33:28.320]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:33:28.320]    <block atomic="false" info="">
[05:33:28.320]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:33:28.320]        // -> [isSWJ <= 0x00000001]
[05:33:28.320]      __var hasDormant = __protocol & 0x00020000;
[05:33:28.320]        // -> [hasDormant <= 0x00000000]
[05:33:28.321]      __var protType   = __protocol & 0x0000FFFF;
[05:33:28.321]        // -> [protType <= 0x00000002]
[05:33:28.321]    </block>
[05:33:28.321]    <control if="protType == 1" while="" timeout="0" info="">
[05:33:28.321]      // if-block "protType == 1"
[05:33:28.322]        // =>  FALSE
[05:33:28.322]      // skip if-block "protType == 1"
[05:33:28.322]    </control>
[05:33:28.322]    <control if="protType == 2" while="" timeout="0" info="">
[05:33:28.322]      // if-block "protType == 2"
[05:33:28.322]        // =>  TRUE
[05:33:28.322]      <control if="isSWJ" while="" timeout="0" info="">
[05:33:28.322]        // if-block "isSWJ"
[05:33:28.322]          // =>  TRUE
[05:33:28.322]        <control if="hasDormant" while="" timeout="0" info="">
[05:33:28.322]          // if-block "hasDormant"
[05:33:28.322]            // =>  FALSE
[05:33:28.322]          // skip if-block "hasDormant"
[05:33:28.322]        </control>
[05:33:28.323]        <control if="!hasDormant" while="" timeout="0" info="">
[05:33:28.323]          // if-block "!hasDormant"
[05:33:28.323]            // =>  TRUE
[05:33:28.323]          <block atomic="false" info="">
[05:33:28.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:33:28.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:33:28.325]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:33:28.326]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:33:28.326]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:33:28.328]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:33:28.328]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:33:28.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:33:28.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:33:28.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:33:28.332]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:33:28.333]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:33:28.333]          </block>
[05:33:28.333]          // end if-block "!hasDormant"
[05:33:28.333]        </control>
[05:33:28.334]        // end if-block "isSWJ"
[05:33:28.334]      </control>
[05:33:28.334]      <control if="!isSWJ" while="" timeout="0" info="">
[05:33:28.334]        // if-block "!isSWJ"
[05:33:28.334]          // =>  FALSE
[05:33:28.334]        // skip if-block "!isSWJ"
[05:33:28.334]      </control>
[05:33:28.334]      <block atomic="false" info="">
[05:33:28.334]        ReadDP(0x0);
[05:33:28.336]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:33:28.336]      </block>
[05:33:28.336]      // end if-block "protType == 2"
[05:33:28.336]    </control>
[05:33:28.336]  </sequence>
[05:33:28.337]  
[05:33:28.341]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:33:28.341]  
[05:33:28.341]  <debugvars>
[05:33:28.341]    // Pre-defined
[05:33:28.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:33:28.341]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:33:28.341]    __dp=0x00000000
[05:33:28.341]    __ap=0x00000000
[05:33:28.341]    __traceout=0x00000000      (Trace Disabled)
[05:33:28.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:33:28.341]    __FlashAddr=0x00000000
[05:33:28.341]    __FlashLen=0x00000000
[05:33:28.341]    __FlashArg=0x00000000
[05:33:28.341]    __FlashOp=0x00000000
[05:33:28.341]    __Result=0x00000000
[05:33:28.342]  </debugvars>
[05:33:28.342]  
[05:33:28.342]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:33:28.342]    <block atomic="false" info="">
[05:33:28.342]      __var SW_DP_ABORT       = 0x0;
[05:33:28.342]        // -> [SW_DP_ABORT <= 0x00000000]
[05:33:28.342]      __var DP_CTRL_STAT      = 0x4;
[05:33:28.342]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:33:28.342]      __var DP_SELECT         = 0x8;
[05:33:28.343]        // -> [DP_SELECT <= 0x00000008]
[05:33:28.343]      __var powered_down      = 0;
[05:33:28.343]        // -> [powered_down <= 0x00000000]
[05:33:28.343]      WriteDP(DP_SELECT, 0x00000000);
[05:33:28.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:33:28.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:33:28.346]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:33:28.346]        // -> [powered_down <= 0x00000001]
[05:33:28.346]    </block>
[05:33:28.346]    <control if="powered_down" while="" timeout="0" info="">
[05:33:28.346]      // if-block "powered_down"
[05:33:28.347]        // =>  TRUE
[05:33:28.347]      <block atomic="false" info="">
[05:33:28.347]        Message(0, "Debug/System power-up request sent");
[05:33:28.347]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:33:28.349]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:33:28.349]      </block>
[05:33:28.349]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:33:28.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:33:28.351]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:33:28.351]        // while-condition  =>  FALSE
[05:33:28.351]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:33:28.351]      </control>
[05:33:28.352]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:33:28.352]        // if-block "(__protocol & 0xFFFF) == 1"
[05:33:28.352]          // =>  FALSE
[05:33:28.352]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:33:28.352]      </control>
[05:33:28.352]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:33:28.352]        // if-block "(__protocol & 0xFFFF) == 2"
[05:33:28.352]          // =>  TRUE
[05:33:28.353]        <block atomic="false" info="">
[05:33:28.353]          Message(0, "executing SWD power up");
[05:33:28.353]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:33:28.355]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:33:28.355]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:33:28.357]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:33:28.357]        </block>
[05:33:28.358]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:33:28.358]      </control>
[05:33:28.358]      // end if-block "powered_down"
[05:33:28.358]    </control>
[05:33:28.358]    <block atomic="false" info="">
[05:33:28.358]      __var DEBUG_PORT_VAL    = 0;
[05:33:28.359]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:33:28.359]      __var ACCESS_POINT_VAL  = 0;
[05:33:28.359]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:33:28.359]      __ap = 1; 
[05:33:28.359]        // -> [__ap <= 0x00000001]
[05:33:28.359]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:33:28.363]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:33:28.363]      __ap = 4;
[05:33:28.364]        // -> [__ap <= 0x00000004]
[05:33:28.364]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:33:28.367]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:33:28.367]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:33:28.367]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:33:28.367]    </block>
[05:33:28.368]    <block atomic="false" info="">
[05:33:28.368]      __var nReset = 0x80;
[05:33:28.368]        // -> [nReset <= 0x00000080]
[05:33:28.368]      __var canReadPins = 0;
[05:33:28.368]        // -> [canReadPins <= 0x00000000]
[05:33:28.368]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:33:28.371]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:33:28.371]        // -> [canReadPins <= 0x00000001]
[05:33:28.371]    </block>
[05:33:28.372]    <control if="" while="1" timeout="200" info="">
[05:33:28.372]      // while "1"  (timeout="200")
[05:33:28.372]      // while-condition  =>  TRUE
[05:33:28.372]      // while "1"  (timeout="200")
[05:33:28.372]      // while-condition  =>  TRUE
[05:33:28.372]      // while "1"  (timeout="200")
[05:33:28.372]      // while-condition  =>  TRUE
[05:33:28.372]      // while "1"  (timeout="200")
[05:33:28.372]      // while-condition  =>  TRUE
[05:33:28.372]      // while "1"  (timeout="200")
[05:33:28.373]      // while-condition  =>  TRUE
[05:33:28.373]      // while "1"  (timeout="200")
[05:33:28.373]      // while-condition  =>  TRUE
[05:33:28.373]      // while "1"  (timeout="200")
[05:33:28.373]      // while-condition  =>  TRUE
[05:33:28.373]      // while "1"  (timeout="200")
[05:33:28.373]      // while-condition  =>  TRUE
[05:33:28.373]      // while "1"  (timeout="200")
[05:33:28.373]      // while-condition  =>  TRUE
[05:33:28.373]      // while "1"  (timeout="200")
[05:33:28.374]      // while-condition  =>  TRUE
[05:33:28.374]      // while "1"  (timeout="200")
[05:33:28.374]      // while-condition  =>  TRUE
[05:33:28.374]      // while "1"  (timeout="200")
[05:33:28.374]      // while-condition  =>  TRUE
[05:33:28.374]      // while "1"  (timeout="200")
[05:33:28.374]      // while-condition  =>  TRUE
[05:33:28.374]      // while "1"  (timeout="200")
[05:33:28.374]      // while-condition  =>  TRUE
[05:33:28.374]      // while "1"  (timeout="200")
[05:33:28.375]      // while-condition  =>  TRUE
[05:33:28.375]      // while "1"  (timeout="200")
[05:33:28.375]      // while-condition  =>  TRUE
[05:33:28.375]      // while "1"  (timeout="200")
[05:33:28.375]      // while-condition  =>  TRUE
[05:33:28.375]      // while "1"  (timeout="200")
[05:33:28.375]      // while-condition  =>  TRUE
[05:33:28.375]      // while "1"  (timeout="200")
[05:33:28.376]      // while-condition  =>  TRUE
[05:33:28.376]      // while "1"  (timeout="200")
[05:33:28.376]      // while  =>  TIMEOUT
[05:33:28.376]      // end while "1"
[05:33:28.376]    </control>
[05:33:28.376]    <control if="canReadPins" while="" timeout="0" info="">
[05:33:28.377]      // if-block "canReadPins"
[05:33:28.378]        // =>  TRUE
[05:33:28.378]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:33:28.378]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:33:28.379]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:33:28.379]        // while-condition  =>  FALSE
[05:33:28.379]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:33:28.380]      </control>
[05:33:28.380]      // end if-block "canReadPins"
[05:33:28.380]    </control>
[05:33:28.380]    <control if="!canReadPins" while="" timeout="0" info="">
[05:33:28.380]      // if-block "!canReadPins"
[05:33:28.380]        // =>  FALSE
[05:33:28.380]      // skip if-block "!canReadPins"
[05:33:28.381]    </control>
[05:33:28.381]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:33:28.381]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:33:28.381]        // =>  TRUE
[05:33:28.381]      <block atomic="false" info="">
[05:33:28.381]        WriteAP(0x00, 0x190008);
[05:33:28.390]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:33:28.390]        WriteAP(0xF0, 0x01);
[05:33:28.394]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:33:28.394]      </block>
[05:33:28.394]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:33:28.394]    </control>
[05:33:28.394]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:33:28.394]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:33:28.394]        // =>  FALSE
[05:33:28.394]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:33:28.394]    </control>
[05:33:28.394]    <block atomic="false" info="">
[05:33:28.394]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:33:28.398]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:33:28.399]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:33:28.399]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:33:28.399]      __ap = 0; //lets make sure we reset the access point selection
[05:33:28.399]        // -> [__ap <= 0x00000000]
[05:33:28.399]    </block>
[05:33:28.399]  </sequence>
[05:33:28.399]  
[05:33:28.418]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:33:28.418]  
[05:33:28.418]  <debugvars>
[05:33:28.418]    // Pre-defined
[05:33:28.418]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:33:28.419]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:33:28.419]    __dp=0x00000000
[05:33:28.419]    __ap=0x00000000
[05:33:28.419]    __traceout=0x00000000      (Trace Disabled)
[05:33:28.419]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:33:28.419]    __FlashAddr=0x00000000
[05:33:28.419]    __FlashLen=0x00000000
[05:33:28.419]    __FlashArg=0x00000000
[05:33:28.419]    __FlashOp=0x00000000
[05:33:28.420]    __Result=0x00000000
[05:33:28.420]  </debugvars>
[05:33:28.420]  
[05:33:28.420]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:33:28.420]    <block atomic="false" info="">
[05:33:28.420]      __var deviceID = 0;
[05:33:28.421]        // -> [deviceID <= 0x00000000]
[05:33:28.421]      __var version = 0;
[05:33:28.421]        // -> [version <= 0x00000000]
[05:33:28.421]      __var partNum = 0;
[05:33:28.421]        // -> [partNum <= 0x00000000]
[05:33:28.421]      __var manuf = 0;
[05:33:28.421]        // -> [manuf <= 0x00000000]
[05:33:28.421]      __var isMSPM0G1X0X_G3X0X = 0;
[05:33:28.421]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:33:28.421]      __var isProduction = 0;
[05:33:28.423]        // -> [isProduction <= 0x00000000]
[05:33:28.423]      __var continueId = 0;
[05:33:28.423]        // -> [continueId <= 0x00000000]
[05:33:28.423]      deviceID =   Read32(0x41C40004);
[05:33:28.427]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:33:28.428]        // -> [deviceID <= 0x2BB8802F]
[05:33:28.428]      version = deviceID >> 28;
[05:33:28.428]        // -> [version <= 0x00000002]
[05:33:28.428]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:33:28.428]        // -> [partNum <= 0x0000BB88]
[05:33:28.428]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:33:28.428]        // -> [manuf <= 0x00000017]
[05:33:28.428]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:33:28.428]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:33:28.428]      isProduction = (version > 0);
[05:33:28.428]        // -> [isProduction <= 0x00000001]
[05:33:28.429]    </block>
[05:33:28.429]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:33:28.429]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:33:28.429]        // =>  FALSE
[05:33:28.429]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:33:28.429]    </control>
[05:33:28.429]    <control if="continueId == 4" while="" timeout="0" info="">
[05:33:28.429]      // if-block "continueId == 4"
[05:33:28.429]        // =>  FALSE
[05:33:28.429]      // skip if-block "continueId == 4"
[05:33:28.430]    </control>
[05:33:28.430]    <control if="!isProduction" while="" timeout="0" info="">
[05:33:28.430]      // if-block "!isProduction"
[05:33:28.430]        // =>  FALSE
[05:33:28.430]      // skip if-block "!isProduction"
[05:33:28.430]    </control>
[05:33:28.430]  </sequence>
[05:33:28.430]  
[05:42:59.140]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:42:59.140]  
[05:42:59.147]  <debugvars>
[05:42:59.148]    // Pre-defined
[05:42:59.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:59.148]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:59.148]    __dp=0x00000000
[05:42:59.148]    __ap=0x00000000
[05:42:59.148]    __traceout=0x00000000      (Trace Disabled)
[05:42:59.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:59.149]    __FlashAddr=0x00000000
[05:42:59.149]    __FlashLen=0x00000000
[05:42:59.149]    __FlashArg=0x00000000
[05:42:59.149]    __FlashOp=0x00000000
[05:42:59.149]    __Result=0x00000000
[05:42:59.149]  </debugvars>
[05:42:59.149]  
[05:42:59.149]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:42:59.150]    <block atomic="false" info="">
[05:42:59.150]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:42:59.150]        // -> [isSWJ <= 0x00000001]
[05:42:59.150]      __var hasDormant = __protocol & 0x00020000;
[05:42:59.150]        // -> [hasDormant <= 0x00000000]
[05:42:59.150]      __var protType   = __protocol & 0x0000FFFF;
[05:42:59.150]        // -> [protType <= 0x00000002]
[05:42:59.150]    </block>
[05:42:59.151]    <control if="protType == 1" while="" timeout="0" info="">
[05:42:59.151]      // if-block "protType == 1"
[05:42:59.151]        // =>  FALSE
[05:42:59.151]      // skip if-block "protType == 1"
[05:42:59.151]    </control>
[05:42:59.151]    <control if="protType == 2" while="" timeout="0" info="">
[05:42:59.151]      // if-block "protType == 2"
[05:42:59.151]        // =>  TRUE
[05:42:59.151]      <control if="isSWJ" while="" timeout="0" info="">
[05:42:59.151]        // if-block "isSWJ"
[05:42:59.151]          // =>  TRUE
[05:42:59.151]        <control if="hasDormant" while="" timeout="0" info="">
[05:42:59.151]          // if-block "hasDormant"
[05:42:59.151]            // =>  FALSE
[05:42:59.152]          // skip if-block "hasDormant"
[05:42:59.152]        </control>
[05:42:59.152]        <control if="!hasDormant" while="" timeout="0" info="">
[05:42:59.152]          // if-block "!hasDormant"
[05:42:59.152]            // =>  TRUE
[05:42:59.152]          <block atomic="false" info="">
[05:42:59.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:42:59.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:59.154]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:42:59.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:42:59.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:42:59.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:59.158]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:42:59.160]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:42:59.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:42:59.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:59.163]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:42:59.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:42:59.165]          </block>
[05:42:59.165]          // end if-block "!hasDormant"
[05:42:59.165]        </control>
[05:42:59.165]        // end if-block "isSWJ"
[05:42:59.165]      </control>
[05:42:59.165]      <control if="!isSWJ" while="" timeout="0" info="">
[05:42:59.166]        // if-block "!isSWJ"
[05:42:59.166]          // =>  FALSE
[05:42:59.166]        // skip if-block "!isSWJ"
[05:42:59.166]      </control>
[05:42:59.166]      <block atomic="false" info="">
[05:42:59.166]        ReadDP(0x0);
[05:42:59.167]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:42:59.167]      </block>
[05:42:59.167]      // end if-block "protType == 2"
[05:42:59.167]    </control>
[05:42:59.168]  </sequence>
[05:42:59.168]  
[05:42:59.172]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:42:59.172]  
[05:42:59.172]  <debugvars>
[05:42:59.172]    // Pre-defined
[05:42:59.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:59.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:59.172]    __dp=0x00000000
[05:42:59.172]    __ap=0x00000000
[05:42:59.172]    __traceout=0x00000000      (Trace Disabled)
[05:42:59.172]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:59.172]    __FlashAddr=0x00000000
[05:42:59.172]    __FlashLen=0x00000000
[05:42:59.172]    __FlashArg=0x00000000
[05:42:59.173]    __FlashOp=0x00000000
[05:42:59.173]    __Result=0x00000000
[05:42:59.173]  </debugvars>
[05:42:59.173]  
[05:42:59.173]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:42:59.173]    <block atomic="false" info="">
[05:42:59.173]      __var SW_DP_ABORT       = 0x0;
[05:42:59.173]        // -> [SW_DP_ABORT <= 0x00000000]
[05:42:59.175]      __var DP_CTRL_STAT      = 0x4;
[05:42:59.175]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:42:59.175]      __var DP_SELECT         = 0x8;
[05:42:59.175]        // -> [DP_SELECT <= 0x00000008]
[05:42:59.175]      __var powered_down      = 0;
[05:42:59.175]        // -> [powered_down <= 0x00000000]
[05:42:59.175]      WriteDP(DP_SELECT, 0x00000000);
[05:42:59.177]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:42:59.177]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:42:59.178]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:42:59.179]        // -> [powered_down <= 0x00000001]
[05:42:59.179]    </block>
[05:42:59.179]    <control if="powered_down" while="" timeout="0" info="">
[05:42:59.179]      // if-block "powered_down"
[05:42:59.179]        // =>  TRUE
[05:42:59.179]      <block atomic="false" info="">
[05:42:59.179]        Message(0, "Debug/System power-up request sent");
[05:42:59.179]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:42:59.183]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:42:59.183]      </block>
[05:42:59.183]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:42:59.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:42:59.185]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:42:59.185]        // while-condition  =>  FALSE
[05:42:59.185]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:42:59.185]      </control>
[05:42:59.185]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:42:59.185]        // if-block "(__protocol & 0xFFFF) == 1"
[05:42:59.185]          // =>  FALSE
[05:42:59.185]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:42:59.185]      </control>
[05:42:59.185]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:42:59.185]        // if-block "(__protocol & 0xFFFF) == 2"
[05:42:59.185]          // =>  TRUE
[05:42:59.187]        <block atomic="false" info="">
[05:42:59.187]          Message(0, "executing SWD power up");
[05:42:59.187]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:42:59.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:42:59.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:42:59.191]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:42:59.191]        </block>
[05:42:59.191]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:42:59.191]      </control>
[05:42:59.191]      // end if-block "powered_down"
[05:42:59.191]    </control>
[05:42:59.191]    <block atomic="false" info="">
[05:42:59.191]      __var DEBUG_PORT_VAL    = 0;
[05:42:59.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:42:59.191]      __var ACCESS_POINT_VAL  = 0;
[05:42:59.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:42:59.191]      __ap = 1; 
[05:42:59.191]        // -> [__ap <= 0x00000001]
[05:42:59.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:42:59.194]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:42:59.195]      __ap = 4;
[05:42:59.195]        // -> [__ap <= 0x00000004]
[05:42:59.195]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:42:59.198]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:42:59.198]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:42:59.198]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:42:59.199]    </block>
[05:42:59.199]    <block atomic="false" info="">
[05:42:59.199]      __var nReset = 0x80;
[05:42:59.199]        // -> [nReset <= 0x00000080]
[05:42:59.201]      __var canReadPins = 0;
[05:42:59.201]        // -> [canReadPins <= 0x00000000]
[05:42:59.201]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:42:59.202]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:42:59.202]        // -> [canReadPins <= 0x00000001]
[05:42:59.202]    </block>
[05:42:59.203]    <control if="" while="1" timeout="200" info="">
[05:42:59.203]      // while "1"  (timeout="200")
[05:42:59.203]      // while-condition  =>  TRUE
[05:42:59.204]      // while "1"  (timeout="200")
[05:42:59.204]      // while-condition  =>  TRUE
[05:42:59.204]      // while "1"  (timeout="200")
[05:42:59.204]      // while-condition  =>  TRUE
[05:42:59.204]      // while "1"  (timeout="200")
[05:42:59.204]      // while-condition  =>  TRUE
[05:42:59.204]      // while "1"  (timeout="200")
[05:42:59.204]      // while-condition  =>  TRUE
[05:42:59.204]      // while "1"  (timeout="200")
[05:42:59.204]      // while-condition  =>  TRUE
[05:42:59.205]      // while "1"  (timeout="200")
[05:42:59.205]      // while  =>  TIMEOUT
[05:42:59.205]      // end while "1"
[05:42:59.205]    </control>
[05:42:59.205]    <control if="canReadPins" while="" timeout="0" info="">
[05:42:59.205]      // if-block "canReadPins"
[05:42:59.205]        // =>  TRUE
[05:42:59.205]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:42:59.205]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:42:59.208]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:42:59.208]        // while-condition  =>  FALSE
[05:42:59.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:42:59.208]      </control>
[05:42:59.208]      // end if-block "canReadPins"
[05:42:59.208]    </control>
[05:42:59.208]    <control if="!canReadPins" while="" timeout="0" info="">
[05:42:59.209]      // if-block "!canReadPins"
[05:42:59.209]        // =>  FALSE
[05:42:59.209]      // skip if-block "!canReadPins"
[05:42:59.209]    </control>
[05:42:59.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:42:59.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:42:59.209]        // =>  TRUE
[05:42:59.209]      <block atomic="false" info="">
[05:42:59.209]        WriteAP(0x00, 0x190008);
[05:42:59.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:42:59.211]        WriteAP(0xF0, 0x01);
[05:42:59.215]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:42:59.215]      </block>
[05:42:59.215]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:42:59.215]    </control>
[05:42:59.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:42:59.215]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:42:59.215]        // =>  FALSE
[05:42:59.215]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:42:59.215]    </control>
[05:42:59.215]    <block atomic="false" info="">
[05:42:59.216]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:42:59.220]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:42:59.220]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:42:59.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:42:59.221]      __ap = 0; //lets make sure we reset the access point selection
[05:42:59.221]        // -> [__ap <= 0x00000000]
[05:42:59.221]    </block>
[05:42:59.221]  </sequence>
[05:42:59.221]  
[05:42:59.240]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:42:59.240]  
[05:42:59.240]  <debugvars>
[05:42:59.240]    // Pre-defined
[05:42:59.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:59.240]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:59.240]    __dp=0x00000000
[05:42:59.241]    __ap=0x00000000
[05:42:59.241]    __traceout=0x00000000      (Trace Disabled)
[05:42:59.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:59.241]    __FlashAddr=0x00000000
[05:42:59.241]    __FlashLen=0x00000000
[05:42:59.241]    __FlashArg=0x00000000
[05:42:59.242]    __FlashOp=0x00000000
[05:42:59.242]    __Result=0x00000000
[05:42:59.242]  </debugvars>
[05:42:59.242]  
[05:42:59.242]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:42:59.242]    <block atomic="false" info="">
[05:42:59.242]      __var deviceID = 0;
[05:42:59.242]        // -> [deviceID <= 0x00000000]
[05:42:59.242]      __var version = 0;
[05:42:59.242]        // -> [version <= 0x00000000]
[05:42:59.242]      __var partNum = 0;
[05:42:59.242]        // -> [partNum <= 0x00000000]
[05:42:59.243]      __var manuf = 0;
[05:42:59.243]        // -> [manuf <= 0x00000000]
[05:42:59.243]      __var isMSPM0G1X0X_G3X0X = 0;
[05:42:59.243]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:42:59.243]      __var isProduction = 0;
[05:42:59.243]        // -> [isProduction <= 0x00000000]
[05:42:59.243]      __var continueId = 0;
[05:42:59.243]        // -> [continueId <= 0x00000000]
[05:42:59.243]      deviceID =   Read32(0x41C40004);
[05:42:59.247]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:42:59.248]        // -> [deviceID <= 0x2BB8802F]
[05:42:59.248]      version = deviceID >> 28;
[05:42:59.248]        // -> [version <= 0x00000002]
[05:42:59.248]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:42:59.248]        // -> [partNum <= 0x0000BB88]
[05:42:59.248]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:42:59.248]        // -> [manuf <= 0x00000017]
[05:42:59.248]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:42:59.248]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:42:59.248]      isProduction = (version > 0);
[05:42:59.248]        // -> [isProduction <= 0x00000001]
[05:42:59.248]    </block>
[05:42:59.249]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:42:59.249]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:42:59.249]        // =>  FALSE
[05:42:59.249]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:42:59.249]    </control>
[05:42:59.249]    <control if="continueId == 4" while="" timeout="0" info="">
[05:42:59.249]      // if-block "continueId == 4"
[05:42:59.249]        // =>  FALSE
[05:42:59.249]      // skip if-block "continueId == 4"
[05:42:59.249]    </control>
[05:42:59.250]    <control if="!isProduction" while="" timeout="0" info="">
[05:42:59.250]      // if-block "!isProduction"
[05:42:59.250]        // =>  FALSE
[05:42:59.250]      // skip if-block "!isProduction"
[05:42:59.250]    </control>
[05:42:59.250]  </sequence>
[05:42:59.250]  
[05:45:23.434]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:45:23.434]  
[05:45:23.442]  <debugvars>
[05:45:23.443]    // Pre-defined
[05:45:23.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:45:23.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:45:23.443]    __dp=0x00000000
[05:45:23.443]    __ap=0x00000000
[05:45:23.443]    __traceout=0x00000000      (Trace Disabled)
[05:45:23.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:45:23.443]    __FlashAddr=0x00000000
[05:45:23.443]    __FlashLen=0x00000000
[05:45:23.443]    __FlashArg=0x00000000
[05:45:23.444]    __FlashOp=0x00000000
[05:45:23.444]    __Result=0x00000000
[05:45:23.444]  </debugvars>
[05:45:23.444]  
[05:45:23.444]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:45:23.444]    <block atomic="false" info="">
[05:45:23.444]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:45:23.444]        // -> [isSWJ <= 0x00000001]
[05:45:23.444]      __var hasDormant = __protocol & 0x00020000;
[05:45:23.445]        // -> [hasDormant <= 0x00000000]
[05:45:23.445]      __var protType   = __protocol & 0x0000FFFF;
[05:45:23.445]        // -> [protType <= 0x00000002]
[05:45:23.445]    </block>
[05:45:23.445]    <control if="protType == 1" while="" timeout="0" info="">
[05:45:23.445]      // if-block "protType == 1"
[05:45:23.445]        // =>  FALSE
[05:45:23.445]      // skip if-block "protType == 1"
[05:45:23.446]    </control>
[05:45:23.446]    <control if="protType == 2" while="" timeout="0" info="">
[05:45:23.446]      // if-block "protType == 2"
[05:45:23.446]        // =>  TRUE
[05:45:23.446]      <control if="isSWJ" while="" timeout="0" info="">
[05:45:23.446]        // if-block "isSWJ"
[05:45:23.446]          // =>  TRUE
[05:45:23.446]        <control if="hasDormant" while="" timeout="0" info="">
[05:45:23.446]          // if-block "hasDormant"
[05:45:23.446]            // =>  FALSE
[05:45:23.447]          // skip if-block "hasDormant"
[05:45:23.447]        </control>
[05:45:23.447]        <control if="!hasDormant" while="" timeout="0" info="">
[05:45:23.447]          // if-block "!hasDormant"
[05:45:23.447]            // =>  TRUE
[05:45:23.447]          <block atomic="false" info="">
[05:45:23.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:45:23.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:45:23.450]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:45:23.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:45:23.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:45:23.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:45:23.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:45:23.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:45:23.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:45:23.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:45:23.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:45:23.461]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:45:23.461]          </block>
[05:45:23.461]          // end if-block "!hasDormant"
[05:45:23.461]        </control>
[05:45:23.461]        // end if-block "isSWJ"
[05:45:23.461]      </control>
[05:45:23.462]      <control if="!isSWJ" while="" timeout="0" info="">
[05:45:23.462]        // if-block "!isSWJ"
[05:45:23.462]          // =>  FALSE
[05:45:23.462]        // skip if-block "!isSWJ"
[05:45:23.462]      </control>
[05:45:23.462]      <block atomic="false" info="">
[05:45:23.462]        ReadDP(0x0);
[05:45:23.464]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:45:23.464]      </block>
[05:45:23.464]      // end if-block "protType == 2"
[05:45:23.465]    </control>
[05:45:23.465]  </sequence>
[05:45:23.465]  
[05:45:23.467]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:45:23.467]  
[05:45:23.467]  <debugvars>
[05:45:23.467]    // Pre-defined
[05:45:23.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:45:23.468]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:45:23.468]    __dp=0x00000000
[05:45:23.468]    __ap=0x00000000
[05:45:23.468]    __traceout=0x00000000      (Trace Disabled)
[05:45:23.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:45:23.468]    __FlashAddr=0x00000000
[05:45:23.469]    __FlashLen=0x00000000
[05:45:23.469]    __FlashArg=0x00000000
[05:45:23.469]    __FlashOp=0x00000000
[05:45:23.469]    __Result=0x00000000
[05:45:23.469]  </debugvars>
[05:45:23.469]  
[05:45:23.469]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:45:23.469]    <block atomic="false" info="">
[05:45:23.469]      __var SW_DP_ABORT       = 0x0;
[05:45:23.469]        // -> [SW_DP_ABORT <= 0x00000000]
[05:45:23.469]      __var DP_CTRL_STAT      = 0x4;
[05:45:23.470]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:45:23.470]      __var DP_SELECT         = 0x8;
[05:45:23.470]        // -> [DP_SELECT <= 0x00000008]
[05:45:23.470]      __var powered_down      = 0;
[05:45:23.470]        // -> [powered_down <= 0x00000000]
[05:45:23.470]      WriteDP(DP_SELECT, 0x00000000);
[05:45:23.473]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:45:23.473]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:45:23.475]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:45:23.475]        // -> [powered_down <= 0x00000001]
[05:45:23.475]    </block>
[05:45:23.475]    <control if="powered_down" while="" timeout="0" info="">
[05:45:23.475]      // if-block "powered_down"
[05:45:23.475]        // =>  TRUE
[05:45:23.475]      <block atomic="false" info="">
[05:45:23.476]        Message(0, "Debug/System power-up request sent");
[05:45:23.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:45:23.477]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:45:23.477]      </block>
[05:45:23.477]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:45:23.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:45:23.479]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:45:23.479]        // while-condition  =>  FALSE
[05:45:23.479]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:45:23.480]      </control>
[05:45:23.480]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:45:23.480]        // if-block "(__protocol & 0xFFFF) == 1"
[05:45:23.480]          // =>  FALSE
[05:45:23.480]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:45:23.480]      </control>
[05:45:23.481]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:45:23.481]        // if-block "(__protocol & 0xFFFF) == 2"
[05:45:23.481]          // =>  TRUE
[05:45:23.481]        <block atomic="false" info="">
[05:45:23.482]          Message(0, "executing SWD power up");
[05:45:23.482]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:45:23.483]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:45:23.483]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:45:23.485]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:45:23.485]        </block>
[05:45:23.485]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:45:23.485]      </control>
[05:45:23.485]      // end if-block "powered_down"
[05:45:23.485]    </control>
[05:45:23.485]    <block atomic="false" info="">
[05:45:23.485]      __var DEBUG_PORT_VAL    = 0;
[05:45:23.485]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:45:23.485]      __var ACCESS_POINT_VAL  = 0;
[05:45:23.485]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:45:23.487]      __ap = 1; 
[05:45:23.487]        // -> [__ap <= 0x00000001]
[05:45:23.487]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:45:23.490]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:45:23.490]      __ap = 4;
[05:45:23.490]        // -> [__ap <= 0x00000004]
[05:45:23.490]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:45:23.493]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:45:23.493]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:45:23.493]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:45:23.493]    </block>
[05:45:23.493]    <block atomic="false" info="">
[05:45:23.493]      __var nReset = 0x80;
[05:45:23.493]        // -> [nReset <= 0x00000080]
[05:45:23.493]      __var canReadPins = 0;
[05:45:23.494]        // -> [canReadPins <= 0x00000000]
[05:45:23.494]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:45:23.496]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:45:23.496]        // -> [canReadPins <= 0x00000001]
[05:45:23.496]    </block>
[05:45:23.497]    <control if="" while="1" timeout="200" info="">
[05:45:23.497]      // while "1"  (timeout="200")
[05:45:23.497]      // while-condition  =>  TRUE
[05:45:23.497]      // while "1"  (timeout="200")
[05:45:23.497]      // while-condition  =>  TRUE
[05:45:23.497]      // while "1"  (timeout="200")
[05:45:23.497]      // while-condition  =>  TRUE
[05:45:23.497]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.498]      // while-condition  =>  TRUE
[05:45:23.498]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.499]      // while-condition  =>  TRUE
[05:45:23.499]      // while "1"  (timeout="200")
[05:45:23.500]      // while-condition  =>  TRUE
[05:45:23.500]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.501]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.501]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.501]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.501]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.501]      // while "1"  (timeout="200")
[05:45:23.501]      // while-condition  =>  TRUE
[05:45:23.502]      // while "1"  (timeout="200")
[05:45:23.502]      // while  =>  TIMEOUT
[05:45:23.502]      // end while "1"
[05:45:23.502]    </control>
[05:45:23.502]    <control if="canReadPins" while="" timeout="0" info="">
[05:45:23.502]      // if-block "canReadPins"
[05:45:23.502]        // =>  TRUE
[05:45:23.502]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:45:23.502]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:45:23.507]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:45:23.507]        // while-condition  =>  FALSE
[05:45:23.507]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:45:23.507]      </control>
[05:45:23.507]      // end if-block "canReadPins"
[05:45:23.509]    </control>
[05:45:23.509]    <control if="!canReadPins" while="" timeout="0" info="">
[05:45:23.509]      // if-block "!canReadPins"
[05:45:23.509]        // =>  FALSE
[05:45:23.509]      // skip if-block "!canReadPins"
[05:45:23.509]    </control>
[05:45:23.509]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:45:23.509]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:45:23.509]        // =>  TRUE
[05:45:23.509]      <block atomic="false" info="">
[05:45:23.509]        WriteAP(0x00, 0x190008);
[05:45:23.511]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:45:23.511]        WriteAP(0xF0, 0x01);
[05:45:23.515]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:45:23.515]      </block>
[05:45:23.515]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:45:23.515]    </control>
[05:45:23.515]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:45:23.515]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:45:23.515]        // =>  FALSE
[05:45:23.515]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:45:23.515]    </control>
[05:45:23.515]    <block atomic="false" info="">
[05:45:23.515]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:45:23.518]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:45:23.518]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:45:23.520]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:45:23.520]      __ap = 0; //lets make sure we reset the access point selection
[05:45:23.520]        // -> [__ap <= 0x00000000]
[05:45:23.520]    </block>
[05:45:23.520]  </sequence>
[05:45:23.521]  
[05:45:23.543]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:45:23.543]  
[05:45:23.543]  <debugvars>
[05:45:23.543]    // Pre-defined
[05:45:23.544]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:45:23.544]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:45:23.544]    __dp=0x00000000
[05:45:23.544]    __ap=0x00000000
[05:45:23.544]    __traceout=0x00000000      (Trace Disabled)
[05:45:23.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:45:23.544]    __FlashAddr=0x00000000
[05:45:23.544]    __FlashLen=0x00000000
[05:45:23.544]    __FlashArg=0x00000000
[05:45:23.545]    __FlashOp=0x00000000
[05:45:23.545]    __Result=0x00000000
[05:45:23.545]  </debugvars>
[05:45:23.545]  
[05:45:23.545]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:45:23.545]    <block atomic="false" info="">
[05:45:23.545]      __var deviceID = 0;
[05:45:23.545]        // -> [deviceID <= 0x00000000]
[05:45:23.545]      __var version = 0;
[05:45:23.546]        // -> [version <= 0x00000000]
[05:45:23.546]      __var partNum = 0;
[05:45:23.546]        // -> [partNum <= 0x00000000]
[05:45:23.546]      __var manuf = 0;
[05:45:23.546]        // -> [manuf <= 0x00000000]
[05:45:23.546]      __var isMSPM0G1X0X_G3X0X = 0;
[05:45:23.546]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:45:23.546]      __var isProduction = 0;
[05:45:23.546]        // -> [isProduction <= 0x00000000]
[05:45:23.546]      __var continueId = 0;
[05:45:23.547]        // -> [continueId <= 0x00000000]
[05:45:23.547]      deviceID =   Read32(0x41C40004);
[05:45:23.553]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:45:23.553]        // -> [deviceID <= 0x2BB8802F]
[05:45:23.553]      version = deviceID >> 28;
[05:45:23.553]        // -> [version <= 0x00000002]
[05:45:23.553]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:45:23.553]        // -> [partNum <= 0x0000BB88]
[05:45:23.553]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:45:23.553]        // -> [manuf <= 0x00000017]
[05:45:23.554]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:45:23.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:45:23.554]      isProduction = (version > 0);
[05:45:23.554]        // -> [isProduction <= 0x00000001]
[05:45:23.554]    </block>
[05:45:23.554]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:45:23.554]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:45:23.555]        // =>  FALSE
[05:45:23.555]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:45:23.555]    </control>
[05:45:23.555]    <control if="continueId == 4" while="" timeout="0" info="">
[05:45:23.555]      // if-block "continueId == 4"
[05:45:23.555]        // =>  FALSE
[05:45:23.555]      // skip if-block "continueId == 4"
[05:45:23.555]    </control>
[05:45:23.555]    <control if="!isProduction" while="" timeout="0" info="">
[05:45:23.555]      // if-block "!isProduction"
[05:45:23.555]        // =>  FALSE
[05:45:23.556]      // skip if-block "!isProduction"
[05:45:23.556]    </control>
[05:45:23.556]  </sequence>
[05:45:23.556]  
[06:00:14.776]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[06:00:14.776]  
[06:00:14.786]  <debugvars>
[06:00:14.786]    // Pre-defined
[06:00:14.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:00:14.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:00:14.786]    __dp=0x00000000
[06:00:14.786]    __ap=0x00000000
[06:00:14.786]    __traceout=0x00000000      (Trace Disabled)
[06:00:14.787]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:00:14.787]    __FlashAddr=0x00000000
[06:00:14.787]    __FlashLen=0x00000000
[06:00:14.787]    __FlashArg=0x00000000
[06:00:14.787]    __FlashOp=0x00000000
[06:00:14.787]    __Result=0x00000000
[06:00:14.787]  </debugvars>
[06:00:14.787]  
[06:00:14.787]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[06:00:14.787]    <block atomic="false" info="">
[06:00:14.787]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[06:00:14.788]        // -> [isSWJ <= 0x00000001]
[06:00:14.788]      __var hasDormant = __protocol & 0x00020000;
[06:00:14.788]        // -> [hasDormant <= 0x00000000]
[06:00:14.788]      __var protType   = __protocol & 0x0000FFFF;
[06:00:14.788]        // -> [protType <= 0x00000002]
[06:00:14.788]    </block>
[06:00:14.788]    <control if="protType == 1" while="" timeout="0" info="">
[06:00:14.788]      // if-block "protType == 1"
[06:00:14.788]        // =>  FALSE
[06:00:14.788]      // skip if-block "protType == 1"
[06:00:14.789]    </control>
[06:00:14.789]    <control if="protType == 2" while="" timeout="0" info="">
[06:00:14.789]      // if-block "protType == 2"
[06:00:14.789]        // =>  TRUE
[06:00:14.789]      <control if="isSWJ" while="" timeout="0" info="">
[06:00:14.789]        // if-block "isSWJ"
[06:00:14.789]          // =>  TRUE
[06:00:14.789]        <control if="hasDormant" while="" timeout="0" info="">
[06:00:14.789]          // if-block "hasDormant"
[06:00:14.789]            // =>  FALSE
[06:00:14.790]          // skip if-block "hasDormant"
[06:00:14.790]        </control>
[06:00:14.791]        <control if="!hasDormant" while="" timeout="0" info="">
[06:00:14.791]          // if-block "!hasDormant"
[06:00:14.791]            // =>  TRUE
[06:00:14.791]          <block atomic="false" info="">
[06:00:14.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[06:00:14.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:00:14.793]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[06:00:14.795]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[06:00:14.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[06:00:14.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:00:14.796]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[06:00:14.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[06:00:14.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[06:00:14.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:00:14.800]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[06:00:14.802]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[06:00:14.802]          </block>
[06:00:14.802]          // end if-block "!hasDormant"
[06:00:14.802]        </control>
[06:00:14.802]        // end if-block "isSWJ"
[06:00:14.802]      </control>
[06:00:14.802]      <control if="!isSWJ" while="" timeout="0" info="">
[06:00:14.802]        // if-block "!isSWJ"
[06:00:14.802]          // =>  FALSE
[06:00:14.802]        // skip if-block "!isSWJ"
[06:00:14.802]      </control>
[06:00:14.802]      <block atomic="false" info="">
[06:00:14.803]        ReadDP(0x0);
[06:00:14.804]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[06:00:14.804]      </block>
[06:00:14.804]      // end if-block "protType == 2"
[06:00:14.804]    </control>
[06:00:14.804]  </sequence>
[06:00:14.805]  
[06:00:14.808]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[06:00:14.808]  
[06:00:14.808]  <debugvars>
[06:00:14.808]    // Pre-defined
[06:00:14.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:00:14.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:00:14.808]    __dp=0x00000000
[06:00:14.809]    __ap=0x00000000
[06:00:14.809]    __traceout=0x00000000      (Trace Disabled)
[06:00:14.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:00:14.809]    __FlashAddr=0x00000000
[06:00:14.809]    __FlashLen=0x00000000
[06:00:14.809]    __FlashArg=0x00000000
[06:00:14.810]    __FlashOp=0x00000000
[06:00:14.810]    __Result=0x00000000
[06:00:14.810]  </debugvars>
[06:00:14.810]  
[06:00:14.810]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[06:00:14.810]    <block atomic="false" info="">
[06:00:14.810]      __var SW_DP_ABORT       = 0x0;
[06:00:14.810]        // -> [SW_DP_ABORT <= 0x00000000]
[06:00:14.810]      __var DP_CTRL_STAT      = 0x4;
[06:00:14.810]        // -> [DP_CTRL_STAT <= 0x00000004]
[06:00:14.810]      __var DP_SELECT         = 0x8;
[06:00:14.811]        // -> [DP_SELECT <= 0x00000008]
[06:00:14.811]      __var powered_down      = 0;
[06:00:14.811]        // -> [powered_down <= 0x00000000]
[06:00:14.811]      WriteDP(DP_SELECT, 0x00000000);
[06:00:14.813]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[06:00:14.813]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[06:00:14.815]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[06:00:14.815]        // -> [powered_down <= 0x00000001]
[06:00:14.815]    </block>
[06:00:14.815]    <control if="powered_down" while="" timeout="0" info="">
[06:00:14.815]      // if-block "powered_down"
[06:00:14.815]        // =>  TRUE
[06:00:14.815]      <block atomic="false" info="">
[06:00:14.815]        Message(0, "Debug/System power-up request sent");
[06:00:14.819]        WriteDP(DP_CTRL_STAT, 0x50000000);
[06:00:14.821]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[06:00:14.822]      </block>
[06:00:14.822]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[06:00:14.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[06:00:14.824]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[06:00:14.824]        // while-condition  =>  FALSE
[06:00:14.824]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[06:00:14.824]      </control>
[06:00:14.824]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[06:00:14.824]        // if-block "(__protocol & 0xFFFF) == 1"
[06:00:14.824]          // =>  FALSE
[06:00:14.824]        // skip if-block "(__protocol & 0xFFFF) == 1"
[06:00:14.825]      </control>
[06:00:14.825]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[06:00:14.825]        // if-block "(__protocol & 0xFFFF) == 2"
[06:00:14.825]          // =>  TRUE
[06:00:14.825]        <block atomic="false" info="">
[06:00:14.826]          Message(0, "executing SWD power up");
[06:00:14.828]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[06:00:14.830]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[06:00:14.830]          WriteDP(SW_DP_ABORT, 0x0000001E);
[06:00:14.832]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[06:00:14.832]        </block>
[06:00:14.832]        // end if-block "(__protocol & 0xFFFF) == 2"
[06:00:14.832]      </control>
[06:00:14.832]      // end if-block "powered_down"
[06:00:14.832]    </control>
[06:00:14.832]    <block atomic="false" info="">
[06:00:14.833]      __var DEBUG_PORT_VAL    = 0;
[06:00:14.833]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[06:00:14.833]      __var ACCESS_POINT_VAL  = 0;
[06:00:14.833]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[06:00:14.833]      __ap = 1; 
[06:00:14.833]        // -> [__ap <= 0x00000001]
[06:00:14.833]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[06:00:14.836]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[06:00:14.836]      __ap = 4;
[06:00:14.836]        // -> [__ap <= 0x00000004]
[06:00:14.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:00:14.841]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[06:00:14.841]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[06:00:14.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:00:14.844]    </block>
[06:00:14.844]    <block atomic="false" info="">
[06:00:14.844]      __var nReset = 0x80;
[06:00:14.844]        // -> [nReset <= 0x00000080]
[06:00:14.845]      __var canReadPins = 0;
[06:00:14.845]        // -> [canReadPins <= 0x00000000]
[06:00:14.845]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[06:00:14.846]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[06:00:14.846]        // -> [canReadPins <= 0x00000001]
[06:00:14.847]    </block>
[06:00:14.847]    <control if="" while="1" timeout="200" info="">
[06:00:14.847]      // while "1"  (timeout="200")
[06:00:14.847]      // while-condition  =>  TRUE
[06:00:14.847]      // while "1"  (timeout="200")
[06:00:14.847]      // while-condition  =>  TRUE
[06:00:14.847]      // while "1"  (timeout="200")
[06:00:14.847]      // while-condition  =>  TRUE
[06:00:14.847]      // while "1"  (timeout="200")
[06:00:14.847]      // while-condition  =>  TRUE
[06:00:14.848]      // while "1"  (timeout="200")
[06:00:14.848]      // while-condition  =>  TRUE
[06:00:14.848]      // while "1"  (timeout="200")
[06:00:14.848]      // while-condition  =>  TRUE
[06:00:14.848]      // while "1"  (timeout="200")
[06:00:14.848]      // while-condition  =>  TRUE
[06:00:14.849]      // while "1"  (timeout="200")
[06:00:14.849]      // while-condition  =>  TRUE
[06:00:14.849]      // while "1"  (timeout="200")
[06:00:14.849]      // while-condition  =>  TRUE
[06:00:14.849]      // while "1"  (timeout="200")
[06:00:14.849]      // while-condition  =>  TRUE
[06:00:14.850]      // while "1"  (timeout="200")
[06:00:14.850]      // while-condition  =>  TRUE
[06:00:14.850]      // while "1"  (timeout="200")
[06:00:14.850]      // while-condition  =>  TRUE
[06:00:14.850]      // while "1"  (timeout="200")
[06:00:14.850]      // while-condition  =>  TRUE
[06:00:14.850]      // while "1"  (timeout="200")
[06:00:14.850]      // while-condition  =>  TRUE
[06:00:14.850]      // while "1"  (timeout="200")
[06:00:14.850]      // while-condition  =>  TRUE
[06:00:14.851]      // while "1"  (timeout="200")
[06:00:14.851]      // while-condition  =>  TRUE
[06:00:14.851]      // while "1"  (timeout="200")
[06:00:14.851]      // while-condition  =>  TRUE
[06:00:14.851]      // while "1"  (timeout="200")
[06:00:14.851]      // while-condition  =>  TRUE
[06:00:14.851]      // while "1"  (timeout="200")
[06:00:14.851]      // while-condition  =>  TRUE
[06:00:14.851]      // while "1"  (timeout="200")
[06:00:14.851]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.852]      // while-condition  =>  TRUE
[06:00:14.852]      // while "1"  (timeout="200")
[06:00:14.853]      // while-condition  =>  TRUE
[06:00:14.853]      // while "1"  (timeout="200")
[06:00:14.853]      // while-condition  =>  TRUE
[06:00:14.853]      // while "1"  (timeout="200")
[06:00:14.853]      // while-condition  =>  TRUE
[06:00:14.853]      // while "1"  (timeout="200")
[06:00:14.853]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.854]      // while-condition  =>  TRUE
[06:00:14.854]      // while "1"  (timeout="200")
[06:00:14.855]      // while-condition  =>  TRUE
[06:00:14.855]      // while "1"  (timeout="200")
[06:00:14.855]      // while-condition  =>  TRUE
[06:00:14.855]      // while "1"  (timeout="200")
[06:00:14.855]      // while-condition  =>  TRUE
[06:00:14.855]      // while "1"  (timeout="200")
[06:00:14.855]      // while-condition  =>  TRUE
[06:00:14.855]      // while "1"  (timeout="200")
[06:00:14.855]      // while-condition  =>  TRUE
[06:00:14.855]      // while "1"  (timeout="200")
[06:00:14.857]      // while-condition  =>  TRUE
[06:00:14.857]      // while "1"  (timeout="200")
[06:00:14.857]      // while-condition  =>  TRUE
[06:00:14.857]      // while "1"  (timeout="200")
[06:00:14.857]      // while-condition  =>  TRUE
[06:00:14.857]      // while "1"  (timeout="200")
[06:00:14.858]      // while-condition  =>  TRUE
[06:00:14.858]      // while "1"  (timeout="200")
[06:00:14.858]      // while-condition  =>  TRUE
[06:00:14.858]      // while "1"  (timeout="200")
[06:00:14.858]      // while-condition  =>  TRUE
[06:00:14.858]      // while "1"  (timeout="200")
[06:00:14.858]      // while-condition  =>  TRUE
[06:00:14.858]      // while "1"  (timeout="200")
[06:00:14.859]      // while-condition  =>  TRUE
[06:00:14.859]      // while "1"  (timeout="200")
[06:00:14.859]      // while-condition  =>  TRUE
[06:00:14.859]      // while "1"  (timeout="200")
[06:00:14.859]      // while-condition  =>  TRUE
[06:00:14.859]      // while "1"  (timeout="200")
[06:00:14.859]      // while-condition  =>  TRUE
[06:00:14.859]      // while "1"  (timeout="200")
[06:00:14.859]      // while-condition  =>  TRUE
[06:00:14.859]      // while "1"  (timeout="200")
[06:00:14.860]      // while-condition  =>  TRUE
[06:00:14.860]      // while "1"  (timeout="200")
[06:00:14.860]      // while-condition  =>  TRUE
[06:00:14.860]      // while "1"  (timeout="200")
[06:00:14.860]      // while-condition  =>  TRUE
[06:00:14.860]      // while "1"  (timeout="200")
[06:00:14.860]      // while-condition  =>  TRUE
[06:00:14.860]      // while "1"  (timeout="200")
[06:00:14.860]      // while-condition  =>  TRUE
[06:00:14.861]      // while "1"  (timeout="200")
[06:00:14.861]      // while  =>  TIMEOUT
[06:00:14.861]      // end while "1"
[06:00:14.861]    </control>
[06:00:14.861]    <control if="canReadPins" while="" timeout="0" info="">
[06:00:14.861]      // if-block "canReadPins"
[06:00:14.861]        // =>  TRUE
[06:00:14.861]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[06:00:14.861]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[06:00:14.863]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[06:00:14.863]        // while-condition  =>  FALSE
[06:00:14.863]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[06:00:14.864]      </control>
[06:00:14.864]      // end if-block "canReadPins"
[06:00:14.864]    </control>
[06:00:14.864]    <control if="!canReadPins" while="" timeout="0" info="">
[06:00:14.864]      // if-block "!canReadPins"
[06:00:14.864]        // =>  FALSE
[06:00:14.865]      // skip if-block "!canReadPins"
[06:00:14.865]    </control>
[06:00:14.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[06:00:14.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:00:14.865]        // =>  TRUE
[06:00:14.865]      <block atomic="false" info="">
[06:00:14.865]        WriteAP(0x00, 0x190008);
[06:00:14.866]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[06:00:14.866]        WriteAP(0xF0, 0x01);
[06:00:14.875]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[06:00:14.875]      </block>
[06:00:14.875]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:00:14.876]    </control>
[06:00:14.876]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[06:00:14.876]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:00:14.876]        // =>  FALSE
[06:00:14.876]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:00:14.876]    </control>
[06:00:14.876]    <block atomic="false" info="">
[06:00:14.877]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:00:14.881]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[06:00:14.881]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[06:00:14.881]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:00:14.883]      __ap = 0; //lets make sure we reset the access point selection
[06:00:14.884]        // -> [__ap <= 0x00000000]
[06:00:14.884]    </block>
[06:00:14.884]  </sequence>
[06:00:14.884]  
[06:00:14.903]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[06:00:14.903]  
[06:00:14.903]  <debugvars>
[06:00:14.905]    // Pre-defined
[06:00:14.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:00:14.905]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:00:14.905]    __dp=0x00000000
[06:00:14.905]    __ap=0x00000000
[06:00:14.906]    __traceout=0x00000000      (Trace Disabled)
[06:00:14.906]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:00:14.906]    __FlashAddr=0x00000000
[06:00:14.906]    __FlashLen=0x00000000
[06:00:14.906]    __FlashArg=0x00000000
[06:00:14.906]    __FlashOp=0x00000000
[06:00:14.906]    __Result=0x00000000
[06:00:14.906]  </debugvars>
[06:00:14.906]  
[06:00:14.906]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[06:00:14.907]    <block atomic="false" info="">
[06:00:14.907]      __var deviceID = 0;
[06:00:14.907]        // -> [deviceID <= 0x00000000]
[06:00:14.907]      __var version = 0;
[06:00:14.907]        // -> [version <= 0x00000000]
[06:00:14.907]      __var partNum = 0;
[06:00:14.907]        // -> [partNum <= 0x00000000]
[06:00:14.907]      __var manuf = 0;
[06:00:14.907]        // -> [manuf <= 0x00000000]
[06:00:14.907]      __var isMSPM0G1X0X_G3X0X = 0;
[06:00:14.907]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[06:00:14.907]      __var isProduction = 0;
[06:00:14.908]        // -> [isProduction <= 0x00000000]
[06:00:14.908]      __var continueId = 0;
[06:00:14.908]        // -> [continueId <= 0x00000000]
[06:00:14.908]      deviceID =   Read32(0x41C40004);
[06:00:14.912]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[06:00:14.912]        // -> [deviceID <= 0x2BB8802F]
[06:00:14.913]      version = deviceID >> 28;
[06:00:14.913]        // -> [version <= 0x00000002]
[06:00:14.913]      partNum = (deviceID & 0x0FFFF000) >> 12;
[06:00:14.913]        // -> [partNum <= 0x0000BB88]
[06:00:14.913]      manuf = (deviceID & 0x00000FFE) >> 1;
[06:00:14.913]        // -> [manuf <= 0x00000017]
[06:00:14.913]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[06:00:14.913]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[06:00:14.913]      isProduction = (version > 0);
[06:00:14.914]        // -> [isProduction <= 0x00000001]
[06:00:14.914]    </block>
[06:00:14.914]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[06:00:14.914]      // if-block "!isMSPM0G1X0X_G3X0X"
[06:00:14.914]        // =>  FALSE
[06:00:14.914]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[06:00:14.914]    </control>
[06:00:14.915]    <control if="continueId == 4" while="" timeout="0" info="">
[06:00:14.915]      // if-block "continueId == 4"
[06:00:14.915]        // =>  FALSE
[06:00:14.915]      // skip if-block "continueId == 4"
[06:00:14.915]    </control>
[06:00:14.915]    <control if="!isProduction" while="" timeout="0" info="">
[06:00:14.915]      // if-block "!isProduction"
[06:00:14.916]        // =>  FALSE
[06:00:14.916]      // skip if-block "!isProduction"
[06:00:14.916]    </control>
[06:00:14.916]  </sequence>
[06:00:14.916]  
[06:05:37.731]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[06:05:37.731]  
[06:05:37.740]  <debugvars>
[06:05:37.740]    // Pre-defined
[06:05:37.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:05:37.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:05:37.740]    __dp=0x00000000
[06:05:37.740]    __ap=0x00000000
[06:05:37.740]    __traceout=0x00000000      (Trace Disabled)
[06:05:37.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:05:37.741]    __FlashAddr=0x00000000
[06:05:37.741]    __FlashLen=0x00000000
[06:05:37.741]    __FlashArg=0x00000000
[06:05:37.741]    __FlashOp=0x00000000
[06:05:37.741]    __Result=0x00000000
[06:05:37.741]  </debugvars>
[06:05:37.741]  
[06:05:37.741]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[06:05:37.741]    <block atomic="false" info="">
[06:05:37.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[06:05:37.742]        // -> [isSWJ <= 0x00000001]
[06:05:37.742]      __var hasDormant = __protocol & 0x00020000;
[06:05:37.742]        // -> [hasDormant <= 0x00000000]
[06:05:37.742]      __var protType   = __protocol & 0x0000FFFF;
[06:05:37.742]        // -> [protType <= 0x00000002]
[06:05:37.742]    </block>
[06:05:37.743]    <control if="protType == 1" while="" timeout="0" info="">
[06:05:37.743]      // if-block "protType == 1"
[06:05:37.743]        // =>  FALSE
[06:05:37.743]      // skip if-block "protType == 1"
[06:05:37.743]    </control>
[06:05:37.743]    <control if="protType == 2" while="" timeout="0" info="">
[06:05:37.743]      // if-block "protType == 2"
[06:05:37.743]        // =>  TRUE
[06:05:37.743]      <control if="isSWJ" while="" timeout="0" info="">
[06:05:37.743]        // if-block "isSWJ"
[06:05:37.743]          // =>  TRUE
[06:05:37.743]        <control if="hasDormant" while="" timeout="0" info="">
[06:05:37.743]          // if-block "hasDormant"
[06:05:37.744]            // =>  FALSE
[06:05:37.744]          // skip if-block "hasDormant"
[06:05:37.744]        </control>
[06:05:37.744]        <control if="!hasDormant" while="" timeout="0" info="">
[06:05:37.744]          // if-block "!hasDormant"
[06:05:37.744]            // =>  TRUE
[06:05:37.744]          <block atomic="false" info="">
[06:05:37.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[06:05:37.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:05:37.746]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[06:05:37.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[06:05:37.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[06:05:37.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:05:37.751]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[06:05:37.752]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[06:05:37.752]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[06:05:37.754]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:05:37.754]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[06:05:37.756]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[06:05:37.756]          </block>
[06:05:37.756]          // end if-block "!hasDormant"
[06:05:37.756]        </control>
[06:05:37.756]        // end if-block "isSWJ"
[06:05:37.756]      </control>
[06:05:37.756]      <control if="!isSWJ" while="" timeout="0" info="">
[06:05:37.756]        // if-block "!isSWJ"
[06:05:37.756]          // =>  FALSE
[06:05:37.756]        // skip if-block "!isSWJ"
[06:05:37.756]      </control>
[06:05:37.757]      <block atomic="false" info="">
[06:05:37.757]        ReadDP(0x0);
[06:05:37.759]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[06:05:37.760]      </block>
[06:05:37.760]      // end if-block "protType == 2"
[06:05:37.760]    </control>
[06:05:37.761]  </sequence>
[06:05:37.761]  
[06:05:37.764]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[06:05:37.764]  
[06:05:37.764]  <debugvars>
[06:05:37.764]    // Pre-defined
[06:05:37.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:05:37.765]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:05:37.765]    __dp=0x00000000
[06:05:37.765]    __ap=0x00000000
[06:05:37.765]    __traceout=0x00000000      (Trace Disabled)
[06:05:37.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:05:37.765]    __FlashAddr=0x00000000
[06:05:37.765]    __FlashLen=0x00000000
[06:05:37.765]    __FlashArg=0x00000000
[06:05:37.765]    __FlashOp=0x00000000
[06:05:37.766]    __Result=0x00000000
[06:05:37.766]  </debugvars>
[06:05:37.766]  
[06:05:37.766]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[06:05:37.766]    <block atomic="false" info="">
[06:05:37.766]      __var SW_DP_ABORT       = 0x0;
[06:05:37.766]        // -> [SW_DP_ABORT <= 0x00000000]
[06:05:37.766]      __var DP_CTRL_STAT      = 0x4;
[06:05:37.766]        // -> [DP_CTRL_STAT <= 0x00000004]
[06:05:37.767]      __var DP_SELECT         = 0x8;
[06:05:37.768]        // -> [DP_SELECT <= 0x00000008]
[06:05:37.768]      __var powered_down      = 0;
[06:05:37.768]        // -> [powered_down <= 0x00000000]
[06:05:37.768]      WriteDP(DP_SELECT, 0x00000000);
[06:05:37.769]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[06:05:37.769]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[06:05:37.771]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[06:05:37.771]        // -> [powered_down <= 0x00000001]
[06:05:37.771]    </block>
[06:05:37.771]    <control if="powered_down" while="" timeout="0" info="">
[06:05:37.772]      // if-block "powered_down"
[06:05:37.772]        // =>  TRUE
[06:05:37.772]      <block atomic="false" info="">
[06:05:37.772]        Message(0, "Debug/System power-up request sent");
[06:05:37.774]        WriteDP(DP_CTRL_STAT, 0x50000000);
[06:05:37.776]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[06:05:37.777]      </block>
[06:05:37.777]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[06:05:37.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[06:05:37.778]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[06:05:37.779]        // while-condition  =>  FALSE
[06:05:37.779]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[06:05:37.779]      </control>
[06:05:37.779]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[06:05:37.779]        // if-block "(__protocol & 0xFFFF) == 1"
[06:05:37.779]          // =>  FALSE
[06:05:37.779]        // skip if-block "(__protocol & 0xFFFF) == 1"
[06:05:37.780]      </control>
[06:05:37.780]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[06:05:37.780]        // if-block "(__protocol & 0xFFFF) == 2"
[06:05:37.780]          // =>  TRUE
[06:05:37.780]        <block atomic="false" info="">
[06:05:37.780]          Message(0, "executing SWD power up");
[06:05:37.782]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[06:05:37.784]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[06:05:37.784]          WriteDP(SW_DP_ABORT, 0x0000001E);
[06:05:37.786]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[06:05:37.786]        </block>
[06:05:37.786]        // end if-block "(__protocol & 0xFFFF) == 2"
[06:05:37.786]      </control>
[06:05:37.786]      // end if-block "powered_down"
[06:05:37.786]    </control>
[06:05:37.786]    <block atomic="false" info="">
[06:05:37.786]      __var DEBUG_PORT_VAL    = 0;
[06:05:37.787]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[06:05:37.787]      __var ACCESS_POINT_VAL  = 0;
[06:05:37.787]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[06:05:37.787]      __ap = 1; 
[06:05:37.787]        // -> [__ap <= 0x00000001]
[06:05:37.787]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[06:05:37.791]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[06:05:37.791]      __ap = 4;
[06:05:37.791]        // -> [__ap <= 0x00000004]
[06:05:37.791]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:05:37.794]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[06:05:37.794]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[06:05:37.794]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:05:37.796]    </block>
[06:05:37.797]    <block atomic="false" info="">
[06:05:37.797]      __var nReset = 0x80;
[06:05:37.797]        // -> [nReset <= 0x00000080]
[06:05:37.797]      __var canReadPins = 0;
[06:05:37.797]        // -> [canReadPins <= 0x00000000]
[06:05:37.797]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[06:05:37.798]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[06:05:37.799]        // -> [canReadPins <= 0x00000001]
[06:05:37.799]    </block>
[06:05:37.799]    <control if="" while="1" timeout="200" info="">
[06:05:37.799]      // while "1"  (timeout="200")
[06:05:37.799]      // while-condition  =>  TRUE
[06:05:37.799]      // while "1"  (timeout="200")
[06:05:37.799]      // while-condition  =>  TRUE
[06:05:37.799]      // while "1"  (timeout="200")
[06:05:37.800]      // while-condition  =>  TRUE
[06:05:37.800]      // while "1"  (timeout="200")
[06:05:37.800]      // while-condition  =>  TRUE
[06:05:37.800]      // while "1"  (timeout="200")
[06:05:37.800]      // while-condition  =>  TRUE
[06:05:37.800]      // while "1"  (timeout="200")
[06:05:37.800]      // while-condition  =>  TRUE
[06:05:37.800]      // while "1"  (timeout="200")
[06:05:37.800]      // while-condition  =>  TRUE
[06:05:37.801]      // while "1"  (timeout="200")
[06:05:37.801]      // while-condition  =>  TRUE
[06:05:37.801]      // while "1"  (timeout="200")
[06:05:37.801]      // while-condition  =>  TRUE
[06:05:37.801]      // while "1"  (timeout="200")
[06:05:37.801]      // while-condition  =>  TRUE
[06:05:37.801]      // while "1"  (timeout="200")
[06:05:37.801]      // while-condition  =>  TRUE
[06:05:37.801]      // while "1"  (timeout="200")
[06:05:37.801]      // while-condition  =>  TRUE
[06:05:37.802]      // while "1"  (timeout="200")
[06:05:37.802]      // while-condition  =>  TRUE
[06:05:37.802]      // while "1"  (timeout="200")
[06:05:37.802]      // while-condition  =>  TRUE
[06:05:37.802]      // while "1"  (timeout="200")
[06:05:37.802]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.803]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.803]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.803]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.803]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.803]      // while-condition  =>  TRUE
[06:05:37.803]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.805]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.805]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.805]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.805]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.805]      // while "1"  (timeout="200")
[06:05:37.805]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.806]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.806]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.806]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.806]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.806]      // while-condition  =>  TRUE
[06:05:37.806]      // while "1"  (timeout="200")
[06:05:37.807]      // while-condition  =>  TRUE
[06:05:37.807]      // while "1"  (timeout="200")
[06:05:37.807]      // while-condition  =>  TRUE
[06:05:37.807]      // while "1"  (timeout="200")
[06:05:37.807]      // while-condition  =>  TRUE
[06:05:37.807]      // while "1"  (timeout="200")
[06:05:37.807]      // while-condition  =>  TRUE
[06:05:37.807]      // while "1"  (timeout="200")
[06:05:37.807]      // while-condition  =>  TRUE
[06:05:37.807]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.808]      // while "1"  (timeout="200")
[06:05:37.808]      // while-condition  =>  TRUE
[06:05:37.809]      // while "1"  (timeout="200")
[06:05:37.809]      // while-condition  =>  TRUE
[06:05:37.809]      // while "1"  (timeout="200")
[06:05:37.809]      // while-condition  =>  TRUE
[06:05:37.809]      // while "1"  (timeout="200")
[06:05:37.809]      // while-condition  =>  TRUE
[06:05:37.809]      // while "1"  (timeout="200")
[06:05:37.809]      // while-condition  =>  TRUE
[06:05:37.809]      // while "1"  (timeout="200")
[06:05:37.810]      // while-condition  =>  TRUE
[06:05:37.810]      // while "1"  (timeout="200")
[06:05:37.810]      // while-condition  =>  TRUE
[06:05:37.810]      // while "1"  (timeout="200")
[06:05:37.810]      // while-condition  =>  TRUE
[06:05:37.810]      // while "1"  (timeout="200")
[06:05:37.810]      // while-condition  =>  TRUE
[06:05:37.810]      // while "1"  (timeout="200")
[06:05:37.811]      // while-condition  =>  TRUE
[06:05:37.811]      // while "1"  (timeout="200")
[06:05:37.811]      // while-condition  =>  TRUE
[06:05:37.811]      // while "1"  (timeout="200")
[06:05:37.811]      // while-condition  =>  TRUE
[06:05:37.811]      // while "1"  (timeout="200")
[06:05:37.811]      // while-condition  =>  TRUE
[06:05:37.811]      // while "1"  (timeout="200")
[06:05:37.811]      // while-condition  =>  TRUE
[06:05:37.812]      // while "1"  (timeout="200")
[06:05:37.812]      // while-condition  =>  TRUE
[06:05:37.812]      // while "1"  (timeout="200")
[06:05:37.812]      // while-condition  =>  TRUE
[06:05:37.812]      // while "1"  (timeout="200")
[06:05:37.812]      // while-condition  =>  TRUE
[06:05:37.812]      // while "1"  (timeout="200")
[06:05:37.813]      // while-condition  =>  TRUE
[06:05:37.813]      // while "1"  (timeout="200")
[06:05:37.813]      // while  =>  TIMEOUT
[06:05:37.813]      // end while "1"
[06:05:37.813]    </control>
[06:05:37.813]    <control if="canReadPins" while="" timeout="0" info="">
[06:05:37.814]      // if-block "canReadPins"
[06:05:37.814]        // =>  TRUE
[06:05:37.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[06:05:37.814]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[06:05:37.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[06:05:37.816]        // while-condition  =>  FALSE
[06:05:37.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[06:05:37.816]      </control>
[06:05:37.816]      // end if-block "canReadPins"
[06:05:37.816]    </control>
[06:05:37.816]    <control if="!canReadPins" while="" timeout="0" info="">
[06:05:37.817]      // if-block "!canReadPins"
[06:05:37.817]        // =>  FALSE
[06:05:37.817]      // skip if-block "!canReadPins"
[06:05:37.817]    </control>
[06:05:37.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[06:05:37.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:05:37.817]        // =>  TRUE
[06:05:37.817]      <block atomic="false" info="">
[06:05:37.817]        WriteAP(0x00, 0x190008);
[06:05:37.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[06:05:37.819]        WriteAP(0xF0, 0x01);
[06:05:37.823]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[06:05:37.823]      </block>
[06:05:37.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:05:37.823]    </control>
[06:05:37.823]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[06:05:37.824]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:05:37.824]        // =>  FALSE
[06:05:37.824]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:05:37.824]    </control>
[06:05:37.824]    <block atomic="false" info="">
[06:05:37.824]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:05:37.828]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[06:05:37.829]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[06:05:37.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:05:37.831]      __ap = 0; //lets make sure we reset the access point selection
[06:05:37.831]        // -> [__ap <= 0x00000000]
[06:05:37.831]    </block>
[06:05:37.831]  </sequence>
[06:05:37.831]  
[06:05:37.858]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[06:05:37.858]  
[06:05:37.858]  <debugvars>
[06:05:37.858]    // Pre-defined
[06:05:37.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:05:37.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:05:37.858]    __dp=0x00000000
[06:05:37.858]    __ap=0x00000000
[06:05:37.859]    __traceout=0x00000000      (Trace Disabled)
[06:05:37.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:05:37.859]    __FlashAddr=0x00000000
[06:05:37.859]    __FlashLen=0x00000000
[06:05:37.859]    __FlashArg=0x00000000
[06:05:37.859]    __FlashOp=0x00000000
[06:05:37.860]    __Result=0x00000000
[06:05:37.860]  </debugvars>
[06:05:37.860]  
[06:05:37.860]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[06:05:37.860]    <block atomic="false" info="">
[06:05:37.861]      __var deviceID = 0;
[06:05:37.861]        // -> [deviceID <= 0x00000000]
[06:05:37.861]      __var version = 0;
[06:05:37.861]        // -> [version <= 0x00000000]
[06:05:37.861]      __var partNum = 0;
[06:05:37.861]        // -> [partNum <= 0x00000000]
[06:05:37.861]      __var manuf = 0;
[06:05:37.861]        // -> [manuf <= 0x00000000]
[06:05:37.861]      __var isMSPM0G1X0X_G3X0X = 0;
[06:05:37.862]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[06:05:37.863]      __var isProduction = 0;
[06:05:37.863]        // -> [isProduction <= 0x00000000]
[06:05:37.863]      __var continueId = 0;
[06:05:37.863]        // -> [continueId <= 0x00000000]
[06:05:37.863]      deviceID =   Read32(0x41C40004);
[06:05:37.867]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[06:05:37.867]        // -> [deviceID <= 0x2BB8802F]
[06:05:37.867]      version = deviceID >> 28;
[06:05:37.867]        // -> [version <= 0x00000002]
[06:05:37.868]      partNum = (deviceID & 0x0FFFF000) >> 12;
[06:05:37.868]        // -> [partNum <= 0x0000BB88]
[06:05:37.868]      manuf = (deviceID & 0x00000FFE) >> 1;
[06:05:37.868]        // -> [manuf <= 0x00000017]
[06:05:37.868]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[06:05:37.868]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[06:05:37.868]      isProduction = (version > 0);
[06:05:37.868]        // -> [isProduction <= 0x00000001]
[06:05:37.868]    </block>
[06:05:37.869]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[06:05:37.869]      // if-block "!isMSPM0G1X0X_G3X0X"
[06:05:37.869]        // =>  FALSE
[06:05:37.869]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[06:05:37.869]    </control>
[06:05:37.869]    <control if="continueId == 4" while="" timeout="0" info="">
[06:05:37.869]      // if-block "continueId == 4"
[06:05:37.869]        // =>  FALSE
[06:05:37.870]      // skip if-block "continueId == 4"
[06:05:37.870]    </control>
[06:05:37.870]    <control if="!isProduction" while="" timeout="0" info="">
[06:05:37.870]      // if-block "!isProduction"
[06:05:37.870]        // =>  FALSE
[06:05:37.870]      // skip if-block "!isProduction"
[06:05:37.870]    </control>
[06:05:37.870]  </sequence>
[06:05:37.870]  
[06:06:21.486]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[06:06:21.486]  
[06:06:21.496]  <debugvars>
[06:06:21.496]    // Pre-defined
[06:06:21.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:06:21.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:06:21.496]    __dp=0x00000000
[06:06:21.496]    __ap=0x00000000
[06:06:21.496]    __traceout=0x00000000      (Trace Disabled)
[06:06:21.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:06:21.496]    __FlashAddr=0x00000000
[06:06:21.496]    __FlashLen=0x00000000
[06:06:21.496]    __FlashArg=0x00000000
[06:06:21.497]    __FlashOp=0x00000000
[06:06:21.497]    __Result=0x00000000
[06:06:21.497]  </debugvars>
[06:06:21.497]  
[06:06:21.497]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[06:06:21.497]    <block atomic="false" info="">
[06:06:21.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[06:06:21.497]        // -> [isSWJ <= 0x00000001]
[06:06:21.497]      __var hasDormant = __protocol & 0x00020000;
[06:06:21.497]        // -> [hasDormant <= 0x00000000]
[06:06:21.497]      __var protType   = __protocol & 0x0000FFFF;
[06:06:21.498]        // -> [protType <= 0x00000002]
[06:06:21.498]    </block>
[06:06:21.498]    <control if="protType == 1" while="" timeout="0" info="">
[06:06:21.498]      // if-block "protType == 1"
[06:06:21.498]        // =>  FALSE
[06:06:21.498]      // skip if-block "protType == 1"
[06:06:21.498]    </control>
[06:06:21.499]    <control if="protType == 2" while="" timeout="0" info="">
[06:06:21.499]      // if-block "protType == 2"
[06:06:21.499]        // =>  TRUE
[06:06:21.499]      <control if="isSWJ" while="" timeout="0" info="">
[06:06:21.499]        // if-block "isSWJ"
[06:06:21.499]          // =>  TRUE
[06:06:21.499]        <control if="hasDormant" while="" timeout="0" info="">
[06:06:21.499]          // if-block "hasDormant"
[06:06:21.500]            // =>  FALSE
[06:06:21.500]          // skip if-block "hasDormant"
[06:06:21.500]        </control>
[06:06:21.500]        <control if="!hasDormant" while="" timeout="0" info="">
[06:06:21.500]          // if-block "!hasDormant"
[06:06:21.500]            // =>  TRUE
[06:06:21.500]          <block atomic="false" info="">
[06:06:21.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[06:06:21.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:06:21.501]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[06:06:21.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[06:06:21.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[06:06:21.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:06:21.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[06:06:21.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[06:06:21.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[06:06:21.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[06:06:21.507]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[06:06:21.508]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[06:06:21.510]          </block>
[06:06:21.510]          // end if-block "!hasDormant"
[06:06:21.510]        </control>
[06:06:21.510]        // end if-block "isSWJ"
[06:06:21.510]      </control>
[06:06:21.510]      <control if="!isSWJ" while="" timeout="0" info="">
[06:06:21.511]        // if-block "!isSWJ"
[06:06:21.511]          // =>  FALSE
[06:06:21.511]        // skip if-block "!isSWJ"
[06:06:21.511]      </control>
[06:06:21.511]      <block atomic="false" info="">
[06:06:21.511]        ReadDP(0x0);
[06:06:21.513]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[06:06:21.513]      </block>
[06:06:21.513]      // end if-block "protType == 2"
[06:06:21.513]    </control>
[06:06:21.513]  </sequence>
[06:06:21.513]  
[06:06:21.516]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[06:06:21.516]  
[06:06:21.516]  <debugvars>
[06:06:21.516]    // Pre-defined
[06:06:21.516]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:06:21.516]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:06:21.516]    __dp=0x00000000
[06:06:21.516]    __ap=0x00000000
[06:06:21.517]    __traceout=0x00000000      (Trace Disabled)
[06:06:21.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:06:21.517]    __FlashAddr=0x00000000
[06:06:21.517]    __FlashLen=0x00000000
[06:06:21.517]    __FlashArg=0x00000000
[06:06:21.517]    __FlashOp=0x00000000
[06:06:21.517]    __Result=0x00000000
[06:06:21.517]  </debugvars>
[06:06:21.517]  
[06:06:21.518]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[06:06:21.518]    <block atomic="false" info="">
[06:06:21.518]      __var SW_DP_ABORT       = 0x0;
[06:06:21.518]        // -> [SW_DP_ABORT <= 0x00000000]
[06:06:21.518]      __var DP_CTRL_STAT      = 0x4;
[06:06:21.518]        // -> [DP_CTRL_STAT <= 0x00000004]
[06:06:21.518]      __var DP_SELECT         = 0x8;
[06:06:21.518]        // -> [DP_SELECT <= 0x00000008]
[06:06:21.518]      __var powered_down      = 0;
[06:06:21.518]        // -> [powered_down <= 0x00000000]
[06:06:21.518]      WriteDP(DP_SELECT, 0x00000000);
[06:06:21.520]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[06:06:21.520]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[06:06:21.522]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[06:06:21.522]        // -> [powered_down <= 0x00000001]
[06:06:21.522]    </block>
[06:06:21.522]    <control if="powered_down" while="" timeout="0" info="">
[06:06:21.522]      // if-block "powered_down"
[06:06:21.523]        // =>  TRUE
[06:06:21.523]      <block atomic="false" info="">
[06:06:21.523]        Message(0, "Debug/System power-up request sent");
[06:06:21.523]        WriteDP(DP_CTRL_STAT, 0x50000000);
[06:06:21.526]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[06:06:21.526]      </block>
[06:06:21.527]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[06:06:21.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[06:06:21.528]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[06:06:21.528]        // while-condition  =>  FALSE
[06:06:21.528]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[06:06:21.528]      </control>
[06:06:21.529]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[06:06:21.529]        // if-block "(__protocol & 0xFFFF) == 1"
[06:06:21.529]          // =>  FALSE
[06:06:21.529]        // skip if-block "(__protocol & 0xFFFF) == 1"
[06:06:21.529]      </control>
[06:06:21.529]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[06:06:21.529]        // if-block "(__protocol & 0xFFFF) == 2"
[06:06:21.529]          // =>  TRUE
[06:06:21.529]        <block atomic="false" info="">
[06:06:21.529]          Message(0, "executing SWD power up");
[06:06:21.530]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[06:06:21.531]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[06:06:21.531]          WriteDP(SW_DP_ABORT, 0x0000001E);
[06:06:21.533]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[06:06:21.533]        </block>
[06:06:21.533]        // end if-block "(__protocol & 0xFFFF) == 2"
[06:06:21.533]      </control>
[06:06:21.534]      // end if-block "powered_down"
[06:06:21.534]    </control>
[06:06:21.534]    <block atomic="false" info="">
[06:06:21.534]      __var DEBUG_PORT_VAL    = 0;
[06:06:21.534]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[06:06:21.534]      __var ACCESS_POINT_VAL  = 0;
[06:06:21.534]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[06:06:21.534]      __ap = 1; 
[06:06:21.534]        // -> [__ap <= 0x00000001]
[06:06:21.535]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[06:06:21.541]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[06:06:21.542]      __ap = 4;
[06:06:21.542]        // -> [__ap <= 0x00000004]
[06:06:21.542]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:06:21.545]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[06:06:21.545]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[06:06:21.546]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:06:21.546]    </block>
[06:06:21.546]    <block atomic="false" info="">
[06:06:21.546]      __var nReset = 0x80;
[06:06:21.546]        // -> [nReset <= 0x00000080]
[06:06:21.547]      __var canReadPins = 0;
[06:06:21.547]        // -> [canReadPins <= 0x00000000]
[06:06:21.547]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[06:06:21.548]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[06:06:21.549]        // -> [canReadPins <= 0x00000001]
[06:06:21.549]    </block>
[06:06:21.549]    <control if="" while="1" timeout="200" info="">
[06:06:21.549]      // while "1"  (timeout="200")
[06:06:21.549]      // while-condition  =>  TRUE
[06:06:21.549]      // while "1"  (timeout="200")
[06:06:21.549]      // while-condition  =>  TRUE
[06:06:21.549]      // while "1"  (timeout="200")
[06:06:21.549]      // while-condition  =>  TRUE
[06:06:21.550]      // while "1"  (timeout="200")
[06:06:21.550]      // while-condition  =>  TRUE
[06:06:21.550]      // while "1"  (timeout="200")
[06:06:21.550]      // while-condition  =>  TRUE
[06:06:21.550]      // while "1"  (timeout="200")
[06:06:21.550]      // while-condition  =>  TRUE
[06:06:21.550]      // while "1"  (timeout="200")
[06:06:21.550]      // while-condition  =>  TRUE
[06:06:21.550]      // while "1"  (timeout="200")
[06:06:21.551]      // while-condition  =>  TRUE
[06:06:21.551]      // while "1"  (timeout="200")
[06:06:21.551]      // while-condition  =>  TRUE
[06:06:21.551]      // while "1"  (timeout="200")
[06:06:21.551]      // while-condition  =>  TRUE
[06:06:21.551]      // while "1"  (timeout="200")
[06:06:21.551]      // while-condition  =>  TRUE
[06:06:21.551]      // while "1"  (timeout="200")
[06:06:21.551]      // while-condition  =>  TRUE
[06:06:21.552]      // while "1"  (timeout="200")
[06:06:21.552]      // while-condition  =>  TRUE
[06:06:21.552]      // while "1"  (timeout="200")
[06:06:21.552]      // while-condition  =>  TRUE
[06:06:21.552]      // while "1"  (timeout="200")
[06:06:21.552]      // while-condition  =>  TRUE
[06:06:21.552]      // while "1"  (timeout="200")
[06:06:21.552]      // while-condition  =>  TRUE
[06:06:21.552]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.553]      // while-condition  =>  TRUE
[06:06:21.553]      // while "1"  (timeout="200")
[06:06:21.554]      // while-condition  =>  TRUE
[06:06:21.554]      // while "1"  (timeout="200")
[06:06:21.554]      // while-condition  =>  TRUE
[06:06:21.555]      // while "1"  (timeout="200")
[06:06:21.555]      // while-condition  =>  TRUE
[06:06:21.555]      // while "1"  (timeout="200")
[06:06:21.555]      // while-condition  =>  TRUE
[06:06:21.555]      // while "1"  (timeout="200")
[06:06:21.555]      // while-condition  =>  TRUE
[06:06:21.555]      // while "1"  (timeout="200")
[06:06:21.555]      // while-condition  =>  TRUE
[06:06:21.555]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.556]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.556]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.556]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.556]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.556]      // while "1"  (timeout="200")
[06:06:21.556]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.557]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.557]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.557]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.557]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.557]      // while-condition  =>  TRUE
[06:06:21.557]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.558]      // while "1"  (timeout="200")
[06:06:21.558]      // while-condition  =>  TRUE
[06:06:21.560]      // while "1"  (timeout="200")
[06:06:21.560]      // while-condition  =>  TRUE
[06:06:21.560]      // while "1"  (timeout="200")
[06:06:21.560]      // while-condition  =>  TRUE
[06:06:21.560]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.561]      // while-condition  =>  TRUE
[06:06:21.561]      // while "1"  (timeout="200")
[06:06:21.562]      // while-condition  =>  TRUE
[06:06:21.562]      // while "1"  (timeout="200")
[06:06:21.562]      // while-condition  =>  TRUE
[06:06:21.562]      // while "1"  (timeout="200")
[06:06:21.562]      // while-condition  =>  TRUE
[06:06:21.562]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.563]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.563]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.563]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.563]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.563]      // while "1"  (timeout="200")
[06:06:21.563]      // while-condition  =>  TRUE
[06:06:21.564]      // while "1"  (timeout="200")
[06:06:21.564]      // while  =>  TIMEOUT
[06:06:21.564]      // end while "1"
[06:06:21.564]    </control>
[06:06:21.564]    <control if="canReadPins" while="" timeout="0" info="">
[06:06:21.564]      // if-block "canReadPins"
[06:06:21.564]        // =>  TRUE
[06:06:21.564]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[06:06:21.564]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[06:06:21.565]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[06:06:21.566]        // while-condition  =>  FALSE
[06:06:21.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[06:06:21.566]      </control>
[06:06:21.566]      // end if-block "canReadPins"
[06:06:21.566]    </control>
[06:06:21.566]    <control if="!canReadPins" while="" timeout="0" info="">
[06:06:21.566]      // if-block "!canReadPins"
[06:06:21.566]        // =>  FALSE
[06:06:21.567]      // skip if-block "!canReadPins"
[06:06:21.567]    </control>
[06:06:21.567]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[06:06:21.567]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:06:21.567]        // =>  TRUE
[06:06:21.567]      <block atomic="false" info="">
[06:06:21.567]        WriteAP(0x00, 0x190008);
[06:06:21.569]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[06:06:21.569]        WriteAP(0xF0, 0x01);
[06:06:21.573]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[06:06:21.574]      </block>
[06:06:21.574]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[06:06:21.574]    </control>
[06:06:21.574]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[06:06:21.574]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:06:21.574]        // =>  FALSE
[06:06:21.574]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[06:06:21.575]    </control>
[06:06:21.575]    <block atomic="false" info="">
[06:06:21.575]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[06:06:21.578]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[06:06:21.578]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[06:06:21.578]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[06:06:21.578]      __ap = 0; //lets make sure we reset the access point selection
[06:06:21.578]        // -> [__ap <= 0x00000000]
[06:06:21.579]    </block>
[06:06:21.579]  </sequence>
[06:06:21.579]  
[06:06:21.603]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[06:06:21.603]  
[06:06:21.603]  <debugvars>
[06:06:21.603]    // Pre-defined
[06:06:21.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[06:06:21.603]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[06:06:21.603]    __dp=0x00000000
[06:06:21.603]    __ap=0x00000000
[06:06:21.603]    __traceout=0x00000000      (Trace Disabled)
[06:06:21.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[06:06:21.603]    __FlashAddr=0x00000000
[06:06:21.603]    __FlashLen=0x00000000
[06:06:21.604]    __FlashArg=0x00000000
[06:06:21.604]    __FlashOp=0x00000000
[06:06:21.604]    __Result=0x00000000
[06:06:21.604]  </debugvars>
[06:06:21.604]  
[06:06:21.604]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[06:06:21.604]    <block atomic="false" info="">
[06:06:21.604]      __var deviceID = 0;
[06:06:21.604]        // -> [deviceID <= 0x00000000]
[06:06:21.606]      __var version = 0;
[06:06:21.606]        // -> [version <= 0x00000000]
[06:06:21.606]      __var partNum = 0;
[06:06:21.606]        // -> [partNum <= 0x00000000]
[06:06:21.606]      __var manuf = 0;
[06:06:21.606]        // -> [manuf <= 0x00000000]
[06:06:21.606]      __var isMSPM0G1X0X_G3X0X = 0;
[06:06:21.606]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[06:06:21.606]      __var isProduction = 0;
[06:06:21.606]        // -> [isProduction <= 0x00000000]
[06:06:21.606]      __var continueId = 0;
[06:06:21.606]        // -> [continueId <= 0x00000000]
[06:06:21.606]      deviceID =   Read32(0x41C40004);
[06:06:21.611]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[06:06:21.611]        // -> [deviceID <= 0x2BB8802F]
[06:06:21.611]      version = deviceID >> 28;
[06:06:21.612]        // -> [version <= 0x00000002]
[06:06:21.612]      partNum = (deviceID & 0x0FFFF000) >> 12;
[06:06:21.612]        // -> [partNum <= 0x0000BB88]
[06:06:21.612]      manuf = (deviceID & 0x00000FFE) >> 1;
[06:06:21.612]        // -> [manuf <= 0x00000017]
[06:06:21.612]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[06:06:21.612]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[06:06:21.612]      isProduction = (version > 0);
[06:06:21.613]        // -> [isProduction <= 0x00000001]
[06:06:21.613]    </block>
[06:06:21.613]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[06:06:21.613]      // if-block "!isMSPM0G1X0X_G3X0X"
[06:06:21.613]        // =>  FALSE
[06:06:21.613]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[06:06:21.613]    </control>
[06:06:21.613]    <control if="continueId == 4" while="" timeout="0" info="">
[06:06:21.613]      // if-block "continueId == 4"
[06:06:21.613]        // =>  FALSE
[06:06:21.613]      // skip if-block "continueId == 4"
[06:06:21.613]    </control>
[06:06:21.615]    <control if="!isProduction" while="" timeout="0" info="">
[06:06:21.615]      // if-block "!isProduction"
[06:06:21.615]        // =>  FALSE
[06:06:21.615]      // skip if-block "!isProduction"
[06:06:21.615]    </control>
[06:06:21.615]  </sequence>
[06:06:21.615]  
