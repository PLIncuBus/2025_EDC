/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0009.log
 *  Created     : 21:20:02 (23/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[21:20:02.141]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:20:02.141]  
[21:20:02.141]  <debugvars>
[21:20:02.142]    // Pre-defined
[21:20:02.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:02.142]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:02.142]    __dp=0x00000000
[21:20:02.143]    __ap=0x00000000
[21:20:02.143]    __traceout=0x00000000      (Trace Disabled)
[21:20:02.143]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:02.143]    __FlashAddr=0x00000000
[21:20:02.143]    __FlashLen=0x00000000
[21:20:02.143]    __FlashArg=0x00000000
[21:20:02.143]    __FlashOp=0x00000000
[21:20:02.143]    __Result=0x00000000
[21:20:02.143]  </debugvars>
[21:20:02.143]  
[21:20:02.143]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:20:02.143]    <block atomic="false" info="">
[21:20:02.143]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:20:02.143]        // -> [isSWJ <= 0x00000001]
[21:20:02.143]      __var hasDormant = __protocol & 0x00020000;
[21:20:02.143]        // -> [hasDormant <= 0x00000000]
[21:20:02.143]      __var protType   = __protocol & 0x0000FFFF;
[21:20:02.143]        // -> [protType <= 0x00000002]
[21:20:02.143]    </block>
[21:20:02.144]    <control if="protType == 1" while="" timeout="0" info="">
[21:20:02.144]      // if-block "protType == 1"
[21:20:02.144]        // =>  FALSE
[21:20:02.144]      // skip if-block "protType == 1"
[21:20:02.144]    </control>
[21:20:02.144]    <control if="protType == 2" while="" timeout="0" info="">
[21:20:02.144]      // if-block "protType == 2"
[21:20:02.144]        // =>  TRUE
[21:20:02.146]      <control if="isSWJ" while="" timeout="0" info="">
[21:20:02.146]        // if-block "isSWJ"
[21:20:02.146]          // =>  TRUE
[21:20:02.146]        <control if="hasDormant" while="" timeout="0" info="">
[21:20:02.146]          // if-block "hasDormant"
[21:20:02.146]            // =>  FALSE
[21:20:02.146]          // skip if-block "hasDormant"
[21:20:02.146]        </control>
[21:20:02.146]        <control if="!hasDormant" while="" timeout="0" info="">
[21:20:02.146]          // if-block "!hasDormant"
[21:20:02.146]            // =>  TRUE
[21:20:02.146]          <block atomic="false" info="">
[21:20:02.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:20:02.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:02.147]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:20:02.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:20:02.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:20:02.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:02.148]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:20:02.148]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:20:02.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:20:02.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:02.149]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:20:02.150]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:20:02.150]          </block>
[21:20:02.150]          // end if-block "!hasDormant"
[21:20:02.150]        </control>
[21:20:02.150]        // end if-block "isSWJ"
[21:20:02.150]      </control>
[21:20:02.150]      <control if="!isSWJ" while="" timeout="0" info="">
[21:20:02.150]        // if-block "!isSWJ"
[21:20:02.150]          // =>  FALSE
[21:20:02.150]        // skip if-block "!isSWJ"
[21:20:02.151]      </control>
[21:20:02.151]      <block atomic="false" info="">
[21:20:02.151]        ReadDP(0x0);
[21:20:02.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:20:02.151]      </block>
[21:20:02.151]      // end if-block "protType == 2"
[21:20:02.152]    </control>
[21:20:02.152]  </sequence>
[21:20:02.152]  
[21:20:02.152]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:20:02.152]  
[21:20:02.152]  <debugvars>
[21:20:02.152]    // Pre-defined
[21:20:02.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:02.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:02.152]    __dp=0x00000000
[21:20:02.152]    __ap=0x00000000
[21:20:02.152]    __traceout=0x00000000      (Trace Disabled)
[21:20:02.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:02.153]    __FlashAddr=0x00000000
[21:20:02.153]    __FlashLen=0x00000000
[21:20:02.153]    __FlashArg=0x00000000
[21:20:02.153]    __FlashOp=0x00000000
[21:20:02.153]    __Result=0x00000000
[21:20:02.153]  </debugvars>
[21:20:02.153]  
[21:20:02.153]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:20:02.153]    <block atomic="false" info="">
[21:20:02.153]      __var SW_DP_ABORT       = 0x0;
[21:20:02.153]        // -> [SW_DP_ABORT <= 0x00000000]
[21:20:02.154]      __var DP_CTRL_STAT      = 0x4;
[21:20:02.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:20:02.154]      __var DP_SELECT         = 0x8;
[21:20:02.155]        // -> [DP_SELECT <= 0x00000008]
[21:20:02.155]      __var powered_down      = 0;
[21:20:02.155]        // -> [powered_down <= 0x00000000]
[21:20:02.155]      WriteDP(DP_SELECT, 0x00000000);
[21:20:02.155]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:20:02.155]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:20:02.155]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:20:02.156]        // -> [powered_down <= 0x00000001]
[21:20:02.156]    </block>
[21:20:02.156]    <control if="powered_down" while="" timeout="0" info="">
[21:20:02.156]      // if-block "powered_down"
[21:20:02.156]        // =>  TRUE
[21:20:02.156]      <block atomic="false" info="">
[21:20:02.156]        Message(0, "Debug/System power-up request sent");
[21:20:02.163]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:20:02.163]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:20:02.163]      </block>
[21:20:02.164]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:20:02.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:20:02.164]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:20:02.164]        // while-condition  =>  FALSE
[21:20:02.164]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:20:02.164]      </control>
[21:20:02.164]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:20:02.164]        // if-block "(__protocol & 0xFFFF) == 1"
[21:20:02.164]          // =>  FALSE
[21:20:02.164]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:20:02.165]      </control>
[21:20:02.165]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:20:02.165]        // if-block "(__protocol & 0xFFFF) == 2"
[21:20:02.165]          // =>  TRUE
[21:20:02.165]        <block atomic="false" info="">
[21:20:02.165]          Message(0, "executing SWD power up");
[21:20:02.166]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:20:02.167]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:20:02.167]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:20:02.167]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:20:02.169]        </block>
[21:20:02.169]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:20:02.169]      </control>
[21:20:02.169]      // end if-block "powered_down"
[21:20:02.169]    </control>
[21:20:02.169]    <block atomic="false" info="">
[21:20:02.169]      __var DEBUG_PORT_VAL    = 0;
[21:20:02.169]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:20:02.169]      __var ACCESS_POINT_VAL  = 0;
[21:20:02.169]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:20:02.170]      __ap = 1; 
[21:20:02.170]        // -> [__ap <= 0x00000001]
[21:20:02.170]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:20:02.171]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:20:02.171]      __ap = 4;
[21:20:02.171]        // -> [__ap <= 0x00000004]
[21:20:02.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:02.173]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:20:02.173]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:20:02.173]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:02.174]    </block>
[21:20:02.174]    <block atomic="false" info="">
[21:20:02.174]      __var nReset = 0x80;
[21:20:02.174]        // -> [nReset <= 0x00000080]
[21:20:02.174]      __var canReadPins = 0;
[21:20:02.174]        // -> [canReadPins <= 0x00000000]
[21:20:02.174]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:20:02.175]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:20:02.175]        // -> [canReadPins <= 0x00000001]
[21:20:02.175]    </block>
[21:20:02.175]    <control if="" while="1" timeout="200" info="">
[21:20:02.175]      // while "1"  (timeout="200")
[21:20:02.175]      // while-condition  =>  TRUE
[21:20:02.175]      // while "1"  (timeout="200")
[21:20:02.175]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.176]      // while-condition  =>  TRUE
[21:20:02.176]      // while "1"  (timeout="200")
[21:20:02.178]      // while-condition  =>  TRUE
[21:20:02.178]      // while "1"  (timeout="200")
[21:20:02.178]      // while  =>  TIMEOUT
[21:20:02.178]      // end while "1"
[21:20:02.178]    </control>
[21:20:02.178]    <control if="canReadPins" while="" timeout="0" info="">
[21:20:02.178]      // if-block "canReadPins"
[21:20:02.178]        // =>  TRUE
[21:20:02.178]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:20:02.178]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:20:02.179]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:20:02.179]        // while-condition  =>  FALSE
[21:20:02.179]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:20:02.179]      </control>
[21:20:02.180]      // end if-block "canReadPins"
[21:20:02.180]    </control>
[21:20:02.180]    <control if="!canReadPins" while="" timeout="0" info="">
[21:20:02.180]      // if-block "!canReadPins"
[21:20:02.180]        // =>  FALSE
[21:20:02.180]      // skip if-block "!canReadPins"
[21:20:02.180]    </control>
[21:20:02.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:20:02.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:02.181]        // =>  TRUE
[21:20:02.181]      <block atomic="false" info="">
[21:20:02.181]        WriteAP(0x00, 0x190008);
[21:20:02.181]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:02.181]        WriteAP(0xF0, 0x01);
[21:20:02.182]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:02.183]      </block>
[21:20:02.183]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:02.183]    </control>
[21:20:02.183]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:20:02.183]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:02.183]        // =>  FALSE
[21:20:02.183]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:02.183]    </control>
[21:20:02.183]    <block atomic="false" info="">
[21:20:02.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:02.184]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:20:02.184]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:20:02.185]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:02.186]      __ap = 0; //lets make sure we reset the access point selection
[21:20:02.186]        // -> [__ap <= 0x00000000]
[21:20:02.186]    </block>
[21:20:02.186]  </sequence>
[21:20:02.186]  
[21:20:02.192]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:20:02.192]  
[21:20:02.192]  <debugvars>
[21:20:02.193]    // Pre-defined
[21:20:02.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:02.193]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:02.193]    __dp=0x00000000
[21:20:02.193]    __ap=0x00000000
[21:20:02.193]    __traceout=0x00000000      (Trace Disabled)
[21:20:02.193]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:02.193]    __FlashAddr=0x00000000
[21:20:02.193]    __FlashLen=0x00000000
[21:20:02.193]    __FlashArg=0x00000000
[21:20:02.193]    __FlashOp=0x00000000
[21:20:02.194]    __Result=0x00000000
[21:20:02.194]  </debugvars>
[21:20:02.194]  
[21:20:02.194]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:20:02.194]    <block atomic="false" info="">
[21:20:02.194]      __var deviceID = 0;
[21:20:02.194]        // -> [deviceID <= 0x00000000]
[21:20:02.194]      __var version = 0;
[21:20:02.194]        // -> [version <= 0x00000000]
[21:20:02.194]      __var partNum = 0;
[21:20:02.194]        // -> [partNum <= 0x00000000]
[21:20:02.194]      __var manuf = 0;
[21:20:02.194]        // -> [manuf <= 0x00000000]
[21:20:02.194]      __var isMSPM0G1X0X_G3X0X = 0;
[21:20:02.194]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:20:02.196]      __var isProduction = 0;
[21:20:02.196]        // -> [isProduction <= 0x00000000]
[21:20:02.196]      __var continueId = 0;
[21:20:02.196]        // -> [continueId <= 0x00000000]
[21:20:02.196]      deviceID =   Read32(0x41C40004);
[21:20:02.197]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:20:02.198]        // -> [deviceID <= 0x2BB8802F]
[21:20:02.198]      version = deviceID >> 28;
[21:20:02.198]        // -> [version <= 0x00000002]
[21:20:02.198]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:20:02.198]        // -> [partNum <= 0x0000BB88]
[21:20:02.198]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:20:02.198]        // -> [manuf <= 0x00000017]
[21:20:02.198]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:20:02.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:20:02.198]      isProduction = (version > 0);
[21:20:02.198]        // -> [isProduction <= 0x00000001]
[21:20:02.198]    </block>
[21:20:02.199]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:20:02.199]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:20:02.199]        // =>  FALSE
[21:20:02.199]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:20:02.199]    </control>
[21:20:02.199]    <control if="continueId == 4" while="" timeout="0" info="">
[21:20:02.199]      // if-block "continueId == 4"
[21:20:02.199]        // =>  FALSE
[21:20:02.200]      // skip if-block "continueId == 4"
[21:20:02.200]    </control>
[21:20:02.200]    <control if="!isProduction" while="" timeout="0" info="">
[21:20:02.200]      // if-block "!isProduction"
[21:20:02.200]        // =>  FALSE
[21:20:02.200]      // skip if-block "!isProduction"
[21:20:02.200]    </control>
[21:20:02.200]  </sequence>
[21:20:02.200]  
[21:20:13.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:20:13.455]  
[21:20:13.465]  <debugvars>
[21:20:13.465]    // Pre-defined
[21:20:13.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:13.465]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:20:13.465]    __dp=0x00000000
[21:20:13.465]    __ap=0x00000000
[21:20:13.465]    __traceout=0x00000000      (Trace Disabled)
[21:20:13.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:13.465]    __FlashAddr=0x00000000
[21:20:13.465]    __FlashLen=0x00000000
[21:20:13.466]    __FlashArg=0x00000000
[21:20:13.466]    __FlashOp=0x00000000
[21:20:13.466]    __Result=0x00000000
[21:20:13.466]  </debugvars>
[21:20:13.466]  
[21:20:13.466]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:20:13.466]    <block atomic="false" info="">
[21:20:13.466]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:20:13.466]        // -> [isSWJ <= 0x00000001]
[21:20:13.466]      __var hasDormant = __protocol & 0x00020000;
[21:20:13.466]        // -> [hasDormant <= 0x00000000]
[21:20:13.466]      __var protType   = __protocol & 0x0000FFFF;
[21:20:13.466]        // -> [protType <= 0x00000002]
[21:20:13.466]    </block>
[21:20:13.467]    <control if="protType == 1" while="" timeout="0" info="">
[21:20:13.467]      // if-block "protType == 1"
[21:20:13.467]        // =>  FALSE
[21:20:13.467]      // skip if-block "protType == 1"
[21:20:13.467]    </control>
[21:20:13.467]    <control if="protType == 2" while="" timeout="0" info="">
[21:20:13.467]      // if-block "protType == 2"
[21:20:13.467]        // =>  TRUE
[21:20:13.467]      <control if="isSWJ" while="" timeout="0" info="">
[21:20:13.467]        // if-block "isSWJ"
[21:20:13.467]          // =>  TRUE
[21:20:13.467]        <control if="hasDormant" while="" timeout="0" info="">
[21:20:13.467]          // if-block "hasDormant"
[21:20:13.467]            // =>  FALSE
[21:20:13.467]          // skip if-block "hasDormant"
[21:20:13.469]        </control>
[21:20:13.469]        <control if="!hasDormant" while="" timeout="0" info="">
[21:20:13.469]          // if-block "!hasDormant"
[21:20:13.469]            // =>  TRUE
[21:20:13.469]          <block atomic="false" info="">
[21:20:13.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:20:13.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:13.470]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:20:13.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:20:13.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:20:13.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:13.470]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:20:13.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:20:13.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:20:13.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:13.471]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:20:13.472]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:20:13.472]          </block>
[21:20:13.472]          // end if-block "!hasDormant"
[21:20:13.472]        </control>
[21:20:13.472]        // end if-block "isSWJ"
[21:20:13.472]      </control>
[21:20:13.472]      <control if="!isSWJ" while="" timeout="0" info="">
[21:20:13.472]        // if-block "!isSWJ"
[21:20:13.472]          // =>  FALSE
[21:20:13.472]        // skip if-block "!isSWJ"
[21:20:13.472]      </control>
[21:20:13.473]      <block atomic="false" info="">
[21:20:13.473]        ReadDP(0x0);
[21:20:13.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:20:13.474]      </block>
[21:20:13.474]      // end if-block "protType == 2"
[21:20:13.474]    </control>
[21:20:13.474]  </sequence>
[21:20:13.474]  
[21:20:13.475]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:20:13.475]  
[21:20:13.475]  <debugvars>
[21:20:13.475]    // Pre-defined
[21:20:13.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:13.475]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:20:13.475]    __dp=0x00000000
[21:20:13.475]    __ap=0x00000000
[21:20:13.475]    __traceout=0x00000000      (Trace Disabled)
[21:20:13.475]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:13.476]    __FlashAddr=0x00000000
[21:20:13.476]    __FlashLen=0x00000000
[21:20:13.476]    __FlashArg=0x00000000
[21:20:13.476]    __FlashOp=0x00000000
[21:20:13.476]    __Result=0x00000000
[21:20:13.476]  </debugvars>
[21:20:13.476]  
[21:20:13.476]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:20:13.476]    <block atomic="false" info="">
[21:20:13.476]      __var SW_DP_ABORT       = 0x0;
[21:20:13.476]        // -> [SW_DP_ABORT <= 0x00000000]
[21:20:13.477]      __var DP_CTRL_STAT      = 0x4;
[21:20:13.477]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:20:13.477]      __var DP_SELECT         = 0x8;
[21:20:13.477]        // -> [DP_SELECT <= 0x00000008]
[21:20:13.477]      __var powered_down      = 0;
[21:20:13.477]        // -> [powered_down <= 0x00000000]
[21:20:13.477]      WriteDP(DP_SELECT, 0x00000000);
[21:20:13.478]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:20:13.478]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:20:13.478]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:20:13.478]        // -> [powered_down <= 0x00000001]
[21:20:13.479]    </block>
[21:20:13.479]    <control if="powered_down" while="" timeout="0" info="">
[21:20:13.479]      // if-block "powered_down"
[21:20:13.479]        // =>  TRUE
[21:20:13.479]      <block atomic="false" info="">
[21:20:13.479]        Message(0, "Debug/System power-up request sent");
[21:20:13.481]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:20:13.482]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:20:13.482]      </block>
[21:20:13.482]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:20:13.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:20:13.482]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:20:13.483]        // while-condition  =>  FALSE
[21:20:13.483]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:20:13.483]      </control>
[21:20:13.483]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:20:13.483]        // if-block "(__protocol & 0xFFFF) == 1"
[21:20:13.483]          // =>  FALSE
[21:20:13.483]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:20:13.483]      </control>
[21:20:13.484]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:20:13.484]        // if-block "(__protocol & 0xFFFF) == 2"
[21:20:13.484]          // =>  TRUE
[21:20:13.485]        <block atomic="false" info="">
[21:20:13.485]          Message(0, "executing SWD power up");
[21:20:13.485]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:20:13.486]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:20:13.486]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:20:13.487]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:20:13.487]        </block>
[21:20:13.487]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:20:13.487]      </control>
[21:20:13.487]      // end if-block "powered_down"
[21:20:13.487]    </control>
[21:20:13.487]    <block atomic="false" info="">
[21:20:13.487]      __var DEBUG_PORT_VAL    = 0;
[21:20:13.487]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:20:13.487]      __var ACCESS_POINT_VAL  = 0;
[21:20:13.487]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:20:13.487]      __ap = 1; 
[21:20:13.489]        // -> [__ap <= 0x00000001]
[21:20:13.489]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:20:13.490]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:20:13.490]      __ap = 4;
[21:20:13.490]        // -> [__ap <= 0x00000004]
[21:20:13.490]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:13.491]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:20:13.491]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:20:13.491]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:13.493]    </block>
[21:20:13.493]    <block atomic="false" info="">
[21:20:13.493]      __var nReset = 0x80;
[21:20:13.493]        // -> [nReset <= 0x00000080]
[21:20:13.493]      __var canReadPins = 0;
[21:20:13.493]        // -> [canReadPins <= 0x00000000]
[21:20:13.493]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:20:13.494]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:20:13.494]        // -> [canReadPins <= 0x00000001]
[21:20:13.495]    </block>
[21:20:13.495]    <control if="" while="1" timeout="200" info="">
[21:20:13.495]      // while "1"  (timeout="200")
[21:20:13.495]      // while-condition  =>  TRUE
[21:20:13.495]      // while "1"  (timeout="200")
[21:20:13.495]      // while-condition  =>  TRUE
[21:20:13.495]      // while "1"  (timeout="200")
[21:20:13.495]      // while-condition  =>  TRUE
[21:20:13.495]      // while "1"  (timeout="200")
[21:20:13.495]      // while-condition  =>  TRUE
[21:20:13.495]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.496]      // while "1"  (timeout="200")
[21:20:13.496]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.497]      // while "1"  (timeout="200")
[21:20:13.497]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.499]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.499]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.499]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.499]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.499]      // while-condition  =>  TRUE
[21:20:13.499]      // while "1"  (timeout="200")
[21:20:13.500]      // while-condition  =>  TRUE
[21:20:13.500]      // while "1"  (timeout="200")
[21:20:13.500]      // while-condition  =>  TRUE
[21:20:13.500]      // while "1"  (timeout="200")
[21:20:13.500]      // while-condition  =>  TRUE
[21:20:13.500]      // while "1"  (timeout="200")
[21:20:13.500]      // while-condition  =>  TRUE
[21:20:13.500]      // while "1"  (timeout="200")
[21:20:13.500]      // while-condition  =>  TRUE
[21:20:13.500]      // while "1"  (timeout="200")
[21:20:13.501]      // while-condition  =>  TRUE
[21:20:13.501]      // while "1"  (timeout="200")
[21:20:13.501]      // while-condition  =>  TRUE
[21:20:13.501]      // while "1"  (timeout="200")
[21:20:13.501]      // while-condition  =>  TRUE
[21:20:13.501]      // while "1"  (timeout="200")
[21:20:13.501]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.502]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.502]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.502]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.502]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.502]      // while-condition  =>  TRUE
[21:20:13.502]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.503]      // while-condition  =>  TRUE
[21:20:13.503]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.505]      // while-condition  =>  TRUE
[21:20:13.505]      // while "1"  (timeout="200")
[21:20:13.506]      // while-condition  =>  TRUE
[21:20:13.506]      // while "1"  (timeout="200")
[21:20:13.506]      // while  =>  TIMEOUT
[21:20:13.506]      // end while "1"
[21:20:13.506]    </control>
[21:20:13.507]    <control if="canReadPins" while="" timeout="0" info="">
[21:20:13.507]      // if-block "canReadPins"
[21:20:13.507]        // =>  TRUE
[21:20:13.507]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:20:13.507]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:20:13.508]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:20:13.508]        // while-condition  =>  FALSE
[21:20:13.508]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:20:13.508]      </control>
[21:20:13.508]      // end if-block "canReadPins"
[21:20:13.508]    </control>
[21:20:13.508]    <control if="!canReadPins" while="" timeout="0" info="">
[21:20:13.508]      // if-block "!canReadPins"
[21:20:13.508]        // =>  FALSE
[21:20:13.508]      // skip if-block "!canReadPins"
[21:20:13.509]    </control>
[21:20:13.509]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:20:13.509]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:13.509]        // =>  TRUE
[21:20:13.510]      <block atomic="false" info="">
[21:20:13.510]        WriteAP(0x00, 0x190008);
[21:20:13.510]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:13.510]        WriteAP(0xF0, 0x01);
[21:20:13.511]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:13.511]      </block>
[21:20:13.511]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:13.511]    </control>
[21:20:13.512]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:20:13.512]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:13.512]        // =>  FALSE
[21:20:13.512]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:13.512]    </control>
[21:20:13.512]    <block atomic="false" info="">
[21:20:13.512]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:13.513]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:20:13.513]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:20:13.513]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:13.515]      __ap = 0; //lets make sure we reset the access point selection
[21:20:13.515]        // -> [__ap <= 0x00000000]
[21:20:13.515]    </block>
[21:20:13.516]  </sequence>
[21:20:13.516]  
[21:20:13.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:20:13.522]  
[21:20:13.522]  <debugvars>
[21:20:13.522]    // Pre-defined
[21:20:13.523]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:13.523]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:20:13.523]    __dp=0x00000000
[21:20:13.523]    __ap=0x00000000
[21:20:13.523]    __traceout=0x00000000      (Trace Disabled)
[21:20:13.523]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:13.523]    __FlashAddr=0x00000000
[21:20:13.523]    __FlashLen=0x00000000
[21:20:13.524]    __FlashArg=0x00000000
[21:20:13.524]    __FlashOp=0x00000000
[21:20:13.524]    __Result=0x00000000
[21:20:13.524]  </debugvars>
[21:20:13.524]  
[21:20:13.524]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:20:13.524]    <block atomic="false" info="">
[21:20:13.524]      __var deviceID = 0;
[21:20:13.524]        // -> [deviceID <= 0x00000000]
[21:20:13.524]      __var version = 0;
[21:20:13.524]        // -> [version <= 0x00000000]
[21:20:13.525]      __var partNum = 0;
[21:20:13.525]        // -> [partNum <= 0x00000000]
[21:20:13.525]      __var manuf = 0;
[21:20:13.525]        // -> [manuf <= 0x00000000]
[21:20:13.525]      __var isMSPM0G1X0X_G3X0X = 0;
[21:20:13.525]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:20:13.525]      __var isProduction = 0;
[21:20:13.525]        // -> [isProduction <= 0x00000000]
[21:20:13.525]      __var continueId = 0;
[21:20:13.526]        // -> [continueId <= 0x00000000]
[21:20:13.526]      deviceID =   Read32(0x41C40004);
[21:20:13.527]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:20:13.527]        // -> [deviceID <= 0x2BB8802F]
[21:20:13.527]      version = deviceID >> 28;
[21:20:13.527]        // -> [version <= 0x00000002]
[21:20:13.527]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:20:13.528]        // -> [partNum <= 0x0000BB88]
[21:20:13.528]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:20:13.528]        // -> [manuf <= 0x00000017]
[21:20:13.528]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:20:13.528]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:20:13.529]      isProduction = (version > 0);
[21:20:13.529]        // -> [isProduction <= 0x00000001]
[21:20:13.529]    </block>
[21:20:13.529]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:20:13.529]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:20:13.529]        // =>  FALSE
[21:20:13.529]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:20:13.529]    </control>
[21:20:13.529]    <control if="continueId == 4" while="" timeout="0" info="">
[21:20:13.529]      // if-block "continueId == 4"
[21:20:13.529]        // =>  FALSE
[21:20:13.529]      // skip if-block "continueId == 4"
[21:20:13.530]    </control>
[21:20:13.530]    <control if="!isProduction" while="" timeout="0" info="">
[21:20:13.530]      // if-block "!isProduction"
[21:20:13.530]        // =>  FALSE
[21:20:13.530]      // skip if-block "!isProduction"
[21:20:13.530]    </control>
[21:20:13.530]  </sequence>
[21:20:13.530]  
[21:22:10.498]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:22:10.498]  
[21:22:10.498]  <debugvars>
[21:22:10.498]    // Pre-defined
[21:22:10.499]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:10.499]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:10.499]    __dp=0x00000000
[21:22:10.499]    __ap=0x00000000
[21:22:10.499]    __traceout=0x00000000      (Trace Disabled)
[21:22:10.499]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:10.499]    __FlashAddr=0x00000000
[21:22:10.499]    __FlashLen=0x00000000
[21:22:10.500]    __FlashArg=0x00000000
[21:22:10.500]    __FlashOp=0x00000000
[21:22:10.500]    __Result=0x00000000
[21:22:10.500]  </debugvars>
[21:22:10.500]  
[21:22:10.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:22:10.500]    <block atomic="false" info="">
[21:22:10.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:22:10.500]        // -> [isSWJ <= 0x00000001]
[21:22:10.500]      __var hasDormant = __protocol & 0x00020000;
[21:22:10.500]        // -> [hasDormant <= 0x00000000]
[21:22:10.500]      __var protType   = __protocol & 0x0000FFFF;
[21:22:10.500]        // -> [protType <= 0x00000002]
[21:22:10.501]    </block>
[21:22:10.501]    <control if="protType == 1" while="" timeout="0" info="">
[21:22:10.501]      // if-block "protType == 1"
[21:22:10.501]        // =>  FALSE
[21:22:10.501]      // skip if-block "protType == 1"
[21:22:10.501]    </control>
[21:22:10.501]    <control if="protType == 2" while="" timeout="0" info="">
[21:22:10.501]      // if-block "protType == 2"
[21:22:10.501]        // =>  TRUE
[21:22:10.501]      <control if="isSWJ" while="" timeout="0" info="">
[21:22:10.503]        // if-block "isSWJ"
[21:22:10.503]          // =>  TRUE
[21:22:10.503]        <control if="hasDormant" while="" timeout="0" info="">
[21:22:10.503]          // if-block "hasDormant"
[21:22:10.503]            // =>  FALSE
[21:22:10.503]          // skip if-block "hasDormant"
[21:22:10.503]        </control>
[21:22:10.503]        <control if="!hasDormant" while="" timeout="0" info="">
[21:22:10.503]          // if-block "!hasDormant"
[21:22:10.503]            // =>  TRUE
[21:22:10.503]          <block atomic="false" info="">
[21:22:10.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:22:10.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:10.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:22:10.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:22:10.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:22:10.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:10.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:22:10.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:22:10.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:22:10.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:10.506]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:22:10.506]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:22:10.506]          </block>
[21:22:10.507]          // end if-block "!hasDormant"
[21:22:10.507]        </control>
[21:22:10.507]        // end if-block "isSWJ"
[21:22:10.507]      </control>
[21:22:10.507]      <control if="!isSWJ" while="" timeout="0" info="">
[21:22:10.507]        // if-block "!isSWJ"
[21:22:10.507]          // =>  FALSE
[21:22:10.507]        // skip if-block "!isSWJ"
[21:22:10.507]      </control>
[21:22:10.507]      <block atomic="false" info="">
[21:22:10.507]        ReadDP(0x0);
[21:22:10.508]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:22:10.508]      </block>
[21:22:10.508]      // end if-block "protType == 2"
[21:22:10.508]    </control>
[21:22:10.508]  </sequence>
[21:22:10.508]  
[21:22:10.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:22:10.509]  
[21:22:10.509]  <debugvars>
[21:22:10.510]    // Pre-defined
[21:22:10.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:10.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:10.510]    __dp=0x00000000
[21:22:10.510]    __ap=0x00000000
[21:22:10.510]    __traceout=0x00000000      (Trace Disabled)
[21:22:10.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:10.510]    __FlashAddr=0x00000000
[21:22:10.510]    __FlashLen=0x00000000
[21:22:10.510]    __FlashArg=0x00000000
[21:22:10.510]    __FlashOp=0x00000000
[21:22:10.511]    __Result=0x00000000
[21:22:10.511]  </debugvars>
[21:22:10.511]  
[21:22:10.511]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:22:10.511]    <block atomic="false" info="">
[21:22:10.511]      __var SW_DP_ABORT       = 0x0;
[21:22:10.511]        // -> [SW_DP_ABORT <= 0x00000000]
[21:22:10.511]      __var DP_CTRL_STAT      = 0x4;
[21:22:10.511]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:22:10.511]      __var DP_SELECT         = 0x8;
[21:22:10.512]        // -> [DP_SELECT <= 0x00000008]
[21:22:10.512]      __var powered_down      = 0;
[21:22:10.512]        // -> [powered_down <= 0x00000000]
[21:22:10.512]      WriteDP(DP_SELECT, 0x00000000);
[21:22:10.512]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:22:10.512]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:22:10.513]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:22:10.513]        // -> [powered_down <= 0x00000001]
[21:22:10.513]    </block>
[21:22:10.513]    <control if="powered_down" while="" timeout="0" info="">
[21:22:10.513]      // if-block "powered_down"
[21:22:10.513]        // =>  TRUE
[21:22:10.513]      <block atomic="false" info="">
[21:22:10.513]        Message(0, "Debug/System power-up request sent");
[21:22:10.518]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:22:10.519]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:22:10.519]      </block>
[21:22:10.519]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:22:10.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:22:10.520]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:22:10.520]        // while-condition  =>  FALSE
[21:22:10.520]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:22:10.520]      </control>
[21:22:10.520]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:22:10.520]        // if-block "(__protocol & 0xFFFF) == 1"
[21:22:10.521]          // =>  FALSE
[21:22:10.521]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:22:10.521]      </control>
[21:22:10.521]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:22:10.521]        // if-block "(__protocol & 0xFFFF) == 2"
[21:22:10.521]          // =>  TRUE
[21:22:10.521]        <block atomic="false" info="">
[21:22:10.521]          Message(0, "executing SWD power up");
[21:22:10.523]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:22:10.523]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:22:10.523]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:22:10.524]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:22:10.524]        </block>
[21:22:10.524]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:22:10.524]      </control>
[21:22:10.524]      // end if-block "powered_down"
[21:22:10.524]    </control>
[21:22:10.525]    <block atomic="false" info="">
[21:22:10.525]      __var DEBUG_PORT_VAL    = 0;
[21:22:10.525]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:22:10.525]      __var ACCESS_POINT_VAL  = 0;
[21:22:10.525]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:22:10.525]      __ap = 1; 
[21:22:10.525]        // -> [__ap <= 0x00000001]
[21:22:10.525]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:22:10.526]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:22:10.526]      __ap = 4;
[21:22:10.526]        // -> [__ap <= 0x00000004]
[21:22:10.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:10.528]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:22:10.528]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:22:10.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:10.530]    </block>
[21:22:10.530]    <block atomic="false" info="">
[21:22:10.530]      __var nReset = 0x80;
[21:22:10.531]        // -> [nReset <= 0x00000080]
[21:22:10.531]      __var canReadPins = 0;
[21:22:10.531]        // -> [canReadPins <= 0x00000000]
[21:22:10.531]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:22:10.531]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:22:10.531]        // -> [canReadPins <= 0x00000001]
[21:22:10.532]    </block>
[21:22:10.532]    <control if="" while="1" timeout="200" info="">
[21:22:10.532]      // while "1"  (timeout="200")
[21:22:10.532]      // while-condition  =>  TRUE
[21:22:10.532]      // while "1"  (timeout="200")
[21:22:10.532]      // while-condition  =>  TRUE
[21:22:10.532]      // while "1"  (timeout="200")
[21:22:10.532]      // while-condition  =>  TRUE
[21:22:10.532]      // while "1"  (timeout="200")
[21:22:10.533]      // while-condition  =>  TRUE
[21:22:10.533]      // while "1"  (timeout="200")
[21:22:10.533]      // while-condition  =>  TRUE
[21:22:10.533]      // while "1"  (timeout="200")
[21:22:10.533]      // while-condition  =>  TRUE
[21:22:10.533]      // while "1"  (timeout="200")
[21:22:10.533]      // while-condition  =>  TRUE
[21:22:10.533]      // while "1"  (timeout="200")
[21:22:10.533]      // while-condition  =>  TRUE
[21:22:10.533]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.534]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.534]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.534]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.534]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.534]      // while "1"  (timeout="200")
[21:22:10.534]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.535]      // while-condition  =>  TRUE
[21:22:10.535]      // while "1"  (timeout="200")
[21:22:10.536]      // while-condition  =>  TRUE
[21:22:10.536]      // while "1"  (timeout="200")
[21:22:10.536]      // while-condition  =>  TRUE
[21:22:10.536]      // while "1"  (timeout="200")
[21:22:10.536]      // while-condition  =>  TRUE
[21:22:10.536]      // while "1"  (timeout="200")
[21:22:10.537]      // while-condition  =>  TRUE
[21:22:10.537]      // while "1"  (timeout="200")
[21:22:10.537]      // while  =>  TIMEOUT
[21:22:10.537]      // end while "1"
[21:22:10.537]    </control>
[21:22:10.537]    <control if="canReadPins" while="" timeout="0" info="">
[21:22:10.537]      // if-block "canReadPins"
[21:22:10.537]        // =>  TRUE
[21:22:10.537]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:22:10.537]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:22:10.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:22:10.537]        // while-condition  =>  FALSE
[21:22:10.539]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:22:10.539]      </control>
[21:22:10.539]      // end if-block "canReadPins"
[21:22:10.539]    </control>
[21:22:10.539]    <control if="!canReadPins" while="" timeout="0" info="">
[21:22:10.539]      // if-block "!canReadPins"
[21:22:10.539]        // =>  FALSE
[21:22:10.540]      // skip if-block "!canReadPins"
[21:22:10.540]    </control>
[21:22:10.540]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:22:10.540]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:10.540]        // =>  TRUE
[21:22:10.540]      <block atomic="false" info="">
[21:22:10.540]        WriteAP(0x00, 0x190008);
[21:22:10.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:10.541]        WriteAP(0xF0, 0x01);
[21:22:10.542]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:10.542]      </block>
[21:22:10.542]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:10.542]    </control>
[21:22:10.543]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:22:10.543]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:10.543]        // =>  FALSE
[21:22:10.543]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:10.543]    </control>
[21:22:10.543]    <block atomic="false" info="">
[21:22:10.543]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:10.545]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:22:10.545]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:22:10.545]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:10.546]      __ap = 0; //lets make sure we reset the access point selection
[21:22:10.546]        // -> [__ap <= 0x00000000]
[21:22:10.546]    </block>
[21:22:10.546]  </sequence>
[21:22:10.546]  
[21:22:10.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:22:10.552]  
[21:22:10.552]  <debugvars>
[21:22:10.552]    // Pre-defined
[21:22:10.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:10.554]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:10.554]    __dp=0x00000000
[21:22:10.554]    __ap=0x00000000
[21:22:10.554]    __traceout=0x00000000      (Trace Disabled)
[21:22:10.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:10.554]    __FlashAddr=0x00000000
[21:22:10.554]    __FlashLen=0x00000000
[21:22:10.554]    __FlashArg=0x00000000
[21:22:10.554]    __FlashOp=0x00000000
[21:22:10.554]    __Result=0x00000000
[21:22:10.554]  </debugvars>
[21:22:10.555]  
[21:22:10.555]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:22:10.555]    <block atomic="false" info="">
[21:22:10.555]      __var deviceID = 0;
[21:22:10.555]        // -> [deviceID <= 0x00000000]
[21:22:10.555]      __var version = 0;
[21:22:10.555]        // -> [version <= 0x00000000]
[21:22:10.555]      __var partNum = 0;
[21:22:10.555]        // -> [partNum <= 0x00000000]
[21:22:10.555]      __var manuf = 0;
[21:22:10.556]        // -> [manuf <= 0x00000000]
[21:22:10.556]      __var isMSPM0G1X0X_G3X0X = 0;
[21:22:10.556]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:22:10.556]      __var isProduction = 0;
[21:22:10.556]        // -> [isProduction <= 0x00000000]
[21:22:10.556]      __var continueId = 0;
[21:22:10.556]        // -> [continueId <= 0x00000000]
[21:22:10.556]      deviceID =   Read32(0x41C40004);
[21:22:10.557]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:22:10.557]        // -> [deviceID <= 0x2BB8802F]
[21:22:10.557]      version = deviceID >> 28;
[21:22:10.557]        // -> [version <= 0x00000002]
[21:22:10.558]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:22:10.558]        // -> [partNum <= 0x0000BB88]
[21:22:10.558]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:22:10.558]        // -> [manuf <= 0x00000017]
[21:22:10.558]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:22:10.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:22:10.558]      isProduction = (version > 0);
[21:22:10.558]        // -> [isProduction <= 0x00000001]
[21:22:10.558]    </block>
[21:22:10.558]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:22:10.558]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:22:10.559]        // =>  FALSE
[21:22:10.559]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:22:10.559]    </control>
[21:22:10.560]    <control if="continueId == 4" while="" timeout="0" info="">
[21:22:10.560]      // if-block "continueId == 4"
[21:22:10.560]        // =>  FALSE
[21:22:10.560]      // skip if-block "continueId == 4"
[21:22:10.560]    </control>
[21:22:10.560]    <control if="!isProduction" while="" timeout="0" info="">
[21:22:10.560]      // if-block "!isProduction"
[21:22:10.560]        // =>  FALSE
[21:22:10.561]      // skip if-block "!isProduction"
[21:22:10.561]    </control>
[21:22:10.561]  </sequence>
[21:22:10.561]  
[21:22:13.977]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:22:13.977]  
[21:22:13.977]  <debugvars>
[21:22:13.977]    // Pre-defined
[21:22:13.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:13.979]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:22:13.979]    __dp=0x00000000
[21:22:13.979]    __ap=0x00000000
[21:22:13.979]    __traceout=0x00000000      (Trace Disabled)
[21:22:13.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:13.979]    __FlashAddr=0x00000000
[21:22:13.979]    __FlashLen=0x00000000
[21:22:13.979]    __FlashArg=0x00000000
[21:22:13.979]    __FlashOp=0x00000000
[21:22:13.979]    __Result=0x00000000
[21:22:13.979]  </debugvars>
[21:22:13.980]  
[21:22:13.980]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:22:13.980]    <block atomic="false" info="">
[21:22:13.980]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:22:13.980]        // -> [isSWJ <= 0x00000001]
[21:22:13.980]      __var hasDormant = __protocol & 0x00020000;
[21:22:13.980]        // -> [hasDormant <= 0x00000000]
[21:22:13.980]      __var protType   = __protocol & 0x0000FFFF;
[21:22:13.980]        // -> [protType <= 0x00000002]
[21:22:13.980]    </block>
[21:22:13.980]    <control if="protType == 1" while="" timeout="0" info="">
[21:22:13.980]      // if-block "protType == 1"
[21:22:13.981]        // =>  FALSE
[21:22:13.981]      // skip if-block "protType == 1"
[21:22:13.981]    </control>
[21:22:13.982]    <control if="protType == 2" while="" timeout="0" info="">
[21:22:13.982]      // if-block "protType == 2"
[21:22:13.982]        // =>  TRUE
[21:22:13.982]      <control if="isSWJ" while="" timeout="0" info="">
[21:22:13.982]        // if-block "isSWJ"
[21:22:13.982]          // =>  TRUE
[21:22:13.982]        <control if="hasDormant" while="" timeout="0" info="">
[21:22:13.982]          // if-block "hasDormant"
[21:22:13.983]            // =>  FALSE
[21:22:13.983]          // skip if-block "hasDormant"
[21:22:13.983]        </control>
[21:22:13.983]        <control if="!hasDormant" while="" timeout="0" info="">
[21:22:13.983]          // if-block "!hasDormant"
[21:22:13.983]            // =>  TRUE
[21:22:13.983]          <block atomic="false" info="">
[21:22:13.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:22:13.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:13.984]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:22:13.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:22:13.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:22:13.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:13.985]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:22:13.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:22:13.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:22:13.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:13.985]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:22:13.985]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:22:13.986]          </block>
[21:22:13.986]          // end if-block "!hasDormant"
[21:22:13.986]        </control>
[21:22:13.986]        // end if-block "isSWJ"
[21:22:13.986]      </control>
[21:22:13.986]      <control if="!isSWJ" while="" timeout="0" info="">
[21:22:13.986]        // if-block "!isSWJ"
[21:22:13.986]          // =>  FALSE
[21:22:13.986]        // skip if-block "!isSWJ"
[21:22:13.986]      </control>
[21:22:13.986]      <block atomic="false" info="">
[21:22:13.986]        ReadDP(0x0);
[21:22:13.987]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:22:13.987]      </block>
[21:22:13.987]      // end if-block "protType == 2"
[21:22:13.987]    </control>
[21:22:13.987]  </sequence>
[21:22:13.987]  
[21:22:13.987]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:22:13.987]  
[21:22:13.987]  <debugvars>
[21:22:13.989]    // Pre-defined
[21:22:13.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:13.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:22:13.989]    __dp=0x00000000
[21:22:13.989]    __ap=0x00000000
[21:22:13.989]    __traceout=0x00000000      (Trace Disabled)
[21:22:13.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:13.989]    __FlashAddr=0x00000000
[21:22:13.989]    __FlashLen=0x00000000
[21:22:13.989]    __FlashArg=0x00000000
[21:22:13.989]    __FlashOp=0x00000000
[21:22:13.990]    __Result=0x00000000
[21:22:13.990]  </debugvars>
[21:22:13.990]  
[21:22:13.990]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:22:13.990]    <block atomic="false" info="">
[21:22:13.990]      __var SW_DP_ABORT       = 0x0;
[21:22:13.990]        // -> [SW_DP_ABORT <= 0x00000000]
[21:22:13.990]      __var DP_CTRL_STAT      = 0x4;
[21:22:13.990]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:22:13.990]      __var DP_SELECT         = 0x8;
[21:22:13.991]        // -> [DP_SELECT <= 0x00000008]
[21:22:13.991]      __var powered_down      = 0;
[21:22:13.991]        // -> [powered_down <= 0x00000000]
[21:22:13.991]      WriteDP(DP_SELECT, 0x00000000);
[21:22:13.992]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:22:13.992]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:22:13.992]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:22:13.992]        // -> [powered_down <= 0x00000001]
[21:22:13.992]    </block>
[21:22:13.993]    <control if="powered_down" while="" timeout="0" info="">
[21:22:13.993]      // if-block "powered_down"
[21:22:13.993]        // =>  TRUE
[21:22:13.993]      <block atomic="false" info="">
[21:22:13.993]        Message(0, "Debug/System power-up request sent");
[21:22:13.995]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:22:13.995]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:22:13.996]      </block>
[21:22:13.996]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:22:13.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:22:13.996]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:22:13.996]        // while-condition  =>  FALSE
[21:22:13.996]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:22:13.996]      </control>
[21:22:13.996]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:22:13.997]        // if-block "(__protocol & 0xFFFF) == 1"
[21:22:13.997]          // =>  FALSE
[21:22:13.997]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:22:13.997]      </control>
[21:22:13.997]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:22:13.997]        // if-block "(__protocol & 0xFFFF) == 2"
[21:22:13.997]          // =>  TRUE
[21:22:13.997]        <block atomic="false" info="">
[21:22:13.997]          Message(0, "executing SWD power up");
[21:22:13.999]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:22:14.000]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:22:14.000]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:22:14.000]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:22:14.000]        </block>
[21:22:14.000]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:22:14.001]      </control>
[21:22:14.001]      // end if-block "powered_down"
[21:22:14.001]    </control>
[21:22:14.001]    <block atomic="false" info="">
[21:22:14.001]      __var DEBUG_PORT_VAL    = 0;
[21:22:14.001]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:22:14.001]      __var ACCESS_POINT_VAL  = 0;
[21:22:14.001]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:22:14.001]      __ap = 1; 
[21:22:14.001]        // -> [__ap <= 0x00000001]
[21:22:14.001]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:22:14.003]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:22:14.003]      __ap = 4;
[21:22:14.003]        // -> [__ap <= 0x00000004]
[21:22:14.003]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:14.004]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:22:14.004]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:22:14.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:14.006]    </block>
[21:22:14.006]    <block atomic="false" info="">
[21:22:14.006]      __var nReset = 0x80;
[21:22:14.006]        // -> [nReset <= 0x00000080]
[21:22:14.006]      __var canReadPins = 0;
[21:22:14.006]        // -> [canReadPins <= 0x00000000]
[21:22:14.006]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:22:14.006]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:22:14.006]        // -> [canReadPins <= 0x00000001]
[21:22:14.008]    </block>
[21:22:14.008]    <control if="" while="1" timeout="200" info="">
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.008]      // while "1"  (timeout="200")
[21:22:14.008]      // while-condition  =>  TRUE
[21:22:14.009]      // while "1"  (timeout="200")
[21:22:14.009]      // while-condition  =>  TRUE
[21:22:14.009]      // while "1"  (timeout="200")
[21:22:14.009]      // while-condition  =>  TRUE
[21:22:14.009]      // while "1"  (timeout="200")
[21:22:14.010]      // while-condition  =>  TRUE
[21:22:14.010]      // while "1"  (timeout="200")
[21:22:14.010]      // while-condition  =>  TRUE
[21:22:14.010]      // while "1"  (timeout="200")
[21:22:14.010]      // while-condition  =>  TRUE
[21:22:14.010]      // while "1"  (timeout="200")
[21:22:14.010]      // while-condition  =>  TRUE
[21:22:14.010]      // while "1"  (timeout="200")
[21:22:14.011]      // while-condition  =>  TRUE
[21:22:14.011]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.012]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.012]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.012]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.012]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.012]      // while "1"  (timeout="200")
[21:22:14.012]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.013]      // while-condition  =>  TRUE
[21:22:14.013]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.014]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.014]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.014]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.014]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.014]      // while "1"  (timeout="200")
[21:22:14.014]      // while-condition  =>  TRUE
[21:22:14.015]      // while "1"  (timeout="200")
[21:22:14.015]      // while-condition  =>  TRUE
[21:22:14.015]      // while "1"  (timeout="200")
[21:22:14.015]      // while-condition  =>  TRUE
[21:22:14.015]      // while "1"  (timeout="200")
[21:22:14.015]      // while-condition  =>  TRUE
[21:22:14.016]      // while "1"  (timeout="200")
[21:22:14.016]      // while-condition  =>  TRUE
[21:22:14.016]      // while "1"  (timeout="200")
[21:22:14.016]      // while-condition  =>  TRUE
[21:22:14.016]      // while "1"  (timeout="200")
[21:22:14.016]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.017]      // while "1"  (timeout="200")
[21:22:14.017]      // while-condition  =>  TRUE
[21:22:14.019]      // while "1"  (timeout="200")
[21:22:14.019]      // while-condition  =>  TRUE
[21:22:14.019]      // while "1"  (timeout="200")
[21:22:14.019]      // while-condition  =>  TRUE
[21:22:14.019]      // while "1"  (timeout="200")
[21:22:14.019]      // while-condition  =>  TRUE
[21:22:14.020]      // while "1"  (timeout="200")
[21:22:14.020]      // while-condition  =>  TRUE
[21:22:14.020]      // while "1"  (timeout="200")
[21:22:14.020]      // while-condition  =>  TRUE
[21:22:14.020]      // while "1"  (timeout="200")
[21:22:14.020]      // while-condition  =>  TRUE
[21:22:14.020]      // while "1"  (timeout="200")
[21:22:14.020]      // while-condition  =>  TRUE
[21:22:14.020]      // while "1"  (timeout="200")
[21:22:14.020]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.021]      // while "1"  (timeout="200")
[21:22:14.021]      // while-condition  =>  TRUE
[21:22:14.022]      // while "1"  (timeout="200")
[21:22:14.022]      // while  =>  TIMEOUT
[21:22:14.022]      // end while "1"
[21:22:14.022]    </control>
[21:22:14.022]    <control if="canReadPins" while="" timeout="0" info="">
[21:22:14.022]      // if-block "canReadPins"
[21:22:14.022]        // =>  TRUE
[21:22:14.022]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:22:14.022]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:22:14.023]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:22:14.023]        // while-condition  =>  FALSE
[21:22:14.023]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:22:14.023]      </control>
[21:22:14.023]      // end if-block "canReadPins"
[21:22:14.023]    </control>
[21:22:14.023]    <control if="!canReadPins" while="" timeout="0" info="">
[21:22:14.023]      // if-block "!canReadPins"
[21:22:14.023]        // =>  FALSE
[21:22:14.024]      // skip if-block "!canReadPins"
[21:22:14.024]    </control>
[21:22:14.024]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:22:14.024]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:14.024]        // =>  TRUE
[21:22:14.024]      <block atomic="false" info="">
[21:22:14.024]        WriteAP(0x00, 0x190008);
[21:22:14.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:14.025]        WriteAP(0xF0, 0x01);
[21:22:14.027]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:14.027]      </block>
[21:22:14.027]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:14.027]    </control>
[21:22:14.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:22:14.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:14.028]        // =>  FALSE
[21:22:14.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:14.028]    </control>
[21:22:14.028]    <block atomic="false" info="">
[21:22:14.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:14.029]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:22:14.029]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:22:14.029]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:14.030]      __ap = 0; //lets make sure we reset the access point selection
[21:22:14.030]        // -> [__ap <= 0x00000000]
[21:22:14.031]    </block>
[21:22:14.031]  </sequence>
[21:22:14.031]  
[21:22:14.036]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:22:14.036]  
[21:22:14.036]  <debugvars>
[21:22:14.036]    // Pre-defined
[21:22:14.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:14.036]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:22:14.036]    __dp=0x00000000
[21:22:14.037]    __ap=0x00000000
[21:22:14.037]    __traceout=0x00000000      (Trace Disabled)
[21:22:14.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:14.037]    __FlashAddr=0x00000000
[21:22:14.037]    __FlashLen=0x00000000
[21:22:14.037]    __FlashArg=0x00000000
[21:22:14.038]    __FlashOp=0x00000000
[21:22:14.038]    __Result=0x00000000
[21:22:14.039]  </debugvars>
[21:22:14.039]  
[21:22:14.039]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:22:14.039]    <block atomic="false" info="">
[21:22:14.039]      __var deviceID = 0;
[21:22:14.039]        // -> [deviceID <= 0x00000000]
[21:22:14.039]      __var version = 0;
[21:22:14.039]        // -> [version <= 0x00000000]
[21:22:14.039]      __var partNum = 0;
[21:22:14.039]        // -> [partNum <= 0x00000000]
[21:22:14.040]      __var manuf = 0;
[21:22:14.040]        // -> [manuf <= 0x00000000]
[21:22:14.040]      __var isMSPM0G1X0X_G3X0X = 0;
[21:22:14.040]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:22:14.040]      __var isProduction = 0;
[21:22:14.040]        // -> [isProduction <= 0x00000000]
[21:22:14.040]      __var continueId = 0;
[21:22:14.040]        // -> [continueId <= 0x00000000]
[21:22:14.040]      deviceID =   Read32(0x41C40004);
[21:22:14.042]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:22:14.042]        // -> [deviceID <= 0x2BB8802F]
[21:22:14.042]      version = deviceID >> 28;
[21:22:14.042]        // -> [version <= 0x00000002]
[21:22:14.042]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:22:14.042]        // -> [partNum <= 0x0000BB88]
[21:22:14.043]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:22:14.043]        // -> [manuf <= 0x00000017]
[21:22:14.043]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:22:14.043]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:22:14.043]      isProduction = (version > 0);
[21:22:14.043]        // -> [isProduction <= 0x00000001]
[21:22:14.043]    </block>
[21:22:14.044]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:22:14.044]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:22:14.044]        // =>  FALSE
[21:22:14.044]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:22:14.044]    </control>
[21:22:14.044]    <control if="continueId == 4" while="" timeout="0" info="">
[21:22:14.044]      // if-block "continueId == 4"
[21:22:14.044]        // =>  FALSE
[21:22:14.044]      // skip if-block "continueId == 4"
[21:22:14.044]    </control>
[21:22:14.045]    <control if="!isProduction" while="" timeout="0" info="">
[21:22:14.045]      // if-block "!isProduction"
[21:22:14.045]        // =>  FALSE
[21:22:14.045]      // skip if-block "!isProduction"
[21:22:14.045]    </control>
[21:22:14.045]  </sequence>
[21:22:14.045]  
[21:22:43.429]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:22:43.429]  
[21:22:43.438]  <debugvars>
[21:22:43.438]    // Pre-defined
[21:22:43.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:43.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:43.438]    __dp=0x00000000
[21:22:43.439]    __ap=0x00000000
[21:22:43.439]    __traceout=0x00000000      (Trace Disabled)
[21:22:43.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:43.439]    __FlashAddr=0x00000000
[21:22:43.439]    __FlashLen=0x00000000
[21:22:43.439]    __FlashArg=0x00000000
[21:22:43.440]    __FlashOp=0x00000000
[21:22:43.440]    __Result=0x00000000
[21:22:43.440]  </debugvars>
[21:22:43.440]  
[21:22:43.440]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:22:43.440]    <block atomic="false" info="">
[21:22:43.440]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:22:43.440]        // -> [isSWJ <= 0x00000001]
[21:22:43.440]      __var hasDormant = __protocol & 0x00020000;
[21:22:43.440]        // -> [hasDormant <= 0x00000000]
[21:22:43.441]      __var protType   = __protocol & 0x0000FFFF;
[21:22:43.441]        // -> [protType <= 0x00000002]
[21:22:43.441]    </block>
[21:22:43.441]    <control if="protType == 1" while="" timeout="0" info="">
[21:22:43.441]      // if-block "protType == 1"
[21:22:43.441]        // =>  FALSE
[21:22:43.441]      // skip if-block "protType == 1"
[21:22:43.441]    </control>
[21:22:43.441]    <control if="protType == 2" while="" timeout="0" info="">
[21:22:43.441]      // if-block "protType == 2"
[21:22:43.441]        // =>  TRUE
[21:22:43.441]      <control if="isSWJ" while="" timeout="0" info="">
[21:22:43.442]        // if-block "isSWJ"
[21:22:43.442]          // =>  TRUE
[21:22:43.442]        <control if="hasDormant" while="" timeout="0" info="">
[21:22:43.442]          // if-block "hasDormant"
[21:22:43.442]            // =>  FALSE
[21:22:43.442]          // skip if-block "hasDormant"
[21:22:43.442]        </control>
[21:22:43.442]        <control if="!hasDormant" while="" timeout="0" info="">
[21:22:43.443]          // if-block "!hasDormant"
[21:22:43.443]            // =>  TRUE
[21:22:43.443]          <block atomic="false" info="">
[21:22:43.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:22:43.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:43.444]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:22:43.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:22:43.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:22:43.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:43.445]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:22:43.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:22:43.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:22:43.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:43.446]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:22:43.446]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:22:43.446]          </block>
[21:22:43.446]          // end if-block "!hasDormant"
[21:22:43.446]        </control>
[21:22:43.446]        // end if-block "isSWJ"
[21:22:43.446]      </control>
[21:22:43.446]      <control if="!isSWJ" while="" timeout="0" info="">
[21:22:43.446]        // if-block "!isSWJ"
[21:22:43.446]          // =>  FALSE
[21:22:43.447]        // skip if-block "!isSWJ"
[21:22:43.447]      </control>
[21:22:43.447]      <block atomic="false" info="">
[21:22:43.447]        ReadDP(0x0);
[21:22:43.447]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:22:43.447]      </block>
[21:22:43.447]      // end if-block "protType == 2"
[21:22:43.447]    </control>
[21:22:43.447]  </sequence>
[21:22:43.447]  
[21:22:43.449]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:22:43.449]  
[21:22:43.449]  <debugvars>
[21:22:43.449]    // Pre-defined
[21:22:43.449]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:43.449]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:43.449]    __dp=0x00000000
[21:22:43.449]    __ap=0x00000000
[21:22:43.450]    __traceout=0x00000000      (Trace Disabled)
[21:22:43.450]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:43.450]    __FlashAddr=0x00000000
[21:22:43.450]    __FlashLen=0x00000000
[21:22:43.450]    __FlashArg=0x00000000
[21:22:43.450]    __FlashOp=0x00000000
[21:22:43.450]    __Result=0x00000000
[21:22:43.450]  </debugvars>
[21:22:43.450]  
[21:22:43.450]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:22:43.451]    <block atomic="false" info="">
[21:22:43.451]      __var SW_DP_ABORT       = 0x0;
[21:22:43.451]        // -> [SW_DP_ABORT <= 0x00000000]
[21:22:43.451]      __var DP_CTRL_STAT      = 0x4;
[21:22:43.451]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:22:43.451]      __var DP_SELECT         = 0x8;
[21:22:43.451]        // -> [DP_SELECT <= 0x00000008]
[21:22:43.451]      __var powered_down      = 0;
[21:22:43.451]        // -> [powered_down <= 0x00000000]
[21:22:43.451]      WriteDP(DP_SELECT, 0x00000000);
[21:22:43.452]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:22:43.452]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:22:43.453]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:22:43.453]        // -> [powered_down <= 0x00000001]
[21:22:43.453]    </block>
[21:22:43.453]    <control if="powered_down" while="" timeout="0" info="">
[21:22:43.453]      // if-block "powered_down"
[21:22:43.453]        // =>  TRUE
[21:22:43.454]      <block atomic="false" info="">
[21:22:43.454]        Message(0, "Debug/System power-up request sent");
[21:22:43.456]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:22:43.457]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:22:43.457]      </block>
[21:22:43.457]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:22:43.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:22:43.457]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:22:43.457]        // while-condition  =>  FALSE
[21:22:43.458]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:22:43.458]      </control>
[21:22:43.458]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:22:43.458]        // if-block "(__protocol & 0xFFFF) == 1"
[21:22:43.458]          // =>  FALSE
[21:22:43.458]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:22:43.458]      </control>
[21:22:43.459]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:22:43.459]        // if-block "(__protocol & 0xFFFF) == 2"
[21:22:43.459]          // =>  TRUE
[21:22:43.459]        <block atomic="false" info="">
[21:22:43.460]          Message(0, "executing SWD power up");
[21:22:43.462]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:22:43.462]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:22:43.462]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:22:43.462]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:22:43.463]        </block>
[21:22:43.463]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:22:43.463]      </control>
[21:22:43.463]      // end if-block "powered_down"
[21:22:43.463]    </control>
[21:22:43.463]    <block atomic="false" info="">
[21:22:43.463]      __var DEBUG_PORT_VAL    = 0;
[21:22:43.463]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:22:43.463]      __var ACCESS_POINT_VAL  = 0;
[21:22:43.464]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:22:43.465]      __ap = 1; 
[21:22:43.465]        // -> [__ap <= 0x00000001]
[21:22:43.465]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:22:43.466]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:22:43.466]      __ap = 4;
[21:22:43.466]        // -> [__ap <= 0x00000004]
[21:22:43.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:43.467]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:22:43.467]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:22:43.467]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:22:43.469]    </block>
[21:22:43.469]    <block atomic="false" info="">
[21:22:43.470]      __var nReset = 0x80;
[21:22:43.470]        // -> [nReset <= 0x00000080]
[21:22:43.470]      __var canReadPins = 0;
[21:22:43.470]        // -> [canReadPins <= 0x00000000]
[21:22:43.470]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:22:43.471]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:22:43.471]        // -> [canReadPins <= 0x00000001]
[21:22:43.471]    </block>
[21:22:43.471]    <control if="" while="1" timeout="200" info="">
[21:22:43.471]      // while "1"  (timeout="200")
[21:22:43.471]      // while-condition  =>  TRUE
[21:22:43.471]      // while "1"  (timeout="200")
[21:22:43.471]      // while-condition  =>  TRUE
[21:22:43.471]      // while "1"  (timeout="200")
[21:22:43.471]      // while-condition  =>  TRUE
[21:22:43.472]      // while "1"  (timeout="200")
[21:22:43.472]      // while-condition  =>  TRUE
[21:22:43.472]      // while "1"  (timeout="200")
[21:22:43.472]      // while-condition  =>  TRUE
[21:22:43.472]      // while "1"  (timeout="200")
[21:22:43.472]      // while-condition  =>  TRUE
[21:22:43.472]      // while "1"  (timeout="200")
[21:22:43.472]      // while-condition  =>  TRUE
[21:22:43.472]      // while "1"  (timeout="200")
[21:22:43.472]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.473]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.473]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.473]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.473]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.473]      // while-condition  =>  TRUE
[21:22:43.473]      // while "1"  (timeout="200")
[21:22:43.474]      // while-condition  =>  TRUE
[21:22:43.474]      // while "1"  (timeout="200")
[21:22:43.474]      // while-condition  =>  TRUE
[21:22:43.474]      // while "1"  (timeout="200")
[21:22:43.474]      // while-condition  =>  TRUE
[21:22:43.474]      // while "1"  (timeout="200")
[21:22:43.474]      // while-condition  =>  TRUE
[21:22:43.475]      // while "1"  (timeout="200")
[21:22:43.475]      // while  =>  TIMEOUT
[21:22:43.475]      // end while "1"
[21:22:43.475]    </control>
[21:22:43.475]    <control if="canReadPins" while="" timeout="0" info="">
[21:22:43.475]      // if-block "canReadPins"
[21:22:43.475]        // =>  TRUE
[21:22:43.475]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:22:43.475]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:22:43.475]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:22:43.475]        // while-condition  =>  FALSE
[21:22:43.477]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:22:43.477]      </control>
[21:22:43.477]      // end if-block "canReadPins"
[21:22:43.477]    </control>
[21:22:43.477]    <control if="!canReadPins" while="" timeout="0" info="">
[21:22:43.477]      // if-block "!canReadPins"
[21:22:43.477]        // =>  FALSE
[21:22:43.477]      // skip if-block "!canReadPins"
[21:22:43.477]    </control>
[21:22:43.477]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:22:43.477]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:43.478]        // =>  TRUE
[21:22:43.478]      <block atomic="false" info="">
[21:22:43.478]        WriteAP(0x00, 0x190008);
[21:22:43.478]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:43.479]        WriteAP(0xF0, 0x01);
[21:22:43.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:22:43.480]      </block>
[21:22:43.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:22:43.480]    </control>
[21:22:43.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:22:43.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:43.481]        // =>  FALSE
[21:22:43.481]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:22:43.481]    </control>
[21:22:43.481]    <block atomic="false" info="">
[21:22:43.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:22:43.498]  
[21:22:43.498]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[21:22:43.498]  
[21:22:43.500]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:22:43.501]    </block>
[21:22:43.501]  </sequence>
[21:22:43.501]  
[21:22:49.749]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:22:49.749]  
[21:22:49.757]  <debugvars>
[21:22:49.757]    // Pre-defined
[21:22:49.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:49.758]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:49.758]    __dp=0x00000000
[21:22:49.758]    __ap=0x00000000
[21:22:49.758]    __traceout=0x00000000      (Trace Disabled)
[21:22:49.758]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:49.758]    __FlashAddr=0x00000000
[21:22:49.758]    __FlashLen=0x00000000
[21:22:49.759]    __FlashArg=0x00000000
[21:22:49.759]    __FlashOp=0x00000000
[21:22:49.759]    __Result=0x00000000
[21:22:49.759]  </debugvars>
[21:22:49.759]  
[21:22:49.759]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:22:49.760]    <block atomic="false" info="">
[21:22:49.760]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:22:49.760]        // -> [isSWJ <= 0x00000001]
[21:22:49.760]      __var hasDormant = __protocol & 0x00020000;
[21:22:49.760]        // -> [hasDormant <= 0x00000000]
[21:22:49.760]      __var protType   = __protocol & 0x0000FFFF;
[21:22:49.760]        // -> [protType <= 0x00000002]
[21:22:49.760]    </block>
[21:22:49.760]    <control if="protType == 1" while="" timeout="0" info="">
[21:22:49.760]      // if-block "protType == 1"
[21:22:49.760]        // =>  FALSE
[21:22:49.761]      // skip if-block "protType == 1"
[21:22:49.761]    </control>
[21:22:49.761]    <control if="protType == 2" while="" timeout="0" info="">
[21:22:49.761]      // if-block "protType == 2"
[21:22:49.761]        // =>  TRUE
[21:22:49.761]      <control if="isSWJ" while="" timeout="0" info="">
[21:22:49.761]        // if-block "isSWJ"
[21:22:49.761]          // =>  TRUE
[21:22:49.761]        <control if="hasDormant" while="" timeout="0" info="">
[21:22:49.762]          // if-block "hasDormant"
[21:22:49.762]            // =>  FALSE
[21:22:49.762]          // skip if-block "hasDormant"
[21:22:49.762]        </control>
[21:22:49.762]        <control if="!hasDormant" while="" timeout="0" info="">
[21:22:49.762]          // if-block "!hasDormant"
[21:22:49.762]            // =>  TRUE
[21:22:49.762]          <block atomic="false" info="">
[21:22:49.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:22:49.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:49.763]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:22:49.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:22:49.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:22:49.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:49.764]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:22:49.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:22:49.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:22:49.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:22:49.766]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:22:49.766]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:22:49.766]          </block>
[21:22:49.766]          // end if-block "!hasDormant"
[21:22:49.766]        </control>
[21:22:49.766]        // end if-block "isSWJ"
[21:22:49.766]      </control>
[21:22:49.766]      <control if="!isSWJ" while="" timeout="0" info="">
[21:22:49.767]        // if-block "!isSWJ"
[21:22:49.767]          // =>  FALSE
[21:22:49.767]        // skip if-block "!isSWJ"
[21:22:49.767]      </control>
[21:22:49.767]      <block atomic="false" info="">
[21:22:49.767]        ReadDP(0x0);
[21:22:49.768]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:22:49.768]      </block>
[21:22:49.768]      // end if-block "protType == 2"
[21:22:49.768]    </control>
[21:22:49.768]  </sequence>
[21:22:49.768]  
[21:22:49.769]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:22:49.769]  
[21:22:49.769]  <debugvars>
[21:22:49.769]    // Pre-defined
[21:22:49.769]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:22:49.769]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:22:49.769]    __dp=0x00000000
[21:22:49.769]    __ap=0x00000000
[21:22:49.769]    __traceout=0x00000000      (Trace Disabled)
[21:22:49.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:22:49.770]    __FlashAddr=0x00000000
[21:22:49.770]    __FlashLen=0x00000000
[21:22:49.770]    __FlashArg=0x00000000
[21:22:49.770]    __FlashOp=0x00000000
[21:22:49.770]    __Result=0x00000000
[21:22:49.770]  </debugvars>
[21:22:49.770]  
[21:22:49.770]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:22:49.770]    <block atomic="false" info="">
[21:22:49.770]      __var SW_DP_ABORT       = 0x0;
[21:22:49.771]        // -> [SW_DP_ABORT <= 0x00000000]
[21:22:49.771]      __var DP_CTRL_STAT      = 0x4;
[21:22:49.771]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:22:49.771]      __var DP_SELECT         = 0x8;
[21:22:49.771]        // -> [DP_SELECT <= 0x00000008]
[21:22:49.771]      __var powered_down      = 0;
[21:22:49.771]        // -> [powered_down <= 0x00000000]
[21:22:49.771]      WriteDP(DP_SELECT, 0x00000000);
[21:22:49.788]  
[21:22:49.788]  !!! E310 : Debug access failed - cannot write value 0x00000000 to DP register 0x08
[21:22:49.788]  
[21:22:49.790]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:22:49.790]    </block>
[21:22:49.790]  </sequence>
[21:22:49.790]  
[21:23:48.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:23:48.359]  
[21:23:48.359]  <debugvars>
[21:23:48.359]    // Pre-defined
[21:23:48.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:48.360]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:23:48.360]    __dp=0x00000000
[21:23:48.360]    __ap=0x00000000
[21:23:48.360]    __traceout=0x00000000      (Trace Disabled)
[21:23:48.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:48.360]    __FlashAddr=0x00000000
[21:23:48.360]    __FlashLen=0x00000000
[21:23:48.360]    __FlashArg=0x00000000
[21:23:48.360]    __FlashOp=0x00000000
[21:23:48.360]    __Result=0x00000000
[21:23:48.360]  </debugvars>
[21:23:48.361]  
[21:23:48.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:23:48.361]    <block atomic="false" info="">
[21:23:48.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:23:48.361]        // -> [isSWJ <= 0x00000001]
[21:23:48.361]      __var hasDormant = __protocol & 0x00020000;
[21:23:48.361]        // -> [hasDormant <= 0x00000000]
[21:23:48.361]      __var protType   = __protocol & 0x0000FFFF;
[21:23:48.361]        // -> [protType <= 0x00000002]
[21:23:48.362]    </block>
[21:23:48.362]    <control if="protType == 1" while="" timeout="0" info="">
[21:23:48.362]      // if-block "protType == 1"
[21:23:48.362]        // =>  FALSE
[21:23:48.362]      // skip if-block "protType == 1"
[21:23:48.362]    </control>
[21:23:48.362]    <control if="protType == 2" while="" timeout="0" info="">
[21:23:48.362]      // if-block "protType == 2"
[21:23:48.362]        // =>  TRUE
[21:23:48.363]      <control if="isSWJ" while="" timeout="0" info="">
[21:23:48.363]        // if-block "isSWJ"
[21:23:48.363]          // =>  TRUE
[21:23:48.363]        <control if="hasDormant" while="" timeout="0" info="">
[21:23:48.363]          // if-block "hasDormant"
[21:23:48.363]            // =>  FALSE
[21:23:48.363]          // skip if-block "hasDormant"
[21:23:48.363]        </control>
[21:23:48.363]        <control if="!hasDormant" while="" timeout="0" info="">
[21:23:48.363]          // if-block "!hasDormant"
[21:23:48.363]            // =>  TRUE
[21:23:48.364]          <block atomic="false" info="">
[21:23:48.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:23:48.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:48.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:23:48.366]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:23:48.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:23:48.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:48.366]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:23:48.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:23:48.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:23:48.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:48.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:23:48.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:23:48.367]          </block>
[21:23:48.367]          // end if-block "!hasDormant"
[21:23:48.368]        </control>
[21:23:48.368]        // end if-block "isSWJ"
[21:23:48.368]      </control>
[21:23:48.368]      <control if="!isSWJ" while="" timeout="0" info="">
[21:23:48.368]        // if-block "!isSWJ"
[21:23:48.369]          // =>  FALSE
[21:23:48.369]        // skip if-block "!isSWJ"
[21:23:48.369]      </control>
[21:23:48.369]      <block atomic="false" info="">
[21:23:48.369]        ReadDP(0x0);
[21:23:48.370]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:23:48.370]      </block>
[21:23:48.370]      // end if-block "protType == 2"
[21:23:48.370]    </control>
[21:23:48.370]  </sequence>
[21:23:48.370]  
[21:23:51.263]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:23:51.263]  
[21:23:51.272]  <debugvars>
[21:23:51.272]    // Pre-defined
[21:23:51.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:51.272]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:23:51.272]    __dp=0x00000000
[21:23:51.273]    __ap=0x00000000
[21:23:51.273]    __traceout=0x00000000      (Trace Disabled)
[21:23:51.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:51.273]    __FlashAddr=0x00000000
[21:23:51.273]    __FlashLen=0x00000000
[21:23:51.273]    __FlashArg=0x00000000
[21:23:51.273]    __FlashOp=0x00000000
[21:23:51.273]    __Result=0x00000000
[21:23:51.273]  </debugvars>
[21:23:51.273]  
[21:23:51.273]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:23:51.274]    <block atomic="false" info="">
[21:23:51.274]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:23:51.274]        // -> [isSWJ <= 0x00000001]
[21:23:51.274]      __var hasDormant = __protocol & 0x00020000;
[21:23:51.274]        // -> [hasDormant <= 0x00000000]
[21:23:51.274]      __var protType   = __protocol & 0x0000FFFF;
[21:23:51.274]        // -> [protType <= 0x00000002]
[21:23:51.274]    </block>
[21:23:51.275]    <control if="protType == 1" while="" timeout="0" info="">
[21:23:51.275]      // if-block "protType == 1"
[21:23:51.275]        // =>  FALSE
[21:23:51.275]      // skip if-block "protType == 1"
[21:23:51.275]    </control>
[21:23:51.275]    <control if="protType == 2" while="" timeout="0" info="">
[21:23:51.275]      // if-block "protType == 2"
[21:23:51.275]        // =>  TRUE
[21:23:51.275]      <control if="isSWJ" while="" timeout="0" info="">
[21:23:51.275]        // if-block "isSWJ"
[21:23:51.275]          // =>  TRUE
[21:23:51.275]        <control if="hasDormant" while="" timeout="0" info="">
[21:23:51.275]          // if-block "hasDormant"
[21:23:51.275]            // =>  FALSE
[21:23:51.275]          // skip if-block "hasDormant"
[21:23:51.276]        </control>
[21:23:51.276]        <control if="!hasDormant" while="" timeout="0" info="">
[21:23:51.276]          // if-block "!hasDormant"
[21:23:51.276]            // =>  TRUE
[21:23:51.276]          <block atomic="false" info="">
[21:23:51.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:23:51.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:51.277]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:23:51.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:23:51.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:23:51.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:51.277]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:23:51.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:23:51.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:23:51.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:51.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:23:51.280]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:23:51.280]          </block>
[21:23:51.280]          // end if-block "!hasDormant"
[21:23:51.280]        </control>
[21:23:51.280]        // end if-block "isSWJ"
[21:23:51.280]      </control>
[21:23:51.280]      <control if="!isSWJ" while="" timeout="0" info="">
[21:23:51.280]        // if-block "!isSWJ"
[21:23:51.280]          // =>  FALSE
[21:23:51.280]        // skip if-block "!isSWJ"
[21:23:51.281]      </control>
[21:23:51.281]      <block atomic="false" info="">
[21:23:51.281]        ReadDP(0x0);
[21:23:51.281]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:23:51.281]      </block>
[21:23:51.281]      // end if-block "protType == 2"
[21:23:51.281]    </control>
[21:23:51.281]  </sequence>
[21:23:51.282]  
[21:23:51.282]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:23:51.282]  
[21:23:51.282]  <debugvars>
[21:23:51.282]    // Pre-defined
[21:23:51.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:51.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:23:51.283]    __dp=0x00000000
[21:23:51.283]    __ap=0x00000000
[21:23:51.283]    __traceout=0x00000000      (Trace Disabled)
[21:23:51.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:51.283]    __FlashAddr=0x00000000
[21:23:51.283]    __FlashLen=0x00000000
[21:23:51.283]    __FlashArg=0x00000000
[21:23:51.284]    __FlashOp=0x00000000
[21:23:51.284]    __Result=0x00000000
[21:23:51.284]  </debugvars>
[21:23:51.284]  
[21:23:51.284]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:23:51.284]    <block atomic="false" info="">
[21:23:51.284]      __var SW_DP_ABORT       = 0x0;
[21:23:51.284]        // -> [SW_DP_ABORT <= 0x00000000]
[21:23:51.284]      __var DP_CTRL_STAT      = 0x4;
[21:23:51.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:23:51.285]      __var DP_SELECT         = 0x8;
[21:23:51.285]        // -> [DP_SELECT <= 0x00000008]
[21:23:51.285]      __var powered_down      = 0;
[21:23:51.285]        // -> [powered_down <= 0x00000000]
[21:23:51.285]      WriteDP(DP_SELECT, 0x00000000);
[21:23:51.286]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:23:51.286]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:23:51.286]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:23:51.286]        // -> [powered_down <= 0x00000001]
[21:23:51.286]    </block>
[21:23:51.286]    <control if="powered_down" while="" timeout="0" info="">
[21:23:51.286]      // if-block "powered_down"
[21:23:51.286]        // =>  TRUE
[21:23:51.286]      <block atomic="false" info="">
[21:23:51.287]        Message(0, "Debug/System power-up request sent");
[21:23:51.289]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:23:51.290]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:23:51.290]      </block>
[21:23:51.290]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:23:51.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:23:51.291]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:23:51.291]        // while-condition  =>  FALSE
[21:23:51.291]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:23:51.291]      </control>
[21:23:51.291]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:23:51.292]        // if-block "(__protocol & 0xFFFF) == 1"
[21:23:51.292]          // =>  FALSE
[21:23:51.292]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:23:51.292]      </control>
[21:23:51.292]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:23:51.292]        // if-block "(__protocol & 0xFFFF) == 2"
[21:23:51.292]          // =>  TRUE
[21:23:51.292]        <block atomic="false" info="">
[21:23:51.292]          Message(0, "executing SWD power up");
[21:23:51.294]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:23:51.295]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:23:51.295]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:23:51.296]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:23:51.296]        </block>
[21:23:51.296]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:23:51.296]      </control>
[21:23:51.296]      // end if-block "powered_down"
[21:23:51.296]    </control>
[21:23:51.296]    <block atomic="false" info="">
[21:23:51.296]      __var DEBUG_PORT_VAL    = 0;
[21:23:51.296]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:23:51.296]      __var ACCESS_POINT_VAL  = 0;
[21:23:51.296]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:23:51.296]      __ap = 1; 
[21:23:51.296]        // -> [__ap <= 0x00000001]
[21:23:51.296]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:23:51.297]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:23:51.297]      __ap = 4;
[21:23:51.297]        // -> [__ap <= 0x00000004]
[21:23:51.297]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:23:51.300]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:23:51.300]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:23:51.300]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:23:51.302]    </block>
[21:23:51.302]    <block atomic="false" info="">
[21:23:51.302]      __var nReset = 0x80;
[21:23:51.302]        // -> [nReset <= 0x00000080]
[21:23:51.302]      __var canReadPins = 0;
[21:23:51.302]        // -> [canReadPins <= 0x00000000]
[21:23:51.302]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:23:51.303]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:23:51.303]        // -> [canReadPins <= 0x00000001]
[21:23:51.303]    </block>
[21:23:51.303]    <control if="" while="1" timeout="200" info="">
[21:23:51.303]      // while "1"  (timeout="200")
[21:23:51.303]      // while-condition  =>  TRUE
[21:23:51.303]      // while "1"  (timeout="200")
[21:23:51.303]      // while-condition  =>  TRUE
[21:23:51.304]      // while "1"  (timeout="200")
[21:23:51.304]      // while-condition  =>  TRUE
[21:23:51.304]      // while "1"  (timeout="200")
[21:23:51.304]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.305]      // while "1"  (timeout="200")
[21:23:51.305]      // while-condition  =>  TRUE
[21:23:51.306]      // while "1"  (timeout="200")
[21:23:51.306]      // while-condition  =>  TRUE
[21:23:51.306]      // while "1"  (timeout="200")
[21:23:51.306]      // while-condition  =>  TRUE
[21:23:51.306]      // while "1"  (timeout="200")
[21:23:51.306]      // while-condition  =>  TRUE
[21:23:51.306]      // while "1"  (timeout="200")
[21:23:51.306]      // while-condition  =>  TRUE
[21:23:51.306]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.307]      // while-condition  =>  TRUE
[21:23:51.307]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.308]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.308]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.308]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.308]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.308]      // while "1"  (timeout="200")
[21:23:51.308]      // while-condition  =>  TRUE
[21:23:51.309]      // while "1"  (timeout="200")
[21:23:51.309]      // while-condition  =>  TRUE
[21:23:51.309]      // while "1"  (timeout="200")
[21:23:51.309]      // while-condition  =>  TRUE
[21:23:51.309]      // while "1"  (timeout="200")
[21:23:51.309]      // while-condition  =>  TRUE
[21:23:51.309]      // while "1"  (timeout="200")
[21:23:51.310]      // while-condition  =>  TRUE
[21:23:51.310]      // while "1"  (timeout="200")
[21:23:51.310]      // while-condition  =>  TRUE
[21:23:51.310]      // while "1"  (timeout="200")
[21:23:51.310]      // while-condition  =>  TRUE
[21:23:51.310]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.311]      // while-condition  =>  TRUE
[21:23:51.311]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.312]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.312]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.312]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.312]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.312]      // while "1"  (timeout="200")
[21:23:51.312]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.313]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.313]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.313]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.313]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.313]      // while-condition  =>  TRUE
[21:23:51.313]      // while "1"  (timeout="200")
[21:23:51.314]      // while-condition  =>  TRUE
[21:23:51.314]      // while "1"  (timeout="200")
[21:23:51.314]      // while-condition  =>  TRUE
[21:23:51.314]      // while "1"  (timeout="200")
[21:23:51.314]      // while-condition  =>  TRUE
[21:23:51.314]      // while "1"  (timeout="200")
[21:23:51.314]      // while-condition  =>  TRUE
[21:23:51.315]      // while "1"  (timeout="200")
[21:23:51.315]      // while-condition  =>  TRUE
[21:23:51.315]      // while "1"  (timeout="200")
[21:23:51.315]      // while-condition  =>  TRUE
[21:23:51.315]      // while "1"  (timeout="200")
[21:23:51.315]      // while-condition  =>  TRUE
[21:23:51.315]      // while "1"  (timeout="200")
[21:23:51.315]      // while-condition  =>  TRUE
[21:23:51.315]      // while "1"  (timeout="200")
[21:23:51.315]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.316]      // while "1"  (timeout="200")
[21:23:51.316]      // while-condition  =>  TRUE
[21:23:51.317]      // while "1"  (timeout="200")
[21:23:51.317]      // while-condition  =>  TRUE
[21:23:51.317]      // while "1"  (timeout="200")
[21:23:51.317]      // while-condition  =>  TRUE
[21:23:51.317]      // while "1"  (timeout="200")
[21:23:51.317]      // while-condition  =>  TRUE
[21:23:51.317]      // while "1"  (timeout="200")
[21:23:51.317]      // while-condition  =>  TRUE
[21:23:51.318]      // while "1"  (timeout="200")
[21:23:51.318]      // while-condition  =>  TRUE
[21:23:51.318]      // while "1"  (timeout="200")
[21:23:51.318]      // while-condition  =>  TRUE
[21:23:51.318]      // while "1"  (timeout="200")
[21:23:51.318]      // while-condition  =>  TRUE
[21:23:51.319]      // while "1"  (timeout="200")
[21:23:51.319]      // while  =>  TIMEOUT
[21:23:51.319]      // end while "1"
[21:23:51.319]    </control>
[21:23:51.319]    <control if="canReadPins" while="" timeout="0" info="">
[21:23:51.319]      // if-block "canReadPins"
[21:23:51.319]        // =>  TRUE
[21:23:51.319]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:23:51.319]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:23:51.320]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:23:51.320]        // while-condition  =>  FALSE
[21:23:51.320]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:23:51.320]      </control>
[21:23:51.320]      // end if-block "canReadPins"
[21:23:51.320]    </control>
[21:23:51.320]    <control if="!canReadPins" while="" timeout="0" info="">
[21:23:51.320]      // if-block "!canReadPins"
[21:23:51.321]        // =>  FALSE
[21:23:51.321]      // skip if-block "!canReadPins"
[21:23:51.321]    </control>
[21:23:51.321]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:23:51.321]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:23:51.321]        // =>  TRUE
[21:23:51.322]      <block atomic="false" info="">
[21:23:51.322]        WriteAP(0x00, 0x190008);
[21:23:51.322]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:23:51.322]        WriteAP(0xF0, 0x01);
[21:23:51.323]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:23:51.323]      </block>
[21:23:51.323]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:23:51.323]    </control>
[21:23:51.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:23:51.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:23:51.325]        // =>  FALSE
[21:23:51.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:23:51.325]    </control>
[21:23:51.325]    <block atomic="false" info="">
[21:23:51.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:23:51.327]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:23:51.327]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:23:51.327]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:23:51.328]      __ap = 0; //lets make sure we reset the access point selection
[21:23:51.329]        // -> [__ap <= 0x00000000]
[21:23:51.329]    </block>
[21:23:51.329]  </sequence>
[21:23:51.329]  
[21:23:51.335]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:23:51.335]  
[21:23:51.335]  <debugvars>
[21:23:51.335]    // Pre-defined
[21:23:51.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:51.336]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:23:51.336]    __dp=0x00000000
[21:23:51.336]    __ap=0x00000000
[21:23:51.336]    __traceout=0x00000000      (Trace Disabled)
[21:23:51.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:51.337]    __FlashAddr=0x00000000
[21:23:51.337]    __FlashLen=0x00000000
[21:23:51.337]    __FlashArg=0x00000000
[21:23:51.337]    __FlashOp=0x00000000
[21:23:51.337]    __Result=0x00000000
[21:23:51.337]  </debugvars>
[21:23:51.337]  
[21:23:51.337]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:23:51.337]    <block atomic="false" info="">
[21:23:51.337]      __var deviceID = 0;
[21:23:51.337]        // -> [deviceID <= 0x00000000]
[21:23:51.337]      __var version = 0;
[21:23:51.338]        // -> [version <= 0x00000000]
[21:23:51.338]      __var partNum = 0;
[21:23:51.338]        // -> [partNum <= 0x00000000]
[21:23:51.338]      __var manuf = 0;
[21:23:51.338]        // -> [manuf <= 0x00000000]
[21:23:51.338]      __var isMSPM0G1X0X_G3X0X = 0;
[21:23:51.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:23:51.338]      __var isProduction = 0;
[21:23:51.338]        // -> [isProduction <= 0x00000000]
[21:23:51.338]      __var continueId = 0;
[21:23:51.338]        // -> [continueId <= 0x00000000]
[21:23:51.338]      deviceID =   Read32(0x41C40004);
[21:23:51.340]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:23:51.340]        // -> [deviceID <= 0x2BB8802F]
[21:23:51.341]      version = deviceID >> 28;
[21:23:51.341]        // -> [version <= 0x00000002]
[21:23:51.341]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:23:51.341]        // -> [partNum <= 0x0000BB88]
[21:23:51.341]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:23:51.341]        // -> [manuf <= 0x00000017]
[21:23:51.341]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:23:51.341]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:23:51.341]      isProduction = (version > 0);
[21:23:51.341]        // -> [isProduction <= 0x00000001]
[21:23:51.341]    </block>
[21:23:51.341]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:23:51.341]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:23:51.342]        // =>  FALSE
[21:23:51.342]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:23:51.342]    </control>
[21:23:51.342]    <control if="continueId == 4" while="" timeout="0" info="">
[21:23:51.342]      // if-block "continueId == 4"
[21:23:51.342]        // =>  FALSE
[21:23:51.342]      // skip if-block "continueId == 4"
[21:23:51.342]    </control>
[21:23:51.342]    <control if="!isProduction" while="" timeout="0" info="">
[21:23:51.342]      // if-block "!isProduction"
[21:23:51.342]        // =>  FALSE
[21:23:51.342]      // skip if-block "!isProduction"
[21:23:51.342]    </control>
[21:23:51.342]  </sequence>
[21:23:51.342]  
[21:23:54.815]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:23:54.815]  
[21:23:54.815]  <debugvars>
[21:23:54.815]    // Pre-defined
[21:23:54.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:54.816]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:23:54.816]    __dp=0x00000000
[21:23:54.816]    __ap=0x00000000
[21:23:54.816]    __traceout=0x00000000      (Trace Disabled)
[21:23:54.816]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:54.816]    __FlashAddr=0x00000000
[21:23:54.816]    __FlashLen=0x00000000
[21:23:54.816]    __FlashArg=0x00000000
[21:23:54.816]    __FlashOp=0x00000000
[21:23:54.817]    __Result=0x00000000
[21:23:54.817]  </debugvars>
[21:23:54.817]  
[21:23:54.817]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:23:54.817]    <block atomic="false" info="">
[21:23:54.817]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:23:54.817]        // -> [isSWJ <= 0x00000001]
[21:23:54.817]      __var hasDormant = __protocol & 0x00020000;
[21:23:54.817]        // -> [hasDormant <= 0x00000000]
[21:23:54.817]      __var protType   = __protocol & 0x0000FFFF;
[21:23:54.817]        // -> [protType <= 0x00000002]
[21:23:54.819]    </block>
[21:23:54.819]    <control if="protType == 1" while="" timeout="0" info="">
[21:23:54.819]      // if-block "protType == 1"
[21:23:54.819]        // =>  FALSE
[21:23:54.819]      // skip if-block "protType == 1"
[21:23:54.819]    </control>
[21:23:54.819]    <control if="protType == 2" while="" timeout="0" info="">
[21:23:54.819]      // if-block "protType == 2"
[21:23:54.819]        // =>  TRUE
[21:23:54.819]      <control if="isSWJ" while="" timeout="0" info="">
[21:23:54.819]        // if-block "isSWJ"
[21:23:54.820]          // =>  TRUE
[21:23:54.820]        <control if="hasDormant" while="" timeout="0" info="">
[21:23:54.820]          // if-block "hasDormant"
[21:23:54.820]            // =>  FALSE
[21:23:54.820]          // skip if-block "hasDormant"
[21:23:54.820]        </control>
[21:23:54.820]        <control if="!hasDormant" while="" timeout="0" info="">
[21:23:54.820]          // if-block "!hasDormant"
[21:23:54.820]            // =>  TRUE
[21:23:54.820]          <block atomic="false" info="">
[21:23:54.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:23:54.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:54.821]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:23:54.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:23:54.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:23:54.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:54.822]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:23:54.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:23:54.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:23:54.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:23:54.823]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:23:54.823]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:23:54.823]          </block>
[21:23:54.823]          // end if-block "!hasDormant"
[21:23:54.823]        </control>
[21:23:54.823]        // end if-block "isSWJ"
[21:23:54.824]      </control>
[21:23:54.824]      <control if="!isSWJ" while="" timeout="0" info="">
[21:23:54.824]        // if-block "!isSWJ"
[21:23:54.824]          // =>  FALSE
[21:23:54.824]        // skip if-block "!isSWJ"
[21:23:54.824]      </control>
[21:23:54.824]      <block atomic="false" info="">
[21:23:54.824]        ReadDP(0x0);
[21:23:54.825]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:23:54.825]      </block>
[21:23:54.825]      // end if-block "protType == 2"
[21:23:54.825]    </control>
[21:23:54.826]  </sequence>
[21:23:54.826]  
[21:23:54.826]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:23:54.826]  
[21:23:54.826]  <debugvars>
[21:23:54.826]    // Pre-defined
[21:23:54.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:54.826]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:23:54.826]    __dp=0x00000000
[21:23:54.826]    __ap=0x00000000
[21:23:54.827]    __traceout=0x00000000      (Trace Disabled)
[21:23:54.827]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:54.827]    __FlashAddr=0x00000000
[21:23:54.827]    __FlashLen=0x00000000
[21:23:54.827]    __FlashArg=0x00000000
[21:23:54.827]    __FlashOp=0x00000000
[21:23:54.827]    __Result=0x00000000
[21:23:54.827]  </debugvars>
[21:23:54.827]  
[21:23:54.827]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:23:54.827]    <block atomic="false" info="">
[21:23:54.827]      __var SW_DP_ABORT       = 0x0;
[21:23:54.827]        // -> [SW_DP_ABORT <= 0x00000000]
[21:23:54.827]      __var DP_CTRL_STAT      = 0x4;
[21:23:54.827]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:23:54.827]      __var DP_SELECT         = 0x8;
[21:23:54.827]        // -> [DP_SELECT <= 0x00000008]
[21:23:54.829]      __var powered_down      = 0;
[21:23:54.829]        // -> [powered_down <= 0x00000000]
[21:23:54.829]      WriteDP(DP_SELECT, 0x00000000);
[21:23:54.830]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:23:54.830]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:23:54.830]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:23:54.830]        // -> [powered_down <= 0x00000001]
[21:23:54.831]    </block>
[21:23:54.831]    <control if="powered_down" while="" timeout="0" info="">
[21:23:54.831]      // if-block "powered_down"
[21:23:54.831]        // =>  TRUE
[21:23:54.831]      <block atomic="false" info="">
[21:23:54.831]        Message(0, "Debug/System power-up request sent");
[21:23:54.833]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:23:54.833]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:23:54.833]      </block>
[21:23:54.833]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:23:54.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:23:54.834]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:23:54.834]        // while-condition  =>  FALSE
[21:23:54.834]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:23:54.834]      </control>
[21:23:54.834]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:23:54.834]        // if-block "(__protocol & 0xFFFF) == 1"
[21:23:54.834]          // =>  FALSE
[21:23:54.834]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:23:54.834]      </control>
[21:23:54.834]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:23:54.834]        // if-block "(__protocol & 0xFFFF) == 2"
[21:23:54.835]          // =>  TRUE
[21:23:54.835]        <block atomic="false" info="">
[21:23:54.835]          Message(0, "executing SWD power up");
[21:23:54.837]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:23:54.837]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:23:54.837]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:23:54.838]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:23:54.838]        </block>
[21:23:54.838]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:23:54.838]      </control>
[21:23:54.838]      // end if-block "powered_down"
[21:23:54.838]    </control>
[21:23:54.839]    <block atomic="false" info="">
[21:23:54.839]      __var DEBUG_PORT_VAL    = 0;
[21:23:54.839]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:23:54.839]      __var ACCESS_POINT_VAL  = 0;
[21:23:54.839]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:23:54.839]      __ap = 1; 
[21:23:54.839]        // -> [__ap <= 0x00000001]
[21:23:54.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:23:54.841]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:23:54.841]      __ap = 4;
[21:23:54.841]        // -> [__ap <= 0x00000004]
[21:23:54.841]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:23:54.842]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:23:54.842]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:23:54.842]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:23:54.843]    </block>
[21:23:54.844]    <block atomic="false" info="">
[21:23:54.844]      __var nReset = 0x80;
[21:23:54.844]        // -> [nReset <= 0x00000080]
[21:23:54.844]      __var canReadPins = 0;
[21:23:54.844]        // -> [canReadPins <= 0x00000000]
[21:23:54.845]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:23:54.845]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:23:54.845]        // -> [canReadPins <= 0x00000001]
[21:23:54.845]    </block>
[21:23:54.845]    <control if="" while="1" timeout="200" info="">
[21:23:54.845]      // while "1"  (timeout="200")
[21:23:54.845]      // while-condition  =>  TRUE
[21:23:54.845]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.847]      // while-condition  =>  TRUE
[21:23:54.847]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.848]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.848]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.848]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.848]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.848]      // while "1"  (timeout="200")
[21:23:54.848]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.849]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.849]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.849]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.849]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.849]      // while-condition  =>  TRUE
[21:23:54.849]      // while "1"  (timeout="200")
[21:23:54.850]      // while-condition  =>  TRUE
[21:23:54.850]      // while "1"  (timeout="200")
[21:23:54.850]      // while  =>  TIMEOUT
[21:23:54.850]      // end while "1"
[21:23:54.850]    </control>
[21:23:54.850]    <control if="canReadPins" while="" timeout="0" info="">
[21:23:54.850]      // if-block "canReadPins"
[21:23:54.850]        // =>  TRUE
[21:23:54.850]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:23:54.850]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:23:54.851]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:23:54.851]        // while-condition  =>  FALSE
[21:23:54.851]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:23:54.851]      </control>
[21:23:54.851]      // end if-block "canReadPins"
[21:23:54.851]    </control>
[21:23:54.851]    <control if="!canReadPins" while="" timeout="0" info="">
[21:23:54.852]      // if-block "!canReadPins"
[21:23:54.852]        // =>  FALSE
[21:23:54.852]      // skip if-block "!canReadPins"
[21:23:54.852]    </control>
[21:23:54.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:23:54.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:23:54.852]        // =>  TRUE
[21:23:54.852]      <block atomic="false" info="">
[21:23:54.852]        WriteAP(0x00, 0x190008);
[21:23:54.853]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:23:54.853]        WriteAP(0xF0, 0x01);
[21:23:54.854]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:23:54.855]      </block>
[21:23:54.855]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:23:54.855]    </control>
[21:23:54.855]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:23:54.855]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:23:54.855]        // =>  FALSE
[21:23:54.855]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:23:54.855]    </control>
[21:23:54.855]    <block atomic="false" info="">
[21:23:54.855]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:23:54.857]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:23:54.858]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:23:54.858]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:23:54.859]      __ap = 0; //lets make sure we reset the access point selection
[21:23:54.859]        // -> [__ap <= 0x00000000]
[21:23:54.859]    </block>
[21:23:54.860]  </sequence>
[21:23:54.860]  
[21:23:54.866]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:23:54.866]  
[21:23:54.866]  <debugvars>
[21:23:54.866]    // Pre-defined
[21:23:54.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:23:54.867]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:23:54.867]    __dp=0x00000000
[21:23:54.867]    __ap=0x00000000
[21:23:54.867]    __traceout=0x00000000      (Trace Disabled)
[21:23:54.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:23:54.867]    __FlashAddr=0x00000000
[21:23:54.867]    __FlashLen=0x00000000
[21:23:54.867]    __FlashArg=0x00000000
[21:23:54.867]    __FlashOp=0x00000000
[21:23:54.867]    __Result=0x00000000
[21:23:54.867]  </debugvars>
[21:23:54.867]  
[21:23:54.867]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:23:54.868]    <block atomic="false" info="">
[21:23:54.868]      __var deviceID = 0;
[21:23:54.868]        // -> [deviceID <= 0x00000000]
[21:23:54.868]      __var version = 0;
[21:23:54.868]        // -> [version <= 0x00000000]
[21:23:54.868]      __var partNum = 0;
[21:23:54.869]        // -> [partNum <= 0x00000000]
[21:23:54.869]      __var manuf = 0;
[21:23:54.869]        // -> [manuf <= 0x00000000]
[21:23:54.869]      __var isMSPM0G1X0X_G3X0X = 0;
[21:23:54.869]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:23:54.869]      __var isProduction = 0;
[21:23:54.869]        // -> [isProduction <= 0x00000000]
[21:23:54.869]      __var continueId = 0;
[21:23:54.869]        // -> [continueId <= 0x00000000]
[21:23:54.869]      deviceID =   Read32(0x41C40004);
[21:23:54.871]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:23:54.871]        // -> [deviceID <= 0x2BB8802F]
[21:23:54.871]      version = deviceID >> 28;
[21:23:54.871]        // -> [version <= 0x00000002]
[21:23:54.871]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:23:54.871]        // -> [partNum <= 0x0000BB88]
[21:23:54.871]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:23:54.871]        // -> [manuf <= 0x00000017]
[21:23:54.872]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:23:54.872]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:23:54.872]      isProduction = (version > 0);
[21:23:54.872]        // -> [isProduction <= 0x00000001]
[21:23:54.872]    </block>
[21:23:54.872]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:23:54.872]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:23:54.872]        // =>  FALSE
[21:23:54.872]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:23:54.872]    </control>
[21:23:54.872]    <control if="continueId == 4" while="" timeout="0" info="">
[21:23:54.872]      // if-block "continueId == 4"
[21:23:54.873]        // =>  FALSE
[21:23:54.873]      // skip if-block "continueId == 4"
[21:23:54.873]    </control>
[21:23:54.873]    <control if="!isProduction" while="" timeout="0" info="">
[21:23:54.873]      // if-block "!isProduction"
[21:23:54.873]        // =>  FALSE
[21:23:54.873]      // skip if-block "!isProduction"
[21:23:54.873]    </control>
[21:23:54.873]  </sequence>
[21:23:54.873]  
[21:24:55.799]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:24:55.799]  
[21:24:55.799]  <debugvars>
[21:24:55.800]    // Pre-defined
[21:24:55.800]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:55.800]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:24:55.800]    __dp=0x00000000
[21:24:55.800]    __ap=0x00000000
[21:24:55.800]    __traceout=0x00000000      (Trace Disabled)
[21:24:55.800]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:55.800]    __FlashAddr=0x00000000
[21:24:55.800]    __FlashLen=0x00000000
[21:24:55.800]    __FlashArg=0x00000000
[21:24:55.800]    __FlashOp=0x00000000
[21:24:55.800]    __Result=0x00000000
[21:24:55.800]  </debugvars>
[21:24:55.800]  
[21:24:55.800]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:24:55.801]    <block atomic="false" info="">
[21:24:55.801]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:24:55.801]        // -> [isSWJ <= 0x00000001]
[21:24:55.801]      __var hasDormant = __protocol & 0x00020000;
[21:24:55.801]        // -> [hasDormant <= 0x00000000]
[21:24:55.801]      __var protType   = __protocol & 0x0000FFFF;
[21:24:55.801]        // -> [protType <= 0x00000002]
[21:24:55.801]    </block>
[21:24:55.801]    <control if="protType == 1" while="" timeout="0" info="">
[21:24:55.801]      // if-block "protType == 1"
[21:24:55.801]        // =>  FALSE
[21:24:55.802]      // skip if-block "protType == 1"
[21:24:55.802]    </control>
[21:24:55.802]    <control if="protType == 2" while="" timeout="0" info="">
[21:24:55.802]      // if-block "protType == 2"
[21:24:55.802]        // =>  TRUE
[21:24:55.802]      <control if="isSWJ" while="" timeout="0" info="">
[21:24:55.802]        // if-block "isSWJ"
[21:24:55.802]          // =>  TRUE
[21:24:55.802]        <control if="hasDormant" while="" timeout="0" info="">
[21:24:55.803]          // if-block "hasDormant"
[21:24:55.803]            // =>  FALSE
[21:24:55.803]          // skip if-block "hasDormant"
[21:24:55.803]        </control>
[21:24:55.803]        <control if="!hasDormant" while="" timeout="0" info="">
[21:24:55.803]          // if-block "!hasDormant"
[21:24:55.803]            // =>  TRUE
[21:24:55.803]          <block atomic="false" info="">
[21:24:55.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:24:56.814]  
[21:24:56.814]  !!! E320 : DAP access error
[21:24:56.814]  
[21:24:56.814]          </block>
[21:24:56.815]          // end if-block "!hasDormant"
[21:24:56.815]        </control>
[21:24:56.815]        // end if-block "isSWJ"
[21:24:56.815]      </control>
[21:24:56.815]      // end if-block "protType == 2"
[21:24:56.815]    </control>
[21:24:56.815]  </sequence>
[21:24:56.815]  
[21:24:56.875]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:24:56.875]  
[21:24:56.875]  <debugvars>
[21:24:56.875]    // Pre-defined
[21:24:56.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:56.875]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:24:56.875]    __dp=0x00000000
[21:24:56.875]    __ap=0x00000000
[21:24:56.875]    __traceout=0x00000000      (Trace Disabled)
[21:24:56.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:56.877]    __FlashAddr=0x00000000
[21:24:56.877]    __FlashLen=0x00000000
[21:24:56.877]    __FlashArg=0x00000000
[21:24:56.877]    __FlashOp=0x00000000
[21:24:56.877]    __Result=0x00000000
[21:24:56.877]  </debugvars>
[21:24:56.877]  
[21:24:56.877]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:24:56.877]    <block atomic="false" info="">
[21:24:56.877]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:24:56.878]        // -> [isSWJ <= 0x00000001]
[21:24:56.878]      __var hasDormant = __protocol & 0x00020000;
[21:24:56.878]        // -> [hasDormant <= 0x00000000]
[21:24:56.878]      __var protType   = __protocol & 0x0000FFFF;
[21:24:56.878]        // -> [protType <= 0x00000002]
[21:24:56.878]    </block>
[21:24:56.878]    <control if="protType == 1" while="" timeout="0" info="">
[21:24:56.878]      // if-block "protType == 1"
[21:24:56.878]        // =>  FALSE
[21:24:56.878]      // skip if-block "protType == 1"
[21:24:56.879]    </control>
[21:24:56.879]    <control if="protType == 2" while="" timeout="0" info="">
[21:24:56.879]      // if-block "protType == 2"
[21:24:56.879]        // =>  TRUE
[21:24:56.879]      <control if="isSWJ" while="" timeout="0" info="">
[21:24:56.879]        // if-block "isSWJ"
[21:24:56.879]          // =>  TRUE
[21:24:56.879]        <control if="hasDormant" while="" timeout="0" info="">
[21:24:56.879]          // if-block "hasDormant"
[21:24:56.879]            // =>  FALSE
[21:24:56.879]          // skip if-block "hasDormant"
[21:24:56.880]        </control>
[21:24:56.880]        <control if="!hasDormant" while="" timeout="0" info="">
[21:24:56.880]          // if-block "!hasDormant"
[21:24:56.880]            // =>  TRUE
[21:24:56.880]          <block atomic="false" info="">
[21:24:56.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:24:57.882]  
[21:24:57.882]  !!! E320 : DAP access error
[21:24:57.882]  
[21:24:57.891]          </block>
[21:24:57.891]          // end if-block "!hasDormant"
[21:24:57.892]        </control>
[21:24:57.892]        // end if-block "isSWJ"
[21:24:57.892]      </control>
[21:24:57.892]      // end if-block "protType == 2"
[21:24:57.892]    </control>
[21:24:57.892]  </sequence>
[21:24:57.892]  
[21:24:57.959]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:24:57.959]  
[21:24:57.959]  <debugvars>
[21:24:57.959]    // Pre-defined
[21:24:57.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:57.959]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:24:57.960]    __dp=0x00000000
[21:24:57.960]    __ap=0x00000000
[21:24:57.960]    __traceout=0x00000000      (Trace Disabled)
[21:24:57.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:57.960]    __FlashAddr=0x00000000
[21:24:57.960]    __FlashLen=0x00000000
[21:24:57.960]    __FlashArg=0x00000000
[21:24:57.960]    __FlashOp=0x00000000
[21:24:57.960]    __Result=0x00000000
[21:24:57.960]  </debugvars>
[21:24:57.961]  
[21:24:57.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:24:57.961]    <block atomic="false" info="">
[21:24:57.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:24:57.961]        // -> [isSWJ <= 0x00000001]
[21:24:57.961]      __var hasDormant = __protocol & 0x00020000;
[21:24:57.961]        // -> [hasDormant <= 0x00000000]
[21:24:57.961]      __var protType   = __protocol & 0x0000FFFF;
[21:24:57.961]        // -> [protType <= 0x00000002]
[21:24:57.961]    </block>
[21:24:57.961]    <control if="protType == 1" while="" timeout="0" info="">
[21:24:57.962]      // if-block "protType == 1"
[21:24:57.962]        // =>  FALSE
[21:24:57.962]      // skip if-block "protType == 1"
[21:24:57.962]    </control>
[21:24:57.962]    <control if="protType == 2" while="" timeout="0" info="">
[21:24:57.962]      // if-block "protType == 2"
[21:24:57.962]        // =>  TRUE
[21:24:57.962]      <control if="isSWJ" while="" timeout="0" info="">
[21:24:57.962]        // if-block "isSWJ"
[21:24:57.962]          // =>  TRUE
[21:24:57.962]        <control if="hasDormant" while="" timeout="0" info="">
[21:24:57.963]          // if-block "hasDormant"
[21:24:57.963]            // =>  FALSE
[21:24:57.963]          // skip if-block "hasDormant"
[21:24:57.963]        </control>
[21:24:57.963]        <control if="!hasDormant" while="" timeout="0" info="">
[21:24:57.963]          // if-block "!hasDormant"
[21:24:57.963]            // =>  TRUE
[21:24:57.963]          <block atomic="false" info="">
[21:24:57.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:24:58.964]  
[21:24:58.964]  !!! E320 : DAP access error
[21:24:58.964]  
[21:24:58.964]          </block>
[21:24:58.964]          // end if-block "!hasDormant"
[21:24:58.964]        </control>
[21:24:58.964]        // end if-block "isSWJ"
[21:24:58.964]      </control>
[21:24:58.966]      // end if-block "protType == 2"
[21:24:58.966]    </control>
[21:24:58.966]  </sequence>
[21:24:58.966]  
[21:24:59.024]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:24:59.024]  
[21:24:59.024]  <debugvars>
[21:24:59.024]    // Pre-defined
[21:24:59.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:59.024]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:24:59.024]    __dp=0x00000000
[21:24:59.024]    __ap=0x00000000
[21:24:59.024]    __traceout=0x00000000      (Trace Disabled)
[21:24:59.025]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:59.025]    __FlashAddr=0x00000000
[21:24:59.025]    __FlashLen=0x00000000
[21:24:59.025]    __FlashArg=0x00000000
[21:24:59.025]    __FlashOp=0x00000000
[21:24:59.025]    __Result=0x00000000
[21:24:59.025]  </debugvars>
[21:24:59.025]  
[21:24:59.025]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:24:59.025]    <block atomic="false" info="">
[21:24:59.026]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:24:59.026]        // -> [isSWJ <= 0x00000001]
[21:24:59.026]      __var hasDormant = __protocol & 0x00020000;
[21:24:59.026]        // -> [hasDormant <= 0x00000000]
[21:24:59.026]      __var protType   = __protocol & 0x0000FFFF;
[21:24:59.026]        // -> [protType <= 0x00000002]
[21:24:59.026]    </block>
[21:24:59.026]    <control if="protType == 1" while="" timeout="0" info="">
[21:24:59.026]      // if-block "protType == 1"
[21:24:59.026]        // =>  FALSE
[21:24:59.026]      // skip if-block "protType == 1"
[21:24:59.026]    </control>
[21:24:59.027]    <control if="protType == 2" while="" timeout="0" info="">
[21:24:59.027]      // if-block "protType == 2"
[21:24:59.027]        // =>  TRUE
[21:24:59.027]      <control if="isSWJ" while="" timeout="0" info="">
[21:24:59.027]        // if-block "isSWJ"
[21:24:59.027]          // =>  TRUE
[21:24:59.027]        <control if="hasDormant" while="" timeout="0" info="">
[21:24:59.027]          // if-block "hasDormant"
[21:24:59.027]            // =>  FALSE
[21:24:59.027]          // skip if-block "hasDormant"
[21:24:59.027]        </control>
[21:24:59.027]        <control if="!hasDormant" while="" timeout="0" info="">
[21:24:59.027]          // if-block "!hasDormant"
[21:24:59.027]            // =>  TRUE
[21:24:59.027]          <block atomic="false" info="">
[21:24:59.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:25:00.029]  
[21:25:00.029]  !!! E320 : DAP access error
[21:25:00.029]  
[21:25:00.036]          </block>
[21:25:00.036]          // end if-block "!hasDormant"
[21:25:00.036]        </control>
[21:25:00.036]        // end if-block "isSWJ"
[21:25:00.036]      </control>
[21:25:00.036]      // end if-block "protType == 2"
[21:25:00.037]    </control>
[21:25:00.037]  </sequence>
[21:25:00.037]  
[21:25:00.091]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:25:00.091]  
[21:25:00.091]  <debugvars>
[21:25:00.091]    // Pre-defined
[21:25:00.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:25:00.092]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:25:00.093]    __dp=0x00000000
[21:25:00.093]    __ap=0x00000000
[21:25:00.093]    __traceout=0x00000000      (Trace Disabled)
[21:25:00.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:25:00.093]    __FlashAddr=0x00000000
[21:25:00.093]    __FlashLen=0x00000000
[21:25:00.093]    __FlashArg=0x00000000
[21:25:00.094]    __FlashOp=0x00000000
[21:25:00.094]    __Result=0x00000000
[21:25:00.094]  </debugvars>
[21:25:00.094]  
[21:25:00.094]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:25:00.094]    <block atomic="false" info="">
[21:25:00.094]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:25:00.094]        // -> [isSWJ <= 0x00000001]
[21:25:00.094]      __var hasDormant = __protocol & 0x00020000;
[21:25:00.094]        // -> [hasDormant <= 0x00000000]
[21:25:00.095]      __var protType   = __protocol & 0x0000FFFF;
[21:25:00.095]        // -> [protType <= 0x00000002]
[21:25:00.095]    </block>
[21:25:00.095]    <control if="protType == 1" while="" timeout="0" info="">
[21:25:00.095]      // if-block "protType == 1"
[21:25:00.095]        // =>  FALSE
[21:25:00.095]      // skip if-block "protType == 1"
[21:25:00.095]    </control>
[21:25:00.095]    <control if="protType == 2" while="" timeout="0" info="">
[21:25:00.095]      // if-block "protType == 2"
[21:25:00.096]        // =>  TRUE
[21:25:00.096]      <control if="isSWJ" while="" timeout="0" info="">
[21:25:00.096]        // if-block "isSWJ"
[21:25:00.096]          // =>  TRUE
[21:25:00.096]        <control if="hasDormant" while="" timeout="0" info="">
[21:25:00.096]          // if-block "hasDormant"
[21:25:00.096]            // =>  FALSE
[21:25:00.097]          // skip if-block "hasDormant"
[21:25:00.097]        </control>
[21:25:00.097]        <control if="!hasDormant" while="" timeout="0" info="">
[21:25:00.097]          // if-block "!hasDormant"
[21:25:00.097]            // =>  TRUE
[21:25:00.097]          <block atomic="false" info="">
[21:25:00.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:25:01.108]  
[21:25:01.108]  !!! E320 : DAP access error
[21:25:01.108]  
[21:25:01.116]          </block>
[21:25:01.116]          // end if-block "!hasDormant"
[21:25:01.116]        </control>
[21:25:01.116]        // end if-block "isSWJ"
[21:25:01.116]      </control>
[21:25:01.116]      // end if-block "protType == 2"
[21:25:01.116]    </control>
[21:25:01.117]  </sequence>
[21:25:01.117]  
[21:25:01.170]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:25:01.170]  
[21:25:01.170]  <debugvars>
[21:25:01.170]    // Pre-defined
[21:25:01.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:25:01.171]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:25:01.171]    __dp=0x00000000
[21:25:01.171]    __ap=0x00000000
[21:25:01.171]    __traceout=0x00000000      (Trace Disabled)
[21:25:01.171]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:25:01.171]    __FlashAddr=0x00000000
[21:25:01.171]    __FlashLen=0x00000000
[21:25:01.171]    __FlashArg=0x00000000
[21:25:01.173]    __FlashOp=0x00000000
[21:25:01.173]    __Result=0x00000000
[21:25:01.173]  </debugvars>
[21:25:01.173]  
[21:25:01.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:25:01.173]    <block atomic="false" info="">
[21:25:01.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:25:01.173]        // -> [isSWJ <= 0x00000001]
[21:25:01.173]      __var hasDormant = __protocol & 0x00020000;
[21:25:01.174]        // -> [hasDormant <= 0x00000000]
[21:25:01.174]      __var protType   = __protocol & 0x0000FFFF;
[21:25:01.174]        // -> [protType <= 0x00000002]
[21:25:01.174]    </block>
[21:25:01.174]    <control if="protType == 1" while="" timeout="0" info="">
[21:25:01.174]      // if-block "protType == 1"
[21:25:01.175]        // =>  FALSE
[21:25:01.175]      // skip if-block "protType == 1"
[21:25:01.175]    </control>
[21:25:01.175]    <control if="protType == 2" while="" timeout="0" info="">
[21:25:01.175]      // if-block "protType == 2"
[21:25:01.176]        // =>  TRUE
[21:25:01.176]      <control if="isSWJ" while="" timeout="0" info="">
[21:25:01.176]        // if-block "isSWJ"
[21:25:01.176]          // =>  TRUE
[21:25:01.176]        <control if="hasDormant" while="" timeout="0" info="">
[21:25:01.176]          // if-block "hasDormant"
[21:25:01.176]            // =>  FALSE
[21:25:01.176]          // skip if-block "hasDormant"
[21:25:01.176]        </control>
[21:25:01.177]        <control if="!hasDormant" while="" timeout="0" info="">
[21:25:01.177]          // if-block "!hasDormant"
[21:25:01.177]            // =>  TRUE
[21:25:01.177]          <block atomic="false" info="">
[21:25:01.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:25:03.135]  
[21:25:03.135]  !!! E320 : DAP access error
[21:25:03.135]  
[21:25:03.143]          </block>
[21:25:03.143]          // end if-block "!hasDormant"
[21:25:03.143]        </control>
[21:25:03.143]        // end if-block "isSWJ"
[21:25:03.143]      </control>
[21:25:03.143]      // end if-block "protType == 2"
[21:25:03.143]    </control>
[21:25:03.143]  </sequence>
[21:25:03.143]  
[21:25:03.408]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[21:25:03.408]  
[21:25:03.408]  <debugvars>
[21:25:03.408]    // Pre-defined
[21:25:03.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:25:03.408]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:25:03.408]    __dp=0x00000000
[21:25:03.408]    __ap=0x00000000
[21:25:03.409]    __traceout=0x00000000      (Trace Disabled)
[21:25:03.409]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:25:03.409]    __FlashAddr=0x00000000
[21:25:03.409]    __FlashLen=0x00000000
[21:25:03.409]    __FlashArg=0x00000000
[21:25:03.409]    __FlashOp=0x00000000
[21:25:03.409]    __Result=0x00000000
[21:25:03.410]  </debugvars>
[21:25:03.410]  
[21:25:03.410]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:25:03.410]    <block atomic="false" info="">
[21:25:03.410]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:25:03.410]        // -> [isSWJ <= 0x00000001]
[21:25:03.410]      __var hasDormant = __protocol & 0x00020000;
[21:25:03.410]        // -> [hasDormant <= 0x00000000]
[21:25:03.410]      __var protType   = __protocol & 0x0000FFFF;
[21:25:03.411]        // -> [protType <= 0x00000002]
[21:25:03.411]    </block>
[21:25:03.411]    <control if="protType == 1" while="" timeout="0" info="">
[21:25:03.411]      // if-block "protType == 1"
[21:25:03.411]        // =>  FALSE
[21:25:03.411]      // skip if-block "protType == 1"
[21:25:03.411]    </control>
[21:25:03.411]    <control if="protType == 2" while="" timeout="0" info="">
[21:25:03.411]      // if-block "protType == 2"
[21:25:03.411]        // =>  TRUE
[21:25:03.412]      <control if="isSWJ" while="" timeout="0" info="">
[21:25:03.412]        // if-block "isSWJ"
[21:25:03.412]          // =>  TRUE
[21:25:03.412]        <control if="hasDormant" while="" timeout="0" info="">
[21:25:03.412]          // if-block "hasDormant"
[21:25:03.412]            // =>  FALSE
[21:25:03.412]          // skip if-block "hasDormant"
[21:25:03.412]        </control>
[21:25:03.412]        <control if="!hasDormant" while="" timeout="0" info="">
[21:25:03.412]          // if-block "!hasDormant"
[21:25:03.412]            // =>  TRUE
[21:25:03.413]          <block atomic="false" info="">
[21:25:03.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
