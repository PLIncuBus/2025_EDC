/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0009.log
 *  Created     : 04:53:49 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[04:53:49.781]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:53:49.781]  
[04:53:49.781]  <debugvars>
[04:53:49.781]    // Pre-defined
[04:53:49.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:53:49.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:53:49.781]    __dp=0x00000000
[04:53:49.781]    __ap=0x00000000
[04:53:49.782]    __traceout=0x00000000      (Trace Disabled)
[04:53:49.782]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:53:49.782]    __FlashAddr=0x00000000
[04:53:49.782]    __FlashLen=0x00000000
[04:53:49.782]    __FlashArg=0x00000000
[04:53:49.782]    __FlashOp=0x00000000
[04:53:49.782]    __Result=0x00000000
[04:53:49.782]  </debugvars>
[04:53:49.782]  
[04:53:49.782]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:53:49.783]    <block atomic="false" info="">
[04:53:49.783]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:53:49.783]        // -> [isSWJ <= 0x00000001]
[04:53:49.783]      __var hasDormant = __protocol & 0x00020000;
[04:53:49.783]        // -> [hasDormant <= 0x00000000]
[04:53:49.783]      __var protType   = __protocol & 0x0000FFFF;
[04:53:49.783]        // -> [protType <= 0x00000002]
[04:53:49.783]    </block>
[04:53:49.783]    <control if="protType == 1" while="" timeout="0" info="">
[04:53:49.783]      // if-block "protType == 1"
[04:53:49.783]        // =>  FALSE
[04:53:49.783]      // skip if-block "protType == 1"
[04:53:49.783]    </control>
[04:53:49.783]    <control if="protType == 2" while="" timeout="0" info="">
[04:53:49.783]      // if-block "protType == 2"
[04:53:49.783]        // =>  TRUE
[04:53:49.785]      <control if="isSWJ" while="" timeout="0" info="">
[04:53:49.785]        // if-block "isSWJ"
[04:53:49.785]          // =>  TRUE
[04:53:49.785]        <control if="hasDormant" while="" timeout="0" info="">
[04:53:49.785]          // if-block "hasDormant"
[04:53:49.785]            // =>  FALSE
[04:53:49.785]          // skip if-block "hasDormant"
[04:53:49.785]        </control>
[04:53:49.785]        <control if="!hasDormant" while="" timeout="0" info="">
[04:53:49.785]          // if-block "!hasDormant"
[04:53:49.785]            // =>  TRUE
[04:53:49.785]          <block atomic="false" info="">
[04:53:49.785]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:53:49.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:53:49.789]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:53:49.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:53:49.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:53:49.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:53:49.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:53:49.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:53:49.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:53:49.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:53:49.795]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:53:49.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:53:49.796]          </block>
[04:53:49.796]          // end if-block "!hasDormant"
[04:53:49.798]        </control>
[04:53:49.798]        // end if-block "isSWJ"
[04:53:49.798]      </control>
[04:53:49.798]      <control if="!isSWJ" while="" timeout="0" info="">
[04:53:49.798]        // if-block "!isSWJ"
[04:53:49.798]          // =>  FALSE
[04:53:49.798]        // skip if-block "!isSWJ"
[04:53:49.798]      </control>
[04:53:49.798]      <block atomic="false" info="">
[04:53:49.798]        ReadDP(0x0);
[04:53:49.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:53:49.798]      </block>
[04:53:49.801]      // end if-block "protType == 2"
[04:53:49.801]    </control>
[04:53:49.801]  </sequence>
[04:53:49.801]  
[04:53:49.802]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:53:49.802]  
[04:53:49.802]  <debugvars>
[04:53:49.802]    // Pre-defined
[04:53:49.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:53:49.802]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:53:49.802]    __dp=0x00000000
[04:53:49.802]    __ap=0x00000000
[04:53:49.802]    __traceout=0x00000000      (Trace Disabled)
[04:53:49.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:53:49.802]    __FlashAddr=0x00000000
[04:53:49.805]    __FlashLen=0x00000000
[04:53:49.805]    __FlashArg=0x00000000
[04:53:49.805]    __FlashOp=0x00000000
[04:53:49.805]    __Result=0x00000000
[04:53:49.805]  </debugvars>
[04:53:49.805]  
[04:53:49.805]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:53:49.805]    <block atomic="false" info="">
[04:53:49.805]      __var SW_DP_ABORT       = 0x0;
[04:53:49.805]        // -> [SW_DP_ABORT <= 0x00000000]
[04:53:49.805]      __var DP_CTRL_STAT      = 0x4;
[04:53:49.806]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:53:49.806]      __var DP_SELECT         = 0x8;
[04:53:49.806]        // -> [DP_SELECT <= 0x00000008]
[04:53:49.806]      __var powered_down      = 0;
[04:53:49.806]        // -> [powered_down <= 0x00000000]
[04:53:49.806]      WriteDP(DP_SELECT, 0x00000000);
[04:53:49.808]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:53:49.808]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:53:49.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:53:49.809]        // -> [powered_down <= 0x00000001]
[04:53:49.809]    </block>
[04:53:49.809]    <control if="powered_down" while="" timeout="0" info="">
[04:53:49.809]      // if-block "powered_down"
[04:53:49.809]        // =>  TRUE
[04:53:49.811]      <block atomic="false" info="">
[04:53:49.811]        Message(0, "Debug/System power-up request sent");
[04:53:49.811]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:53:49.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:53:49.813]      </block>
[04:53:49.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:53:49.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:53:49.814]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:53:49.814]        // while-condition  =>  FALSE
[04:53:49.814]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:53:49.814]      </control>
[04:53:49.815]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:53:49.815]        // if-block "(__protocol & 0xFFFF) == 1"
[04:53:49.815]          // =>  FALSE
[04:53:49.815]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:53:49.815]      </control>
[04:53:49.815]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:53:49.815]        // if-block "(__protocol & 0xFFFF) == 2"
[04:53:49.815]          // =>  TRUE
[04:53:49.815]        <block atomic="false" info="">
[04:53:49.815]          Message(0, "executing SWD power up");
[04:53:49.815]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:53:49.818]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:53:49.818]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:53:49.823]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:53:49.823]        </block>
[04:53:49.823]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:53:49.823]      </control>
[04:53:49.823]      // end if-block "powered_down"
[04:53:49.823]    </control>
[04:53:49.823]    <block atomic="false" info="">
[04:53:49.824]      __var DEBUG_PORT_VAL    = 0;
[04:53:49.824]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:53:49.824]      __var ACCESS_POINT_VAL  = 0;
[04:53:49.824]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:53:49.824]      __ap = 1; 
[04:53:49.824]        // -> [__ap <= 0x00000001]
[04:53:49.824]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:53:49.827]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:53:49.827]      __ap = 4;
[04:53:49.827]        // -> [__ap <= 0x00000004]
[04:53:49.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:53:49.830]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:53:49.830]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:53:49.830]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:53:49.832]    </block>
[04:53:49.832]    <block atomic="false" info="">
[04:53:49.832]      __var nReset = 0x80;
[04:53:49.832]        // -> [nReset <= 0x00000080]
[04:53:49.832]      __var canReadPins = 0;
[04:53:49.832]        // -> [canReadPins <= 0x00000000]
[04:53:49.832]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:53:49.833]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:53:49.833]        // -> [canReadPins <= 0x00000001]
[04:53:49.834]    </block>
[04:53:49.834]    <control if="" while="1" timeout="200" info="">
[04:53:49.834]      // while "1"  (timeout="200")
[04:53:49.834]      // while-condition  =>  TRUE
[04:53:49.834]      // while "1"  (timeout="200")
[04:53:49.834]      // while-condition  =>  TRUE
[04:53:49.834]      // while "1"  (timeout="200")
[04:53:49.834]      // while-condition  =>  TRUE
[04:53:49.834]      // while "1"  (timeout="200")
[04:53:49.834]      // while-condition  =>  TRUE
[04:53:49.834]      // while "1"  (timeout="200")
[04:53:49.834]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.835]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.835]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.835]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.835]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.835]      // while-condition  =>  TRUE
[04:53:49.835]      // while "1"  (timeout="200")
[04:53:49.836]      // while-condition  =>  TRUE
[04:53:49.836]      // while "1"  (timeout="200")
[04:53:49.836]      // while-condition  =>  TRUE
[04:53:49.836]      // while "1"  (timeout="200")
[04:53:49.836]      // while-condition  =>  TRUE
[04:53:49.836]      // while "1"  (timeout="200")
[04:53:49.836]      // while-condition  =>  TRUE
[04:53:49.836]      // while "1"  (timeout="200")
[04:53:49.836]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.837]      // while "1"  (timeout="200")
[04:53:49.837]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.838]      // while "1"  (timeout="200")
[04:53:49.838]      // while-condition  =>  TRUE
[04:53:49.839]      // while "1"  (timeout="200")
[04:53:49.839]      // while-condition  =>  TRUE
[04:53:49.839]      // while "1"  (timeout="200")
[04:53:49.839]      // while-condition  =>  TRUE
[04:53:49.839]      // while "1"  (timeout="200")
[04:53:49.839]      // while-condition  =>  TRUE
[04:53:49.839]      // while "1"  (timeout="200")
[04:53:49.839]      // while-condition  =>  TRUE
[04:53:49.839]      // while "1"  (timeout="200")
[04:53:49.840]      // while-condition  =>  TRUE
[04:53:49.840]      // while "1"  (timeout="200")
[04:53:49.840]      // while-condition  =>  TRUE
[04:53:49.840]      // while "1"  (timeout="200")
[04:53:49.840]      // while-condition  =>  TRUE
[04:53:49.840]      // while "1"  (timeout="200")
[04:53:49.840]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.841]      // while-condition  =>  TRUE
[04:53:49.841]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.843]      // while "1"  (timeout="200")
[04:53:49.843]      // while-condition  =>  TRUE
[04:53:49.845]      // while "1"  (timeout="200")
[04:53:49.845]      // while  =>  TIMEOUT
[04:53:49.845]      // end while "1"
[04:53:49.845]    </control>
[04:53:49.845]    <control if="canReadPins" while="" timeout="0" info="">
[04:53:49.845]      // if-block "canReadPins"
[04:53:49.845]        // =>  TRUE
[04:53:49.845]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:53:49.845]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:53:49.847]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:53:49.847]        // while-condition  =>  FALSE
[04:53:49.848]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:53:49.848]      </control>
[04:53:49.848]      // end if-block "canReadPins"
[04:53:49.848]    </control>
[04:53:49.848]    <control if="!canReadPins" while="" timeout="0" info="">
[04:53:49.848]      // if-block "!canReadPins"
[04:53:49.848]        // =>  FALSE
[04:53:49.848]      // skip if-block "!canReadPins"
[04:53:49.848]    </control>
[04:53:49.848]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:53:49.848]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:53:49.848]        // =>  TRUE
[04:53:49.848]      <block atomic="false" info="">
[04:53:49.848]        WriteAP(0x00, 0x190008);
[04:53:49.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:53:49.851]        WriteAP(0xF0, 0x01);
[04:53:49.853]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:53:49.853]      </block>
[04:53:49.853]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:53:49.853]    </control>
[04:53:49.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:53:49.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:53:49.853]        // =>  FALSE
[04:53:49.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:53:49.853]    </control>
[04:53:49.853]    <block atomic="false" info="">
[04:53:49.853]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:53:49.859]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:53:49.859]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:53:49.859]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:53:49.859]      __ap = 0; //lets make sure we reset the access point selection
[04:53:49.859]        // -> [__ap <= 0x00000000]
[04:53:49.860]    </block>
[04:53:49.860]  </sequence>
[04:53:49.860]  
[04:53:49.879]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:53:49.879]  
[04:53:49.879]  <debugvars>
[04:53:49.879]    // Pre-defined
[04:53:49.879]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:53:49.879]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:53:49.879]    __dp=0x00000000
[04:53:49.879]    __ap=0x00000000
[04:53:49.879]    __traceout=0x00000000      (Trace Disabled)
[04:53:49.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:53:49.881]    __FlashAddr=0x00000000
[04:53:49.881]    __FlashLen=0x00000000
[04:53:49.881]    __FlashArg=0x00000000
[04:53:49.881]    __FlashOp=0x00000000
[04:53:49.881]    __Result=0x00000000
[04:53:49.881]  </debugvars>
[04:53:49.881]  
[04:53:49.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:53:49.883]    <block atomic="false" info="">
[04:53:49.883]      __var deviceID = 0;
[04:53:49.883]        // -> [deviceID <= 0x00000000]
[04:53:49.883]      __var version = 0;
[04:53:49.883]        // -> [version <= 0x00000000]
[04:53:49.883]      __var partNum = 0;
[04:53:49.883]        // -> [partNum <= 0x00000000]
[04:53:49.883]      __var manuf = 0;
[04:53:49.883]        // -> [manuf <= 0x00000000]
[04:53:49.883]      __var isMSPM0G1X0X_G3X0X = 0;
[04:53:49.883]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:53:49.883]      __var isProduction = 0;
[04:53:49.883]        // -> [isProduction <= 0x00000000]
[04:53:49.883]      __var continueId = 0;
[04:53:49.883]        // -> [continueId <= 0x00000000]
[04:53:49.883]      deviceID =   Read32(0x41C40004);
[04:53:49.886]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:53:49.886]        // -> [deviceID <= 0x2BB8802F]
[04:53:49.886]      version = deviceID >> 28;
[04:53:49.886]        // -> [version <= 0x00000002]
[04:53:49.886]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:53:49.886]        // -> [partNum <= 0x0000BB88]
[04:53:49.886]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:53:49.886]        // -> [manuf <= 0x00000017]
[04:53:49.890]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:53:49.890]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:53:49.890]      isProduction = (version > 0);
[04:53:49.890]        // -> [isProduction <= 0x00000001]
[04:53:49.890]    </block>
[04:53:49.890]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:53:49.890]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:53:49.890]        // =>  FALSE
[04:53:49.890]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:53:49.891]    </control>
[04:53:49.891]    <control if="continueId == 4" while="" timeout="0" info="">
[04:53:49.891]      // if-block "continueId == 4"
[04:53:49.891]        // =>  FALSE
[04:53:49.891]      // skip if-block "continueId == 4"
[04:53:49.891]    </control>
[04:53:49.891]    <control if="!isProduction" while="" timeout="0" info="">
[04:53:49.891]      // if-block "!isProduction"
[04:53:49.891]        // =>  FALSE
[04:53:49.891]      // skip if-block "!isProduction"
[04:53:49.891]    </control>
[04:53:49.891]  </sequence>
[04:53:49.891]  
[05:00:49.048]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:00:49.048]  
[05:00:49.058]  <debugvars>
[05:00:49.058]    // Pre-defined
[05:00:49.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:49.058]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:49.058]    __dp=0x00000000
[05:00:49.058]    __ap=0x00000000
[05:00:49.058]    __traceout=0x00000000      (Trace Disabled)
[05:00:49.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:49.058]    __FlashAddr=0x00000000
[05:00:49.058]    __FlashLen=0x00000000
[05:00:49.058]    __FlashArg=0x00000000
[05:00:49.058]    __FlashOp=0x00000000
[05:00:49.058]    __Result=0x00000000
[05:00:49.058]  </debugvars>
[05:00:49.058]  
[05:00:49.058]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:00:49.058]    <block atomic="false" info="">
[05:00:49.058]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:00:49.058]        // -> [isSWJ <= 0x00000001]
[05:00:49.058]      __var hasDormant = __protocol & 0x00020000;
[05:00:49.058]        // -> [hasDormant <= 0x00000000]
[05:00:49.058]      __var protType   = __protocol & 0x0000FFFF;
[05:00:49.058]        // -> [protType <= 0x00000002]
[05:00:49.058]    </block>
[05:00:49.058]    <control if="protType == 1" while="" timeout="0" info="">
[05:00:49.058]      // if-block "protType == 1"
[05:00:49.058]        // =>  FALSE
[05:00:49.058]      // skip if-block "protType == 1"
[05:00:49.058]    </control>
[05:00:49.058]    <control if="protType == 2" while="" timeout="0" info="">
[05:00:49.058]      // if-block "protType == 2"
[05:00:49.058]        // =>  TRUE
[05:00:49.058]      <control if="isSWJ" while="" timeout="0" info="">
[05:00:49.058]        // if-block "isSWJ"
[05:00:49.058]          // =>  TRUE
[05:00:49.058]        <control if="hasDormant" while="" timeout="0" info="">
[05:00:49.058]          // if-block "hasDormant"
[05:00:49.058]            // =>  FALSE
[05:00:49.058]          // skip if-block "hasDormant"
[05:00:49.058]        </control>
[05:00:49.058]        <control if="!hasDormant" while="" timeout="0" info="">
[05:00:49.058]          // if-block "!hasDormant"
[05:00:49.058]            // =>  TRUE
[05:00:49.058]          <block atomic="false" info="">
[05:00:49.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:00:49.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:49.058]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:00:49.068]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:00:49.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:00:49.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:49.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:00:49.070]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:00:49.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:00:49.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:49.070]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:00:49.070]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:00:49.070]          </block>
[05:00:49.070]          // end if-block "!hasDormant"
[05:00:49.070]        </control>
[05:00:49.070]        // end if-block "isSWJ"
[05:00:49.070]      </control>
[05:00:49.070]      <control if="!isSWJ" while="" timeout="0" info="">
[05:00:49.070]        // if-block "!isSWJ"
[05:00:49.070]          // =>  FALSE
[05:00:49.070]        // skip if-block "!isSWJ"
[05:00:49.070]      </control>
[05:00:49.070]      <block atomic="false" info="">
[05:00:49.070]        ReadDP(0x0);
[05:00:49.070]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:00:49.078]      </block>
[05:00:49.078]      // end if-block "protType == 2"
[05:00:49.078]    </control>
[05:00:49.078]  </sequence>
[05:00:49.078]  
[05:00:49.078]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:00:49.078]  
[05:00:49.078]  <debugvars>
[05:00:49.078]    // Pre-defined
[05:00:49.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:49.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:49.078]    __dp=0x00000000
[05:00:49.078]    __ap=0x00000000
[05:00:49.078]    __traceout=0x00000000      (Trace Disabled)
[05:00:49.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:49.078]    __FlashAddr=0x00000000
[05:00:49.078]    __FlashLen=0x00000000
[05:00:49.078]    __FlashArg=0x00000000
[05:00:49.078]    __FlashOp=0x00000000
[05:00:49.078]    __Result=0x00000000
[05:00:49.078]  </debugvars>
[05:00:49.078]  
[05:00:49.078]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:00:49.078]    <block atomic="false" info="">
[05:00:49.078]      __var SW_DP_ABORT       = 0x0;
[05:00:49.078]        // -> [SW_DP_ABORT <= 0x00000000]
[05:00:49.078]      __var DP_CTRL_STAT      = 0x4;
[05:00:49.078]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:00:49.078]      __var DP_SELECT         = 0x8;
[05:00:49.078]        // -> [DP_SELECT <= 0x00000008]
[05:00:49.078]      __var powered_down      = 0;
[05:00:49.078]        // -> [powered_down <= 0x00000000]
[05:00:49.078]      WriteDP(DP_SELECT, 0x00000000);
[05:00:49.078]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:00:49.078]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:00:49.078]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:00:49.078]        // -> [powered_down <= 0x00000001]
[05:00:49.078]    </block>
[05:00:49.078]    <control if="powered_down" while="" timeout="0" info="">
[05:00:49.078]      // if-block "powered_down"
[05:00:49.078]        // =>  TRUE
[05:00:49.078]      <block atomic="false" info="">
[05:00:49.088]        Message(0, "Debug/System power-up request sent");
[05:00:49.090]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:00:49.090]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:00:49.090]      </block>
[05:00:49.090]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:00:49.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:00:49.090]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:00:49.090]        // while-condition  =>  FALSE
[05:00:49.090]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:00:49.090]      </control>
[05:00:49.090]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:00:49.090]        // if-block "(__protocol & 0xFFFF) == 1"
[05:00:49.090]          // =>  FALSE
[05:00:49.090]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:00:49.090]      </control>
[05:00:49.090]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:00:49.090]        // if-block "(__protocol & 0xFFFF) == 2"
[05:00:49.090]          // =>  TRUE
[05:00:49.090]        <block atomic="false" info="">
[05:00:49.090]          Message(0, "executing SWD power up");
[05:00:49.090]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:00:49.099]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:00:49.099]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:00:49.099]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:00:49.099]        </block>
[05:00:49.099]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:00:49.099]      </control>
[05:00:49.099]      // end if-block "powered_down"
[05:00:49.099]    </control>
[05:00:49.099]    <block atomic="false" info="">
[05:00:49.099]      __var DEBUG_PORT_VAL    = 0;
[05:00:49.099]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:00:49.099]      __var ACCESS_POINT_VAL  = 0;
[05:00:49.099]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:00:49.099]      __ap = 1; 
[05:00:49.099]        // -> [__ap <= 0x00000001]
[05:00:49.099]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:00:49.099]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:00:49.099]      __ap = 4;
[05:00:49.099]        // -> [__ap <= 0x00000004]
[05:00:49.099]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:49.109]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:00:49.109]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:00:49.109]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:49.109]    </block>
[05:00:49.109]    <block atomic="false" info="">
[05:00:49.109]      __var nReset = 0x80;
[05:00:49.109]        // -> [nReset <= 0x00000080]
[05:00:49.109]      __var canReadPins = 0;
[05:00:49.109]        // -> [canReadPins <= 0x00000000]
[05:00:49.109]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:00:49.109]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:00:49.109]        // -> [canReadPins <= 0x00000001]
[05:00:49.109]    </block>
[05:00:49.109]    <control if="" while="1" timeout="200" info="">
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.109]      // while-condition  =>  TRUE
[05:00:49.109]      // while "1"  (timeout="200")
[05:00:49.119]      // while-condition  =>  TRUE
[05:00:49.119]      // while "1"  (timeout="200")
[05:00:49.119]      // while  =>  TIMEOUT
[05:00:49.119]      // end while "1"
[05:00:49.119]    </control>
[05:00:49.119]    <control if="canReadPins" while="" timeout="0" info="">
[05:00:49.119]      // if-block "canReadPins"
[05:00:49.119]        // =>  TRUE
[05:00:49.119]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:00:49.119]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:00:49.120]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:00:49.120]        // while-condition  =>  FALSE
[05:00:49.120]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:00:49.120]      </control>
[05:00:49.120]      // end if-block "canReadPins"
[05:00:49.120]    </control>
[05:00:49.120]    <control if="!canReadPins" while="" timeout="0" info="">
[05:00:49.120]      // if-block "!canReadPins"
[05:00:49.120]        // =>  FALSE
[05:00:49.120]      // skip if-block "!canReadPins"
[05:00:49.120]    </control>
[05:00:49.120]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:00:49.120]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:49.120]        // =>  TRUE
[05:00:49.120]      <block atomic="false" info="">
[05:00:49.120]        WriteAP(0x00, 0x190008);
[05:00:49.120]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:49.120]        WriteAP(0xF0, 0x01);
[05:00:49.130]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:49.130]      </block>
[05:00:49.130]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:49.130]    </control>
[05:00:49.130]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:00:49.130]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:49.130]        // =>  FALSE
[05:00:49.130]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:49.130]    </control>
[05:00:49.130]    <block atomic="false" info="">
[05:00:49.130]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:49.130]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:00:49.130]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:00:49.130]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:49.130]      __ap = 0; //lets make sure we reset the access point selection
[05:00:49.130]        // -> [__ap <= 0x00000000]
[05:00:49.130]    </block>
[05:00:49.130]  </sequence>
[05:00:49.130]  
[05:00:49.159]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:00:49.159]  
[05:00:49.159]  <debugvars>
[05:00:49.159]    // Pre-defined
[05:00:49.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:49.159]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:49.159]    __dp=0x00000000
[05:00:49.159]    __ap=0x00000000
[05:00:49.159]    __traceout=0x00000000      (Trace Disabled)
[05:00:49.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:49.159]    __FlashAddr=0x00000000
[05:00:49.159]    __FlashLen=0x00000000
[05:00:49.159]    __FlashArg=0x00000000
[05:00:49.159]    __FlashOp=0x00000000
[05:00:49.159]    __Result=0x00000000
[05:00:49.159]  </debugvars>
[05:00:49.159]  
[05:00:49.159]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:00:49.159]    <block atomic="false" info="">
[05:00:49.159]      __var deviceID = 0;
[05:00:49.159]        // -> [deviceID <= 0x00000000]
[05:00:49.159]      __var version = 0;
[05:00:49.159]        // -> [version <= 0x00000000]
[05:00:49.159]      __var partNum = 0;
[05:00:49.159]        // -> [partNum <= 0x00000000]
[05:00:49.159]      __var manuf = 0;
[05:00:49.159]        // -> [manuf <= 0x00000000]
[05:00:49.159]      __var isMSPM0G1X0X_G3X0X = 0;
[05:00:49.159]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:00:49.159]      __var isProduction = 0;
[05:00:49.159]        // -> [isProduction <= 0x00000000]
[05:00:49.159]      __var continueId = 0;
[05:00:49.159]        // -> [continueId <= 0x00000000]
[05:00:49.159]      deviceID =   Read32(0x41C40004);
[05:00:49.171]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:00:49.171]        // -> [deviceID <= 0x2BB8802F]
[05:00:49.171]      version = deviceID >> 28;
[05:00:49.171]        // -> [version <= 0x00000002]
[05:00:49.171]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:00:49.171]        // -> [partNum <= 0x0000BB88]
[05:00:49.171]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:00:49.171]        // -> [manuf <= 0x00000017]
[05:00:49.171]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:00:49.171]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:00:49.171]      isProduction = (version > 0);
[05:00:49.171]        // -> [isProduction <= 0x00000001]
[05:00:49.171]    </block>
[05:00:49.171]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:00:49.171]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:00:49.171]        // =>  FALSE
[05:00:49.171]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:00:49.171]    </control>
[05:00:49.171]    <control if="continueId == 4" while="" timeout="0" info="">
[05:00:49.171]      // if-block "continueId == 4"
[05:00:49.171]        // =>  FALSE
[05:00:49.171]      // skip if-block "continueId == 4"
[05:00:49.171]    </control>
[05:00:49.171]    <control if="!isProduction" while="" timeout="0" info="">
[05:00:49.171]      // if-block "!isProduction"
[05:00:49.174]        // =>  FALSE
[05:00:49.174]      // skip if-block "!isProduction"
[05:00:49.174]    </control>
[05:00:49.174]  </sequence>
[05:00:49.174]  
[05:04:02.504]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:04:02.504]  
[05:04:02.504]  <debugvars>
[05:04:02.504]    // Pre-defined
[05:04:02.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:04:02.504]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:04:02.504]    __dp=0x00000000
[05:04:02.504]    __ap=0x00000000
[05:04:02.504]    __traceout=0x00000000      (Trace Disabled)
[05:04:02.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:04:02.504]    __FlashAddr=0x00000000
[05:04:02.504]    __FlashLen=0x00000000
[05:04:02.504]    __FlashArg=0x00000000
[05:04:02.504]    __FlashOp=0x00000000
[05:04:02.504]    __Result=0x00000000
[05:04:02.504]  </debugvars>
[05:04:02.504]  
[05:04:02.504]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:04:02.504]    <block atomic="false" info="">
[05:04:02.504]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:04:02.504]        // -> [isSWJ <= 0x00000001]
[05:04:02.504]      __var hasDormant = __protocol & 0x00020000;
[05:04:02.504]        // -> [hasDormant <= 0x00000000]
[05:04:02.504]      __var protType   = __protocol & 0x0000FFFF;
[05:04:02.504]        // -> [protType <= 0x00000002]
[05:04:02.504]    </block>
[05:04:02.504]    <control if="protType == 1" while="" timeout="0" info="">
[05:04:02.504]      // if-block "protType == 1"
[05:04:02.504]        // =>  FALSE
[05:04:02.504]      // skip if-block "protType == 1"
[05:04:02.504]    </control>
[05:04:02.504]    <control if="protType == 2" while="" timeout="0" info="">
[05:04:02.504]      // if-block "protType == 2"
[05:04:02.504]        // =>  TRUE
[05:04:02.504]      <control if="isSWJ" while="" timeout="0" info="">
[05:04:02.504]        // if-block "isSWJ"
[05:04:02.504]          // =>  TRUE
[05:04:02.504]        <control if="hasDormant" while="" timeout="0" info="">
[05:04:02.504]          // if-block "hasDormant"
[05:04:02.504]            // =>  FALSE
[05:04:02.504]          // skip if-block "hasDormant"
[05:04:02.504]        </control>
[05:04:02.504]        <control if="!hasDormant" while="" timeout="0" info="">
[05:04:02.504]          // if-block "!hasDormant"
[05:04:02.504]            // =>  TRUE
[05:04:02.504]          <block atomic="false" info="">
[05:04:02.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:04:02.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:04:02.512]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:04:02.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:04:02.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:04:02.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:04:02.512]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:04:02.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:04:02.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:04:02.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:04:02.512]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:04:02.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:04:02.522]          </block>
[05:04:02.522]          // end if-block "!hasDormant"
[05:04:02.522]        </control>
[05:04:02.522]        // end if-block "isSWJ"
[05:04:02.522]      </control>
[05:04:02.522]      <control if="!isSWJ" while="" timeout="0" info="">
[05:04:02.522]        // if-block "!isSWJ"
[05:04:02.522]          // =>  FALSE
[05:04:02.522]        // skip if-block "!isSWJ"
[05:04:02.522]      </control>
[05:04:02.522]      <block atomic="false" info="">
[05:04:02.522]        ReadDP(0x0);
[05:04:02.522]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:04:02.522]      </block>
[05:04:02.522]      // end if-block "protType == 2"
[05:04:02.522]    </control>
[05:04:02.522]  </sequence>
[05:04:02.522]  
[05:04:02.522]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:04:02.522]  
[05:04:02.522]  <debugvars>
[05:04:02.522]    // Pre-defined
[05:04:02.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:04:02.522]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:04:02.522]    __dp=0x00000000
[05:04:02.522]    __ap=0x00000000
[05:04:02.522]    __traceout=0x00000000      (Trace Disabled)
[05:04:02.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:04:02.522]    __FlashAddr=0x00000000
[05:04:02.522]    __FlashLen=0x00000000
[05:04:02.522]    __FlashArg=0x00000000
[05:04:02.522]    __FlashOp=0x00000000
[05:04:02.522]    __Result=0x00000000
[05:04:02.522]  </debugvars>
[05:04:02.522]  
[05:04:02.522]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:04:02.522]    <block atomic="false" info="">
[05:04:02.522]      __var SW_DP_ABORT       = 0x0;
[05:04:02.522]        // -> [SW_DP_ABORT <= 0x00000000]
[05:04:02.522]      __var DP_CTRL_STAT      = 0x4;
[05:04:02.522]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:04:02.522]      __var DP_SELECT         = 0x8;
[05:04:02.522]        // -> [DP_SELECT <= 0x00000008]
[05:04:02.522]      __var powered_down      = 0;
[05:04:02.522]        // -> [powered_down <= 0x00000000]
[05:04:02.522]      WriteDP(DP_SELECT, 0x00000000);
[05:04:02.533]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:04:02.533]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:04:02.533]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:04:02.533]        // -> [powered_down <= 0x00000001]
[05:04:02.533]    </block>
[05:04:02.533]    <control if="powered_down" while="" timeout="0" info="">
[05:04:02.533]      // if-block "powered_down"
[05:04:02.533]        // =>  TRUE
[05:04:02.533]      <block atomic="false" info="">
[05:04:02.533]        Message(0, "Debug/System power-up request sent");
[05:04:02.533]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:04:02.544]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:04:02.544]      </block>
[05:04:02.544]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:04:02.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:04:02.544]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:04:02.544]        // while-condition  =>  FALSE
[05:04:02.544]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:04:02.544]      </control>
[05:04:02.544]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:04:02.544]        // if-block "(__protocol & 0xFFFF) == 1"
[05:04:02.544]          // =>  FALSE
[05:04:02.544]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:04:02.544]      </control>
[05:04:02.544]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:04:02.544]        // if-block "(__protocol & 0xFFFF) == 2"
[05:04:02.544]          // =>  TRUE
[05:04:02.544]        <block atomic="false" info="">
[05:04:02.544]          Message(0, "executing SWD power up");
[05:04:02.552]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:04:02.553]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:04:02.553]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:04:02.554]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:04:02.554]        </block>
[05:04:02.554]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:04:02.554]      </control>
[05:04:02.554]      // end if-block "powered_down"
[05:04:02.554]    </control>
[05:04:02.554]    <block atomic="false" info="">
[05:04:02.554]      __var DEBUG_PORT_VAL    = 0;
[05:04:02.556]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:04:02.556]      __var ACCESS_POINT_VAL  = 0;
[05:04:02.556]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:04:02.556]      __ap = 1; 
[05:04:02.556]        // -> [__ap <= 0x00000001]
[05:04:02.556]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:04:02.559]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:04:02.559]      __ap = 4;
[05:04:02.559]        // -> [__ap <= 0x00000004]
[05:04:02.559]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:04:02.564]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:04:02.564]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:04:02.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:04:02.564]    </block>
[05:04:02.564]    <block atomic="false" info="">
[05:04:02.564]      __var nReset = 0x80;
[05:04:02.564]        // -> [nReset <= 0x00000080]
[05:04:02.564]      __var canReadPins = 0;
[05:04:02.564]        // -> [canReadPins <= 0x00000000]
[05:04:02.564]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:04:02.564]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:04:02.564]        // -> [canReadPins <= 0x00000001]
[05:04:02.564]    </block>
[05:04:02.564]    <control if="" while="1" timeout="200" info="">
[05:04:02.564]      // while "1"  (timeout="200")
[05:04:02.564]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.569]      // while "1"  (timeout="200")
[05:04:02.569]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.573]      // while-condition  =>  TRUE
[05:04:02.573]      // while "1"  (timeout="200")
[05:04:02.583]      // while-condition  =>  TRUE
[05:04:02.583]      // while "1"  (timeout="200")
[05:04:02.583]      // while  =>  TIMEOUT
[05:04:02.583]      // end while "1"
[05:04:02.583]    </control>
[05:04:02.583]    <control if="canReadPins" while="" timeout="0" info="">
[05:04:02.583]      // if-block "canReadPins"
[05:04:02.583]        // =>  TRUE
[05:04:02.583]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:04:02.583]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:04:02.604]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:04:02.604]        // while-condition  =>  FALSE
[05:04:02.604]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:04:02.604]      </control>
[05:04:02.604]      // end if-block "canReadPins"
[05:04:02.604]    </control>
[05:04:02.604]    <control if="!canReadPins" while="" timeout="0" info="">
[05:04:02.604]      // if-block "!canReadPins"
[05:04:02.604]        // =>  FALSE
[05:04:02.604]      // skip if-block "!canReadPins"
[05:04:02.604]    </control>
[05:04:02.604]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:04:02.604]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:04:02.604]        // =>  TRUE
[05:04:02.604]      <block atomic="false" info="">
[05:04:02.604]        WriteAP(0x00, 0x190008);
[05:04:02.614]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:04:02.614]        WriteAP(0xF0, 0x01);
[05:04:02.614]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:04:02.614]      </block>
[05:04:02.614]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:04:02.614]    </control>
[05:04:02.614]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:04:02.614]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:04:02.614]        // =>  FALSE
[05:04:02.614]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:04:02.614]    </control>
[05:04:02.614]    <block atomic="false" info="">
[05:04:02.614]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:04:02.614]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:04:02.614]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:04:02.614]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:04:02.624]      __ap = 0; //lets make sure we reset the access point selection
[05:04:02.624]        // -> [__ap <= 0x00000000]
[05:04:02.624]    </block>
[05:04:02.624]  </sequence>
[05:04:02.624]  
[05:04:02.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:04:02.647]  
[05:04:02.647]  <debugvars>
[05:04:02.647]    // Pre-defined
[05:04:02.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:04:02.647]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:04:02.647]    __dp=0x00000000
[05:04:02.647]    __ap=0x00000000
[05:04:02.647]    __traceout=0x00000000      (Trace Disabled)
[05:04:02.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:04:02.647]    __FlashAddr=0x00000000
[05:04:02.647]    __FlashLen=0x00000000
[05:04:02.647]    __FlashArg=0x00000000
[05:04:02.647]    __FlashOp=0x00000000
[05:04:02.647]    __Result=0x00000000
[05:04:02.647]  </debugvars>
[05:04:02.647]  
[05:04:02.647]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:04:02.647]    <block atomic="false" info="">
[05:04:02.647]      __var deviceID = 0;
[05:04:02.647]        // -> [deviceID <= 0x00000000]
[05:04:02.647]      __var version = 0;
[05:04:02.647]        // -> [version <= 0x00000000]
[05:04:02.647]      __var partNum = 0;
[05:04:02.647]        // -> [partNum <= 0x00000000]
[05:04:02.647]      __var manuf = 0;
[05:04:02.647]        // -> [manuf <= 0x00000000]
[05:04:02.647]      __var isMSPM0G1X0X_G3X0X = 0;
[05:04:02.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:04:02.647]      __var isProduction = 0;
[05:04:02.647]        // -> [isProduction <= 0x00000000]
[05:04:02.647]      __var continueId = 0;
[05:04:02.647]        // -> [continueId <= 0x00000000]
[05:04:02.647]      deviceID =   Read32(0x41C40004);
[05:04:02.655]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:04:02.655]        // -> [deviceID <= 0x2BB8802F]
[05:04:02.655]      version = deviceID >> 28;
[05:04:02.655]        // -> [version <= 0x00000002]
[05:04:02.655]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:04:02.655]        // -> [partNum <= 0x0000BB88]
[05:04:02.655]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:04:02.655]        // -> [manuf <= 0x00000017]
[05:04:02.655]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:04:02.655]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:04:02.655]      isProduction = (version > 0);
[05:04:02.655]        // -> [isProduction <= 0x00000001]
[05:04:02.655]    </block>
[05:04:02.655]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:04:02.655]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:04:02.655]        // =>  FALSE
[05:04:02.655]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:04:02.655]    </control>
[05:04:02.655]    <control if="continueId == 4" while="" timeout="0" info="">
[05:04:02.655]      // if-block "continueId == 4"
[05:04:02.655]        // =>  FALSE
[05:04:02.655]      // skip if-block "continueId == 4"
[05:04:02.655]    </control>
[05:04:02.655]    <control if="!isProduction" while="" timeout="0" info="">
[05:04:02.655]      // if-block "!isProduction"
[05:04:02.655]        // =>  FALSE
[05:04:02.655]      // skip if-block "!isProduction"
[05:04:02.655]    </control>
[05:04:02.655]  </sequence>
[05:04:02.655]  
[05:06:49.736]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:06:49.736]  
[05:06:49.746]  <debugvars>
[05:06:49.746]    // Pre-defined
[05:06:49.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:49.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:06:49.746]    __dp=0x00000000
[05:06:49.746]    __ap=0x00000000
[05:06:49.746]    __traceout=0x00000000      (Trace Disabled)
[05:06:49.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:49.748]    __FlashAddr=0x00000000
[05:06:49.748]    __FlashLen=0x00000000
[05:06:49.748]    __FlashArg=0x00000000
[05:06:49.748]    __FlashOp=0x00000000
[05:06:49.748]    __Result=0x00000000
[05:06:49.748]  </debugvars>
[05:06:49.748]  
[05:06:49.748]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:06:49.748]    <block atomic="false" info="">
[05:06:49.748]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:06:49.748]        // -> [isSWJ <= 0x00000001]
[05:06:49.748]      __var hasDormant = __protocol & 0x00020000;
[05:06:49.748]        // -> [hasDormant <= 0x00000000]
[05:06:49.748]      __var protType   = __protocol & 0x0000FFFF;
[05:06:49.748]        // -> [protType <= 0x00000002]
[05:06:49.748]    </block>
[05:06:49.748]    <control if="protType == 1" while="" timeout="0" info="">
[05:06:49.748]      // if-block "protType == 1"
[05:06:49.748]        // =>  FALSE
[05:06:49.748]      // skip if-block "protType == 1"
[05:06:49.748]    </control>
[05:06:49.749]    <control if="protType == 2" while="" timeout="0" info="">
[05:06:49.749]      // if-block "protType == 2"
[05:06:49.749]        // =>  TRUE
[05:06:49.749]      <control if="isSWJ" while="" timeout="0" info="">
[05:06:49.749]        // if-block "isSWJ"
[05:06:49.749]          // =>  TRUE
[05:06:49.749]        <control if="hasDormant" while="" timeout="0" info="">
[05:06:49.749]          // if-block "hasDormant"
[05:06:49.749]            // =>  FALSE
[05:06:49.749]          // skip if-block "hasDormant"
[05:06:49.749]        </control>
[05:06:49.749]        <control if="!hasDormant" while="" timeout="0" info="">
[05:06:49.749]          // if-block "!hasDormant"
[05:06:49.749]            // =>  TRUE
[05:06:49.749]          <block atomic="false" info="">
[05:06:49.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:06:49.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:49.753]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:06:49.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:06:49.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:06:49.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:49.756]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:06:49.757]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:06:49.757]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:06:49.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:49.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:06:49.760]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:06:49.760]          </block>
[05:06:49.760]          // end if-block "!hasDormant"
[05:06:49.760]        </control>
[05:06:49.760]        // end if-block "isSWJ"
[05:06:49.760]      </control>
[05:06:49.760]      <control if="!isSWJ" while="" timeout="0" info="">
[05:06:49.760]        // if-block "!isSWJ"
[05:06:49.760]          // =>  FALSE
[05:06:49.760]        // skip if-block "!isSWJ"
[05:06:49.760]      </control>
[05:06:49.760]      <block atomic="false" info="">
[05:06:49.760]        ReadDP(0x0);
[05:06:49.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:06:49.762]      </block>
[05:06:49.762]      // end if-block "protType == 2"
[05:06:49.762]    </control>
[05:06:49.762]  </sequence>
[05:06:49.762]  
[05:06:49.764]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:06:49.764]  
[05:06:49.764]  <debugvars>
[05:06:49.766]    // Pre-defined
[05:06:49.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:49.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:06:49.766]    __dp=0x00000000
[05:06:49.766]    __ap=0x00000000
[05:06:49.766]    __traceout=0x00000000      (Trace Disabled)
[05:06:49.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:49.766]    __FlashAddr=0x00000000
[05:06:49.766]    __FlashLen=0x00000000
[05:06:49.766]    __FlashArg=0x00000000
[05:06:49.766]    __FlashOp=0x00000000
[05:06:49.766]    __Result=0x00000000
[05:06:49.766]  </debugvars>
[05:06:49.766]  
[05:06:49.766]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:06:49.766]    <block atomic="false" info="">
[05:06:49.766]      __var SW_DP_ABORT       = 0x0;
[05:06:49.766]        // -> [SW_DP_ABORT <= 0x00000000]
[05:06:49.766]      __var DP_CTRL_STAT      = 0x4;
[05:06:49.766]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:06:49.768]      __var DP_SELECT         = 0x8;
[05:06:49.768]        // -> [DP_SELECT <= 0x00000008]
[05:06:49.768]      __var powered_down      = 0;
[05:06:49.768]        // -> [powered_down <= 0x00000000]
[05:06:49.768]      WriteDP(DP_SELECT, 0x00000000);
[05:06:49.769]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:06:49.769]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:06:49.772]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:06:49.772]        // -> [powered_down <= 0x00000001]
[05:06:49.772]    </block>
[05:06:49.772]    <control if="powered_down" while="" timeout="0" info="">
[05:06:49.772]      // if-block "powered_down"
[05:06:49.772]        // =>  TRUE
[05:06:49.772]      <block atomic="false" info="">
[05:06:49.773]        Message(0, "Debug/System power-up request sent");
[05:06:49.774]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:06:49.776]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:06:49.776]      </block>
[05:06:49.776]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:06:49.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:06:49.778]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:06:49.778]        // while-condition  =>  FALSE
[05:06:49.778]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:06:49.778]      </control>
[05:06:49.778]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:06:49.778]        // if-block "(__protocol & 0xFFFF) == 1"
[05:06:49.778]          // =>  FALSE
[05:06:49.778]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:06:49.778]      </control>
[05:06:49.778]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:06:49.778]        // if-block "(__protocol & 0xFFFF) == 2"
[05:06:49.778]          // =>  TRUE
[05:06:49.778]        <block atomic="false" info="">
[05:06:49.778]          Message(0, "executing SWD power up");
[05:06:49.778]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:06:49.778]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:06:49.778]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:06:49.778]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:06:49.778]        </block>
[05:06:49.778]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:06:49.778]      </control>
[05:06:49.778]      // end if-block "powered_down"
[05:06:49.778]    </control>
[05:06:49.778]    <block atomic="false" info="">
[05:06:49.778]      __var DEBUG_PORT_VAL    = 0;
[05:06:49.778]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:06:49.778]      __var ACCESS_POINT_VAL  = 0;
[05:06:49.778]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:06:49.778]      __ap = 1; 
[05:06:49.778]        // -> [__ap <= 0x00000001]
[05:06:49.778]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:06:49.787]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:06:49.787]      __ap = 4;
[05:06:49.787]        // -> [__ap <= 0x00000004]
[05:06:49.787]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:06:49.787]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:06:49.787]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:06:49.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:06:49.787]    </block>
[05:06:49.787]    <block atomic="false" info="">
[05:06:49.787]      __var nReset = 0x80;
[05:06:49.787]        // -> [nReset <= 0x00000080]
[05:06:49.787]      __var canReadPins = 0;
[05:06:49.787]        // -> [canReadPins <= 0x00000000]
[05:06:49.787]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:06:49.797]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:06:49.797]        // -> [canReadPins <= 0x00000001]
[05:06:49.797]    </block>
[05:06:49.797]    <control if="" while="1" timeout="200" info="">
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.797]      // while "1"  (timeout="200")
[05:06:49.797]      // while-condition  =>  TRUE
[05:06:49.807]      // while "1"  (timeout="200")
[05:06:49.807]      // while  =>  TIMEOUT
[05:06:49.807]      // end while "1"
[05:06:49.807]    </control>
[05:06:49.807]    <control if="canReadPins" while="" timeout="0" info="">
[05:06:49.807]      // if-block "canReadPins"
[05:06:49.807]        // =>  TRUE
[05:06:49.807]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:06:49.807]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:06:49.807]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:06:49.807]        // while-condition  =>  FALSE
[05:06:49.807]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:06:49.807]      </control>
[05:06:49.807]      // end if-block "canReadPins"
[05:06:49.807]    </control>
[05:06:49.807]    <control if="!canReadPins" while="" timeout="0" info="">
[05:06:49.807]      // if-block "!canReadPins"
[05:06:49.807]        // =>  FALSE
[05:06:49.807]      // skip if-block "!canReadPins"
[05:06:49.807]    </control>
[05:06:49.807]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:06:49.807]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:06:49.807]        // =>  TRUE
[05:06:49.807]      <block atomic="false" info="">
[05:06:49.807]        WriteAP(0x00, 0x190008);
[05:06:49.807]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:06:49.807]        WriteAP(0xF0, 0x01);
[05:06:49.807]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:06:49.807]      </block>
[05:06:49.817]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:06:49.817]    </control>
[05:06:49.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:06:49.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:06:49.817]        // =>  FALSE
[05:06:49.817]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:06:49.817]    </control>
[05:06:49.817]    <block atomic="false" info="">
[05:06:49.817]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:06:49.819]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:06:49.819]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:06:49.819]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:06:49.819]      __ap = 0; //lets make sure we reset the access point selection
[05:06:49.819]        // -> [__ap <= 0x00000000]
[05:06:49.819]    </block>
[05:06:49.819]  </sequence>
[05:06:49.819]  
[05:06:49.847]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:06:49.847]  
[05:06:49.847]  <debugvars>
[05:06:49.847]    // Pre-defined
[05:06:49.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:49.847]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:06:49.847]    __dp=0x00000000
[05:06:49.847]    __ap=0x00000000
[05:06:49.847]    __traceout=0x00000000      (Trace Disabled)
[05:06:49.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:49.847]    __FlashAddr=0x00000000
[05:06:49.847]    __FlashLen=0x00000000
[05:06:49.847]    __FlashArg=0x00000000
[05:06:49.847]    __FlashOp=0x00000000
[05:06:49.849]    __Result=0x00000000
[05:06:49.849]  </debugvars>
[05:06:49.849]  
[05:06:49.849]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:06:49.849]    <block atomic="false" info="">
[05:06:49.849]      __var deviceID = 0;
[05:06:49.849]        // -> [deviceID <= 0x00000000]
[05:06:49.849]      __var version = 0;
[05:06:49.849]        // -> [version <= 0x00000000]
[05:06:49.849]      __var partNum = 0;
[05:06:49.849]        // -> [partNum <= 0x00000000]
[05:06:49.849]      __var manuf = 0;
[05:06:49.849]        // -> [manuf <= 0x00000000]
[05:06:49.849]      __var isMSPM0G1X0X_G3X0X = 0;
[05:06:49.849]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:06:49.849]      __var isProduction = 0;
[05:06:49.849]        // -> [isProduction <= 0x00000000]
[05:06:49.849]      __var continueId = 0;
[05:06:49.849]        // -> [continueId <= 0x00000000]
[05:06:49.849]      deviceID =   Read32(0x41C40004);
[05:06:49.849]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:06:49.849]        // -> [deviceID <= 0x2BB8802F]
[05:06:49.849]      version = deviceID >> 28;
[05:06:49.849]        // -> [version <= 0x00000002]
[05:06:49.849]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:06:49.849]        // -> [partNum <= 0x0000BB88]
[05:06:49.849]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:06:49.849]        // -> [manuf <= 0x00000017]
[05:06:49.849]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:06:49.849]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:06:49.849]      isProduction = (version > 0);
[05:06:49.849]        // -> [isProduction <= 0x00000001]
[05:06:49.849]    </block>
[05:06:49.849]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:06:49.849]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:06:49.849]        // =>  FALSE
[05:06:49.849]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:06:49.849]    </control>
[05:06:49.849]    <control if="continueId == 4" while="" timeout="0" info="">
[05:06:49.849]      // if-block "continueId == 4"
[05:06:49.849]        // =>  FALSE
[05:06:49.858]      // skip if-block "continueId == 4"
[05:06:49.858]    </control>
[05:06:49.858]    <control if="!isProduction" while="" timeout="0" info="">
[05:06:49.858]      // if-block "!isProduction"
[05:06:49.858]        // =>  FALSE
[05:06:49.858]      // skip if-block "!isProduction"
[05:06:49.858]    </control>
[05:06:49.858]  </sequence>
[05:06:49.858]  
[05:06:55.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:06:55.968]  
[05:06:55.985]  <debugvars>
[05:06:55.985]    // Pre-defined
[05:06:55.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:55.985]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:06:55.985]    __dp=0x00000000
[05:06:55.985]    __ap=0x00000000
[05:06:55.985]    __traceout=0x00000000      (Trace Disabled)
[05:06:55.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:55.985]    __FlashAddr=0x00000000
[05:06:55.985]    __FlashLen=0x00000000
[05:06:55.985]    __FlashArg=0x00000000
[05:06:55.985]    __FlashOp=0x00000000
[05:06:55.985]    __Result=0x00000000
[05:06:55.985]  </debugvars>
[05:06:55.985]  
[05:06:55.985]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:06:55.985]    <block atomic="false" info="">
[05:06:55.985]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:06:55.985]        // -> [isSWJ <= 0x00000001]
[05:06:55.985]      __var hasDormant = __protocol & 0x00020000;
[05:06:55.985]        // -> [hasDormant <= 0x00000000]
[05:06:55.985]      __var protType   = __protocol & 0x0000FFFF;
[05:06:55.985]        // -> [protType <= 0x00000002]
[05:06:55.987]    </block>
[05:06:55.987]    <control if="protType == 1" while="" timeout="0" info="">
[05:06:55.987]      // if-block "protType == 1"
[05:06:55.987]        // =>  FALSE
[05:06:55.987]      // skip if-block "protType == 1"
[05:06:55.987]    </control>
[05:06:55.987]    <control if="protType == 2" while="" timeout="0" info="">
[05:06:55.987]      // if-block "protType == 2"
[05:06:55.987]        // =>  TRUE
[05:06:55.987]      <control if="isSWJ" while="" timeout="0" info="">
[05:06:55.987]        // if-block "isSWJ"
[05:06:55.987]          // =>  TRUE
[05:06:55.987]        <control if="hasDormant" while="" timeout="0" info="">
[05:06:55.987]          // if-block "hasDormant"
[05:06:55.987]            // =>  FALSE
[05:06:55.987]          // skip if-block "hasDormant"
[05:06:55.987]        </control>
[05:06:55.989]        <control if="!hasDormant" while="" timeout="0" info="">
[05:06:55.989]          // if-block "!hasDormant"
[05:06:55.989]            // =>  TRUE
[05:06:55.989]          <block atomic="false" info="">
[05:06:55.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:06:55.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:55.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:06:55.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:06:55.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:06:55.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:55.997]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:06:55.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:06:55.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:06:55.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:06:55.997]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:06:55.997]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:06:55.997]          </block>
[05:06:55.997]          // end if-block "!hasDormant"
[05:06:55.997]        </control>
[05:06:55.997]        // end if-block "isSWJ"
[05:06:55.997]      </control>
[05:06:55.997]      <control if="!isSWJ" while="" timeout="0" info="">
[05:06:55.997]        // if-block "!isSWJ"
[05:06:55.997]          // =>  FALSE
[05:06:55.997]        // skip if-block "!isSWJ"
[05:06:55.997]      </control>
[05:06:55.997]      <block atomic="false" info="">
[05:06:55.997]        ReadDP(0x0);
[05:06:55.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:06:55.997]      </block>
[05:06:55.997]      // end if-block "protType == 2"
[05:06:55.997]    </control>
[05:06:55.997]  </sequence>
[05:06:55.997]  
[05:06:56.010]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:06:56.010]  
[05:06:56.010]  <debugvars>
[05:06:56.010]    // Pre-defined
[05:06:56.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:56.010]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:06:56.010]    __dp=0x00000000
[05:06:56.010]    __ap=0x00000000
[05:06:56.010]    __traceout=0x00000000      (Trace Disabled)
[05:06:56.010]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:56.010]    __FlashAddr=0x00000000
[05:06:56.010]    __FlashLen=0x00000000
[05:06:56.011]    __FlashArg=0x00000000
[05:06:56.011]    __FlashOp=0x00000000
[05:06:56.011]    __Result=0x00000000
[05:06:56.012]  </debugvars>
[05:06:56.012]  
[05:06:56.012]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:06:56.012]    <block atomic="false" info="">
[05:06:56.012]      __var SW_DP_ABORT       = 0x0;
[05:06:56.012]        // -> [SW_DP_ABORT <= 0x00000000]
[05:06:56.012]      __var DP_CTRL_STAT      = 0x4;
[05:06:56.012]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:06:56.013]      __var DP_SELECT         = 0x8;
[05:06:56.013]        // -> [DP_SELECT <= 0x00000008]
[05:06:56.013]      __var powered_down      = 0;
[05:06:56.013]        // -> [powered_down <= 0x00000000]
[05:06:56.013]      WriteDP(DP_SELECT, 0x00000000);
[05:06:56.015]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:06:56.015]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:06:56.015]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:06:56.015]        // -> [powered_down <= 0x00000001]
[05:06:56.015]    </block>
[05:06:56.015]    <control if="powered_down" while="" timeout="0" info="">
[05:06:56.015]      // if-block "powered_down"
[05:06:56.015]        // =>  TRUE
[05:06:56.015]      <block atomic="false" info="">
[05:06:56.015]        Message(0, "Debug/System power-up request sent");
[05:06:56.018]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:06:56.019]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:06:56.019]      </block>
[05:06:56.019]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:06:56.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:06:56.019]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:06:56.019]        // while-condition  =>  FALSE
[05:06:56.019]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:06:56.019]      </control>
[05:06:56.019]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:06:56.019]        // if-block "(__protocol & 0xFFFF) == 1"
[05:06:56.019]          // =>  FALSE
[05:06:56.019]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:06:56.019]      </control>
[05:06:56.019]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:06:56.019]        // if-block "(__protocol & 0xFFFF) == 2"
[05:06:56.019]          // =>  TRUE
[05:06:56.019]        <block atomic="false" info="">
[05:06:56.019]          Message(0, "executing SWD power up");
[05:06:56.019]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:06:56.019]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:06:56.019]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:06:56.028]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:06:56.028]        </block>
[05:06:56.028]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:06:56.028]      </control>
[05:06:56.029]      // end if-block "powered_down"
[05:06:56.029]    </control>
[05:06:56.029]    <block atomic="false" info="">
[05:06:56.029]      __var DEBUG_PORT_VAL    = 0;
[05:06:56.029]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:06:56.029]      __var ACCESS_POINT_VAL  = 0;
[05:06:56.029]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:06:56.029]      __ap = 1; 
[05:06:56.029]        // -> [__ap <= 0x00000001]
[05:06:56.029]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:06:56.031]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:06:56.031]      __ap = 4;
[05:06:56.031]        // -> [__ap <= 0x00000004]
[05:06:56.031]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:06:56.031]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:06:56.031]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:06:56.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:06:56.038]    </block>
[05:06:56.040]    <block atomic="false" info="">
[05:06:56.040]      __var nReset = 0x80;
[05:06:56.040]        // -> [nReset <= 0x00000080]
[05:06:56.040]      __var canReadPins = 0;
[05:06:56.040]        // -> [canReadPins <= 0x00000000]
[05:06:56.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:06:56.041]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:06:56.041]        // -> [canReadPins <= 0x00000001]
[05:06:56.041]    </block>
[05:06:56.041]    <control if="" while="1" timeout="200" info="">
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.041]      // while "1"  (timeout="200")
[05:06:56.041]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.045]      // while "1"  (timeout="200")
[05:06:56.045]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.047]      // while-condition  =>  TRUE
[05:06:56.047]      // while "1"  (timeout="200")
[05:06:56.049]      // while-condition  =>  TRUE
[05:06:56.049]      // while "1"  (timeout="200")
[05:06:56.049]      // while  =>  TIMEOUT
[05:06:56.049]      // end while "1"
[05:06:56.049]    </control>
[05:06:56.049]    <control if="canReadPins" while="" timeout="0" info="">
[05:06:56.049]      // if-block "canReadPins"
[05:06:56.049]        // =>  TRUE
[05:06:56.049]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:06:56.049]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:06:56.049]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:06:56.052]        // while-condition  =>  FALSE
[05:06:56.052]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:06:56.052]      </control>
[05:06:56.052]      // end if-block "canReadPins"
[05:06:56.052]    </control>
[05:06:56.052]    <control if="!canReadPins" while="" timeout="0" info="">
[05:06:56.052]      // if-block "!canReadPins"
[05:06:56.052]        // =>  FALSE
[05:06:56.053]      // skip if-block "!canReadPins"
[05:06:56.053]    </control>
[05:06:56.053]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:06:56.053]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:06:56.053]        // =>  TRUE
[05:06:56.053]      <block atomic="false" info="">
[05:06:56.053]        WriteAP(0x00, 0x190008);
[05:06:56.054]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:06:56.054]        WriteAP(0xF0, 0x01);
[05:06:56.054]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:06:56.054]      </block>
[05:06:56.059]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:06:56.059]    </control>
[05:06:56.059]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:06:56.059]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:06:56.059]        // =>  FALSE
[05:06:56.059]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:06:56.059]    </control>
[05:06:56.059]    <block atomic="false" info="">
[05:06:56.059]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:06:56.059]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:06:56.059]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:06:56.059]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:06:56.059]      __ap = 0; //lets make sure we reset the access point selection
[05:06:56.059]        // -> [__ap <= 0x00000000]
[05:06:56.059]    </block>
[05:06:56.059]  </sequence>
[05:06:56.059]  
[05:06:56.090]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:06:56.090]  
[05:06:56.090]  <debugvars>
[05:06:56.090]    // Pre-defined
[05:06:56.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:06:56.090]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:06:56.090]    __dp=0x00000000
[05:06:56.096]    __ap=0x00000000
[05:06:56.096]    __traceout=0x00000000      (Trace Disabled)
[05:06:56.096]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:06:56.096]    __FlashAddr=0x00000000
[05:06:56.096]    __FlashLen=0x00000000
[05:06:56.096]    __FlashArg=0x00000000
[05:06:56.096]    __FlashOp=0x00000000
[05:06:56.096]    __Result=0x00000000
[05:06:56.096]  </debugvars>
[05:06:56.096]  
[05:06:56.096]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:06:56.096]    <block atomic="false" info="">
[05:06:56.096]      __var deviceID = 0;
[05:06:56.096]        // -> [deviceID <= 0x00000000]
[05:06:56.096]      __var version = 0;
[05:06:56.096]        // -> [version <= 0x00000000]
[05:06:56.096]      __var partNum = 0;
[05:06:56.097]        // -> [partNum <= 0x00000000]
[05:06:56.097]      __var manuf = 0;
[05:06:56.097]        // -> [manuf <= 0x00000000]
[05:06:56.097]      __var isMSPM0G1X0X_G3X0X = 0;
[05:06:56.097]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:06:56.097]      __var isProduction = 0;
[05:06:56.097]        // -> [isProduction <= 0x00000000]
[05:06:56.097]      __var continueId = 0;
[05:06:56.097]        // -> [continueId <= 0x00000000]
[05:06:56.097]      deviceID =   Read32(0x41C40004);
[05:06:56.105]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:06:56.105]        // -> [deviceID <= 0x2BB8802F]
[05:06:56.105]      version = deviceID >> 28;
[05:06:56.105]        // -> [version <= 0x00000002]
[05:06:56.105]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:06:56.105]        // -> [partNum <= 0x0000BB88]
[05:06:56.105]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:06:56.105]        // -> [manuf <= 0x00000017]
[05:06:56.105]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:06:56.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:06:56.105]      isProduction = (version > 0);
[05:06:56.105]        // -> [isProduction <= 0x00000001]
[05:06:56.108]    </block>
[05:06:56.108]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:06:56.108]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:06:56.108]        // =>  FALSE
[05:06:56.108]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:06:56.108]    </control>
[05:06:56.108]    <control if="continueId == 4" while="" timeout="0" info="">
[05:06:56.108]      // if-block "continueId == 4"
[05:06:56.108]        // =>  FALSE
[05:06:56.108]      // skip if-block "continueId == 4"
[05:06:56.108]    </control>
[05:06:56.110]    <control if="!isProduction" while="" timeout="0" info="">
[05:06:56.110]      // if-block "!isProduction"
[05:06:56.110]        // =>  FALSE
[05:06:56.110]      // skip if-block "!isProduction"
[05:06:56.110]    </control>
[05:06:56.110]  </sequence>
[05:06:56.110]  
[05:19:33.722]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:19:33.722]  
[05:19:33.736]  <debugvars>
[05:19:33.736]    // Pre-defined
[05:19:33.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:33.736]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:33.736]    __dp=0x00000000
[05:19:33.736]    __ap=0x00000000
[05:19:33.736]    __traceout=0x00000000      (Trace Disabled)
[05:19:33.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:33.736]    __FlashAddr=0x00000000
[05:19:33.736]    __FlashLen=0x00000000
[05:19:33.736]    __FlashArg=0x00000000
[05:19:33.736]    __FlashOp=0x00000000
[05:19:33.736]    __Result=0x00000000
[05:19:33.736]  </debugvars>
[05:19:33.736]  
[05:19:33.736]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:19:33.736]    <block atomic="false" info="">
[05:19:33.736]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:19:33.736]        // -> [isSWJ <= 0x00000001]
[05:19:33.736]      __var hasDormant = __protocol & 0x00020000;
[05:19:33.736]        // -> [hasDormant <= 0x00000000]
[05:19:33.736]      __var protType   = __protocol & 0x0000FFFF;
[05:19:33.736]        // -> [protType <= 0x00000002]
[05:19:33.736]    </block>
[05:19:33.736]    <control if="protType == 1" while="" timeout="0" info="">
[05:19:33.736]      // if-block "protType == 1"
[05:19:33.736]        // =>  FALSE
[05:19:33.736]      // skip if-block "protType == 1"
[05:19:33.736]    </control>
[05:19:33.736]    <control if="protType == 2" while="" timeout="0" info="">
[05:19:33.736]      // if-block "protType == 2"
[05:19:33.736]        // =>  TRUE
[05:19:33.736]      <control if="isSWJ" while="" timeout="0" info="">
[05:19:33.736]        // if-block "isSWJ"
[05:19:33.736]          // =>  TRUE
[05:19:33.736]        <control if="hasDormant" while="" timeout="0" info="">
[05:19:33.736]          // if-block "hasDormant"
[05:19:33.736]            // =>  FALSE
[05:19:33.736]          // skip if-block "hasDormant"
[05:19:33.736]        </control>
[05:19:33.736]        <control if="!hasDormant" while="" timeout="0" info="">
[05:19:33.736]          // if-block "!hasDormant"
[05:19:33.736]            // =>  TRUE
[05:19:33.736]          <block atomic="false" info="">
[05:19:33.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:19:33.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:33.742]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:19:33.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:19:33.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:19:33.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:33.742]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:19:33.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:19:33.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:19:33.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:33.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:19:33.742]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:19:33.742]          </block>
[05:19:33.742]          // end if-block "!hasDormant"
[05:19:33.742]        </control>
[05:19:33.742]        // end if-block "isSWJ"
[05:19:33.742]      </control>
[05:19:33.742]      <control if="!isSWJ" while="" timeout="0" info="">
[05:19:33.742]        // if-block "!isSWJ"
[05:19:33.742]          // =>  FALSE
[05:19:33.742]        // skip if-block "!isSWJ"
[05:19:33.742]      </control>
[05:19:33.752]      <block atomic="false" info="">
[05:19:33.752]        ReadDP(0x0);
[05:19:33.754]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:19:33.754]      </block>
[05:19:33.754]      // end if-block "protType == 2"
[05:19:33.754]    </control>
[05:19:33.754]  </sequence>
[05:19:33.754]  
[05:19:33.754]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:19:33.754]  
[05:19:33.754]  <debugvars>
[05:19:33.754]    // Pre-defined
[05:19:33.754]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:33.754]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:33.754]    __dp=0x00000000
[05:19:33.754]    __ap=0x00000000
[05:19:33.754]    __traceout=0x00000000      (Trace Disabled)
[05:19:33.754]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:33.754]    __FlashAddr=0x00000000
[05:19:33.754]    __FlashLen=0x00000000
[05:19:33.754]    __FlashArg=0x00000000
[05:19:33.754]    __FlashOp=0x00000000
[05:19:33.754]    __Result=0x00000000
[05:19:33.754]  </debugvars>
[05:19:33.754]  
[05:19:33.754]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:19:33.754]    <block atomic="false" info="">
[05:19:33.754]      __var SW_DP_ABORT       = 0x0;
[05:19:33.754]        // -> [SW_DP_ABORT <= 0x00000000]
[05:19:33.754]      __var DP_CTRL_STAT      = 0x4;
[05:19:33.754]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:19:33.754]      __var DP_SELECT         = 0x8;
[05:19:33.754]        // -> [DP_SELECT <= 0x00000008]
[05:19:33.754]      __var powered_down      = 0;
[05:19:33.754]        // -> [powered_down <= 0x00000000]
[05:19:33.754]      WriteDP(DP_SELECT, 0x00000000);
[05:19:33.754]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:19:33.754]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:19:33.762]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:19:33.762]        // -> [powered_down <= 0x00000001]
[05:19:33.762]    </block>
[05:19:33.762]    <control if="powered_down" while="" timeout="0" info="">
[05:19:33.762]      // if-block "powered_down"
[05:19:33.762]        // =>  TRUE
[05:19:33.762]      <block atomic="false" info="">
[05:19:33.762]        Message(0, "Debug/System power-up request sent");
[05:19:33.762]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:19:33.762]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:19:33.762]      </block>
[05:19:33.762]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:19:33.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:19:33.762]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:19:33.772]        // while-condition  =>  FALSE
[05:19:33.772]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:19:33.772]      </control>
[05:19:33.772]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:19:33.772]        // if-block "(__protocol & 0xFFFF) == 1"
[05:19:33.772]          // =>  FALSE
[05:19:33.772]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:19:33.772]      </control>
[05:19:33.772]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:19:33.772]        // if-block "(__protocol & 0xFFFF) == 2"
[05:19:33.772]          // =>  TRUE
[05:19:33.772]        <block atomic="false" info="">
[05:19:33.772]          Message(0, "executing SWD power up");
[05:19:33.772]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:19:33.772]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:19:33.772]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:19:33.772]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:19:33.772]        </block>
[05:19:33.772]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:19:33.772]      </control>
[05:19:33.772]      // end if-block "powered_down"
[05:19:33.772]    </control>
[05:19:33.772]    <block atomic="false" info="">
[05:19:33.772]      __var DEBUG_PORT_VAL    = 0;
[05:19:33.772]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:19:33.772]      __var ACCESS_POINT_VAL  = 0;
[05:19:33.772]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:19:33.772]      __ap = 1; 
[05:19:33.772]        // -> [__ap <= 0x00000001]
[05:19:33.772]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:19:33.782]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:19:33.782]      __ap = 4;
[05:19:33.782]        // -> [__ap <= 0x00000004]
[05:19:33.782]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:33.782]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:19:33.782]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:19:33.782]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:33.782]    </block>
[05:19:33.782]    <block atomic="false" info="">
[05:19:33.782]      __var nReset = 0x80;
[05:19:33.782]        // -> [nReset <= 0x00000080]
[05:19:33.782]      __var canReadPins = 0;
[05:19:33.782]        // -> [canReadPins <= 0x00000000]
[05:19:33.782]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:19:33.782]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:19:33.782]        // -> [canReadPins <= 0x00000001]
[05:19:33.782]    </block>
[05:19:33.782]    <control if="" while="1" timeout="200" info="">
[05:19:33.782]      // while "1"  (timeout="200")
[05:19:33.782]      // while-condition  =>  TRUE
[05:19:33.782]      // while "1"  (timeout="200")
[05:19:33.782]      // while-condition  =>  TRUE
[05:19:33.782]      // while "1"  (timeout="200")
[05:19:33.782]      // while-condition  =>  TRUE
[05:19:33.782]      // while "1"  (timeout="200")
[05:19:33.792]      // while-condition  =>  TRUE
[05:19:33.792]      // while "1"  (timeout="200")
[05:19:33.792]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.793]      // while-condition  =>  TRUE
[05:19:33.793]      // while "1"  (timeout="200")
[05:19:33.794]      // while-condition  =>  TRUE
[05:19:33.794]      // while "1"  (timeout="200")
[05:19:33.794]      // while-condition  =>  TRUE
[05:19:33.794]      // while "1"  (timeout="200")
[05:19:33.794]      // while-condition  =>  TRUE
[05:19:33.794]      // while "1"  (timeout="200")
[05:19:33.794]      // while-condition  =>  TRUE
[05:19:33.794]      // while "1"  (timeout="200")
[05:19:33.794]      // while-condition  =>  TRUE
[05:19:33.796]      // while "1"  (timeout="200")
[05:19:33.796]      // while-condition  =>  TRUE
[05:19:33.796]      // while "1"  (timeout="200")
[05:19:33.796]      // while-condition  =>  TRUE
[05:19:33.796]      // while "1"  (timeout="200")
[05:19:33.796]      // while-condition  =>  TRUE
[05:19:33.796]      // while "1"  (timeout="200")
[05:19:33.796]      // while-condition  =>  TRUE
[05:19:33.796]      // while "1"  (timeout="200")
[05:19:33.796]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.797]      // while-condition  =>  TRUE
[05:19:33.797]      // while "1"  (timeout="200")
[05:19:33.798]      // while-condition  =>  TRUE
[05:19:33.798]      // while "1"  (timeout="200")
[05:19:33.798]      // while  =>  TIMEOUT
[05:19:33.798]      // end while "1"
[05:19:33.798]    </control>
[05:19:33.798]    <control if="canReadPins" while="" timeout="0" info="">
[05:19:33.798]      // if-block "canReadPins"
[05:19:33.798]        // =>  TRUE
[05:19:33.798]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:19:33.798]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:19:33.800]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:19:33.800]        // while-condition  =>  FALSE
[05:19:33.800]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:19:33.800]      </control>
[05:19:33.803]      // end if-block "canReadPins"
[05:19:33.803]    </control>
[05:19:33.803]    <control if="!canReadPins" while="" timeout="0" info="">
[05:19:33.803]      // if-block "!canReadPins"
[05:19:33.803]        // =>  FALSE
[05:19:33.803]      // skip if-block "!canReadPins"
[05:19:33.803]    </control>
[05:19:33.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:19:33.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:33.803]        // =>  TRUE
[05:19:33.803]      <block atomic="false" info="">
[05:19:33.803]        WriteAP(0x00, 0x190008);
[05:19:33.805]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:33.805]        WriteAP(0xF0, 0x01);
[05:19:33.809]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:33.809]      </block>
[05:19:33.809]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:33.809]    </control>
[05:19:33.809]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:19:33.809]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:33.809]        // =>  FALSE
[05:19:33.809]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:33.809]    </control>
[05:19:33.809]    <block atomic="false" info="">
[05:19:33.809]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:33.813]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:19:33.813]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:19:33.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:33.813]      __ap = 0; //lets make sure we reset the access point selection
[05:19:33.813]        // -> [__ap <= 0x00000000]
[05:19:33.813]    </block>
[05:19:33.813]  </sequence>
[05:19:33.813]  
[05:19:33.836]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:19:33.836]  
[05:19:33.836]  <debugvars>
[05:19:33.836]    // Pre-defined
[05:19:33.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:33.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:33.836]    __dp=0x00000000
[05:19:33.836]    __ap=0x00000000
[05:19:33.836]    __traceout=0x00000000      (Trace Disabled)
[05:19:33.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:33.836]    __FlashAddr=0x00000000
[05:19:33.836]    __FlashLen=0x00000000
[05:19:33.836]    __FlashArg=0x00000000
[05:19:33.836]    __FlashOp=0x00000000
[05:19:33.836]    __Result=0x00000000
[05:19:33.836]  </debugvars>
[05:19:33.836]  
[05:19:33.836]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:19:33.836]    <block atomic="false" info="">
[05:19:33.838]      __var deviceID = 0;
[05:19:33.838]        // -> [deviceID <= 0x00000000]
[05:19:33.838]      __var version = 0;
[05:19:33.838]        // -> [version <= 0x00000000]
[05:19:33.838]      __var partNum = 0;
[05:19:33.838]        // -> [partNum <= 0x00000000]
[05:19:33.838]      __var manuf = 0;
[05:19:33.838]        // -> [manuf <= 0x00000000]
[05:19:33.838]      __var isMSPM0G1X0X_G3X0X = 0;
[05:19:33.838]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:19:33.840]      __var isProduction = 0;
[05:19:33.840]        // -> [isProduction <= 0x00000000]
[05:19:33.840]      __var continueId = 0;
[05:19:33.840]        // -> [continueId <= 0x00000000]
[05:19:33.840]      deviceID =   Read32(0x41C40004);
[05:19:33.845]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:19:33.845]        // -> [deviceID <= 0x2BB8802F]
[05:19:33.845]      version = deviceID >> 28;
[05:19:33.845]        // -> [version <= 0x00000002]
[05:19:33.845]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:19:33.845]        // -> [partNum <= 0x0000BB88]
[05:19:33.845]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:19:33.845]        // -> [manuf <= 0x00000017]
[05:19:33.845]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:19:33.845]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:19:33.845]      isProduction = (version > 0);
[05:19:33.845]        // -> [isProduction <= 0x00000001]
[05:19:33.845]    </block>
[05:19:33.845]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:19:33.845]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:19:33.845]        // =>  FALSE
[05:19:33.845]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:19:33.845]    </control>
[05:19:33.848]    <control if="continueId == 4" while="" timeout="0" info="">
[05:19:33.848]      // if-block "continueId == 4"
[05:19:33.848]        // =>  FALSE
[05:19:33.848]      // skip if-block "continueId == 4"
[05:19:33.848]    </control>
[05:19:33.848]    <control if="!isProduction" while="" timeout="0" info="">
[05:19:33.848]      // if-block "!isProduction"
[05:19:33.848]        // =>  FALSE
[05:19:33.848]      // skip if-block "!isProduction"
[05:19:33.848]    </control>
[05:19:33.849]  </sequence>
[05:19:33.849]  
[05:29:49.660]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:29:49.660]  
[05:29:49.660]  <debugvars>
[05:29:49.660]    // Pre-defined
[05:29:49.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:49.660]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:49.660]    __dp=0x00000000
[05:29:49.670]    __ap=0x00000000
[05:29:49.670]    __traceout=0x00000000      (Trace Disabled)
[05:29:49.670]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:49.670]    __FlashAddr=0x00000000
[05:29:49.670]    __FlashLen=0x00000000
[05:29:49.670]    __FlashArg=0x00000000
[05:29:49.670]    __FlashOp=0x00000000
[05:29:49.670]    __Result=0x00000000
[05:29:49.670]  </debugvars>
[05:29:49.670]  
[05:29:49.670]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:29:49.670]    <block atomic="false" info="">
[05:29:49.670]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:29:49.670]        // -> [isSWJ <= 0x00000001]
[05:29:49.670]      __var hasDormant = __protocol & 0x00020000;
[05:29:49.670]        // -> [hasDormant <= 0x00000000]
[05:29:49.670]      __var protType   = __protocol & 0x0000FFFF;
[05:29:49.670]        // -> [protType <= 0x00000002]
[05:29:49.670]    </block>
[05:29:49.670]    <control if="protType == 1" while="" timeout="0" info="">
[05:29:49.670]      // if-block "protType == 1"
[05:29:49.670]        // =>  FALSE
[05:29:49.670]      // skip if-block "protType == 1"
[05:29:49.670]    </control>
[05:29:49.670]    <control if="protType == 2" while="" timeout="0" info="">
[05:29:49.670]      // if-block "protType == 2"
[05:29:49.670]        // =>  TRUE
[05:29:49.670]      <control if="isSWJ" while="" timeout="0" info="">
[05:29:49.670]        // if-block "isSWJ"
[05:29:49.670]          // =>  TRUE
[05:29:49.670]        <control if="hasDormant" while="" timeout="0" info="">
[05:29:49.670]          // if-block "hasDormant"
[05:29:49.670]            // =>  FALSE
[05:29:49.670]          // skip if-block "hasDormant"
[05:29:49.670]        </control>
[05:29:49.670]        <control if="!hasDormant" while="" timeout="0" info="">
[05:29:49.670]          // if-block "!hasDormant"
[05:29:49.670]            // =>  TRUE
[05:29:49.670]          <block atomic="false" info="">
[05:29:49.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:29:49.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:49.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:29:49.670]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:29:49.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:29:49.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:49.670]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:29:49.680]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:29:49.680]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:29:49.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:49.680]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:29:49.680]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:29:49.680]          </block>
[05:29:49.680]          // end if-block "!hasDormant"
[05:29:49.680]        </control>
[05:29:49.680]        // end if-block "isSWJ"
[05:29:49.680]      </control>
[05:29:49.680]      <control if="!isSWJ" while="" timeout="0" info="">
[05:29:49.680]        // if-block "!isSWJ"
[05:29:49.680]          // =>  FALSE
[05:29:49.680]        // skip if-block "!isSWJ"
[05:29:49.680]      </control>
[05:29:49.680]      <block atomic="false" info="">
[05:29:49.680]        ReadDP(0x0);
[05:29:49.680]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:29:49.680]      </block>
[05:29:49.680]      // end if-block "protType == 2"
[05:29:49.680]    </control>
[05:29:49.680]  </sequence>
[05:29:49.680]  
[05:29:49.690]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:29:49.690]  
[05:29:49.692]  <debugvars>
[05:29:49.692]    // Pre-defined
[05:29:49.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:49.692]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:49.692]    __dp=0x00000000
[05:29:49.692]    __ap=0x00000000
[05:29:49.692]    __traceout=0x00000000      (Trace Disabled)
[05:29:49.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:49.692]    __FlashAddr=0x00000000
[05:29:49.692]    __FlashLen=0x00000000
[05:29:49.692]    __FlashArg=0x00000000
[05:29:49.692]    __FlashOp=0x00000000
[05:29:49.692]    __Result=0x00000000
[05:29:49.692]  </debugvars>
[05:29:49.692]  
[05:29:49.692]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:29:49.692]    <block atomic="false" info="">
[05:29:49.692]      __var SW_DP_ABORT       = 0x0;
[05:29:49.692]        // -> [SW_DP_ABORT <= 0x00000000]
[05:29:49.692]      __var DP_CTRL_STAT      = 0x4;
[05:29:49.692]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:29:49.692]      __var DP_SELECT         = 0x8;
[05:29:49.692]        // -> [DP_SELECT <= 0x00000008]
[05:29:49.692]      __var powered_down      = 0;
[05:29:49.692]        // -> [powered_down <= 0x00000000]
[05:29:49.692]      WriteDP(DP_SELECT, 0x00000000);
[05:29:49.692]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:29:49.692]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:29:49.700]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:29:49.700]        // -> [powered_down <= 0x00000001]
[05:29:49.700]    </block>
[05:29:49.700]    <control if="powered_down" while="" timeout="0" info="">
[05:29:49.700]      // if-block "powered_down"
[05:29:49.700]        // =>  TRUE
[05:29:49.700]      <block atomic="false" info="">
[05:29:49.700]        Message(0, "Debug/System power-up request sent");
[05:29:49.700]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:29:49.700]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:29:49.700]      </block>
[05:29:49.700]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:29:49.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:29:49.700]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:29:49.700]        // while-condition  =>  FALSE
[05:29:49.700]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:29:49.700]      </control>
[05:29:49.700]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:29:49.700]        // if-block "(__protocol & 0xFFFF) == 1"
[05:29:49.700]          // =>  FALSE
[05:29:49.700]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:29:49.700]      </control>
[05:29:49.710]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:29:49.710]        // if-block "(__protocol & 0xFFFF) == 2"
[05:29:49.710]          // =>  TRUE
[05:29:49.710]        <block atomic="false" info="">
[05:29:49.710]          Message(0, "executing SWD power up");
[05:29:49.713]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:29:49.713]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:29:49.713]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:29:49.713]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:29:49.713]        </block>
[05:29:49.713]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:29:49.713]      </control>
[05:29:49.713]      // end if-block "powered_down"
[05:29:49.713]    </control>
[05:29:49.713]    <block atomic="false" info="">
[05:29:49.713]      __var DEBUG_PORT_VAL    = 0;
[05:29:49.713]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:29:49.713]      __var ACCESS_POINT_VAL  = 0;
[05:29:49.713]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:29:49.713]      __ap = 1; 
[05:29:49.713]        // -> [__ap <= 0x00000001]
[05:29:49.713]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:29:49.721]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:29:49.721]      __ap = 4;
[05:29:49.721]        // -> [__ap <= 0x00000004]
[05:29:49.721]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:49.721]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:29:49.721]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:29:49.721]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:49.721]    </block>
[05:29:49.721]    <block atomic="false" info="">
[05:29:49.721]      __var nReset = 0x80;
[05:29:49.721]        // -> [nReset <= 0x00000080]
[05:29:49.721]      __var canReadPins = 0;
[05:29:49.721]        // -> [canReadPins <= 0x00000000]
[05:29:49.721]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:29:49.731]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:29:49.731]        // -> [canReadPins <= 0x00000001]
[05:29:49.731]    </block>
[05:29:49.731]    <control if="" while="1" timeout="200" info="">
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.731]      // while-condition  =>  TRUE
[05:29:49.731]      // while "1"  (timeout="200")
[05:29:49.741]      // while-condition  =>  TRUE
[05:29:49.741]      // while "1"  (timeout="200")
[05:29:49.741]      // while  =>  TIMEOUT
[05:29:49.741]      // end while "1"
[05:29:49.741]    </control>
[05:29:49.741]    <control if="canReadPins" while="" timeout="0" info="">
[05:29:49.741]      // if-block "canReadPins"
[05:29:49.741]        // =>  TRUE
[05:29:49.741]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:29:49.741]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:29:49.741]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:29:49.741]        // while-condition  =>  FALSE
[05:29:49.741]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:29:49.741]      </control>
[05:29:49.741]      // end if-block "canReadPins"
[05:29:49.741]    </control>
[05:29:49.741]    <control if="!canReadPins" while="" timeout="0" info="">
[05:29:49.741]      // if-block "!canReadPins"
[05:29:49.741]        // =>  FALSE
[05:29:49.741]      // skip if-block "!canReadPins"
[05:29:49.741]    </control>
[05:29:49.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:29:49.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:49.741]        // =>  TRUE
[05:29:49.741]      <block atomic="false" info="">
[05:29:49.741]        WriteAP(0x00, 0x190008);
[05:29:49.741]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:49.741]        WriteAP(0xF0, 0x01);
[05:29:49.741]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:49.741]      </block>
[05:29:49.741]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:49.741]    </control>
[05:29:49.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:29:49.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:49.751]        // =>  FALSE
[05:29:49.751]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:49.751]    </control>
[05:29:49.751]    <block atomic="false" info="">
[05:29:49.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:49.753]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:29:49.753]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:29:49.753]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:49.753]      __ap = 0; //lets make sure we reset the access point selection
[05:29:49.753]        // -> [__ap <= 0x00000000]
[05:29:49.753]    </block>
[05:29:49.753]  </sequence>
[05:29:49.753]  
[05:29:49.774]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:29:49.774]  
[05:29:49.774]  <debugvars>
[05:29:49.774]    // Pre-defined
[05:29:49.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:49.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:49.782]    __dp=0x00000000
[05:29:49.782]    __ap=0x00000000
[05:29:49.782]    __traceout=0x00000000      (Trace Disabled)
[05:29:49.782]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:49.782]    __FlashAddr=0x00000000
[05:29:49.782]    __FlashLen=0x00000000
[05:29:49.783]    __FlashArg=0x00000000
[05:29:49.783]    __FlashOp=0x00000000
[05:29:49.783]    __Result=0x00000000
[05:29:49.783]  </debugvars>
[05:29:49.783]  
[05:29:49.783]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:29:49.783]    <block atomic="false" info="">
[05:29:49.784]      __var deviceID = 0;
[05:29:49.784]        // -> [deviceID <= 0x00000000]
[05:29:49.784]      __var version = 0;
[05:29:49.784]        // -> [version <= 0x00000000]
[05:29:49.784]      __var partNum = 0;
[05:29:49.784]        // -> [partNum <= 0x00000000]
[05:29:49.784]      __var manuf = 0;
[05:29:49.784]        // -> [manuf <= 0x00000000]
[05:29:49.784]      __var isMSPM0G1X0X_G3X0X = 0;
[05:29:49.784]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:29:49.784]      __var isProduction = 0;
[05:29:49.784]        // -> [isProduction <= 0x00000000]
[05:29:49.784]      __var continueId = 0;
[05:29:49.784]        // -> [continueId <= 0x00000000]
[05:29:49.784]      deviceID =   Read32(0x41C40004);
[05:29:49.789]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:29:49.789]        // -> [deviceID <= 0x2BB8802F]
[05:29:49.789]      version = deviceID >> 28;
[05:29:49.789]        // -> [version <= 0x00000002]
[05:29:49.789]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:29:49.789]        // -> [partNum <= 0x0000BB88]
[05:29:49.789]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:29:49.789]        // -> [manuf <= 0x00000017]
[05:29:49.789]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:29:49.789]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:29:49.789]      isProduction = (version > 0);
[05:29:49.790]        // -> [isProduction <= 0x00000001]
[05:29:49.790]    </block>
[05:29:49.790]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:29:49.790]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:29:49.790]        // =>  FALSE
[05:29:49.790]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:29:49.790]    </control>
[05:29:49.790]    <control if="continueId == 4" while="" timeout="0" info="">
[05:29:49.790]      // if-block "continueId == 4"
[05:29:49.790]        // =>  FALSE
[05:29:49.790]      // skip if-block "continueId == 4"
[05:29:49.790]    </control>
[05:29:49.790]    <control if="!isProduction" while="" timeout="0" info="">
[05:29:49.790]      // if-block "!isProduction"
[05:29:49.792]        // =>  FALSE
[05:29:49.792]      // skip if-block "!isProduction"
[05:29:49.792]    </control>
[05:29:49.792]  </sequence>
[05:29:49.792]  
[05:30:58.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:30:58.591]  
[05:30:58.608]  <debugvars>
[05:30:58.608]    // Pre-defined
[05:30:58.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:58.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:58.608]    __dp=0x00000000
[05:30:58.608]    __ap=0x00000000
[05:30:58.608]    __traceout=0x00000000      (Trace Disabled)
[05:30:58.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:58.608]    __FlashAddr=0x00000000
[05:30:58.608]    __FlashLen=0x00000000
[05:30:58.608]    __FlashArg=0x00000000
[05:30:58.608]    __FlashOp=0x00000000
[05:30:58.608]    __Result=0x00000000
[05:30:58.608]  </debugvars>
[05:30:58.608]  
[05:30:58.608]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:30:58.608]    <block atomic="false" info="">
[05:30:58.608]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:30:58.608]        // -> [isSWJ <= 0x00000001]
[05:30:58.608]      __var hasDormant = __protocol & 0x00020000;
[05:30:58.608]        // -> [hasDormant <= 0x00000000]
[05:30:58.608]      __var protType   = __protocol & 0x0000FFFF;
[05:30:58.608]        // -> [protType <= 0x00000002]
[05:30:58.608]    </block>
[05:30:58.608]    <control if="protType == 1" while="" timeout="0" info="">
[05:30:58.608]      // if-block "protType == 1"
[05:30:58.608]        // =>  FALSE
[05:30:58.608]      // skip if-block "protType == 1"
[05:30:58.608]    </control>
[05:30:58.611]    <control if="protType == 2" while="" timeout="0" info="">
[05:30:58.611]      // if-block "protType == 2"
[05:30:58.611]        // =>  TRUE
[05:30:58.611]      <control if="isSWJ" while="" timeout="0" info="">
[05:30:58.611]        // if-block "isSWJ"
[05:30:58.611]          // =>  TRUE
[05:30:58.611]        <control if="hasDormant" while="" timeout="0" info="">
[05:30:58.611]          // if-block "hasDormant"
[05:30:58.611]            // =>  FALSE
[05:30:58.611]          // skip if-block "hasDormant"
[05:30:58.611]        </control>
[05:30:58.611]        <control if="!hasDormant" while="" timeout="0" info="">
[05:30:58.611]          // if-block "!hasDormant"
[05:30:58.611]            // =>  TRUE
[05:30:58.611]          <block atomic="false" info="">
[05:30:58.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:30:58.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:58.611]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:30:58.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:30:58.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:30:58.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:58.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:30:58.621]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:30:58.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:30:58.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:30:58.621]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:30:58.621]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:30:58.621]          </block>
[05:30:58.621]          // end if-block "!hasDormant"
[05:30:58.621]        </control>
[05:30:58.621]        // end if-block "isSWJ"
[05:30:58.621]      </control>
[05:30:58.621]      <control if="!isSWJ" while="" timeout="0" info="">
[05:30:58.621]        // if-block "!isSWJ"
[05:30:58.621]          // =>  FALSE
[05:30:58.621]        // skip if-block "!isSWJ"
[05:30:58.621]      </control>
[05:30:58.621]      <block atomic="false" info="">
[05:30:58.621]        ReadDP(0x0);
[05:30:58.621]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:30:58.621]      </block>
[05:30:58.621]      // end if-block "protType == 2"
[05:30:58.621]    </control>
[05:30:58.621]  </sequence>
[05:30:58.621]  
[05:30:58.631]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:30:58.631]  
[05:30:58.631]  <debugvars>
[05:30:58.631]    // Pre-defined
[05:30:58.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:58.631]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:58.631]    __dp=0x00000000
[05:30:58.631]    __ap=0x00000000
[05:30:58.631]    __traceout=0x00000000      (Trace Disabled)
[05:30:58.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:58.631]    __FlashAddr=0x00000000
[05:30:58.631]    __FlashLen=0x00000000
[05:30:58.631]    __FlashArg=0x00000000
[05:30:58.631]    __FlashOp=0x00000000
[05:30:58.631]    __Result=0x00000000
[05:30:58.631]  </debugvars>
[05:30:58.631]  
[05:30:58.631]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:30:58.631]    <block atomic="false" info="">
[05:30:58.631]      __var SW_DP_ABORT       = 0x0;
[05:30:58.631]        // -> [SW_DP_ABORT <= 0x00000000]
[05:30:58.631]      __var DP_CTRL_STAT      = 0x4;
[05:30:58.631]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:30:58.631]      __var DP_SELECT         = 0x8;
[05:30:58.631]        // -> [DP_SELECT <= 0x00000008]
[05:30:58.631]      __var powered_down      = 0;
[05:30:58.631]        // -> [powered_down <= 0x00000000]
[05:30:58.631]      WriteDP(DP_SELECT, 0x00000000);
[05:30:58.631]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:30:58.631]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:30:58.631]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:30:58.631]        // -> [powered_down <= 0x00000001]
[05:30:58.631]    </block>
[05:30:58.631]    <control if="powered_down" while="" timeout="0" info="">
[05:30:58.631]      // if-block "powered_down"
[05:30:58.631]        // =>  TRUE
[05:30:58.631]      <block atomic="false" info="">
[05:30:58.631]        Message(0, "Debug/System power-up request sent");
[05:30:58.631]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:30:58.641]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:30:58.641]      </block>
[05:30:58.641]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:30:58.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:30:58.641]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:30:58.641]        // while-condition  =>  FALSE
[05:30:58.641]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:30:58.641]      </control>
[05:30:58.641]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:30:58.641]        // if-block "(__protocol & 0xFFFF) == 1"
[05:30:58.641]          // =>  FALSE
[05:30:58.641]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:30:58.641]      </control>
[05:30:58.641]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:30:58.641]        // if-block "(__protocol & 0xFFFF) == 2"
[05:30:58.641]          // =>  TRUE
[05:30:58.641]        <block atomic="false" info="">
[05:30:58.651]          Message(0, "executing SWD power up");
[05:30:58.651]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:30:58.653]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:30:58.653]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:30:58.653]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:30:58.653]        </block>
[05:30:58.653]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:30:58.653]      </control>
[05:30:58.653]      // end if-block "powered_down"
[05:30:58.653]    </control>
[05:30:58.653]    <block atomic="false" info="">
[05:30:58.653]      __var DEBUG_PORT_VAL    = 0;
[05:30:58.653]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:30:58.653]      __var ACCESS_POINT_VAL  = 0;
[05:30:58.653]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:30:58.653]      __ap = 1; 
[05:30:58.653]        // -> [__ap <= 0x00000001]
[05:30:58.653]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:30:58.653]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:30:58.653]      __ap = 4;
[05:30:58.661]        // -> [__ap <= 0x00000004]
[05:30:58.661]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:30:58.661]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:30:58.661]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:30:58.661]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:30:58.671]    </block>
[05:30:58.671]    <block atomic="false" info="">
[05:30:58.671]      __var nReset = 0x80;
[05:30:58.671]        // -> [nReset <= 0x00000080]
[05:30:58.671]      __var canReadPins = 0;
[05:30:58.671]        // -> [canReadPins <= 0x00000000]
[05:30:58.671]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:30:58.671]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:30:58.671]        // -> [canReadPins <= 0x00000001]
[05:30:58.671]    </block>
[05:30:58.671]    <control if="" while="1" timeout="200" info="">
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.671]      // while-condition  =>  TRUE
[05:30:58.671]      // while "1"  (timeout="200")
[05:30:58.681]      // while-condition  =>  TRUE
[05:30:58.681]      // while "1"  (timeout="200")
[05:30:58.681]      // while  =>  TIMEOUT
[05:30:58.681]      // end while "1"
[05:30:58.681]    </control>
[05:30:58.681]    <control if="canReadPins" while="" timeout="0" info="">
[05:30:58.682]      // if-block "canReadPins"
[05:30:58.682]        // =>  TRUE
[05:30:58.682]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:30:58.682]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:30:58.684]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:30:58.684]        // while-condition  =>  FALSE
[05:30:58.684]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:30:58.684]      </control>
[05:30:58.684]      // end if-block "canReadPins"
[05:30:58.684]    </control>
[05:30:58.684]    <control if="!canReadPins" while="" timeout="0" info="">
[05:30:58.684]      // if-block "!canReadPins"
[05:30:58.684]        // =>  FALSE
[05:30:58.684]      // skip if-block "!canReadPins"
[05:30:58.686]    </control>
[05:30:58.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:30:58.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:30:58.686]        // =>  TRUE
[05:30:58.686]      <block atomic="false" info="">
[05:30:58.686]        WriteAP(0x00, 0x190008);
[05:30:58.688]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:30:58.688]        WriteAP(0xF0, 0x01);
[05:30:58.697]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:30:58.697]      </block>
[05:30:58.697]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:30:58.697]    </control>
[05:30:58.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:30:58.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:30:58.697]        // =>  FALSE
[05:30:58.697]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:30:58.697]    </control>
[05:30:58.697]    <block atomic="false" info="">
[05:30:58.697]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:30:58.702]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:30:58.702]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:30:58.702]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:30:58.702]      __ap = 0; //lets make sure we reset the access point selection
[05:30:58.702]        // -> [__ap <= 0x00000000]
[05:30:58.702]    </block>
[05:30:58.702]  </sequence>
[05:30:58.702]  
[05:30:58.722]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:30:58.722]  
[05:30:58.722]  <debugvars>
[05:30:58.722]    // Pre-defined
[05:30:58.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:30:58.722]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:30:58.722]    __dp=0x00000000
[05:30:58.722]    __ap=0x00000000
[05:30:58.722]    __traceout=0x00000000      (Trace Disabled)
[05:30:58.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:30:58.725]    __FlashAddr=0x00000000
[05:30:58.725]    __FlashLen=0x00000000
[05:30:58.725]    __FlashArg=0x00000000
[05:30:58.725]    __FlashOp=0x00000000
[05:30:58.725]    __Result=0x00000000
[05:30:58.725]  </debugvars>
[05:30:58.725]  
[05:30:58.725]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:30:58.725]    <block atomic="false" info="">
[05:30:58.725]      __var deviceID = 0;
[05:30:58.725]        // -> [deviceID <= 0x00000000]
[05:30:58.725]      __var version = 0;
[05:30:58.725]        // -> [version <= 0x00000000]
[05:30:58.725]      __var partNum = 0;
[05:30:58.725]        // -> [partNum <= 0x00000000]
[05:30:58.725]      __var manuf = 0;
[05:30:58.725]        // -> [manuf <= 0x00000000]
[05:30:58.725]      __var isMSPM0G1X0X_G3X0X = 0;
[05:30:58.725]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:30:58.725]      __var isProduction = 0;
[05:30:58.725]        // -> [isProduction <= 0x00000000]
[05:30:58.725]      __var continueId = 0;
[05:30:58.725]        // -> [continueId <= 0x00000000]
[05:30:58.725]      deviceID =   Read32(0x41C40004);
[05:30:58.725]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:30:58.725]        // -> [deviceID <= 0x2BB8802F]
[05:30:58.725]      version = deviceID >> 28;
[05:30:58.733]        // -> [version <= 0x00000002]
[05:30:58.733]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:30:58.733]        // -> [partNum <= 0x0000BB88]
[05:30:58.733]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:30:58.733]        // -> [manuf <= 0x00000017]
[05:30:58.733]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:30:58.733]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:30:58.733]      isProduction = (version > 0);
[05:30:58.733]        // -> [isProduction <= 0x00000001]
[05:30:58.733]    </block>
[05:30:58.733]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:30:58.733]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:30:58.733]        // =>  FALSE
[05:30:58.733]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:30:58.733]    </control>
[05:30:58.733]    <control if="continueId == 4" while="" timeout="0" info="">
[05:30:58.733]      // if-block "continueId == 4"
[05:30:58.733]        // =>  FALSE
[05:30:58.733]      // skip if-block "continueId == 4"
[05:30:58.733]    </control>
[05:30:58.733]    <control if="!isProduction" while="" timeout="0" info="">
[05:30:58.733]      // if-block "!isProduction"
[05:30:58.733]        // =>  FALSE
[05:30:58.733]      // skip if-block "!isProduction"
[05:30:58.733]    </control>
[05:30:58.733]  </sequence>
[05:30:58.733]  
[05:31:54.433]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:31:54.433]  
[05:31:54.441]  <debugvars>
[05:31:54.441]    // Pre-defined
[05:31:54.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:54.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:54.441]    __dp=0x00000000
[05:31:54.441]    __ap=0x00000000
[05:31:54.441]    __traceout=0x00000000      (Trace Disabled)
[05:31:54.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:54.442]    __FlashAddr=0x00000000
[05:31:54.442]    __FlashLen=0x00000000
[05:31:54.442]    __FlashArg=0x00000000
[05:31:54.442]    __FlashOp=0x00000000
[05:31:54.442]    __Result=0x00000000
[05:31:54.442]  </debugvars>
[05:31:54.442]  
[05:31:54.442]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:31:54.442]    <block atomic="false" info="">
[05:31:54.442]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:31:54.443]        // -> [isSWJ <= 0x00000001]
[05:31:54.443]      __var hasDormant = __protocol & 0x00020000;
[05:31:54.443]        // -> [hasDormant <= 0x00000000]
[05:31:54.443]      __var protType   = __protocol & 0x0000FFFF;
[05:31:54.443]        // -> [protType <= 0x00000002]
[05:31:54.443]    </block>
[05:31:54.443]    <control if="protType == 1" while="" timeout="0" info="">
[05:31:54.443]      // if-block "protType == 1"
[05:31:54.443]        // =>  FALSE
[05:31:54.443]      // skip if-block "protType == 1"
[05:31:54.443]    </control>
[05:31:54.444]    <control if="protType == 2" while="" timeout="0" info="">
[05:31:54.444]      // if-block "protType == 2"
[05:31:54.444]        // =>  TRUE
[05:31:54.444]      <control if="isSWJ" while="" timeout="0" info="">
[05:31:54.444]        // if-block "isSWJ"
[05:31:54.444]          // =>  TRUE
[05:31:54.444]        <control if="hasDormant" while="" timeout="0" info="">
[05:31:54.446]          // if-block "hasDormant"
[05:31:54.446]            // =>  FALSE
[05:31:54.446]          // skip if-block "hasDormant"
[05:31:54.446]        </control>
[05:31:54.446]        <control if="!hasDormant" while="" timeout="0" info="">
[05:31:54.446]          // if-block "!hasDormant"
[05:31:54.446]            // =>  TRUE
[05:31:54.446]          <block atomic="false" info="">
[05:31:54.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:31:54.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:54.448]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:31:54.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:31:54.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:31:54.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:54.452]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:31:54.452]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:31:54.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:31:54.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:31:54.455]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:31:54.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:31:54.455]          </block>
[05:31:54.455]          // end if-block "!hasDormant"
[05:31:54.455]        </control>
[05:31:54.455]        // end if-block "isSWJ"
[05:31:54.455]      </control>
[05:31:54.455]      <control if="!isSWJ" while="" timeout="0" info="">
[05:31:54.455]        // if-block "!isSWJ"
[05:31:54.455]          // =>  FALSE
[05:31:54.455]        // skip if-block "!isSWJ"
[05:31:54.455]      </control>
[05:31:54.455]      <block atomic="false" info="">
[05:31:54.455]        ReadDP(0x0);
[05:31:54.455]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:31:54.455]      </block>
[05:31:54.455]      // end if-block "protType == 2"
[05:31:54.455]    </control>
[05:31:54.455]  </sequence>
[05:31:54.455]  
[05:31:54.462]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:31:54.462]  
[05:31:54.462]  <debugvars>
[05:31:54.462]    // Pre-defined
[05:31:54.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:54.462]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:54.462]    __dp=0x00000000
[05:31:54.462]    __ap=0x00000000
[05:31:54.462]    __traceout=0x00000000      (Trace Disabled)
[05:31:54.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:54.462]    __FlashAddr=0x00000000
[05:31:54.462]    __FlashLen=0x00000000
[05:31:54.463]    __FlashArg=0x00000000
[05:31:54.463]    __FlashOp=0x00000000
[05:31:54.463]    __Result=0x00000000
[05:31:54.463]  </debugvars>
[05:31:54.463]  
[05:31:54.463]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:31:54.463]    <block atomic="false" info="">
[05:31:54.463]      __var SW_DP_ABORT       = 0x0;
[05:31:54.463]        // -> [SW_DP_ABORT <= 0x00000000]
[05:31:54.463]      __var DP_CTRL_STAT      = 0x4;
[05:31:54.465]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:31:54.465]      __var DP_SELECT         = 0x8;
[05:31:54.465]        // -> [DP_SELECT <= 0x00000008]
[05:31:54.465]      __var powered_down      = 0;
[05:31:54.465]        // -> [powered_down <= 0x00000000]
[05:31:54.465]      WriteDP(DP_SELECT, 0x00000000);
[05:31:54.465]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:31:54.467]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:31:54.468]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:31:54.468]        // -> [powered_down <= 0x00000001]
[05:31:54.468]    </block>
[05:31:54.468]    <control if="powered_down" while="" timeout="0" info="">
[05:31:54.468]      // if-block "powered_down"
[05:31:54.468]        // =>  TRUE
[05:31:54.468]      <block atomic="false" info="">
[05:31:54.468]        Message(0, "Debug/System power-up request sent");
[05:31:54.468]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:31:54.472]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:31:54.472]      </block>
[05:31:54.472]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:31:54.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:31:54.475]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:31:54.475]        // while-condition  =>  FALSE
[05:31:54.475]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:31:54.476]      </control>
[05:31:54.476]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:31:54.476]        // if-block "(__protocol & 0xFFFF) == 1"
[05:31:54.476]          // =>  FALSE
[05:31:54.476]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:31:54.476]      </control>
[05:31:54.476]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:31:54.476]        // if-block "(__protocol & 0xFFFF) == 2"
[05:31:54.476]          // =>  TRUE
[05:31:54.476]        <block atomic="false" info="">
[05:31:54.476]          Message(0, "executing SWD power up");
[05:31:54.476]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:31:54.476]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:31:54.476]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:31:54.481]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:31:54.481]        </block>
[05:31:54.481]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:31:54.481]      </control>
[05:31:54.481]      // end if-block "powered_down"
[05:31:54.481]    </control>
[05:31:54.481]    <block atomic="false" info="">
[05:31:54.481]      __var DEBUG_PORT_VAL    = 0;
[05:31:54.481]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:31:54.481]      __var ACCESS_POINT_VAL  = 0;
[05:31:54.481]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:31:54.485]      __ap = 1; 
[05:31:54.485]        // -> [__ap <= 0x00000001]
[05:31:54.485]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:31:54.485]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:31:54.485]      __ap = 4;
[05:31:54.485]        // -> [__ap <= 0x00000004]
[05:31:54.485]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:31:54.485]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:31:54.485]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:31:54.485]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:31:54.485]    </block>
[05:31:54.485]    <block atomic="false" info="">
[05:31:54.485]      __var nReset = 0x80;
[05:31:54.485]        // -> [nReset <= 0x00000080]
[05:31:54.485]      __var canReadPins = 0;
[05:31:54.485]        // -> [canReadPins <= 0x00000000]
[05:31:54.485]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:31:54.496]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:31:54.496]        // -> [canReadPins <= 0x00000001]
[05:31:54.496]    </block>
[05:31:54.496]    <control if="" while="1" timeout="200" info="">
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.496]      // while-condition  =>  TRUE
[05:31:54.496]      // while "1"  (timeout="200")
[05:31:54.505]      // while-condition  =>  TRUE
[05:31:54.505]      // while "1"  (timeout="200")
[05:31:54.505]      // while  =>  TIMEOUT
[05:31:54.505]      // end while "1"
[05:31:54.505]    </control>
[05:31:54.505]    <control if="canReadPins" while="" timeout="0" info="">
[05:31:54.505]      // if-block "canReadPins"
[05:31:54.505]        // =>  TRUE
[05:31:54.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:31:54.505]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:31:54.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:31:54.505]        // while-condition  =>  FALSE
[05:31:54.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:31:54.505]      </control>
[05:31:54.505]      // end if-block "canReadPins"
[05:31:54.505]    </control>
[05:31:54.505]    <control if="!canReadPins" while="" timeout="0" info="">
[05:31:54.505]      // if-block "!canReadPins"
[05:31:54.505]        // =>  FALSE
[05:31:54.505]      // skip if-block "!canReadPins"
[05:31:54.505]    </control>
[05:31:54.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:31:54.505]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:31:54.505]        // =>  TRUE
[05:31:54.505]      <block atomic="false" info="">
[05:31:54.505]        WriteAP(0x00, 0x190008);
[05:31:54.505]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:31:54.505]        WriteAP(0xF0, 0x01);
[05:31:54.515]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:31:54.515]      </block>
[05:31:54.515]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:31:54.515]    </control>
[05:31:54.515]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:31:54.515]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:31:54.515]        // =>  FALSE
[05:31:54.515]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:31:54.515]    </control>
[05:31:54.515]    <block atomic="false" info="">
[05:31:54.515]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:31:54.525]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:31:54.525]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:31:54.525]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:31:54.526]      __ap = 0; //lets make sure we reset the access point selection
[05:31:54.526]        // -> [__ap <= 0x00000000]
[05:31:54.526]    </block>
[05:31:54.526]  </sequence>
[05:31:54.526]  
[05:31:54.545]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:31:54.545]  
[05:31:54.545]  <debugvars>
[05:31:54.545]    // Pre-defined
[05:31:54.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:31:54.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:31:54.545]    __dp=0x00000000
[05:31:54.545]    __ap=0x00000000
[05:31:54.545]    __traceout=0x00000000      (Trace Disabled)
[05:31:54.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:31:54.545]    __FlashAddr=0x00000000
[05:31:54.545]    __FlashLen=0x00000000
[05:31:54.545]    __FlashArg=0x00000000
[05:31:54.545]    __FlashOp=0x00000000
[05:31:54.545]    __Result=0x00000000
[05:31:54.545]  </debugvars>
[05:31:54.545]  
[05:31:54.545]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:31:54.545]    <block atomic="false" info="">
[05:31:54.545]      __var deviceID = 0;
[05:31:54.545]        // -> [deviceID <= 0x00000000]
[05:31:54.545]      __var version = 0;
[05:31:54.545]        // -> [version <= 0x00000000]
[05:31:54.545]      __var partNum = 0;
[05:31:54.545]        // -> [partNum <= 0x00000000]
[05:31:54.545]      __var manuf = 0;
[05:31:54.545]        // -> [manuf <= 0x00000000]
[05:31:54.555]      __var isMSPM0G1X0X_G3X0X = 0;
[05:31:54.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:31:54.555]      __var isProduction = 0;
[05:31:54.555]        // -> [isProduction <= 0x00000000]
[05:31:54.555]      __var continueId = 0;
[05:31:54.556]        // -> [continueId <= 0x00000000]
[05:31:54.556]      deviceID =   Read32(0x41C40004);
[05:31:54.561]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:31:54.561]        // -> [deviceID <= 0x2BB8802F]
[05:31:54.561]      version = deviceID >> 28;
[05:31:54.561]        // -> [version <= 0x00000002]
[05:31:54.561]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:31:54.561]        // -> [partNum <= 0x0000BB88]
[05:31:54.561]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:31:54.561]        // -> [manuf <= 0x00000017]
[05:31:54.561]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:31:54.561]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:31:54.562]      isProduction = (version > 0);
[05:31:54.562]        // -> [isProduction <= 0x00000001]
[05:31:54.562]    </block>
[05:31:54.562]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:31:54.562]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:31:54.562]        // =>  FALSE
[05:31:54.562]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:31:54.562]    </control>
[05:31:54.562]    <control if="continueId == 4" while="" timeout="0" info="">
[05:31:54.562]      // if-block "continueId == 4"
[05:31:54.562]        // =>  FALSE
[05:31:54.563]      // skip if-block "continueId == 4"
[05:31:54.563]    </control>
[05:31:54.563]    <control if="!isProduction" while="" timeout="0" info="">
[05:31:54.563]      // if-block "!isProduction"
[05:31:54.563]        // =>  FALSE
[05:31:54.563]      // skip if-block "!isProduction"
[05:31:54.563]    </control>
[05:31:54.563]  </sequence>
[05:31:54.563]  
[05:34:47.521]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:34:47.521]  
[05:34:47.530]  <debugvars>
[05:34:47.530]    // Pre-defined
[05:34:47.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:34:47.530]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:34:47.530]    __dp=0x00000000
[05:34:47.530]    __ap=0x00000000
[05:34:47.530]    __traceout=0x00000000      (Trace Disabled)
[05:34:47.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:34:47.531]    __FlashAddr=0x00000000
[05:34:47.531]    __FlashLen=0x00000000
[05:34:47.531]    __FlashArg=0x00000000
[05:34:47.531]    __FlashOp=0x00000000
[05:34:47.531]    __Result=0x00000000
[05:34:47.532]  </debugvars>
[05:34:47.532]  
[05:34:47.532]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:34:47.532]    <block atomic="false" info="">
[05:34:47.532]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:34:47.532]        // -> [isSWJ <= 0x00000001]
[05:34:47.532]      __var hasDormant = __protocol & 0x00020000;
[05:34:47.532]        // -> [hasDormant <= 0x00000000]
[05:34:47.532]      __var protType   = __protocol & 0x0000FFFF;
[05:34:47.532]        // -> [protType <= 0x00000002]
[05:34:47.532]    </block>
[05:34:47.533]    <control if="protType == 1" while="" timeout="0" info="">
[05:34:47.533]      // if-block "protType == 1"
[05:34:47.533]        // =>  FALSE
[05:34:47.533]      // skip if-block "protType == 1"
[05:34:47.533]    </control>
[05:34:47.533]    <control if="protType == 2" while="" timeout="0" info="">
[05:34:47.533]      // if-block "protType == 2"
[05:34:47.534]        // =>  TRUE
[05:34:47.534]      <control if="isSWJ" while="" timeout="0" info="">
[05:34:47.534]        // if-block "isSWJ"
[05:34:47.534]          // =>  TRUE
[05:34:47.534]        <control if="hasDormant" while="" timeout="0" info="">
[05:34:47.534]          // if-block "hasDormant"
[05:34:47.535]            // =>  FALSE
[05:34:47.535]          // skip if-block "hasDormant"
[05:34:47.535]        </control>
[05:34:47.535]        <control if="!hasDormant" while="" timeout="0" info="">
[05:34:47.535]          // if-block "!hasDormant"
[05:34:47.535]            // =>  TRUE
[05:34:47.535]          <block atomic="false" info="">
[05:34:47.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:34:47.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:47.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:34:47.537]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:34:47.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:34:47.538]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:47.540]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:34:47.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:34:47.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:34:47.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:47.543]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:34:47.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:34:47.543]          </block>
[05:34:47.543]          // end if-block "!hasDormant"
[05:34:47.543]        </control>
[05:34:47.543]        // end if-block "isSWJ"
[05:34:47.543]      </control>
[05:34:47.543]      <control if="!isSWJ" while="" timeout="0" info="">
[05:34:47.543]        // if-block "!isSWJ"
[05:34:47.543]          // =>  FALSE
[05:34:47.543]        // skip if-block "!isSWJ"
[05:34:47.543]      </control>
[05:34:47.543]      <block atomic="false" info="">
[05:34:47.543]        ReadDP(0x0);
[05:34:47.543]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:34:47.543]      </block>
[05:34:47.543]      // end if-block "protType == 2"
[05:34:47.543]    </control>
[05:34:47.543]  </sequence>
[05:34:47.543]  
[05:34:50.609]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:34:50.609]  
[05:34:50.620]  <debugvars>
[05:34:50.620]    // Pre-defined
[05:34:50.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:34:50.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:34:50.620]    __dp=0x00000000
[05:34:50.620]    __ap=0x00000000
[05:34:50.620]    __traceout=0x00000000      (Trace Disabled)
[05:34:50.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:34:50.620]    __FlashAddr=0x00000000
[05:34:50.620]    __FlashLen=0x00000000
[05:34:50.620]    __FlashArg=0x00000000
[05:34:50.620]    __FlashOp=0x00000000
[05:34:50.620]    __Result=0x00000000
[05:34:50.620]  </debugvars>
[05:34:50.620]  
[05:34:50.620]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:34:50.620]    <block atomic="false" info="">
[05:34:50.620]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:34:50.620]        // -> [isSWJ <= 0x00000001]
[05:34:50.620]      __var hasDormant = __protocol & 0x00020000;
[05:34:50.620]        // -> [hasDormant <= 0x00000000]
[05:34:50.620]      __var protType   = __protocol & 0x0000FFFF;
[05:34:50.620]        // -> [protType <= 0x00000002]
[05:34:50.620]    </block>
[05:34:50.620]    <control if="protType == 1" while="" timeout="0" info="">
[05:34:50.620]      // if-block "protType == 1"
[05:34:50.620]        // =>  FALSE
[05:34:50.620]      // skip if-block "protType == 1"
[05:34:50.620]    </control>
[05:34:50.620]    <control if="protType == 2" while="" timeout="0" info="">
[05:34:50.620]      // if-block "protType == 2"
[05:34:50.620]        // =>  TRUE
[05:34:50.620]      <control if="isSWJ" while="" timeout="0" info="">
[05:34:50.620]        // if-block "isSWJ"
[05:34:50.620]          // =>  TRUE
[05:34:50.620]        <control if="hasDormant" while="" timeout="0" info="">
[05:34:50.620]          // if-block "hasDormant"
[05:34:50.620]            // =>  FALSE
[05:34:50.620]          // skip if-block "hasDormant"
[05:34:50.620]        </control>
[05:34:50.620]        <control if="!hasDormant" while="" timeout="0" info="">
[05:34:50.620]          // if-block "!hasDormant"
[05:34:50.620]            // =>  TRUE
[05:34:50.620]          <block atomic="false" info="">
[05:34:50.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:34:50.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:50.620]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:34:50.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:34:50.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:34:50.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:50.629]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:34:50.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:34:50.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:34:50.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:34:50.629]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:34:50.629]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:34:50.629]          </block>
[05:34:50.629]          // end if-block "!hasDormant"
[05:34:50.629]        </control>
[05:34:50.629]        // end if-block "isSWJ"
[05:34:50.629]      </control>
[05:34:50.629]      <control if="!isSWJ" while="" timeout="0" info="">
[05:34:50.629]        // if-block "!isSWJ"
[05:34:50.629]          // =>  FALSE
[05:34:50.629]        // skip if-block "!isSWJ"
[05:34:50.629]      </control>
[05:34:50.629]      <block atomic="false" info="">
[05:34:50.629]        ReadDP(0x0);
[05:34:50.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:34:50.629]      </block>
[05:34:50.629]      // end if-block "protType == 2"
[05:34:50.629]    </control>
[05:34:50.629]  </sequence>
[05:34:50.629]  
[05:34:50.639]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:34:50.639]  
[05:34:50.639]  <debugvars>
[05:34:50.639]    // Pre-defined
[05:34:50.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:34:50.639]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:34:50.639]    __dp=0x00000000
[05:34:50.639]    __ap=0x00000000
[05:34:50.639]    __traceout=0x00000000      (Trace Disabled)
[05:34:50.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:34:50.639]    __FlashAddr=0x00000000
[05:34:50.639]    __FlashLen=0x00000000
[05:34:50.639]    __FlashArg=0x00000000
[05:34:50.639]    __FlashOp=0x00000000
[05:34:50.639]    __Result=0x00000000
[05:34:50.639]  </debugvars>
[05:34:50.639]  
[05:34:50.639]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:34:50.639]    <block atomic="false" info="">
[05:34:50.639]      __var SW_DP_ABORT       = 0x0;
[05:34:50.639]        // -> [SW_DP_ABORT <= 0x00000000]
[05:34:50.639]      __var DP_CTRL_STAT      = 0x4;
[05:34:50.639]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:34:50.639]      __var DP_SELECT         = 0x8;
[05:34:50.639]        // -> [DP_SELECT <= 0x00000008]
[05:34:50.639]      __var powered_down      = 0;
[05:34:50.639]        // -> [powered_down <= 0x00000000]
[05:34:50.639]      WriteDP(DP_SELECT, 0x00000000);
[05:34:50.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:34:50.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:34:50.639]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:34:50.639]        // -> [powered_down <= 0x00000001]
[05:34:50.639]    </block>
[05:34:50.639]    <control if="powered_down" while="" timeout="0" info="">
[05:34:50.639]      // if-block "powered_down"
[05:34:50.639]        // =>  TRUE
[05:34:50.639]      <block atomic="false" info="">
[05:34:50.639]        Message(0, "Debug/System power-up request sent");
[05:34:50.649]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:34:50.649]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:34:50.649]      </block>
[05:34:50.649]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:34:50.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.649]        // while-condition  =>  TRUE
[05:34:50.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.649]        // while-condition  =>  TRUE
[05:34:50.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.649]        // while-condition  =>  TRUE
[05:34:50.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.659]        // while-condition  =>  TRUE
[05:34:50.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.659]        // while-condition  =>  TRUE
[05:34:50.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.659]        // while-condition  =>  TRUE
[05:34:50.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.659]        // while-condition  =>  TRUE
[05:34:50.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.659]        // while-condition  =>  TRUE
[05:34:50.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.669]        // while-condition  =>  TRUE
[05:34:50.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.681]        // while-condition  =>  TRUE
[05:34:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.681]        // while-condition  =>  TRUE
[05:34:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.681]        // while-condition  =>  TRUE
[05:34:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.681]        // while-condition  =>  TRUE
[05:34:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.681]        // while-condition  =>  TRUE
[05:34:50.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.689]        // while-condition  =>  TRUE
[05:34:50.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.689]        // while-condition  =>  TRUE
[05:34:50.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.689]        // while-condition  =>  TRUE
[05:34:50.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.689]        // while-condition  =>  TRUE
[05:34:50.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.689]        // while-condition  =>  TRUE
[05:34:50.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.699]        // while-condition  =>  TRUE
[05:34:50.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.699]        // while-condition  =>  TRUE
[05:34:50.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.699]        // while-condition  =>  TRUE
[05:34:50.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.699]        // while-condition  =>  TRUE
[05:34:50.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.709]        // while-condition  =>  TRUE
[05:34:50.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.709]        // while-condition  =>  TRUE
[05:34:50.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.709]        // while-condition  =>  TRUE
[05:34:50.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.709]        // while-condition  =>  TRUE
[05:34:50.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.709]        // while-condition  =>  TRUE
[05:34:50.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.719]        // while-condition  =>  TRUE
[05:34:50.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.719]        // while-condition  =>  TRUE
[05:34:50.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.719]        // while-condition  =>  TRUE
[05:34:50.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.731]        // while-condition  =>  TRUE
[05:34:50.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.731]        // while-condition  =>  TRUE
[05:34:50.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.734]        // while-condition  =>  TRUE
[05:34:50.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.734]        // while-condition  =>  TRUE
[05:34:50.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.734]        // while-condition  =>  TRUE
[05:34:50.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.734]        // while-condition  =>  TRUE
[05:34:50.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.741]        // while-condition  =>  TRUE
[05:34:50.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.741]        // while-condition  =>  TRUE
[05:34:50.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.741]        // while-condition  =>  TRUE
[05:34:50.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.741]        // while-condition  =>  TRUE
[05:34:50.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.748]        // while-condition  =>  TRUE
[05:34:50.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.750]        // while-condition  =>  TRUE
[05:34:50.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.751]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.751]        // while-condition  =>  TRUE
[05:34:50.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.752]        // while-condition  =>  TRUE
[05:34:50.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.755]        // while-condition  =>  TRUE
[05:34:50.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.756]        // while-condition  =>  TRUE
[05:34:50.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.758]        // while-condition  =>  TRUE
[05:34:50.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.760]        // while-condition  =>  TRUE
[05:34:50.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.763]        // while-condition  =>  TRUE
[05:34:50.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.763]        // while-condition  =>  TRUE
[05:34:50.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.763]        // while-condition  =>  TRUE
[05:34:50.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.763]        // while-condition  =>  TRUE
[05:34:50.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.770]        // while-condition  =>  TRUE
[05:34:50.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.771]        // while-condition  =>  TRUE
[05:34:50.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.771]        // while-condition  =>  TRUE
[05:34:50.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.771]        // while-condition  =>  TRUE
[05:34:50.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.771]        // while-condition  =>  TRUE
[05:34:50.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.780]        // while-condition  =>  TRUE
[05:34:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.780]        // while-condition  =>  TRUE
[05:34:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.780]        // while-condition  =>  TRUE
[05:34:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.780]        // while-condition  =>  TRUE
[05:34:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.780]        // while-condition  =>  TRUE
[05:34:50.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.790]        // while-condition  =>  TRUE
[05:34:50.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.792]        // while-condition  =>  TRUE
[05:34:50.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.793]        // while-condition  =>  TRUE
[05:34:50.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.793]        // while-condition  =>  TRUE
[05:34:50.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.793]        // while-condition  =>  TRUE
[05:34:50.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.793]        // while-condition  =>  TRUE
[05:34:50.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.800]        // while-condition  =>  TRUE
[05:34:50.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.810]        // while-condition  =>  TRUE
[05:34:50.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.810]        // while-condition  =>  TRUE
[05:34:50.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.810]        // while-condition  =>  TRUE
[05:34:50.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.810]        // while-condition  =>  TRUE
[05:34:50.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.810]        // while-condition  =>  TRUE
[05:34:50.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.821]        // while-condition  =>  TRUE
[05:34:50.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.823]        // while-condition  =>  TRUE
[05:34:50.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.824]        // while-condition  =>  TRUE
[05:34:50.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.826]        // while-condition  =>  TRUE
[05:34:50.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.828]        // while-condition  =>  TRUE
[05:34:50.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.831]        // while-condition  =>  TRUE
[05:34:50.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.831]        // while-condition  =>  TRUE
[05:34:50.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.834]        // while-condition  =>  TRUE
[05:34:50.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.836]        // while-condition  =>  TRUE
[05:34:50.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.838]        // while-condition  =>  TRUE
[05:34:50.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.840]        // while-condition  =>  TRUE
[05:34:50.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.844]        // while-condition  =>  TRUE
[05:34:50.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.844]        // while-condition  =>  TRUE
[05:34:50.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.848]        // while-condition  =>  TRUE
[05:34:50.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.852]        // while-condition  =>  TRUE
[05:34:50.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.861]        // while-condition  =>  TRUE
[05:34:50.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.863]        // while-condition  =>  TRUE
[05:34:50.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.863]        // while-condition  =>  TRUE
[05:34:50.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.871]        // while-condition  =>  TRUE
[05:34:50.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.881]        // while-condition  =>  TRUE
[05:34:50.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.881]        // while-condition  =>  TRUE
[05:34:50.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.891]        // while-condition  =>  TRUE
[05:34:50.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.891]        // while-condition  =>  TRUE
[05:34:50.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.891]        // while-condition  =>  TRUE
[05:34:50.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.891]        // while-condition  =>  TRUE
[05:34:50.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.891]        // while-condition  =>  TRUE
[05:34:50.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.901]        // while-condition  =>  TRUE
[05:34:50.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.901]        // while-condition  =>  TRUE
[05:34:50.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.901]        // while-condition  =>  TRUE
[05:34:50.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.901]        // while-condition  =>  TRUE
[05:34:50.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.901]        // while-condition  =>  TRUE
[05:34:50.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.912]        // while-condition  =>  TRUE
[05:34:50.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.922]        // while-condition  =>  TRUE
[05:34:50.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.922]        // while-condition  =>  TRUE
[05:34:50.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.922]        // while-condition  =>  TRUE
[05:34:50.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.922]        // while-condition  =>  TRUE
[05:34:50.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.932]        // while-condition  =>  TRUE
[05:34:50.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.932]        // while-condition  =>  TRUE
[05:34:50.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.932]        // while-condition  =>  TRUE
[05:34:50.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.932]        // while-condition  =>  TRUE
[05:34:50.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.932]        // while-condition  =>  TRUE
[05:34:50.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.942]        // while-condition  =>  TRUE
[05:34:50.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.944]        // while-condition  =>  TRUE
[05:34:50.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.944]        // while-condition  =>  TRUE
[05:34:50.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.944]        // while-condition  =>  TRUE
[05:34:50.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.944]        // while-condition  =>  TRUE
[05:34:50.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.952]        // while-condition  =>  TRUE
[05:34:50.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.952]        // while-condition  =>  TRUE
[05:34:50.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.952]        // while-condition  =>  TRUE
[05:34:50.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.952]        // while-condition  =>  TRUE
[05:34:50.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.952]        // while-condition  =>  TRUE
[05:34:50.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.962]        // while-condition  =>  TRUE
[05:34:50.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.962]        // while-condition  =>  TRUE
[05:34:50.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.962]        // while-condition  =>  TRUE
[05:34:50.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.962]        // while-condition  =>  TRUE
[05:34:50.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.972]        // while-condition  =>  TRUE
[05:34:50.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.972]        // while-condition  =>  TRUE
[05:34:50.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.972]        // while-condition  =>  TRUE
[05:34:50.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.972]        // while-condition  =>  TRUE
[05:34:50.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.982]        // while-condition  =>  TRUE
[05:34:50.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.982]        // while-condition  =>  TRUE
[05:34:50.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.982]        // while-condition  =>  TRUE
[05:34:50.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.982]        // while-condition  =>  TRUE
[05:34:50.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.982]        // while-condition  =>  TRUE
[05:34:50.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.992]        // while-condition  =>  TRUE
[05:34:50.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.992]        // while-condition  =>  TRUE
[05:34:50.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.992]        // while-condition  =>  TRUE
[05:34:50.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:50.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:50.992]        // while-condition  =>  TRUE
[05:34:50.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.002]        // while-condition  =>  TRUE
[05:34:51.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.002]        // while-condition  =>  TRUE
[05:34:51.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.002]        // while-condition  =>  TRUE
[05:34:51.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.002]        // while-condition  =>  TRUE
[05:34:51.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.002]        // while-condition  =>  TRUE
[05:34:51.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.012]        // while-condition  =>  TRUE
[05:34:51.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.014]        // while-condition  =>  TRUE
[05:34:51.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.014]        // while-condition  =>  TRUE
[05:34:51.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.014]        // while-condition  =>  TRUE
[05:34:51.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.014]        // while-condition  =>  TRUE
[05:34:51.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.014]        // while-condition  =>  TRUE
[05:34:51.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.022]        // while-condition  =>  TRUE
[05:34:51.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.022]        // while-condition  =>  TRUE
[05:34:51.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.022]        // while-condition  =>  TRUE
[05:34:51.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.022]        // while-condition  =>  TRUE
[05:34:51.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.022]        // while-condition  =>  TRUE
[05:34:51.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.032]        // while-condition  =>  TRUE
[05:34:51.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.032]        // while-condition  =>  TRUE
[05:34:51.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.032]        // while-condition  =>  TRUE
[05:34:51.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.032]        // while-condition  =>  TRUE
[05:34:51.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.042]        // while-condition  =>  TRUE
[05:34:51.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.042]        // while-condition  =>  TRUE
[05:34:51.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.042]        // while-condition  =>  TRUE
[05:34:51.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.042]        // while-condition  =>  TRUE
[05:34:51.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.042]        // while-condition  =>  TRUE
[05:34:51.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.052]        // while-condition  =>  TRUE
[05:34:51.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.062]        // while-condition  =>  TRUE
[05:34:51.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.062]        // while-condition  =>  TRUE
[05:34:51.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.062]        // while-condition  =>  TRUE
[05:34:51.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.062]        // while-condition  =>  TRUE
[05:34:51.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.062]        // while-condition  =>  TRUE
[05:34:51.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.072]        // while-condition  =>  TRUE
[05:34:51.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.072]        // while-condition  =>  TRUE
[05:34:51.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.072]        // while-condition  =>  TRUE
[05:34:51.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.072]        // while-condition  =>  TRUE
[05:34:51.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.072]        // while-condition  =>  TRUE
[05:34:51.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.082]        // while-condition  =>  TRUE
[05:34:51.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.092]        // while-condition  =>  TRUE
[05:34:51.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.092]        // while-condition  =>  TRUE
[05:34:51.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.092]        // while-condition  =>  TRUE
[05:34:51.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.092]        // while-condition  =>  TRUE
[05:34:51.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.092]        // while-condition  =>  TRUE
[05:34:51.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.102]        // while-condition  =>  TRUE
[05:34:51.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.112]        // while-condition  =>  TRUE
[05:34:51.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.112]        // while-condition  =>  TRUE
[05:34:51.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.112]        // while-condition  =>  TRUE
[05:34:51.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.112]        // while-condition  =>  TRUE
[05:34:51.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.112]        // while-condition  =>  TRUE
[05:34:51.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.122]        // while-condition  =>  TRUE
[05:34:51.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.122]        // while-condition  =>  TRUE
[05:34:51.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.122]        // while-condition  =>  TRUE
[05:34:51.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.122]        // while-condition  =>  TRUE
[05:34:51.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.132]        // while-condition  =>  TRUE
[05:34:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.132]        // while-condition  =>  TRUE
[05:34:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.132]        // while-condition  =>  TRUE
[05:34:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.132]        // while-condition  =>  TRUE
[05:34:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.132]        // while-condition  =>  TRUE
[05:34:51.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.142]        // while-condition  =>  TRUE
[05:34:51.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.153]        // while-condition  =>  TRUE
[05:34:51.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.154]        // while-condition  =>  TRUE
[05:34:51.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.154]        // while-condition  =>  TRUE
[05:34:51.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.154]        // while-condition  =>  TRUE
[05:34:51.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.154]        // while-condition  =>  TRUE
[05:34:51.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.162]        // while-condition  =>  TRUE
[05:34:51.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.162]        // while-condition  =>  TRUE
[05:34:51.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.162]        // while-condition  =>  TRUE
[05:34:51.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.162]        // while-condition  =>  TRUE
[05:34:51.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.162]        // while-condition  =>  TRUE
[05:34:51.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.172]        // while-condition  =>  TRUE
[05:34:51.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.172]        // while-condition  =>  TRUE
[05:34:51.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.172]        // while-condition  =>  TRUE
[05:34:51.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.172]        // while-condition  =>  TRUE
[05:34:51.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.172]        // while-condition  =>  TRUE
[05:34:51.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.183]        // while-condition  =>  TRUE
[05:34:51.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.193]        // while-condition  =>  TRUE
[05:34:51.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.193]        // while-condition  =>  TRUE
[05:34:51.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.193]        // while-condition  =>  TRUE
[05:34:51.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.193]        // while-condition  =>  TRUE
[05:34:51.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.193]        // while-condition  =>  TRUE
[05:34:51.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.203]        // while-condition  =>  TRUE
[05:34:51.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.213]        // while-condition  =>  TRUE
[05:34:51.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.213]        // while-condition  =>  TRUE
[05:34:51.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.213]        // while-condition  =>  TRUE
[05:34:51.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.213]        // while-condition  =>  TRUE
[05:34:51.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.213]        // while-condition  =>  TRUE
[05:34:51.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.223]        // while-condition  =>  TRUE
[05:34:51.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.233]        // while-condition  =>  TRUE
[05:34:51.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.233]        // while-condition  =>  TRUE
[05:34:51.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.233]        // while-condition  =>  TRUE
[05:34:51.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.233]        // while-condition  =>  TRUE
[05:34:51.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.233]        // while-condition  =>  TRUE
[05:34:51.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.243]        // while-condition  =>  TRUE
[05:34:51.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.253]        // while-condition  =>  TRUE
[05:34:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.253]        // while-condition  =>  TRUE
[05:34:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.253]        // while-condition  =>  TRUE
[05:34:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.253]        // while-condition  =>  TRUE
[05:34:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.253]        // while-condition  =>  TRUE
[05:34:51.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.263]        // while-condition  =>  TRUE
[05:34:51.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.263]        // while-condition  =>  TRUE
[05:34:51.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.263]        // while-condition  =>  TRUE
[05:34:51.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.263]        // while-condition  =>  TRUE
[05:34:51.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.263]        // while-condition  =>  TRUE
[05:34:51.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.273]        // while-condition  =>  TRUE
[05:34:51.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.275]        // while-condition  =>  TRUE
[05:34:51.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.275]        // while-condition  =>  TRUE
[05:34:51.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.275]        // while-condition  =>  TRUE
[05:34:51.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.283]        // while-condition  =>  TRUE
[05:34:51.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.283]        // while-condition  =>  TRUE
[05:34:51.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.283]        // while-condition  =>  TRUE
[05:34:51.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.293]        // while-condition  =>  TRUE
[05:34:51.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.293]        // while-condition  =>  TRUE
[05:34:51.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.293]        // while-condition  =>  TRUE
[05:34:51.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.293]        // while-condition  =>  TRUE
[05:34:51.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.293]        // while-condition  =>  TRUE
[05:34:51.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.303]        // while-condition  =>  TRUE
[05:34:51.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.303]        // while-condition  =>  TRUE
[05:34:51.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.303]        // while-condition  =>  TRUE
[05:34:51.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.303]        // while-condition  =>  TRUE
[05:34:51.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.303]        // while-condition  =>  TRUE
[05:34:51.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.313]        // while-condition  =>  TRUE
[05:34:51.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.315]        // while-condition  =>  TRUE
[05:34:51.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.315]        // while-condition  =>  TRUE
[05:34:51.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.315]        // while-condition  =>  TRUE
[05:34:51.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.315]        // while-condition  =>  TRUE
[05:34:51.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.315]        // while-condition  =>  TRUE
[05:34:51.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.323]        // while-condition  =>  TRUE
[05:34:51.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.323]        // while-condition  =>  TRUE
[05:34:51.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.323]        // while-condition  =>  TRUE
[05:34:51.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.323]        // while-condition  =>  TRUE
[05:34:51.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.323]        // while-condition  =>  TRUE
[05:34:51.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.334]        // while-condition  =>  TRUE
[05:34:51.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.334]        // while-condition  =>  TRUE
[05:34:51.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.334]        // while-condition  =>  TRUE
[05:34:51.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.343]        // while-condition  =>  TRUE
[05:34:51.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.343]        // while-condition  =>  TRUE
[05:34:51.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.343]        // while-condition  =>  TRUE
[05:34:51.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.343]        // while-condition  =>  TRUE
[05:34:51.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.353]        // while-condition  =>  TRUE
[05:34:51.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.363]        // while-condition  =>  TRUE
[05:34:51.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.365]        // while-condition  =>  TRUE
[05:34:51.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.365]        // while-condition  =>  TRUE
[05:34:51.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.365]        // while-condition  =>  TRUE
[05:34:51.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.365]        // while-condition  =>  TRUE
[05:34:51.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.373]        // while-condition  =>  TRUE
[05:34:51.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.373]        // while-condition  =>  TRUE
[05:34:51.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.373]        // while-condition  =>  TRUE
[05:34:51.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.373]        // while-condition  =>  TRUE
[05:34:51.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.383]        // while-condition  =>  TRUE
[05:34:51.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.393]        // while-condition  =>  TRUE
[05:34:51.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.393]        // while-condition  =>  TRUE
[05:34:51.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.393]        // while-condition  =>  TRUE
[05:34:51.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.393]        // while-condition  =>  TRUE
[05:34:51.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.393]        // while-condition  =>  TRUE
[05:34:51.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.403]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.413]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.413]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.413]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.413]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.413]        // while-condition  =>  TRUE
[05:34:51.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.424]        // while-condition  =>  TRUE
[05:34:51.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.434]        // while-condition  =>  TRUE
[05:34:51.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.436]        // while-condition  =>  TRUE
[05:34:51.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.436]        // while-condition  =>  TRUE
[05:34:51.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.436]        // while-condition  =>  TRUE
[05:34:51.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.436]        // while-condition  =>  TRUE
[05:34:51.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.444]        // while-condition  =>  TRUE
[05:34:51.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.444]        // while-condition  =>  TRUE
[05:34:51.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.444]        // while-condition  =>  TRUE
[05:34:51.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.444]        // while-condition  =>  TRUE
[05:34:51.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.454]        // while-condition  =>  TRUE
[05:34:51.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.464]        // while-condition  =>  TRUE
[05:34:51.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.474]        // while-condition  =>  TRUE
[05:34:51.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.474]        // while-condition  =>  TRUE
[05:34:51.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.474]        // while-condition  =>  TRUE
[05:34:51.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.474]        // while-condition  =>  TRUE
[05:34:51.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.474]        // while-condition  =>  TRUE
[05:34:51.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.484]        // while-condition  =>  TRUE
[05:34:51.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.484]        // while-condition  =>  TRUE
[05:34:51.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.484]        // while-condition  =>  TRUE
[05:34:51.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.484]        // while-condition  =>  TRUE
[05:34:51.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.484]        // while-condition  =>  TRUE
[05:34:51.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.494]        // while-condition  =>  TRUE
[05:34:51.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.504]        // while-condition  =>  TRUE
[05:34:51.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.504]        // while-condition  =>  TRUE
[05:34:51.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.504]        // while-condition  =>  TRUE
[05:34:51.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.504]        // while-condition  =>  TRUE
[05:34:51.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.504]        // while-condition  =>  TRUE
[05:34:51.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.514]        // while-condition  =>  TRUE
[05:34:51.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.524]        // while-condition  =>  TRUE
[05:34:51.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.524]        // while-condition  =>  TRUE
[05:34:51.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.524]        // while-condition  =>  TRUE
[05:34:51.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.524]        // while-condition  =>  TRUE
[05:34:51.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.524]        // while-condition  =>  TRUE
[05:34:51.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.534]        // while-condition  =>  TRUE
[05:34:51.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.534]        // while-condition  =>  TRUE
[05:34:51.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.534]        // while-condition  =>  TRUE
[05:34:51.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.544]        // while-condition  =>  TRUE
[05:34:51.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.544]        // while-condition  =>  TRUE
[05:34:51.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.544]        // while-condition  =>  TRUE
[05:34:51.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.544]        // while-condition  =>  TRUE
[05:34:51.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.544]        // while-condition  =>  TRUE
[05:34:51.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.554]        // while-condition  =>  TRUE
[05:34:51.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.564]        // while-condition  =>  TRUE
[05:34:51.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.565]        // while-condition  =>  TRUE
[05:34:51.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.565]        // while-condition  =>  TRUE
[05:34:51.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.565]        // while-condition  =>  TRUE
[05:34:51.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.565]        // while-condition  =>  TRUE
[05:34:51.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.574]        // while-condition  =>  TRUE
[05:34:51.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.574]        // while-condition  =>  TRUE
[05:34:51.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.574]        // while-condition  =>  TRUE
[05:34:51.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.574]        // while-condition  =>  TRUE
[05:34:51.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.574]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.584]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.584]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.584]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.584]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.584]        // while-condition  =>  TRUE
[05:34:51.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.594]        // while-condition  =>  TRUE
[05:34:51.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.604]        // while-condition  =>  TRUE
[05:34:51.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.605]        // while-condition  =>  TRUE
[05:34:51.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.605]        // while-condition  =>  TRUE
[05:34:51.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.605]        // while-condition  =>  TRUE
[05:34:51.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.605]        // while-condition  =>  TRUE
[05:34:51.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.614]        // while-condition  =>  TRUE
[05:34:51.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.624]        // while-condition  =>  TRUE
[05:34:51.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.624]        // while-condition  =>  TRUE
[05:34:51.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.624]        // while-condition  =>  TRUE
[05:34:51.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.634]        // while-condition  =>  TRUE
[05:34:51.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.634]        // while-condition  =>  TRUE
[05:34:51.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.634]        // while-condition  =>  TRUE
[05:34:51.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.634]        // while-condition  =>  TRUE
[05:34:51.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.634]        // while-condition  =>  TRUE
[05:34:51.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[05:34:51.644]        // while-condition  =>  TRUE
[05:34:51.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:34:51.644]        // while  =>  TIMEOUT
[05:34:51.646]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:34:51.646]      </control>
[05:34:51.646]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:34:51.646]        // if-block "(__protocol & 0xFFFF) == 1"
[05:34:51.646]          // =>  FALSE
[05:34:51.646]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:34:51.646]      </control>
[05:34:51.646]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:34:51.646]        // if-block "(__protocol & 0xFFFF) == 2"
[05:34:51.646]          // =>  TRUE
[05:34:51.646]        <block atomic="false" info="">
[05:34:51.646]          Message(0, "executing SWD power up");
[05:34:51.646]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:34:51.646]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:34:51.646]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:34:51.646]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:34:51.646]        </block>
[05:34:51.646]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:34:51.646]      </control>
[05:34:51.646]      // end if-block "powered_down"
[05:34:51.646]    </control>
[05:34:51.646]    <block atomic="false" info="">
[05:34:51.646]      __var DEBUG_PORT_VAL    = 0;
[05:34:51.646]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:34:51.646]      __var ACCESS_POINT_VAL  = 0;
[05:34:51.646]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:34:51.646]      __ap = 1; 
[05:34:51.646]        // -> [__ap <= 0x00000001]
[05:34:51.646]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:34:51.655]  
[05:34:51.655]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[05:34:51.655]  
[05:34:51.665]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:34:51.665]    </block>
[05:34:51.665]  </sequence>
[05:34:51.665]  
[05:35:00.253]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:35:00.253]  
[05:35:00.263]  <debugvars>
[05:35:00.263]    // Pre-defined
[05:35:00.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:35:00.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:35:00.263]    __dp=0x00000000
[05:35:00.263]    __ap=0x00000000
[05:35:00.263]    __traceout=0x00000000      (Trace Disabled)
[05:35:00.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:35:00.263]    __FlashAddr=0x00000000
[05:35:00.263]    __FlashLen=0x00000000
[05:35:00.263]    __FlashArg=0x00000000
[05:35:00.263]    __FlashOp=0x00000000
[05:35:00.263]    __Result=0x00000000
[05:35:00.263]  </debugvars>
[05:35:00.263]  
[05:35:00.263]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:35:00.263]    <block atomic="false" info="">
[05:35:00.263]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:35:00.263]        // -> [isSWJ <= 0x00000001]
[05:35:00.263]      __var hasDormant = __protocol & 0x00020000;
[05:35:00.263]        // -> [hasDormant <= 0x00000000]
[05:35:00.263]      __var protType   = __protocol & 0x0000FFFF;
[05:35:00.263]        // -> [protType <= 0x00000002]
[05:35:00.263]    </block>
[05:35:00.263]    <control if="protType == 1" while="" timeout="0" info="">
[05:35:00.263]      // if-block "protType == 1"
[05:35:00.263]        // =>  FALSE
[05:35:00.263]      // skip if-block "protType == 1"
[05:35:00.263]    </control>
[05:35:00.263]    <control if="protType == 2" while="" timeout="0" info="">
[05:35:00.263]      // if-block "protType == 2"
[05:35:00.263]        // =>  TRUE
[05:35:00.263]      <control if="isSWJ" while="" timeout="0" info="">
[05:35:00.263]        // if-block "isSWJ"
[05:35:00.263]          // =>  TRUE
[05:35:00.263]        <control if="hasDormant" while="" timeout="0" info="">
[05:35:00.263]          // if-block "hasDormant"
[05:35:00.263]            // =>  FALSE
[05:35:00.263]          // skip if-block "hasDormant"
[05:35:00.263]        </control>
[05:35:00.263]        <control if="!hasDormant" while="" timeout="0" info="">
[05:35:00.263]          // if-block "!hasDormant"
[05:35:00.263]            // =>  TRUE
[05:35:00.263]          <block atomic="false" info="">
[05:35:00.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:35:00.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:35:00.263]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:35:00.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:35:00.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:35:00.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:35:00.263]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:35:00.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:35:00.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:35:00.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:35:00.273]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:35:00.273]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:35:00.273]          </block>
[05:35:00.273]          // end if-block "!hasDormant"
[05:35:00.273]        </control>
[05:35:00.273]        // end if-block "isSWJ"
[05:35:00.273]      </control>
[05:35:00.273]      <control if="!isSWJ" while="" timeout="0" info="">
[05:35:00.273]        // if-block "!isSWJ"
[05:35:00.273]          // =>  FALSE
[05:35:00.273]        // skip if-block "!isSWJ"
[05:35:00.273]      </control>
[05:35:00.273]      <block atomic="false" info="">
[05:35:00.273]        ReadDP(0x0);
[05:35:00.273]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:35:00.273]      </block>
[05:35:00.273]      // end if-block "protType == 2"
[05:35:00.273]    </control>
[05:35:00.273]  </sequence>
[05:35:00.273]  
[05:35:00.283]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:35:00.283]  
[05:35:00.283]  <debugvars>
[05:35:00.283]    // Pre-defined
[05:35:00.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:35:00.283]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:35:00.283]    __dp=0x00000000
[05:35:00.283]    __ap=0x00000000
[05:35:00.283]    __traceout=0x00000000      (Trace Disabled)
[05:35:00.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:35:00.283]    __FlashAddr=0x00000000
[05:35:00.283]    __FlashLen=0x00000000
[05:35:00.283]    __FlashArg=0x00000000
[05:35:00.283]    __FlashOp=0x00000000
[05:35:00.283]    __Result=0x00000000
[05:35:00.283]  </debugvars>
[05:35:00.283]  
[05:35:00.283]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:35:00.283]    <block atomic="false" info="">
[05:35:00.283]      __var SW_DP_ABORT       = 0x0;
[05:35:00.283]        // -> [SW_DP_ABORT <= 0x00000000]
[05:35:00.283]      __var DP_CTRL_STAT      = 0x4;
[05:35:00.283]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:35:00.283]      __var DP_SELECT         = 0x8;
[05:35:00.283]        // -> [DP_SELECT <= 0x00000008]
[05:35:00.283]      __var powered_down      = 0;
[05:35:00.283]        // -> [powered_down <= 0x00000000]
[05:35:00.283]      WriteDP(DP_SELECT, 0x00000000);
[05:35:00.283]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:35:00.283]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:35:00.283]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:35:00.283]        // -> [powered_down <= 0x00000001]
[05:35:00.283]    </block>
[05:35:00.283]    <control if="powered_down" while="" timeout="0" info="">
[05:35:00.283]      // if-block "powered_down"
[05:35:00.283]        // =>  TRUE
[05:35:00.283]      <block atomic="false" info="">
[05:35:00.283]        Message(0, "Debug/System power-up request sent");
[05:35:00.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:35:00.293]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:35:00.293]      </block>
[05:35:00.293]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:35:00.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:35:00.293]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:35:00.293]        // while-condition  =>  FALSE
[05:35:00.293]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:35:00.293]      </control>
[05:35:00.293]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:35:00.293]        // if-block "(__protocol & 0xFFFF) == 1"
[05:35:00.293]          // =>  FALSE
[05:35:00.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:35:00.293]      </control>
[05:35:00.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:35:00.293]        // if-block "(__protocol & 0xFFFF) == 2"
[05:35:00.293]          // =>  TRUE
[05:35:00.293]        <block atomic="false" info="">
[05:35:00.293]          Message(0, "executing SWD power up");
[05:35:00.293]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:35:00.303]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:35:00.303]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:35:00.303]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:35:00.303]        </block>
[05:35:00.303]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:35:00.303]      </control>
[05:35:00.303]      // end if-block "powered_down"
[05:35:00.303]    </control>
[05:35:00.303]    <block atomic="false" info="">
[05:35:00.303]      __var DEBUG_PORT_VAL    = 0;
[05:35:00.303]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:35:00.303]      __var ACCESS_POINT_VAL  = 0;
[05:35:00.303]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:35:00.303]      __ap = 1; 
[05:35:00.303]        // -> [__ap <= 0x00000001]
[05:35:00.303]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:35:00.313]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:35:00.313]      __ap = 4;
[05:35:00.313]        // -> [__ap <= 0x00000004]
[05:35:00.313]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:35:00.313]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:35:00.313]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:35:00.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:35:00.313]    </block>
[05:35:00.313]    <block atomic="false" info="">
[05:35:00.313]      __var nReset = 0x80;
[05:35:00.313]        // -> [nReset <= 0x00000080]
[05:35:00.313]      __var canReadPins = 0;
[05:35:00.313]        // -> [canReadPins <= 0x00000000]
[05:35:00.313]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:35:00.313]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:35:00.313]        // -> [canReadPins <= 0x00000001]
[05:35:00.313]    </block>
[05:35:00.313]    <control if="" while="1" timeout="200" info="">
[05:35:00.313]      // while "1"  (timeout="200")
[05:35:00.313]      // while-condition  =>  TRUE
[05:35:00.313]      // while "1"  (timeout="200")
[05:35:00.313]      // while-condition  =>  TRUE
[05:35:00.313]      // while "1"  (timeout="200")
[05:35:00.313]      // while-condition  =>  TRUE
[05:35:00.313]      // while "1"  (timeout="200")
[05:35:00.323]      // while-condition  =>  TRUE
[05:35:00.323]      // while "1"  (timeout="200")
[05:35:00.323]      // while  =>  TIMEOUT
[05:35:00.323]      // end while "1"
[05:35:00.323]    </control>
[05:35:00.323]    <control if="canReadPins" while="" timeout="0" info="">
[05:35:00.323]      // if-block "canReadPins"
[05:35:00.323]        // =>  TRUE
[05:35:00.323]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:35:00.323]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:35:00.323]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:35:00.323]        // while-condition  =>  FALSE
[05:35:00.323]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:35:00.323]      </control>
[05:35:00.323]      // end if-block "canReadPins"
[05:35:00.323]    </control>
[05:35:00.323]    <control if="!canReadPins" while="" timeout="0" info="">
[05:35:00.323]      // if-block "!canReadPins"
[05:35:00.323]        // =>  FALSE
[05:35:00.323]      // skip if-block "!canReadPins"
[05:35:00.323]    </control>
[05:35:00.323]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:35:00.323]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:35:00.323]        // =>  TRUE
[05:35:00.323]      <block atomic="false" info="">
[05:35:00.323]        WriteAP(0x00, 0x190008);
[05:35:00.333]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:35:00.333]        WriteAP(0xF0, 0x01);
[05:35:00.343]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:35:00.343]      </block>
[05:35:00.343]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:35:00.343]    </control>
[05:35:00.343]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:35:00.343]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:35:00.343]        // =>  FALSE
[05:35:00.343]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:35:00.343]    </control>
[05:35:00.343]    <block atomic="false" info="">
[05:35:00.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:35:00.343]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:35:00.343]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:35:00.343]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:35:00.343]      __ap = 0; //lets make sure we reset the access point selection
[05:35:00.343]        // -> [__ap <= 0x00000000]
[05:35:00.343]    </block>
[05:35:00.343]  </sequence>
[05:35:00.343]  
[05:35:00.373]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:35:00.373]  
[05:35:00.373]  <debugvars>
[05:35:00.373]    // Pre-defined
[05:35:00.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:35:00.373]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:35:00.383]    __dp=0x00000000
[05:35:00.383]    __ap=0x00000000
[05:35:00.383]    __traceout=0x00000000      (Trace Disabled)
[05:35:00.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:35:00.383]    __FlashAddr=0x00000000
[05:35:00.383]    __FlashLen=0x00000000
[05:35:00.383]    __FlashArg=0x00000000
[05:35:00.383]    __FlashOp=0x00000000
[05:35:00.383]    __Result=0x00000000
[05:35:00.383]  </debugvars>
[05:35:00.383]  
[05:35:00.383]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:35:00.383]    <block atomic="false" info="">
[05:35:00.383]      __var deviceID = 0;
[05:35:00.383]        // -> [deviceID <= 0x00000000]
[05:35:00.383]      __var version = 0;
[05:35:00.383]        // -> [version <= 0x00000000]
[05:35:00.383]      __var partNum = 0;
[05:35:00.383]        // -> [partNum <= 0x00000000]
[05:35:00.383]      __var manuf = 0;
[05:35:00.383]        // -> [manuf <= 0x00000000]
[05:35:00.383]      __var isMSPM0G1X0X_G3X0X = 0;
[05:35:00.383]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:35:00.383]      __var isProduction = 0;
[05:35:00.383]        // -> [isProduction <= 0x00000000]
[05:35:00.383]      __var continueId = 0;
[05:35:00.383]        // -> [continueId <= 0x00000000]
[05:35:00.383]      deviceID =   Read32(0x41C40004);
[05:35:00.383]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:35:00.383]        // -> [deviceID <= 0x2BB8802F]
[05:35:00.383]      version = deviceID >> 28;
[05:35:00.383]        // -> [version <= 0x00000002]
[05:35:00.383]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:35:00.383]        // -> [partNum <= 0x0000BB88]
[05:35:00.383]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:35:00.383]        // -> [manuf <= 0x00000017]
[05:35:00.383]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:35:00.383]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:35:00.383]      isProduction = (version > 0);
[05:35:00.393]        // -> [isProduction <= 0x00000001]
[05:35:00.393]    </block>
[05:35:00.393]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:35:00.393]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:35:00.393]        // =>  FALSE
[05:35:00.393]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:35:00.393]    </control>
[05:35:00.393]    <control if="continueId == 4" while="" timeout="0" info="">
[05:35:00.393]      // if-block "continueId == 4"
[05:35:00.393]        // =>  FALSE
[05:35:00.393]      // skip if-block "continueId == 4"
[05:35:00.393]    </control>
[05:35:00.393]    <control if="!isProduction" while="" timeout="0" info="">
[05:35:00.393]      // if-block "!isProduction"
[05:35:00.393]        // =>  FALSE
[05:35:00.393]      // skip if-block "!isProduction"
[05:35:00.393]    </control>
[05:35:00.393]  </sequence>
[05:35:00.393]  
[05:36:05.460]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:36:05.460]  
[05:36:05.468]  <debugvars>
[05:36:05.468]    // Pre-defined
[05:36:05.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:05.468]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:05.468]    __dp=0x00000000
[05:36:05.468]    __ap=0x00000000
[05:36:05.468]    __traceout=0x00000000      (Trace Disabled)
[05:36:05.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:05.468]    __FlashAddr=0x00000000
[05:36:05.468]    __FlashLen=0x00000000
[05:36:05.468]    __FlashArg=0x00000000
[05:36:05.468]    __FlashOp=0x00000000
[05:36:05.468]    __Result=0x00000000
[05:36:05.468]  </debugvars>
[05:36:05.470]  
[05:36:05.470]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:36:05.470]    <block atomic="false" info="">
[05:36:05.470]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:36:05.470]        // -> [isSWJ <= 0x00000001]
[05:36:05.470]      __var hasDormant = __protocol & 0x00020000;
[05:36:05.470]        // -> [hasDormant <= 0x00000000]
[05:36:05.470]      __var protType   = __protocol & 0x0000FFFF;
[05:36:05.470]        // -> [protType <= 0x00000002]
[05:36:05.470]    </block>
[05:36:05.470]    <control if="protType == 1" while="" timeout="0" info="">
[05:36:05.470]      // if-block "protType == 1"
[05:36:05.470]        // =>  FALSE
[05:36:05.470]      // skip if-block "protType == 1"
[05:36:05.470]    </control>
[05:36:05.470]    <control if="protType == 2" while="" timeout="0" info="">
[05:36:05.470]      // if-block "protType == 2"
[05:36:05.470]        // =>  TRUE
[05:36:05.470]      <control if="isSWJ" while="" timeout="0" info="">
[05:36:05.470]        // if-block "isSWJ"
[05:36:05.470]          // =>  TRUE
[05:36:05.470]        <control if="hasDormant" while="" timeout="0" info="">
[05:36:05.470]          // if-block "hasDormant"
[05:36:05.473]            // =>  FALSE
[05:36:05.473]          // skip if-block "hasDormant"
[05:36:05.473]        </control>
[05:36:05.473]        <control if="!hasDormant" while="" timeout="0" info="">
[05:36:05.473]          // if-block "!hasDormant"
[05:36:05.473]            // =>  TRUE
[05:36:05.473]          <block atomic="false" info="">
[05:36:05.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:36:05.473]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:05.473]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:36:05.473]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:36:05.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:36:05.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:05.478]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:36:05.481]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:36:05.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:36:05.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:05.481]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:36:05.481]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:36:05.481]          </block>
[05:36:05.481]          // end if-block "!hasDormant"
[05:36:05.481]        </control>
[05:36:05.481]        // end if-block "isSWJ"
[05:36:05.481]      </control>
[05:36:05.481]      <control if="!isSWJ" while="" timeout="0" info="">
[05:36:05.481]        // if-block "!isSWJ"
[05:36:05.481]          // =>  FALSE
[05:36:05.481]        // skip if-block "!isSWJ"
[05:36:05.481]      </control>
[05:36:05.481]      <block atomic="false" info="">
[05:36:05.481]        ReadDP(0x0);
[05:36:05.481]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:36:05.488]      </block>
[05:36:05.488]      // end if-block "protType == 2"
[05:36:05.488]    </control>
[05:36:05.488]  </sequence>
[05:36:05.488]  
[05:36:05.490]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:36:05.490]  
[05:36:05.490]  <debugvars>
[05:36:05.490]    // Pre-defined
[05:36:05.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:05.492]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:05.492]    __dp=0x00000000
[05:36:05.492]    __ap=0x00000000
[05:36:05.492]    __traceout=0x00000000      (Trace Disabled)
[05:36:05.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:05.492]    __FlashAddr=0x00000000
[05:36:05.492]    __FlashLen=0x00000000
[05:36:05.492]    __FlashArg=0x00000000
[05:36:05.492]    __FlashOp=0x00000000
[05:36:05.492]    __Result=0x00000000
[05:36:05.492]  </debugvars>
[05:36:05.493]  
[05:36:05.493]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:36:05.493]    <block atomic="false" info="">
[05:36:05.493]      __var SW_DP_ABORT       = 0x0;
[05:36:05.493]        // -> [SW_DP_ABORT <= 0x00000000]
[05:36:05.493]      __var DP_CTRL_STAT      = 0x4;
[05:36:05.493]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:36:05.493]      __var DP_SELECT         = 0x8;
[05:36:05.493]        // -> [DP_SELECT <= 0x00000008]
[05:36:05.493]      __var powered_down      = 0;
[05:36:05.493]        // -> [powered_down <= 0x00000000]
[05:36:05.493]      WriteDP(DP_SELECT, 0x00000000);
[05:36:05.495]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:36:05.495]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:36:05.495]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:36:05.495]        // -> [powered_down <= 0x00000001]
[05:36:05.495]    </block>
[05:36:05.495]    <control if="powered_down" while="" timeout="0" info="">
[05:36:05.495]      // if-block "powered_down"
[05:36:05.495]        // =>  TRUE
[05:36:05.495]      <block atomic="false" info="">
[05:36:05.495]        Message(0, "Debug/System power-up request sent");
[05:36:05.499]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:36:05.501]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:36:05.501]      </block>
[05:36:05.501]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:36:05.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:36:05.503]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:36:05.503]        // while-condition  =>  FALSE
[05:36:05.503]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:36:05.503]      </control>
[05:36:05.503]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:36:05.503]        // if-block "(__protocol & 0xFFFF) == 1"
[05:36:05.503]          // =>  FALSE
[05:36:05.503]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:36:05.503]      </control>
[05:36:05.503]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:36:05.503]        // if-block "(__protocol & 0xFFFF) == 2"
[05:36:05.504]          // =>  TRUE
[05:36:05.504]        <block atomic="false" info="">
[05:36:05.504]          Message(0, "executing SWD power up");
[05:36:05.506]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:36:05.507]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:36:05.507]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:36:05.509]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:36:05.509]        </block>
[05:36:05.509]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:36:05.509]      </control>
[05:36:05.509]      // end if-block "powered_down"
[05:36:05.509]    </control>
[05:36:05.509]    <block atomic="false" info="">
[05:36:05.511]      __var DEBUG_PORT_VAL    = 0;
[05:36:05.511]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:36:05.511]      __var ACCESS_POINT_VAL  = 0;
[05:36:05.511]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:36:05.511]      __ap = 1; 
[05:36:05.511]        // -> [__ap <= 0x00000001]
[05:36:05.511]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:36:05.511]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:36:05.511]      __ap = 4;
[05:36:05.511]        // -> [__ap <= 0x00000004]
[05:36:05.511]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:36:05.518]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:36:05.519]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:36:05.519]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:36:05.521]    </block>
[05:36:05.521]    <block atomic="false" info="">
[05:36:05.521]      __var nReset = 0x80;
[05:36:05.521]        // -> [nReset <= 0x00000080]
[05:36:05.521]      __var canReadPins = 0;
[05:36:05.521]        // -> [canReadPins <= 0x00000000]
[05:36:05.521]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:36:05.523]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:36:05.523]        // -> [canReadPins <= 0x00000001]
[05:36:05.523]    </block>
[05:36:05.523]    <control if="" while="1" timeout="200" info="">
[05:36:05.523]      // while "1"  (timeout="200")
[05:36:05.523]      // while-condition  =>  TRUE
[05:36:05.523]      // while "1"  (timeout="200")
[05:36:05.524]      // while-condition  =>  TRUE
[05:36:05.524]      // while "1"  (timeout="200")
[05:36:05.524]      // while-condition  =>  TRUE
[05:36:05.524]      // while "1"  (timeout="200")
[05:36:05.524]      // while-condition  =>  TRUE
[05:36:05.525]      // while "1"  (timeout="200")
[05:36:05.525]      // while-condition  =>  TRUE
[05:36:05.525]      // while "1"  (timeout="200")
[05:36:05.525]      // while-condition  =>  TRUE
[05:36:05.525]      // while "1"  (timeout="200")
[05:36:05.525]      // while-condition  =>  TRUE
[05:36:05.525]      // while "1"  (timeout="200")
[05:36:05.525]      // while-condition  =>  TRUE
[05:36:05.525]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.526]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.526]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.526]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.526]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.526]      // while "1"  (timeout="200")
[05:36:05.526]      // while-condition  =>  TRUE
[05:36:05.527]      // while "1"  (timeout="200")
[05:36:05.527]      // while-condition  =>  TRUE
[05:36:05.527]      // while "1"  (timeout="200")
[05:36:05.527]      // while-condition  =>  TRUE
[05:36:05.527]      // while "1"  (timeout="200")
[05:36:05.528]      // while-condition  =>  TRUE
[05:36:05.528]      // while "1"  (timeout="200")
[05:36:05.528]      // while-condition  =>  TRUE
[05:36:05.528]      // while "1"  (timeout="200")
[05:36:05.528]      // while-condition  =>  TRUE
[05:36:05.528]      // while "1"  (timeout="200")
[05:36:05.528]      // while-condition  =>  TRUE
[05:36:05.528]      // while "1"  (timeout="200")
[05:36:05.529]      // while-condition  =>  TRUE
[05:36:05.529]      // while "1"  (timeout="200")
[05:36:05.529]      // while-condition  =>  TRUE
[05:36:05.529]      // while "1"  (timeout="200")
[05:36:05.529]      // while-condition  =>  TRUE
[05:36:05.530]      // while "1"  (timeout="200")
[05:36:05.530]      // while-condition  =>  TRUE
[05:36:05.530]      // while "1"  (timeout="200")
[05:36:05.530]      // while-condition  =>  TRUE
[05:36:05.530]      // while "1"  (timeout="200")
[05:36:05.530]      // while-condition  =>  TRUE
[05:36:05.530]      // while "1"  (timeout="200")
[05:36:05.530]      // while-condition  =>  TRUE
[05:36:05.530]      // while "1"  (timeout="200")
[05:36:05.530]      // while-condition  =>  TRUE
[05:36:05.531]      // while "1"  (timeout="200")
[05:36:05.531]      // while-condition  =>  TRUE
[05:36:05.531]      // while "1"  (timeout="200")
[05:36:05.531]      // while-condition  =>  TRUE
[05:36:05.531]      // while "1"  (timeout="200")
[05:36:05.531]      // while-condition  =>  TRUE
[05:36:05.531]      // while "1"  (timeout="200")
[05:36:05.531]      // while-condition  =>  TRUE
[05:36:05.532]      // while "1"  (timeout="200")
[05:36:05.532]      // while  =>  TIMEOUT
[05:36:05.532]      // end while "1"
[05:36:05.532]    </control>
[05:36:05.532]    <control if="canReadPins" while="" timeout="0" info="">
[05:36:05.532]      // if-block "canReadPins"
[05:36:05.532]        // =>  TRUE
[05:36:05.532]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:36:05.532]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:36:05.534]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:36:05.535]        // while-condition  =>  FALSE
[05:36:05.535]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:36:05.535]      </control>
[05:36:05.535]      // end if-block "canReadPins"
[05:36:05.535]    </control>
[05:36:05.535]    <control if="!canReadPins" while="" timeout="0" info="">
[05:36:05.535]      // if-block "!canReadPins"
[05:36:05.536]        // =>  FALSE
[05:36:05.536]      // skip if-block "!canReadPins"
[05:36:05.536]    </control>
[05:36:05.536]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:36:05.536]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:36:05.536]        // =>  TRUE
[05:36:05.536]      <block atomic="false" info="">
[05:36:05.537]        WriteAP(0x00, 0x190008);
[05:36:05.538]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:36:05.539]        WriteAP(0xF0, 0x01);
[05:36:05.544]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:36:05.544]      </block>
[05:36:05.544]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:36:05.544]    </control>
[05:36:05.544]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:36:05.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:36:05.544]        // =>  FALSE
[05:36:05.544]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:36:05.545]    </control>
[05:36:05.545]    <block atomic="false" info="">
[05:36:05.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:36:05.551]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:36:05.551]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:36:05.551]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:36:05.554]      __ap = 0; //lets make sure we reset the access point selection
[05:36:05.554]        // -> [__ap <= 0x00000000]
[05:36:05.555]    </block>
[05:36:05.555]  </sequence>
[05:36:05.555]  
[05:36:05.574]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:36:05.574]  
[05:36:05.574]  <debugvars>
[05:36:05.574]    // Pre-defined
[05:36:05.574]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:05.574]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:05.574]    __dp=0x00000000
[05:36:05.574]    __ap=0x00000000
[05:36:05.574]    __traceout=0x00000000      (Trace Disabled)
[05:36:05.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:05.574]    __FlashAddr=0x00000000
[05:36:05.575]    __FlashLen=0x00000000
[05:36:05.575]    __FlashArg=0x00000000
[05:36:05.575]    __FlashOp=0x00000000
[05:36:05.575]    __Result=0x00000000
[05:36:05.575]  </debugvars>
[05:36:05.575]  
[05:36:05.575]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:36:05.575]    <block atomic="false" info="">
[05:36:05.575]      __var deviceID = 0;
[05:36:05.575]        // -> [deviceID <= 0x00000000]
[05:36:05.575]      __var version = 0;
[05:36:05.577]        // -> [version <= 0x00000000]
[05:36:05.577]      __var partNum = 0;
[05:36:05.577]        // -> [partNum <= 0x00000000]
[05:36:05.577]      __var manuf = 0;
[05:36:05.577]        // -> [manuf <= 0x00000000]
[05:36:05.577]      __var isMSPM0G1X0X_G3X0X = 0;
[05:36:05.577]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:36:05.577]      __var isProduction = 0;
[05:36:05.577]        // -> [isProduction <= 0x00000000]
[05:36:05.577]      __var continueId = 0;
[05:36:05.578]        // -> [continueId <= 0x00000000]
[05:36:05.578]      deviceID =   Read32(0x41C40004);
[05:36:05.582]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:36:05.582]        // -> [deviceID <= 0x2BB8802F]
[05:36:05.582]      version = deviceID >> 28;
[05:36:05.582]        // -> [version <= 0x00000002]
[05:36:05.582]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:36:05.582]        // -> [partNum <= 0x0000BB88]
[05:36:05.582]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:36:05.582]        // -> [manuf <= 0x00000017]
[05:36:05.582]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:36:05.582]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:36:05.582]      isProduction = (version > 0);
[05:36:05.582]        // -> [isProduction <= 0x00000001]
[05:36:05.582]    </block>
[05:36:05.582]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:36:05.582]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:36:05.582]        // =>  FALSE
[05:36:05.582]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:36:05.582]    </control>
[05:36:05.582]    <control if="continueId == 4" while="" timeout="0" info="">
[05:36:05.582]      // if-block "continueId == 4"
[05:36:05.582]        // =>  FALSE
[05:36:05.582]      // skip if-block "continueId == 4"
[05:36:05.582]    </control>
[05:36:05.582]    <control if="!isProduction" while="" timeout="0" info="">
[05:36:05.582]      // if-block "!isProduction"
[05:36:05.582]        // =>  FALSE
[05:36:05.582]      // skip if-block "!isProduction"
[05:36:05.582]    </control>
[05:36:05.582]  </sequence>
[05:36:05.582]  
[05:36:44.876]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:36:44.876]  
[05:36:44.890]  <debugvars>
[05:36:44.890]    // Pre-defined
[05:36:44.890]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:44.890]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:44.890]    __dp=0x00000000
[05:36:44.890]    __ap=0x00000000
[05:36:44.890]    __traceout=0x00000000      (Trace Disabled)
[05:36:44.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:44.890]    __FlashAddr=0x00000000
[05:36:44.890]    __FlashLen=0x00000000
[05:36:44.890]    __FlashArg=0x00000000
[05:36:44.890]    __FlashOp=0x00000000
[05:36:44.890]    __Result=0x00000000
[05:36:44.890]  </debugvars>
[05:36:44.890]  
[05:36:44.890]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:36:44.890]    <block atomic="false" info="">
[05:36:44.890]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:36:44.890]        // -> [isSWJ <= 0x00000001]
[05:36:44.890]      __var hasDormant = __protocol & 0x00020000;
[05:36:44.890]        // -> [hasDormant <= 0x00000000]
[05:36:44.890]      __var protType   = __protocol & 0x0000FFFF;
[05:36:44.890]        // -> [protType <= 0x00000002]
[05:36:44.890]    </block>
[05:36:44.890]    <control if="protType == 1" while="" timeout="0" info="">
[05:36:44.890]      // if-block "protType == 1"
[05:36:44.890]        // =>  FALSE
[05:36:44.890]      // skip if-block "protType == 1"
[05:36:44.890]    </control>
[05:36:44.890]    <control if="protType == 2" while="" timeout="0" info="">
[05:36:44.890]      // if-block "protType == 2"
[05:36:44.890]        // =>  TRUE
[05:36:44.890]      <control if="isSWJ" while="" timeout="0" info="">
[05:36:44.890]        // if-block "isSWJ"
[05:36:44.890]          // =>  TRUE
[05:36:44.890]        <control if="hasDormant" while="" timeout="0" info="">
[05:36:44.890]          // if-block "hasDormant"
[05:36:44.890]            // =>  FALSE
[05:36:44.890]          // skip if-block "hasDormant"
[05:36:44.890]        </control>
[05:36:44.890]        <control if="!hasDormant" while="" timeout="0" info="">
[05:36:44.890]          // if-block "!hasDormant"
[05:36:44.890]            // =>  TRUE
[05:36:44.890]          <block atomic="false" info="">
[05:36:44.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:36:44.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:44.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:36:44.896]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:36:44.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:36:44.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:44.896]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:36:44.896]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:36:44.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:36:44.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:36:44.896]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:36:44.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:36:44.896]          </block>
[05:36:44.896]          // end if-block "!hasDormant"
[05:36:44.896]        </control>
[05:36:44.896]        // end if-block "isSWJ"
[05:36:44.896]      </control>
[05:36:44.896]      <control if="!isSWJ" while="" timeout="0" info="">
[05:36:44.896]        // if-block "!isSWJ"
[05:36:44.896]          // =>  FALSE
[05:36:44.896]        // skip if-block "!isSWJ"
[05:36:44.896]      </control>
[05:36:44.896]      <block atomic="false" info="">
[05:36:44.896]        ReadDP(0x0);
[05:36:44.906]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:36:44.906]      </block>
[05:36:44.906]      // end if-block "protType == 2"
[05:36:44.906]    </control>
[05:36:44.906]  </sequence>
[05:36:44.906]  
[05:36:44.906]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:36:44.906]  
[05:36:44.906]  <debugvars>
[05:36:44.906]    // Pre-defined
[05:36:44.906]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:44.906]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:44.906]    __dp=0x00000000
[05:36:44.906]    __ap=0x00000000
[05:36:44.906]    __traceout=0x00000000      (Trace Disabled)
[05:36:44.906]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:44.906]    __FlashAddr=0x00000000
[05:36:44.906]    __FlashLen=0x00000000
[05:36:44.906]    __FlashArg=0x00000000
[05:36:44.906]    __FlashOp=0x00000000
[05:36:44.906]    __Result=0x00000000
[05:36:44.906]  </debugvars>
[05:36:44.906]  
[05:36:44.906]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:36:44.906]    <block atomic="false" info="">
[05:36:44.906]      __var SW_DP_ABORT       = 0x0;
[05:36:44.906]        // -> [SW_DP_ABORT <= 0x00000000]
[05:36:44.906]      __var DP_CTRL_STAT      = 0x4;
[05:36:44.906]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:36:44.906]      __var DP_SELECT         = 0x8;
[05:36:44.906]        // -> [DP_SELECT <= 0x00000008]
[05:36:44.906]      __var powered_down      = 0;
[05:36:44.906]        // -> [powered_down <= 0x00000000]
[05:36:44.906]      WriteDP(DP_SELECT, 0x00000000);
[05:36:44.906]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:36:44.916]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:36:44.916]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:36:44.916]        // -> [powered_down <= 0x00000001]
[05:36:44.916]    </block>
[05:36:44.916]    <control if="powered_down" while="" timeout="0" info="">
[05:36:44.916]      // if-block "powered_down"
[05:36:44.916]        // =>  TRUE
[05:36:44.916]      <block atomic="false" info="">
[05:36:44.916]        Message(0, "Debug/System power-up request sent");
[05:36:44.916]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:36:44.916]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:36:44.916]      </block>
[05:36:44.916]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:36:44.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:36:44.916]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:36:44.916]        // while-condition  =>  FALSE
[05:36:44.916]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:36:44.916]      </control>
[05:36:44.916]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:36:44.916]        // if-block "(__protocol & 0xFFFF) == 1"
[05:36:44.916]          // =>  FALSE
[05:36:44.916]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:36:44.916]      </control>
[05:36:44.916]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:36:44.916]        // if-block "(__protocol & 0xFFFF) == 2"
[05:36:44.916]          // =>  TRUE
[05:36:44.916]        <block atomic="false" info="">
[05:36:44.916]          Message(0, "executing SWD power up");
[05:36:44.926]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:36:44.926]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:36:44.926]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:36:44.926]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:36:44.926]        </block>
[05:36:44.926]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:36:44.926]      </control>
[05:36:44.926]      // end if-block "powered_down"
[05:36:44.926]    </control>
[05:36:44.926]    <block atomic="false" info="">
[05:36:44.926]      __var DEBUG_PORT_VAL    = 0;
[05:36:44.926]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:36:44.926]      __var ACCESS_POINT_VAL  = 0;
[05:36:44.926]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:36:44.926]      __ap = 1; 
[05:36:44.926]        // -> [__ap <= 0x00000001]
[05:36:44.926]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:36:44.936]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:36:44.936]      __ap = 4;
[05:36:44.936]        // -> [__ap <= 0x00000004]
[05:36:44.936]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:36:44.936]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:36:44.936]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:36:44.936]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:36:44.936]    </block>
[05:36:44.936]    <block atomic="false" info="">
[05:36:44.936]      __var nReset = 0x80;
[05:36:44.936]        // -> [nReset <= 0x00000080]
[05:36:44.936]      __var canReadPins = 0;
[05:36:44.936]        // -> [canReadPins <= 0x00000000]
[05:36:44.936]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:36:44.946]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:36:44.946]        // -> [canReadPins <= 0x00000001]
[05:36:44.946]    </block>
[05:36:44.946]    <control if="" while="1" timeout="200" info="">
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.946]      // while-condition  =>  TRUE
[05:36:44.946]      // while "1"  (timeout="200")
[05:36:44.956]      // while-condition  =>  TRUE
[05:36:44.956]      // while "1"  (timeout="200")
[05:36:44.956]      // while  =>  TIMEOUT
[05:36:44.956]      // end while "1"
[05:36:44.956]    </control>
[05:36:44.956]    <control if="canReadPins" while="" timeout="0" info="">
[05:36:44.956]      // if-block "canReadPins"
[05:36:44.956]        // =>  TRUE
[05:36:44.956]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:36:44.956]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:36:44.956]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:36:44.956]        // while-condition  =>  FALSE
[05:36:44.956]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:36:44.956]      </control>
[05:36:44.956]      // end if-block "canReadPins"
[05:36:44.956]    </control>
[05:36:44.956]    <control if="!canReadPins" while="" timeout="0" info="">
[05:36:44.956]      // if-block "!canReadPins"
[05:36:44.956]        // =>  FALSE
[05:36:44.956]      // skip if-block "!canReadPins"
[05:36:44.956]    </control>
[05:36:44.956]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:36:44.956]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:36:44.956]        // =>  TRUE
[05:36:44.956]      <block atomic="false" info="">
[05:36:44.956]        WriteAP(0x00, 0x190008);
[05:36:44.956]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:36:44.956]        WriteAP(0xF0, 0x01);
[05:36:44.956]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:36:44.956]      </block>
[05:36:44.956]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:36:44.956]    </control>
[05:36:44.956]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:36:44.966]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:36:44.966]        // =>  FALSE
[05:36:44.966]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:36:44.966]    </control>
[05:36:44.966]    <block atomic="false" info="">
[05:36:44.966]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:36:44.966]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:36:44.966]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:36:44.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:36:44.966]      __ap = 0; //lets make sure we reset the access point selection
[05:36:44.966]        // -> [__ap <= 0x00000000]
[05:36:44.966]    </block>
[05:36:44.966]  </sequence>
[05:36:44.966]  
[05:36:44.986]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:36:44.986]  
[05:36:44.986]  <debugvars>
[05:36:44.986]    // Pre-defined
[05:36:44.986]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:36:44.986]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:36:44.986]    __dp=0x00000000
[05:36:44.986]    __ap=0x00000000
[05:36:44.986]    __traceout=0x00000000      (Trace Disabled)
[05:36:44.986]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:36:44.986]    __FlashAddr=0x00000000
[05:36:44.986]    __FlashLen=0x00000000
[05:36:44.986]    __FlashArg=0x00000000
[05:36:44.986]    __FlashOp=0x00000000
[05:36:44.986]    __Result=0x00000000
[05:36:44.986]  </debugvars>
[05:36:44.986]  
[05:36:44.986]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:36:44.986]    <block atomic="false" info="">
[05:36:44.986]      __var deviceID = 0;
[05:36:44.986]        // -> [deviceID <= 0x00000000]
[05:36:44.986]      __var version = 0;
[05:36:44.986]        // -> [version <= 0x00000000]
[05:36:44.986]      __var partNum = 0;
[05:36:44.986]        // -> [partNum <= 0x00000000]
[05:36:44.986]      __var manuf = 0;
[05:36:44.986]        // -> [manuf <= 0x00000000]
[05:36:44.986]      __var isMSPM0G1X0X_G3X0X = 0;
[05:36:44.986]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:36:44.986]      __var isProduction = 0;
[05:36:44.986]        // -> [isProduction <= 0x00000000]
[05:36:44.986]      __var continueId = 0;
[05:36:44.986]        // -> [continueId <= 0x00000000]
[05:36:44.986]      deviceID =   Read32(0x41C40004);
[05:36:44.996]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:36:44.996]        // -> [deviceID <= 0x2BB8802F]
[05:36:44.996]      version = deviceID >> 28;
[05:36:44.996]        // -> [version <= 0x00000002]
[05:36:44.996]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:36:44.996]        // -> [partNum <= 0x0000BB88]
[05:36:44.996]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:36:44.996]        // -> [manuf <= 0x00000017]
[05:36:44.996]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:36:44.996]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:36:44.996]      isProduction = (version > 0);
[05:36:44.996]        // -> [isProduction <= 0x00000001]
[05:36:44.996]    </block>
[05:36:44.996]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:36:44.996]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:36:44.996]        // =>  FALSE
[05:36:44.996]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:36:44.996]    </control>
[05:36:44.996]    <control if="continueId == 4" while="" timeout="0" info="">
[05:36:44.996]      // if-block "continueId == 4"
[05:36:44.996]        // =>  FALSE
[05:36:44.996]      // skip if-block "continueId == 4"
[05:36:44.996]    </control>
[05:36:44.996]    <control if="!isProduction" while="" timeout="0" info="">
[05:36:44.996]      // if-block "!isProduction"
[05:36:44.996]        // =>  FALSE
[05:36:44.996]      // skip if-block "!isProduction"
[05:36:44.996]    </control>
[05:36:44.996]  </sequence>
[05:36:44.996]  
[05:37:22.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:37:22.968]  
[05:37:22.983]  <debugvars>
[05:37:22.983]    // Pre-defined
[05:37:22.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:37:22.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:37:22.983]    __dp=0x00000000
[05:37:22.983]    __ap=0x00000000
[05:37:22.983]    __traceout=0x00000000      (Trace Disabled)
[05:37:22.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:37:22.983]    __FlashAddr=0x00000000
[05:37:22.983]    __FlashLen=0x00000000
[05:37:22.983]    __FlashArg=0x00000000
[05:37:22.983]    __FlashOp=0x00000000
[05:37:22.983]    __Result=0x00000000
[05:37:22.983]  </debugvars>
[05:37:22.983]  
[05:37:22.983]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:37:22.983]    <block atomic="false" info="">
[05:37:22.983]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:37:22.983]        // -> [isSWJ <= 0x00000001]
[05:37:22.983]      __var hasDormant = __protocol & 0x00020000;
[05:37:22.983]        // -> [hasDormant <= 0x00000000]
[05:37:22.983]      __var protType   = __protocol & 0x0000FFFF;
[05:37:22.983]        // -> [protType <= 0x00000002]
[05:37:22.983]    </block>
[05:37:22.983]    <control if="protType == 1" while="" timeout="0" info="">
[05:37:22.983]      // if-block "protType == 1"
[05:37:22.983]        // =>  FALSE
[05:37:22.983]      // skip if-block "protType == 1"
[05:37:22.983]    </control>
[05:37:22.983]    <control if="protType == 2" while="" timeout="0" info="">
[05:37:22.983]      // if-block "protType == 2"
[05:37:22.983]        // =>  TRUE
[05:37:22.983]      <control if="isSWJ" while="" timeout="0" info="">
[05:37:22.983]        // if-block "isSWJ"
[05:37:22.983]          // =>  TRUE
[05:37:22.983]        <control if="hasDormant" while="" timeout="0" info="">
[05:37:22.983]          // if-block "hasDormant"
[05:37:22.983]            // =>  FALSE
[05:37:22.983]          // skip if-block "hasDormant"
[05:37:22.983]        </control>
[05:37:22.983]        <control if="!hasDormant" while="" timeout="0" info="">
[05:37:22.983]          // if-block "!hasDormant"
[05:37:22.983]            // =>  TRUE
[05:37:22.983]          <block atomic="false" info="">
[05:37:22.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:37:22.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:37:22.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:37:22.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:37:22.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:37:23.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:37:23.000]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:37:23.000]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:37:23.000]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:37:23.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:37:23.000]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:37:23.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:37:23.009]          </block>
[05:37:23.009]          // end if-block "!hasDormant"
[05:37:23.009]        </control>
[05:37:23.009]        // end if-block "isSWJ"
[05:37:23.009]      </control>
[05:37:23.009]      <control if="!isSWJ" while="" timeout="0" info="">
[05:37:23.009]        // if-block "!isSWJ"
[05:37:23.009]          // =>  FALSE
[05:37:23.009]        // skip if-block "!isSWJ"
[05:37:23.009]      </control>
[05:37:23.010]      <block atomic="false" info="">
[05:37:23.010]        ReadDP(0x0);
[05:37:23.010]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:37:23.010]      </block>
[05:37:23.010]      // end if-block "protType == 2"
[05:37:23.010]    </control>
[05:37:23.010]  </sequence>
[05:37:23.010]  
[05:37:23.010]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:37:23.010]  
[05:37:23.010]  <debugvars>
[05:37:23.010]    // Pre-defined
[05:37:23.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:37:23.010]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:37:23.010]    __dp=0x00000000
[05:37:23.010]    __ap=0x00000000
[05:37:23.010]    __traceout=0x00000000      (Trace Disabled)
[05:37:23.010]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:37:23.010]    __FlashAddr=0x00000000
[05:37:23.010]    __FlashLen=0x00000000
[05:37:23.010]    __FlashArg=0x00000000
[05:37:23.010]    __FlashOp=0x00000000
[05:37:23.010]    __Result=0x00000000
[05:37:23.010]  </debugvars>
[05:37:23.010]  
[05:37:23.010]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:37:23.010]    <block atomic="false" info="">
[05:37:23.010]      __var SW_DP_ABORT       = 0x0;
[05:37:23.010]        // -> [SW_DP_ABORT <= 0x00000000]
[05:37:23.010]      __var DP_CTRL_STAT      = 0x4;
[05:37:23.010]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:37:23.010]      __var DP_SELECT         = 0x8;
[05:37:23.010]        // -> [DP_SELECT <= 0x00000008]
[05:37:23.010]      __var powered_down      = 0;
[05:37:23.010]        // -> [powered_down <= 0x00000000]
[05:37:23.010]      WriteDP(DP_SELECT, 0x00000000);
[05:37:23.020]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:37:23.020]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:37:23.020]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:37:23.020]        // -> [powered_down <= 0x00000001]
[05:37:23.020]    </block>
[05:37:23.020]    <control if="powered_down" while="" timeout="0" info="">
[05:37:23.020]      // if-block "powered_down"
[05:37:23.020]        // =>  TRUE
[05:37:23.020]      <block atomic="false" info="">
[05:37:23.020]        Message(0, "Debug/System power-up request sent");
[05:37:23.020]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:37:23.020]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:37:23.020]      </block>
[05:37:23.020]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:37:23.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:37:23.020]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:37:23.020]        // while-condition  =>  FALSE
[05:37:23.020]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:37:23.020]      </control>
[05:37:23.020]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:37:23.020]        // if-block "(__protocol & 0xFFFF) == 1"
[05:37:23.029]          // =>  FALSE
[05:37:23.029]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:37:23.029]      </control>
[05:37:23.029]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:37:23.029]        // if-block "(__protocol & 0xFFFF) == 2"
[05:37:23.029]          // =>  TRUE
[05:37:23.029]        <block atomic="false" info="">
[05:37:23.029]          Message(0, "executing SWD power up");
[05:37:23.029]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:37:23.029]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:37:23.029]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:37:23.035]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:37:23.035]        </block>
[05:37:23.035]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:37:23.035]      </control>
[05:37:23.035]      // end if-block "powered_down"
[05:37:23.035]    </control>
[05:37:23.036]    <block atomic="false" info="">
[05:37:23.036]      __var DEBUG_PORT_VAL    = 0;
[05:37:23.036]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:37:23.036]      __var ACCESS_POINT_VAL  = 0;
[05:37:23.036]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:37:23.036]      __ap = 1; 
[05:37:23.036]        // -> [__ap <= 0x00000001]
[05:37:23.036]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:37:23.039]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:37:23.039]      __ap = 4;
[05:37:23.039]        // -> [__ap <= 0x00000004]
[05:37:23.039]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:37:23.039]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:37:23.039]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:37:23.039]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:37:23.039]    </block>
[05:37:23.039]    <block atomic="false" info="">
[05:37:23.039]      __var nReset = 0x80;
[05:37:23.039]        // -> [nReset <= 0x00000080]
[05:37:23.039]      __var canReadPins = 0;
[05:37:23.039]        // -> [canReadPins <= 0x00000000]
[05:37:23.039]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:37:23.039]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:37:23.039]        // -> [canReadPins <= 0x00000001]
[05:37:23.039]    </block>
[05:37:23.049]    <control if="" while="1" timeout="200" info="">
[05:37:23.049]      // while "1"  (timeout="200")
[05:37:23.049]      // while-condition  =>  TRUE
[05:37:23.049]      // while "1"  (timeout="200")
[05:37:23.050]      // while-condition  =>  TRUE
[05:37:23.050]      // while "1"  (timeout="200")
[05:37:23.050]      // while-condition  =>  TRUE
[05:37:23.051]      // while "1"  (timeout="200")
[05:37:23.051]      // while-condition  =>  TRUE
[05:37:23.051]      // while "1"  (timeout="200")
[05:37:23.051]      // while-condition  =>  TRUE
[05:37:23.051]      // while "1"  (timeout="200")
[05:37:23.051]      // while-condition  =>  TRUE
[05:37:23.051]      // while "1"  (timeout="200")
[05:37:23.051]      // while-condition  =>  TRUE
[05:37:23.051]      // while "1"  (timeout="200")
[05:37:23.051]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.052]      // while "1"  (timeout="200")
[05:37:23.052]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.054]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.054]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.054]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.054]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.054]      // while-condition  =>  TRUE
[05:37:23.054]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.055]      // while "1"  (timeout="200")
[05:37:23.055]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.058]      // while "1"  (timeout="200")
[05:37:23.058]      // while-condition  =>  TRUE
[05:37:23.060]      // while "1"  (timeout="200")
[05:37:23.060]      // while-condition  =>  TRUE
[05:37:23.060]      // while "1"  (timeout="200")
[05:37:23.060]      // while-condition  =>  TRUE
[05:37:23.060]      // while "1"  (timeout="200")
[05:37:23.060]      // while-condition  =>  TRUE
[05:37:23.060]      // while "1"  (timeout="200")
[05:37:23.060]      // while-condition  =>  TRUE
[05:37:23.060]      // while "1"  (timeout="200")
[05:37:23.061]      // while-condition  =>  TRUE
[05:37:23.061]      // while "1"  (timeout="200")
[05:37:23.061]      // while-condition  =>  TRUE
[05:37:23.061]      // while "1"  (timeout="200")
[05:37:23.061]      // while-condition  =>  TRUE
[05:37:23.061]      // while "1"  (timeout="200")
[05:37:23.061]      // while-condition  =>  TRUE
[05:37:23.061]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.062]      // while-condition  =>  TRUE
[05:37:23.062]      // while "1"  (timeout="200")
[05:37:23.063]      // while-condition  =>  TRUE
[05:37:23.063]      // while "1"  (timeout="200")
[05:37:23.063]      // while  =>  TIMEOUT
[05:37:23.063]      // end while "1"
[05:37:23.063]    </control>
[05:37:23.063]    <control if="canReadPins" while="" timeout="0" info="">
[05:37:23.063]      // if-block "canReadPins"
[05:37:23.063]        // =>  TRUE
[05:37:23.063]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:37:23.063]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:37:23.065]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:37:23.065]        // while-condition  =>  FALSE
[05:37:23.065]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:37:23.065]      </control>
[05:37:23.065]      // end if-block "canReadPins"
[05:37:23.065]    </control>
[05:37:23.065]    <control if="!canReadPins" while="" timeout="0" info="">
[05:37:23.065]      // if-block "!canReadPins"
[05:37:23.065]        // =>  FALSE
[05:37:23.065]      // skip if-block "!canReadPins"
[05:37:23.065]    </control>
[05:37:23.065]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:37:23.065]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:37:23.065]        // =>  TRUE
[05:37:23.065]      <block atomic="false" info="">
[05:37:23.065]        WriteAP(0x00, 0x190008);
[05:37:23.068]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:37:23.068]        WriteAP(0xF0, 0x01);
[05:37:23.071]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:37:23.071]      </block>
[05:37:23.071]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:37:23.071]    </control>
[05:37:23.071]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:37:23.071]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:37:23.071]        // =>  FALSE
[05:37:23.071]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:37:23.071]    </control>
[05:37:23.071]    <block atomic="false" info="">
[05:37:23.071]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:37:23.078]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:37:23.078]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:37:23.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:37:23.079]      __ap = 0; //lets make sure we reset the access point selection
[05:37:23.081]        // -> [__ap <= 0x00000000]
[05:37:23.081]    </block>
[05:37:23.081]  </sequence>
[05:37:23.081]  
[05:37:23.100]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:37:23.100]  
[05:37:23.100]  <debugvars>
[05:37:23.100]    // Pre-defined
[05:37:23.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:37:23.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:37:23.100]    __dp=0x00000000
[05:37:23.100]    __ap=0x00000000
[05:37:23.100]    __traceout=0x00000000      (Trace Disabled)
[05:37:23.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:37:23.100]    __FlashAddr=0x00000000
[05:37:23.100]    __FlashLen=0x00000000
[05:37:23.100]    __FlashArg=0x00000000
[05:37:23.100]    __FlashOp=0x00000000
[05:37:23.100]    __Result=0x00000000
[05:37:23.100]  </debugvars>
[05:37:23.102]  
[05:37:23.102]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:37:23.102]    <block atomic="false" info="">
[05:37:23.102]      __var deviceID = 0;
[05:37:23.102]        // -> [deviceID <= 0x00000000]
[05:37:23.102]      __var version = 0;
[05:37:23.102]        // -> [version <= 0x00000000]
[05:37:23.102]      __var partNum = 0;
[05:37:23.102]        // -> [partNum <= 0x00000000]
[05:37:23.102]      __var manuf = 0;
[05:37:23.102]        // -> [manuf <= 0x00000000]
[05:37:23.102]      __var isMSPM0G1X0X_G3X0X = 0;
[05:37:23.103]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:37:23.103]      __var isProduction = 0;
[05:37:23.103]        // -> [isProduction <= 0x00000000]
[05:37:23.103]      __var continueId = 0;
[05:37:23.103]        // -> [continueId <= 0x00000000]
[05:37:23.103]      deviceID =   Read32(0x41C40004);
[05:37:23.108]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:37:23.108]        // -> [deviceID <= 0x2BB8802F]
[05:37:23.108]      version = deviceID >> 28;
[05:37:23.108]        // -> [version <= 0x00000002]
[05:37:23.108]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:37:23.108]        // -> [partNum <= 0x0000BB88]
[05:37:23.108]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:37:23.108]        // -> [manuf <= 0x00000017]
[05:37:23.108]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:37:23.108]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:37:23.108]      isProduction = (version > 0);
[05:37:23.108]        // -> [isProduction <= 0x00000001]
[05:37:23.108]    </block>
[05:37:23.108]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:37:23.108]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:37:23.108]        // =>  FALSE
[05:37:23.110]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:37:23.110]    </control>
[05:37:23.110]    <control if="continueId == 4" while="" timeout="0" info="">
[05:37:23.110]      // if-block "continueId == 4"
[05:37:23.110]        // =>  FALSE
[05:37:23.110]      // skip if-block "continueId == 4"
[05:37:23.110]    </control>
[05:37:23.110]    <control if="!isProduction" while="" timeout="0" info="">
[05:37:23.110]      // if-block "!isProduction"
[05:37:23.110]        // =>  FALSE
[05:37:23.110]      // skip if-block "!isProduction"
[05:37:23.110]    </control>
[05:37:23.110]  </sequence>
[05:37:23.110]  
[05:38:47.671]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:38:47.671]  
[05:38:47.683]  <debugvars>
[05:38:47.683]    // Pre-defined
[05:38:47.683]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:38:47.683]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:38:47.683]    __dp=0x00000000
[05:38:47.683]    __ap=0x00000000
[05:38:47.683]    __traceout=0x00000000      (Trace Disabled)
[05:38:47.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:38:47.683]    __FlashAddr=0x00000000
[05:38:47.683]    __FlashLen=0x00000000
[05:38:47.683]    __FlashArg=0x00000000
[05:38:47.683]    __FlashOp=0x00000000
[05:38:47.683]    __Result=0x00000000
[05:38:47.683]  </debugvars>
[05:38:47.683]  
[05:38:47.683]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:38:47.683]    <block atomic="false" info="">
[05:38:47.683]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:38:47.683]        // -> [isSWJ <= 0x00000001]
[05:38:47.683]      __var hasDormant = __protocol & 0x00020000;
[05:38:47.683]        // -> [hasDormant <= 0x00000000]
[05:38:47.683]      __var protType   = __protocol & 0x0000FFFF;
[05:38:47.683]        // -> [protType <= 0x00000002]
[05:38:47.683]    </block>
[05:38:47.683]    <control if="protType == 1" while="" timeout="0" info="">
[05:38:47.683]      // if-block "protType == 1"
[05:38:47.683]        // =>  FALSE
[05:38:47.683]      // skip if-block "protType == 1"
[05:38:47.683]    </control>
[05:38:47.683]    <control if="protType == 2" while="" timeout="0" info="">
[05:38:47.683]      // if-block "protType == 2"
[05:38:47.683]        // =>  TRUE
[05:38:47.683]      <control if="isSWJ" while="" timeout="0" info="">
[05:38:47.683]        // if-block "isSWJ"
[05:38:47.683]          // =>  TRUE
[05:38:47.683]        <control if="hasDormant" while="" timeout="0" info="">
[05:38:47.683]          // if-block "hasDormant"
[05:38:47.683]            // =>  FALSE
[05:38:47.683]          // skip if-block "hasDormant"
[05:38:47.683]        </control>
[05:38:47.683]        <control if="!hasDormant" while="" timeout="0" info="">
[05:38:47.683]          // if-block "!hasDormant"
[05:38:47.683]            // =>  TRUE
[05:38:47.683]          <block atomic="false" info="">
[05:38:47.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:38:47.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:38:47.691]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:38:47.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:38:47.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:38:47.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:38:47.691]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:38:47.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:38:47.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:38:47.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:38:47.701]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:38:47.701]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:38:47.701]          </block>
[05:38:47.701]          // end if-block "!hasDormant"
[05:38:47.701]        </control>
[05:38:47.701]        // end if-block "isSWJ"
[05:38:47.701]      </control>
[05:38:47.701]      <control if="!isSWJ" while="" timeout="0" info="">
[05:38:47.701]        // if-block "!isSWJ"
[05:38:47.701]          // =>  FALSE
[05:38:47.701]        // skip if-block "!isSWJ"
[05:38:47.701]      </control>
[05:38:47.701]      <block atomic="false" info="">
[05:38:47.701]        ReadDP(0x0);
[05:38:47.701]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:38:47.701]      </block>
[05:38:47.701]      // end if-block "protType == 2"
[05:38:47.701]    </control>
[05:38:47.701]  </sequence>
[05:38:47.701]  
[05:38:47.701]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:38:47.701]  
[05:38:47.701]  <debugvars>
[05:38:47.701]    // Pre-defined
[05:38:47.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:38:47.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:38:47.701]    __dp=0x00000000
[05:38:47.711]    __ap=0x00000000
[05:38:47.711]    __traceout=0x00000000      (Trace Disabled)
[05:38:47.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:38:47.711]    __FlashAddr=0x00000000
[05:38:47.711]    __FlashLen=0x00000000
[05:38:47.711]    __FlashArg=0x00000000
[05:38:47.711]    __FlashOp=0x00000000
[05:38:47.711]    __Result=0x00000000
[05:38:47.711]  </debugvars>
[05:38:47.711]  
[05:38:47.711]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:38:47.711]    <block atomic="false" info="">
[05:38:47.711]      __var SW_DP_ABORT       = 0x0;
[05:38:47.711]        // -> [SW_DP_ABORT <= 0x00000000]
[05:38:47.711]      __var DP_CTRL_STAT      = 0x4;
[05:38:47.711]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:38:47.711]      __var DP_SELECT         = 0x8;
[05:38:47.711]        // -> [DP_SELECT <= 0x00000008]
[05:38:47.711]      __var powered_down      = 0;
[05:38:47.711]        // -> [powered_down <= 0x00000000]
[05:38:47.711]      WriteDP(DP_SELECT, 0x00000000);
[05:38:47.711]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:38:47.711]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:38:47.711]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:38:47.711]        // -> [powered_down <= 0x00000001]
[05:38:47.711]    </block>
[05:38:47.711]    <control if="powered_down" while="" timeout="0" info="">
[05:38:47.711]      // if-block "powered_down"
[05:38:47.711]        // =>  TRUE
[05:38:47.711]      <block atomic="false" info="">
[05:38:47.711]        Message(0, "Debug/System power-up request sent");
[05:38:47.711]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:38:47.721]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:38:47.721]      </block>
[05:38:47.721]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:38:47.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:38:47.721]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:38:47.721]        // while-condition  =>  FALSE
[05:38:47.721]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:38:47.721]      </control>
[05:38:47.721]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:38:47.721]        // if-block "(__protocol & 0xFFFF) == 1"
[05:38:47.721]          // =>  FALSE
[05:38:47.721]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:38:47.721]      </control>
[05:38:47.721]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:38:47.721]        // if-block "(__protocol & 0xFFFF) == 2"
[05:38:47.721]          // =>  TRUE
[05:38:47.721]        <block atomic="false" info="">
[05:38:47.721]          Message(0, "executing SWD power up");
[05:38:47.721]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:38:47.721]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:38:47.721]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:38:47.721]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:38:47.721]        </block>
[05:38:47.721]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:38:47.721]      </control>
[05:38:47.721]      // end if-block "powered_down"
[05:38:47.721]    </control>
[05:38:47.721]    <block atomic="false" info="">
[05:38:47.721]      __var DEBUG_PORT_VAL    = 0;
[05:38:47.721]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:38:47.721]      __var ACCESS_POINT_VAL  = 0;
[05:38:47.731]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:38:47.731]      __ap = 1; 
[05:38:47.731]        // -> [__ap <= 0x00000001]
[05:38:47.731]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:38:47.731]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:38:47.731]      __ap = 4;
[05:38:47.731]        // -> [__ap <= 0x00000004]
[05:38:47.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:38:47.731]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:38:47.731]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:38:47.731]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:38:47.731]    </block>
[05:38:47.731]    <block atomic="false" info="">
[05:38:47.731]      __var nReset = 0x80;
[05:38:47.731]        // -> [nReset <= 0x00000080]
[05:38:47.731]      __var canReadPins = 0;
[05:38:47.741]        // -> [canReadPins <= 0x00000000]
[05:38:47.741]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:38:47.741]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:38:47.741]        // -> [canReadPins <= 0x00000001]
[05:38:47.741]    </block>
[05:38:47.741]    <control if="" while="1" timeout="200" info="">
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.741]      // while "1"  (timeout="200")
[05:38:47.741]      // while-condition  =>  TRUE
[05:38:47.751]      // while "1"  (timeout="200")
[05:38:47.751]      // while  =>  TIMEOUT
[05:38:47.751]      // end while "1"
[05:38:47.751]    </control>
[05:38:47.751]    <control if="canReadPins" while="" timeout="0" info="">
[05:38:47.751]      // if-block "canReadPins"
[05:38:47.751]        // =>  TRUE
[05:38:47.751]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:38:47.751]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:38:47.751]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:38:47.751]        // while-condition  =>  FALSE
[05:38:47.751]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:38:47.751]      </control>
[05:38:47.751]      // end if-block "canReadPins"
[05:38:47.751]    </control>
[05:38:47.751]    <control if="!canReadPins" while="" timeout="0" info="">
[05:38:47.751]      // if-block "!canReadPins"
[05:38:47.751]        // =>  FALSE
[05:38:47.751]      // skip if-block "!canReadPins"
[05:38:47.751]    </control>
[05:38:47.751]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:38:47.751]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:38:47.751]        // =>  TRUE
[05:38:47.751]      <block atomic="false" info="">
[05:38:47.751]        WriteAP(0x00, 0x190008);
[05:38:47.751]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:38:47.751]        WriteAP(0xF0, 0x01);
[05:38:47.761]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:38:47.761]      </block>
[05:38:47.761]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:38:47.761]    </control>
[05:38:47.761]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:38:47.761]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:38:47.761]        // =>  FALSE
[05:38:47.761]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:38:47.761]    </control>
[05:38:47.761]    <block atomic="false" info="">
[05:38:47.761]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:38:47.761]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:38:47.761]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:38:47.761]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:38:47.761]      __ap = 0; //lets make sure we reset the access point selection
[05:38:47.761]        // -> [__ap <= 0x00000000]
[05:38:47.761]    </block>
[05:38:47.761]  </sequence>
[05:38:47.761]  
[05:38:47.781]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:38:47.781]  
[05:38:47.781]  <debugvars>
[05:38:47.781]    // Pre-defined
[05:38:47.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:38:47.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:38:47.781]    __dp=0x00000000
[05:38:47.781]    __ap=0x00000000
[05:38:47.781]    __traceout=0x00000000      (Trace Disabled)
[05:38:47.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:38:47.781]    __FlashAddr=0x00000000
[05:38:47.781]    __FlashLen=0x00000000
[05:38:47.781]    __FlashArg=0x00000000
[05:38:47.781]    __FlashOp=0x00000000
[05:38:47.781]    __Result=0x00000000
[05:38:47.781]  </debugvars>
[05:38:47.781]  
[05:38:47.781]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:38:47.781]    <block atomic="false" info="">
[05:38:47.781]      __var deviceID = 0;
[05:38:47.781]        // -> [deviceID <= 0x00000000]
[05:38:47.781]      __var version = 0;
[05:38:47.791]        // -> [version <= 0x00000000]
[05:38:47.791]      __var partNum = 0;
[05:38:47.791]        // -> [partNum <= 0x00000000]
[05:38:47.791]      __var manuf = 0;
[05:38:47.791]        // -> [manuf <= 0x00000000]
[05:38:47.791]      __var isMSPM0G1X0X_G3X0X = 0;
[05:38:47.791]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:38:47.791]      __var isProduction = 0;
[05:38:47.791]        // -> [isProduction <= 0x00000000]
[05:38:47.791]      __var continueId = 0;
[05:38:47.791]        // -> [continueId <= 0x00000000]
[05:38:47.791]      deviceID =   Read32(0x41C40004);
[05:38:47.791]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:38:47.791]        // -> [deviceID <= 0x2BB8802F]
[05:38:47.791]      version = deviceID >> 28;
[05:38:47.791]        // -> [version <= 0x00000002]
[05:38:47.791]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:38:47.791]        // -> [partNum <= 0x0000BB88]
[05:38:47.791]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:38:47.791]        // -> [manuf <= 0x00000017]
[05:38:47.791]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:38:47.791]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:38:47.791]      isProduction = (version > 0);
[05:38:47.791]        // -> [isProduction <= 0x00000001]
[05:38:47.791]    </block>
[05:38:47.791]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:38:47.791]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:38:47.791]        // =>  FALSE
[05:38:47.791]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:38:47.791]    </control>
[05:38:47.791]    <control if="continueId == 4" while="" timeout="0" info="">
[05:38:47.791]      // if-block "continueId == 4"
[05:38:47.791]        // =>  FALSE
[05:38:47.791]      // skip if-block "continueId == 4"
[05:38:47.791]    </control>
[05:38:47.791]    <control if="!isProduction" while="" timeout="0" info="">
[05:38:47.791]      // if-block "!isProduction"
[05:38:47.801]        // =>  FALSE
[05:38:47.801]      // skip if-block "!isProduction"
[05:38:47.801]    </control>
[05:38:47.801]  </sequence>
[05:38:47.801]  
[05:39:50.410]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:39:50.410]  
[05:39:50.410]  <debugvars>
[05:39:50.410]    // Pre-defined
[05:39:50.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:39:50.410]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:39:50.410]    __dp=0x00000000
[05:39:50.410]    __ap=0x00000000
[05:39:50.410]    __traceout=0x00000000      (Trace Disabled)
[05:39:50.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:39:50.410]    __FlashAddr=0x00000000
[05:39:50.410]    __FlashLen=0x00000000
[05:39:50.410]    __FlashArg=0x00000000
[05:39:50.410]    __FlashOp=0x00000000
[05:39:50.410]    __Result=0x00000000
[05:39:50.410]  </debugvars>
[05:39:50.410]  
[05:39:50.410]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:39:50.410]    <block atomic="false" info="">
[05:39:50.410]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:39:50.410]        // -> [isSWJ <= 0x00000001]
[05:39:50.410]      __var hasDormant = __protocol & 0x00020000;
[05:39:50.410]        // -> [hasDormant <= 0x00000000]
[05:39:50.410]      __var protType   = __protocol & 0x0000FFFF;
[05:39:50.410]        // -> [protType <= 0x00000002]
[05:39:50.410]    </block>
[05:39:50.410]    <control if="protType == 1" while="" timeout="0" info="">
[05:39:50.410]      // if-block "protType == 1"
[05:39:50.410]        // =>  FALSE
[05:39:50.410]      // skip if-block "protType == 1"
[05:39:50.410]    </control>
[05:39:50.410]    <control if="protType == 2" while="" timeout="0" info="">
[05:39:50.410]      // if-block "protType == 2"
[05:39:50.410]        // =>  TRUE
[05:39:50.410]      <control if="isSWJ" while="" timeout="0" info="">
[05:39:50.410]        // if-block "isSWJ"
[05:39:50.410]          // =>  TRUE
[05:39:50.410]        <control if="hasDormant" while="" timeout="0" info="">
[05:39:50.410]          // if-block "hasDormant"
[05:39:50.410]            // =>  FALSE
[05:39:50.410]          // skip if-block "hasDormant"
[05:39:50.410]        </control>
[05:39:50.410]        <control if="!hasDormant" while="" timeout="0" info="">
[05:39:50.410]          // if-block "!hasDormant"
[05:39:50.410]            // =>  TRUE
[05:39:50.410]          <block atomic="false" info="">
[05:39:50.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:39:50.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:39:50.410]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:39:50.410]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:39:50.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:39:50.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:39:50.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:39:50.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:39:50.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:39:50.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:39:50.420]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:39:50.420]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:39:50.420]          </block>
[05:39:50.420]          // end if-block "!hasDormant"
[05:39:50.420]        </control>
[05:39:50.420]        // end if-block "isSWJ"
[05:39:50.420]      </control>
[05:39:50.420]      <control if="!isSWJ" while="" timeout="0" info="">
[05:39:50.420]        // if-block "!isSWJ"
[05:39:50.420]          // =>  FALSE
[05:39:50.420]        // skip if-block "!isSWJ"
[05:39:50.420]      </control>
[05:39:50.420]      <block atomic="false" info="">
[05:39:50.420]        ReadDP(0x0);
[05:39:50.420]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:39:50.420]      </block>
[05:39:50.420]      // end if-block "protType == 2"
[05:39:50.420]    </control>
[05:39:50.420]  </sequence>
[05:39:50.430]  
[05:39:50.431]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:39:50.431]  
[05:39:50.431]  <debugvars>
[05:39:50.431]    // Pre-defined
[05:39:50.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:39:50.431]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:39:50.431]    __dp=0x00000000
[05:39:50.431]    __ap=0x00000000
[05:39:50.431]    __traceout=0x00000000      (Trace Disabled)
[05:39:50.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:39:50.431]    __FlashAddr=0x00000000
[05:39:50.431]    __FlashLen=0x00000000
[05:39:50.431]    __FlashArg=0x00000000
[05:39:50.431]    __FlashOp=0x00000000
[05:39:50.431]    __Result=0x00000000
[05:39:50.431]  </debugvars>
[05:39:50.431]  
[05:39:50.431]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:39:50.431]    <block atomic="false" info="">
[05:39:50.431]      __var SW_DP_ABORT       = 0x0;
[05:39:50.431]        // -> [SW_DP_ABORT <= 0x00000000]
[05:39:50.431]      __var DP_CTRL_STAT      = 0x4;
[05:39:50.431]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:39:50.431]      __var DP_SELECT         = 0x8;
[05:39:50.431]        // -> [DP_SELECT <= 0x00000008]
[05:39:50.431]      __var powered_down      = 0;
[05:39:50.431]        // -> [powered_down <= 0x00000000]
[05:39:50.431]      WriteDP(DP_SELECT, 0x00000000);
[05:39:50.440]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:39:50.440]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:39:50.444]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:39:50.444]        // -> [powered_down <= 0x00000001]
[05:39:50.444]    </block>
[05:39:50.444]    <control if="powered_down" while="" timeout="0" info="">
[05:39:50.444]      // if-block "powered_down"
[05:39:50.444]        // =>  TRUE
[05:39:50.444]      <block atomic="false" info="">
[05:39:50.444]        Message(0, "Debug/System power-up request sent");
[05:39:50.445]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:39:50.447]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:39:50.447]      </block>
[05:39:50.447]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:39:50.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:39:50.451]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:39:50.451]        // while-condition  =>  FALSE
[05:39:50.451]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:39:50.451]      </control>
[05:39:50.451]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:39:50.451]        // if-block "(__protocol & 0xFFFF) == 1"
[05:39:50.451]          // =>  FALSE
[05:39:50.451]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:39:50.451]      </control>
[05:39:50.451]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:39:50.451]        // if-block "(__protocol & 0xFFFF) == 2"
[05:39:50.451]          // =>  TRUE
[05:39:50.451]        <block atomic="false" info="">
[05:39:50.451]          Message(0, "executing SWD power up");
[05:39:50.451]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:39:50.451]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:39:50.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:39:50.461]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:39:50.461]        </block>
[05:39:50.461]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:39:50.461]      </control>
[05:39:50.461]      // end if-block "powered_down"
[05:39:50.461]    </control>
[05:39:50.462]    <block atomic="false" info="">
[05:39:50.462]      __var DEBUG_PORT_VAL    = 0;
[05:39:50.462]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:39:50.462]      __var ACCESS_POINT_VAL  = 0;
[05:39:50.462]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:39:50.462]      __ap = 1; 
[05:39:50.462]        // -> [__ap <= 0x00000001]
[05:39:50.462]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:39:50.462]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:39:50.462]      __ap = 4;
[05:39:50.462]        // -> [__ap <= 0x00000004]
[05:39:50.462]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:39:50.470]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:39:50.470]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:39:50.470]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:39:50.472]    </block>
[05:39:50.472]    <block atomic="false" info="">
[05:39:50.472]      __var nReset = 0x80;
[05:39:50.472]        // -> [nReset <= 0x00000080]
[05:39:50.472]      __var canReadPins = 0;
[05:39:50.472]        // -> [canReadPins <= 0x00000000]
[05:39:50.473]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:39:50.474]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:39:50.474]        // -> [canReadPins <= 0x00000001]
[05:39:50.474]    </block>
[05:39:50.474]    <control if="" while="1" timeout="200" info="">
[05:39:50.475]      // while "1"  (timeout="200")
[05:39:50.475]      // while-condition  =>  TRUE
[05:39:50.475]      // while "1"  (timeout="200")
[05:39:50.475]      // while-condition  =>  TRUE
[05:39:50.475]      // while "1"  (timeout="200")
[05:39:50.475]      // while-condition  =>  TRUE
[05:39:50.475]      // while "1"  (timeout="200")
[05:39:50.475]      // while-condition  =>  TRUE
[05:39:50.475]      // while "1"  (timeout="200")
[05:39:50.475]      // while-condition  =>  TRUE
[05:39:50.476]      // while "1"  (timeout="200")
[05:39:50.476]      // while-condition  =>  TRUE
[05:39:50.476]      // while "1"  (timeout="200")
[05:39:50.476]      // while-condition  =>  TRUE
[05:39:50.476]      // while "1"  (timeout="200")
[05:39:50.477]      // while-condition  =>  TRUE
[05:39:50.477]      // while "1"  (timeout="200")
[05:39:50.477]      // while-condition  =>  TRUE
[05:39:50.477]      // while "1"  (timeout="200")
[05:39:50.477]      // while-condition  =>  TRUE
[05:39:50.477]      // while "1"  (timeout="200")
[05:39:50.477]      // while-condition  =>  TRUE
[05:39:50.477]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.478]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.478]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.478]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.478]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.478]      // while "1"  (timeout="200")
[05:39:50.478]      // while-condition  =>  TRUE
[05:39:50.479]      // while "1"  (timeout="200")
[05:39:50.479]      // while-condition  =>  TRUE
[05:39:50.479]      // while "1"  (timeout="200")
[05:39:50.479]      // while-condition  =>  TRUE
[05:39:50.479]      // while "1"  (timeout="200")
[05:39:50.479]      // while-condition  =>  TRUE
[05:39:50.479]      // while "1"  (timeout="200")
[05:39:50.479]      // while-condition  =>  TRUE
[05:39:50.479]      // while "1"  (timeout="200")
[05:39:50.479]      // while-condition  =>  TRUE
[05:39:50.480]      // while "1"  (timeout="200")
[05:39:50.480]      // while-condition  =>  TRUE
[05:39:50.480]      // while "1"  (timeout="200")
[05:39:50.480]      // while-condition  =>  TRUE
[05:39:50.480]      // while "1"  (timeout="200")
[05:39:50.480]      // while-condition  =>  TRUE
[05:39:50.480]      // while "1"  (timeout="200")
[05:39:50.480]      // while-condition  =>  TRUE
[05:39:50.481]      // while "1"  (timeout="200")
[05:39:50.481]      // while-condition  =>  TRUE
[05:39:50.481]      // while "1"  (timeout="200")
[05:39:50.481]      // while-condition  =>  TRUE
[05:39:50.481]      // while "1"  (timeout="200")
[05:39:50.481]      // while-condition  =>  TRUE
[05:39:50.481]      // while "1"  (timeout="200")
[05:39:50.481]      // while-condition  =>  TRUE
[05:39:50.481]      // while "1"  (timeout="200")
[05:39:50.482]      // while-condition  =>  TRUE
[05:39:50.482]      // while "1"  (timeout="200")
[05:39:50.482]      // while-condition  =>  TRUE
[05:39:50.482]      // while "1"  (timeout="200")
[05:39:50.482]      // while-condition  =>  TRUE
[05:39:50.482]      // while "1"  (timeout="200")
[05:39:50.482]      // while-condition  =>  TRUE
[05:39:50.482]      // while "1"  (timeout="200")
[05:39:50.482]      // while-condition  =>  TRUE
[05:39:50.483]      // while "1"  (timeout="200")
[05:39:50.483]      // while-condition  =>  TRUE
[05:39:50.483]      // while "1"  (timeout="200")
[05:39:50.483]      // while-condition  =>  TRUE
[05:39:50.483]      // while "1"  (timeout="200")
[05:39:50.483]      // while-condition  =>  TRUE
[05:39:50.483]      // while "1"  (timeout="200")
[05:39:50.483]      // while-condition  =>  TRUE
[05:39:50.484]      // while "1"  (timeout="200")
[05:39:50.484]      // while-condition  =>  TRUE
[05:39:50.484]      // while "1"  (timeout="200")
[05:39:50.484]      // while-condition  =>  TRUE
[05:39:50.485]      // while "1"  (timeout="200")
[05:39:50.485]      // while-condition  =>  TRUE
[05:39:50.485]      // while "1"  (timeout="200")
[05:39:50.485]      // while-condition  =>  TRUE
[05:39:50.485]      // while "1"  (timeout="200")
[05:39:50.485]      // while  =>  TIMEOUT
[05:39:50.485]      // end while "1"
[05:39:50.485]    </control>
[05:39:50.486]    <control if="canReadPins" while="" timeout="0" info="">
[05:39:50.486]      // if-block "canReadPins"
[05:39:50.486]        // =>  TRUE
[05:39:50.486]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:39:50.486]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:39:50.487]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:39:50.488]        // while-condition  =>  FALSE
[05:39:50.488]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:39:50.488]      </control>
[05:39:50.488]      // end if-block "canReadPins"
[05:39:50.488]    </control>
[05:39:50.488]    <control if="!canReadPins" while="" timeout="0" info="">
[05:39:50.488]      // if-block "!canReadPins"
[05:39:50.488]        // =>  FALSE
[05:39:50.489]      // skip if-block "!canReadPins"
[05:39:50.489]    </control>
[05:39:50.489]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:39:50.489]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:39:50.489]        // =>  TRUE
[05:39:50.489]      <block atomic="false" info="">
[05:39:50.489]        WriteAP(0x00, 0x190008);
[05:39:50.491]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:39:50.491]        WriteAP(0xF0, 0x01);
[05:39:50.495]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:39:50.495]      </block>
[05:39:50.495]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:39:50.495]    </control>
[05:39:50.496]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:39:50.496]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:39:50.496]        // =>  FALSE
[05:39:50.496]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:39:50.496]    </control>
[05:39:50.496]    <block atomic="false" info="">
[05:39:50.496]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:39:50.499]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:39:50.499]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:39:50.499]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:39:50.502]      __ap = 0; //lets make sure we reset the access point selection
[05:39:50.502]        // -> [__ap <= 0x00000000]
[05:39:50.502]    </block>
[05:39:50.502]  </sequence>
[05:39:50.503]  
[05:39:50.520]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:39:50.520]  
[05:39:50.520]  <debugvars>
[05:39:50.520]    // Pre-defined
[05:39:50.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:39:50.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:39:50.520]    __dp=0x00000000
[05:39:50.520]    __ap=0x00000000
[05:39:50.520]    __traceout=0x00000000      (Trace Disabled)
[05:39:50.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:39:50.520]    __FlashAddr=0x00000000
[05:39:50.520]    __FlashLen=0x00000000
[05:39:50.520]    __FlashArg=0x00000000
[05:39:50.520]    __FlashOp=0x00000000
[05:39:50.520]    __Result=0x00000000
[05:39:50.520]  </debugvars>
[05:39:50.520]  
[05:39:50.520]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:39:50.520]    <block atomic="false" info="">
[05:39:50.520]      __var deviceID = 0;
[05:39:50.520]        // -> [deviceID <= 0x00000000]
[05:39:50.520]      __var version = 0;
[05:39:50.520]        // -> [version <= 0x00000000]
[05:39:50.520]      __var partNum = 0;
[05:39:50.520]        // -> [partNum <= 0x00000000]
[05:39:50.520]      __var manuf = 0;
[05:39:50.520]        // -> [manuf <= 0x00000000]
[05:39:50.520]      __var isMSPM0G1X0X_G3X0X = 0;
[05:39:50.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:39:50.520]      __var isProduction = 0;
[05:39:50.520]        // -> [isProduction <= 0x00000000]
[05:39:50.520]      __var continueId = 0;
[05:39:50.520]        // -> [continueId <= 0x00000000]
[05:39:50.520]      deviceID =   Read32(0x41C40004);
[05:39:50.530]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:39:50.530]        // -> [deviceID <= 0x2BB8802F]
[05:39:50.530]      version = deviceID >> 28;
[05:39:50.530]        // -> [version <= 0x00000002]
[05:39:50.530]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:39:50.530]        // -> [partNum <= 0x0000BB88]
[05:39:50.530]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:39:50.530]        // -> [manuf <= 0x00000017]
[05:39:50.530]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:39:50.530]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:39:50.530]      isProduction = (version > 0);
[05:39:50.530]        // -> [isProduction <= 0x00000001]
[05:39:50.530]    </block>
[05:39:50.530]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:39:50.530]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:39:50.530]        // =>  FALSE
[05:39:50.530]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:39:50.530]    </control>
[05:39:50.530]    <control if="continueId == 4" while="" timeout="0" info="">
[05:39:50.530]      // if-block "continueId == 4"
[05:39:50.530]        // =>  FALSE
[05:39:50.530]      // skip if-block "continueId == 4"
[05:39:50.530]    </control>
[05:39:50.530]    <control if="!isProduction" while="" timeout="0" info="">
[05:39:50.530]      // if-block "!isProduction"
[05:39:50.530]        // =>  FALSE
[05:39:50.530]      // skip if-block "!isProduction"
[05:39:50.530]    </control>
[05:39:50.530]  </sequence>
[05:39:50.530]  
[05:41:07.367]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:41:07.367]  
[05:41:07.380]  <debugvars>
[05:41:07.380]    // Pre-defined
[05:41:07.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:07.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:07.380]    __dp=0x00000000
[05:41:07.380]    __ap=0x00000000
[05:41:07.380]    __traceout=0x00000000      (Trace Disabled)
[05:41:07.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:07.380]    __FlashAddr=0x00000000
[05:41:07.380]    __FlashLen=0x00000000
[05:41:07.380]    __FlashArg=0x00000000
[05:41:07.380]    __FlashOp=0x00000000
[05:41:07.380]    __Result=0x00000000
[05:41:07.380]  </debugvars>
[05:41:07.380]  
[05:41:07.380]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:41:07.380]    <block atomic="false" info="">
[05:41:07.380]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:41:07.380]        // -> [isSWJ <= 0x00000001]
[05:41:07.380]      __var hasDormant = __protocol & 0x00020000;
[05:41:07.380]        // -> [hasDormant <= 0x00000000]
[05:41:07.380]      __var protType   = __protocol & 0x0000FFFF;
[05:41:07.380]        // -> [protType <= 0x00000002]
[05:41:07.380]    </block>
[05:41:07.380]    <control if="protType == 1" while="" timeout="0" info="">
[05:41:07.382]      // if-block "protType == 1"
[05:41:07.382]        // =>  FALSE
[05:41:07.382]      // skip if-block "protType == 1"
[05:41:07.382]    </control>
[05:41:07.382]    <control if="protType == 2" while="" timeout="0" info="">
[05:41:07.382]      // if-block "protType == 2"
[05:41:07.382]        // =>  TRUE
[05:41:07.382]      <control if="isSWJ" while="" timeout="0" info="">
[05:41:07.383]        // if-block "isSWJ"
[05:41:07.383]          // =>  TRUE
[05:41:07.383]        <control if="hasDormant" while="" timeout="0" info="">
[05:41:07.383]          // if-block "hasDormant"
[05:41:07.383]            // =>  FALSE
[05:41:07.383]          // skip if-block "hasDormant"
[05:41:07.383]        </control>
[05:41:07.383]        <control if="!hasDormant" while="" timeout="0" info="">
[05:41:07.383]          // if-block "!hasDormant"
[05:41:07.383]            // =>  TRUE
[05:41:07.383]          <block atomic="false" info="">
[05:41:07.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:41:07.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:07.384]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:41:07.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:41:07.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:41:07.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:07.387]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:41:07.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:41:07.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:41:07.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:07.387]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:41:07.387]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:41:07.387]          </block>
[05:41:07.387]          // end if-block "!hasDormant"
[05:41:07.387]        </control>
[05:41:07.387]        // end if-block "isSWJ"
[05:41:07.387]      </control>
[05:41:07.387]      <control if="!isSWJ" while="" timeout="0" info="">
[05:41:07.387]        // if-block "!isSWJ"
[05:41:07.387]          // =>  FALSE
[05:41:07.387]        // skip if-block "!isSWJ"
[05:41:07.387]      </control>
[05:41:07.387]      <block atomic="false" info="">
[05:41:07.387]        ReadDP(0x0);
[05:41:07.398]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:41:07.398]      </block>
[05:41:07.398]      // end if-block "protType == 2"
[05:41:07.398]    </control>
[05:41:07.398]  </sequence>
[05:41:07.398]  
[05:41:07.398]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:41:07.398]  
[05:41:07.398]  <debugvars>
[05:41:07.398]    // Pre-defined
[05:41:07.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:07.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:07.398]    __dp=0x00000000
[05:41:07.398]    __ap=0x00000000
[05:41:07.398]    __traceout=0x00000000      (Trace Disabled)
[05:41:07.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:07.398]    __FlashAddr=0x00000000
[05:41:07.398]    __FlashLen=0x00000000
[05:41:07.398]    __FlashArg=0x00000000
[05:41:07.398]    __FlashOp=0x00000000
[05:41:07.398]    __Result=0x00000000
[05:41:07.398]  </debugvars>
[05:41:07.398]  
[05:41:07.398]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:41:07.404]    <block atomic="false" info="">
[05:41:07.404]      __var SW_DP_ABORT       = 0x0;
[05:41:07.404]        // -> [SW_DP_ABORT <= 0x00000000]
[05:41:07.404]      __var DP_CTRL_STAT      = 0x4;
[05:41:07.404]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:41:07.404]      __var DP_SELECT         = 0x8;
[05:41:07.404]        // -> [DP_SELECT <= 0x00000008]
[05:41:07.404]      __var powered_down      = 0;
[05:41:07.404]        // -> [powered_down <= 0x00000000]
[05:41:07.404]      WriteDP(DP_SELECT, 0x00000000);
[05:41:07.404]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:41:07.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:41:07.407]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:41:07.407]        // -> [powered_down <= 0x00000001]
[05:41:07.407]    </block>
[05:41:07.407]    <control if="powered_down" while="" timeout="0" info="">
[05:41:07.407]      // if-block "powered_down"
[05:41:07.407]        // =>  TRUE
[05:41:07.407]      <block atomic="false" info="">
[05:41:07.407]        Message(0, "Debug/System power-up request sent");
[05:41:07.407]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:41:07.407]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:41:07.407]      </block>
[05:41:07.407]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:41:07.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:41:07.407]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:41:07.414]        // while-condition  =>  FALSE
[05:41:07.414]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:41:07.414]      </control>
[05:41:07.414]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:41:07.414]        // if-block "(__protocol & 0xFFFF) == 1"
[05:41:07.414]          // =>  FALSE
[05:41:07.414]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:41:07.414]      </control>
[05:41:07.414]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:41:07.414]        // if-block "(__protocol & 0xFFFF) == 2"
[05:41:07.414]          // =>  TRUE
[05:41:07.414]        <block atomic="false" info="">
[05:41:07.414]          Message(0, "executing SWD power up");
[05:41:07.414]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:41:07.417]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:41:07.417]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:41:07.417]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:41:07.417]        </block>
[05:41:07.417]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:41:07.417]      </control>
[05:41:07.417]      // end if-block "powered_down"
[05:41:07.417]    </control>
[05:41:07.417]    <block atomic="false" info="">
[05:41:07.417]      __var DEBUG_PORT_VAL    = 0;
[05:41:07.417]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:41:07.417]      __var ACCESS_POINT_VAL  = 0;
[05:41:07.417]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:41:07.417]      __ap = 1; 
[05:41:07.417]        // -> [__ap <= 0x00000001]
[05:41:07.417]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:41:07.424]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:41:07.424]      __ap = 4;
[05:41:07.424]        // -> [__ap <= 0x00000004]
[05:41:07.424]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:41:07.427]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:41:07.427]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:41:07.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:41:07.427]    </block>
[05:41:07.427]    <block atomic="false" info="">
[05:41:07.427]      __var nReset = 0x80;
[05:41:07.427]        // -> [nReset <= 0x00000080]
[05:41:07.427]      __var canReadPins = 0;
[05:41:07.427]        // -> [canReadPins <= 0x00000000]
[05:41:07.427]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:41:07.427]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:41:07.427]        // -> [canReadPins <= 0x00000001]
[05:41:07.427]    </block>
[05:41:07.427]    <control if="" while="1" timeout="200" info="">
[05:41:07.427]      // while "1"  (timeout="200")
[05:41:07.427]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.434]      // while-condition  =>  TRUE
[05:41:07.434]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.437]      // while-condition  =>  TRUE
[05:41:07.437]      // while "1"  (timeout="200")
[05:41:07.444]      // while-condition  =>  TRUE
[05:41:07.444]      // while "1"  (timeout="200")
[05:41:07.444]      // while  =>  TIMEOUT
[05:41:07.444]      // end while "1"
[05:41:07.444]    </control>
[05:41:07.444]    <control if="canReadPins" while="" timeout="0" info="">
[05:41:07.444]      // if-block "canReadPins"
[05:41:07.444]        // =>  TRUE
[05:41:07.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:41:07.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:41:07.444]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:41:07.444]        // while-condition  =>  FALSE
[05:41:07.444]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:41:07.444]      </control>
[05:41:07.447]      // end if-block "canReadPins"
[05:41:07.447]    </control>
[05:41:07.447]    <control if="!canReadPins" while="" timeout="0" info="">
[05:41:07.447]      // if-block "!canReadPins"
[05:41:07.447]        // =>  FALSE
[05:41:07.447]      // skip if-block "!canReadPins"
[05:41:07.447]    </control>
[05:41:07.447]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:41:07.448]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:41:07.448]        // =>  TRUE
[05:41:07.448]      <block atomic="false" info="">
[05:41:07.448]        WriteAP(0x00, 0x190008);
[05:41:07.449]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:41:07.449]        WriteAP(0xF0, 0x01);
[05:41:07.453]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:41:07.453]      </block>
[05:41:07.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:41:07.454]    </control>
[05:41:07.454]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:41:07.454]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:41:07.454]        // =>  FALSE
[05:41:07.454]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:41:07.454]    </control>
[05:41:07.454]    <block atomic="false" info="">
[05:41:07.454]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:41:07.458]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:41:07.458]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:41:07.458]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:41:07.459]      __ap = 0; //lets make sure we reset the access point selection
[05:41:07.459]        // -> [__ap <= 0x00000000]
[05:41:07.459]    </block>
[05:41:07.459]  </sequence>
[05:41:07.459]  
[05:41:07.479]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:41:07.479]  
[05:41:07.479]  <debugvars>
[05:41:07.479]    // Pre-defined
[05:41:07.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:07.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:07.479]    __dp=0x00000000
[05:41:07.479]    __ap=0x00000000
[05:41:07.479]    __traceout=0x00000000      (Trace Disabled)
[05:41:07.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:07.479]    __FlashAddr=0x00000000
[05:41:07.479]    __FlashLen=0x00000000
[05:41:07.479]    __FlashArg=0x00000000
[05:41:07.479]    __FlashOp=0x00000000
[05:41:07.479]    __Result=0x00000000
[05:41:07.479]  </debugvars>
[05:41:07.479]  
[05:41:07.479]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:41:07.479]    <block atomic="false" info="">
[05:41:07.479]      __var deviceID = 0;
[05:41:07.479]        // -> [deviceID <= 0x00000000]
[05:41:07.479]      __var version = 0;
[05:41:07.479]        // -> [version <= 0x00000000]
[05:41:07.479]      __var partNum = 0;
[05:41:07.479]        // -> [partNum <= 0x00000000]
[05:41:07.479]      __var manuf = 0;
[05:41:07.479]        // -> [manuf <= 0x00000000]
[05:41:07.479]      __var isMSPM0G1X0X_G3X0X = 0;
[05:41:07.479]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:41:07.479]      __var isProduction = 0;
[05:41:07.479]        // -> [isProduction <= 0x00000000]
[05:41:07.479]      __var continueId = 0;
[05:41:07.479]        // -> [continueId <= 0x00000000]
[05:41:07.479]      deviceID =   Read32(0x41C40004);
[05:41:07.484]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:41:07.484]        // -> [deviceID <= 0x2BB8802F]
[05:41:07.484]      version = deviceID >> 28;
[05:41:07.484]        // -> [version <= 0x00000002]
[05:41:07.484]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:41:07.484]        // -> [partNum <= 0x0000BB88]
[05:41:07.488]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:41:07.488]        // -> [manuf <= 0x00000017]
[05:41:07.488]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:41:07.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:41:07.488]      isProduction = (version > 0);
[05:41:07.488]        // -> [isProduction <= 0x00000001]
[05:41:07.488]    </block>
[05:41:07.488]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:41:07.488]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:41:07.488]        // =>  FALSE
[05:41:07.488]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:41:07.488]    </control>
[05:41:07.488]    <control if="continueId == 4" while="" timeout="0" info="">
[05:41:07.488]      // if-block "continueId == 4"
[05:41:07.488]        // =>  FALSE
[05:41:07.488]      // skip if-block "continueId == 4"
[05:41:07.488]    </control>
[05:41:07.488]    <control if="!isProduction" while="" timeout="0" info="">
[05:41:07.488]      // if-block "!isProduction"
[05:41:07.488]        // =>  FALSE
[05:41:07.488]      // skip if-block "!isProduction"
[05:41:07.488]    </control>
[05:41:07.488]  </sequence>
[05:41:07.488]  
[05:41:42.968]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:41:42.968]  
[05:41:42.981]  <debugvars>
[05:41:42.981]    // Pre-defined
[05:41:42.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:42.981]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:42.981]    __dp=0x00000000
[05:41:42.981]    __ap=0x00000000
[05:41:42.981]    __traceout=0x00000000      (Trace Disabled)
[05:41:42.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:42.981]    __FlashAddr=0x00000000
[05:41:42.981]    __FlashLen=0x00000000
[05:41:42.982]    __FlashArg=0x00000000
[05:41:42.982]    __FlashOp=0x00000000
[05:41:42.982]    __Result=0x00000000
[05:41:42.982]  </debugvars>
[05:41:42.982]  
[05:41:42.982]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:41:42.982]    <block atomic="false" info="">
[05:41:42.982]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:41:42.982]        // -> [isSWJ <= 0x00000001]
[05:41:42.982]      __var hasDormant = __protocol & 0x00020000;
[05:41:42.982]        // -> [hasDormant <= 0x00000000]
[05:41:42.983]      __var protType   = __protocol & 0x0000FFFF;
[05:41:42.983]        // -> [protType <= 0x00000002]
[05:41:42.983]    </block>
[05:41:42.983]    <control if="protType == 1" while="" timeout="0" info="">
[05:41:42.983]      // if-block "protType == 1"
[05:41:42.983]        // =>  FALSE
[05:41:42.983]      // skip if-block "protType == 1"
[05:41:42.983]    </control>
[05:41:42.983]    <control if="protType == 2" while="" timeout="0" info="">
[05:41:42.984]      // if-block "protType == 2"
[05:41:42.984]        // =>  TRUE
[05:41:42.984]      <control if="isSWJ" while="" timeout="0" info="">
[05:41:42.984]        // if-block "isSWJ"
[05:41:42.984]          // =>  TRUE
[05:41:42.984]        <control if="hasDormant" while="" timeout="0" info="">
[05:41:42.984]          // if-block "hasDormant"
[05:41:42.984]            // =>  FALSE
[05:41:42.984]          // skip if-block "hasDormant"
[05:41:42.984]        </control>
[05:41:42.984]        <control if="!hasDormant" while="" timeout="0" info="">
[05:41:42.984]          // if-block "!hasDormant"
[05:41:42.984]            // =>  TRUE
[05:41:42.984]          <block atomic="false" info="">
[05:41:42.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:41:42.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:42.986]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:41:42.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:41:42.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:41:42.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:42.988]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:41:42.990]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:41:42.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:41:42.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:41:42.990]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:41:42.990]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:41:42.990]          </block>
[05:41:42.990]          // end if-block "!hasDormant"
[05:41:42.990]        </control>
[05:41:42.990]        // end if-block "isSWJ"
[05:41:42.990]      </control>
[05:41:42.990]      <control if="!isSWJ" while="" timeout="0" info="">
[05:41:42.990]        // if-block "!isSWJ"
[05:41:42.990]          // =>  FALSE
[05:41:42.990]        // skip if-block "!isSWJ"
[05:41:42.990]      </control>
[05:41:42.990]      <block atomic="false" info="">
[05:41:42.990]        ReadDP(0x0);
[05:41:42.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:41:42.997]      </block>
[05:41:42.997]      // end if-block "protType == 2"
[05:41:42.997]    </control>
[05:41:42.997]  </sequence>
[05:41:42.997]  
[05:41:42.998]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:41:42.998]  
[05:41:42.998]  <debugvars>
[05:41:42.998]    // Pre-defined
[05:41:42.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:42.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:42.998]    __dp=0x00000000
[05:41:42.998]    __ap=0x00000000
[05:41:42.998]    __traceout=0x00000000      (Trace Disabled)
[05:41:42.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:42.998]    __FlashAddr=0x00000000
[05:41:42.998]    __FlashLen=0x00000000
[05:41:42.998]    __FlashArg=0x00000000
[05:41:42.998]    __FlashOp=0x00000000
[05:41:42.998]    __Result=0x00000000
[05:41:42.998]  </debugvars>
[05:41:42.998]  
[05:41:42.998]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:41:42.998]    <block atomic="false" info="">
[05:41:42.998]      __var SW_DP_ABORT       = 0x0;
[05:41:42.998]        // -> [SW_DP_ABORT <= 0x00000000]
[05:41:42.998]      __var DP_CTRL_STAT      = 0x4;
[05:41:42.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:41:42.998]      __var DP_SELECT         = 0x8;
[05:41:42.998]        // -> [DP_SELECT <= 0x00000008]
[05:41:42.998]      __var powered_down      = 0;
[05:41:43.004]        // -> [powered_down <= 0x00000000]
[05:41:43.004]      WriteDP(DP_SELECT, 0x00000000);
[05:41:43.004]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:41:43.004]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:41:43.008]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:41:43.008]        // -> [powered_down <= 0x00000001]
[05:41:43.008]    </block>
[05:41:43.008]    <control if="powered_down" while="" timeout="0" info="">
[05:41:43.008]      // if-block "powered_down"
[05:41:43.008]        // =>  TRUE
[05:41:43.008]      <block atomic="false" info="">
[05:41:43.008]        Message(0, "Debug/System power-up request sent");
[05:41:43.008]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:41:43.010]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:41:43.010]      </block>
[05:41:43.010]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:41:43.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:41:43.010]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:41:43.010]        // while-condition  =>  FALSE
[05:41:43.010]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:41:43.010]      </control>
[05:41:43.010]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:41:43.010]        // if-block "(__protocol & 0xFFFF) == 1"
[05:41:43.010]          // =>  FALSE
[05:41:43.010]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:41:43.010]      </control>
[05:41:43.010]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:41:43.010]        // if-block "(__protocol & 0xFFFF) == 2"
[05:41:43.010]          // =>  TRUE
[05:41:43.010]        <block atomic="false" info="">
[05:41:43.010]          Message(0, "executing SWD power up");
[05:41:43.015]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:41:43.015]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:41:43.015]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:41:43.018]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:41:43.018]        </block>
[05:41:43.018]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:41:43.018]      </control>
[05:41:43.018]      // end if-block "powered_down"
[05:41:43.020]    </control>
[05:41:43.020]    <block atomic="false" info="">
[05:41:43.020]      __var DEBUG_PORT_VAL    = 0;
[05:41:43.020]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:41:43.020]      __var ACCESS_POINT_VAL  = 0;
[05:41:43.020]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:41:43.020]      __ap = 1; 
[05:41:43.020]        // -> [__ap <= 0x00000001]
[05:41:43.020]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:41:43.020]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:41:43.020]      __ap = 4;
[05:41:43.020]        // -> [__ap <= 0x00000004]
[05:41:43.020]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:41:43.020]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:41:43.020]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:41:43.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:41:43.029]    </block>
[05:41:43.029]    <block atomic="false" info="">
[05:41:43.029]      __var nReset = 0x80;
[05:41:43.029]        // -> [nReset <= 0x00000080]
[05:41:43.029]      __var canReadPins = 0;
[05:41:43.029]        // -> [canReadPins <= 0x00000000]
[05:41:43.029]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:41:43.033]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:41:43.033]        // -> [canReadPins <= 0x00000001]
[05:41:43.033]    </block>
[05:41:43.033]    <control if="" while="1" timeout="200" info="">
[05:41:43.033]      // while "1"  (timeout="200")
[05:41:43.033]      // while-condition  =>  TRUE
[05:41:43.033]      // while "1"  (timeout="200")
[05:41:43.033]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.034]      // while "1"  (timeout="200")
[05:41:43.034]      // while-condition  =>  TRUE
[05:41:43.035]      // while "1"  (timeout="200")
[05:41:43.035]      // while-condition  =>  TRUE
[05:41:43.035]      // while "1"  (timeout="200")
[05:41:43.035]      // while-condition  =>  TRUE
[05:41:43.035]      // while "1"  (timeout="200")
[05:41:43.035]      // while-condition  =>  TRUE
[05:41:43.035]      // while "1"  (timeout="200")
[05:41:43.035]      // while-condition  =>  TRUE
[05:41:43.035]      // while "1"  (timeout="200")
[05:41:43.035]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.036]      // while "1"  (timeout="200")
[05:41:43.036]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.038]      // while-condition  =>  TRUE
[05:41:43.038]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.039]      // while "1"  (timeout="200")
[05:41:43.039]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.042]      // while "1"  (timeout="200")
[05:41:43.042]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.044]      // while "1"  (timeout="200")
[05:41:43.044]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.046]      // while "1"  (timeout="200")
[05:41:43.046]      // while-condition  =>  TRUE
[05:41:43.048]      // while "1"  (timeout="200")
[05:41:43.048]      // while  =>  TIMEOUT
[05:41:43.048]      // end while "1"
[05:41:43.048]    </control>
[05:41:43.048]    <control if="canReadPins" while="" timeout="0" info="">
[05:41:43.048]      // if-block "canReadPins"
[05:41:43.048]        // =>  TRUE
[05:41:43.048]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:41:43.048]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:41:43.050]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:41:43.050]        // while-condition  =>  FALSE
[05:41:43.050]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:41:43.050]      </control>
[05:41:43.050]      // end if-block "canReadPins"
[05:41:43.050]    </control>
[05:41:43.050]    <control if="!canReadPins" while="" timeout="0" info="">
[05:41:43.050]      // if-block "!canReadPins"
[05:41:43.050]        // =>  FALSE
[05:41:43.050]      // skip if-block "!canReadPins"
[05:41:43.050]    </control>
[05:41:43.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:41:43.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:41:43.050]        // =>  TRUE
[05:41:43.050]      <block atomic="false" info="">
[05:41:43.051]        WriteAP(0x00, 0x190008);
[05:41:43.053]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:41:43.053]        WriteAP(0xF0, 0x01);
[05:41:43.053]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:41:43.053]      </block>
[05:41:43.053]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:41:43.053]    </control>
[05:41:43.053]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:41:43.053]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:41:43.053]        // =>  FALSE
[05:41:43.053]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:41:43.053]    </control>
[05:41:43.053]    <block atomic="false" info="">
[05:41:43.053]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:41:43.058]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:41:43.058]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:41:43.058]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:41:43.062]      __ap = 0; //lets make sure we reset the access point selection
[05:41:43.062]        // -> [__ap <= 0x00000000]
[05:41:43.062]    </block>
[05:41:43.062]  </sequence>
[05:41:43.062]  
[05:41:43.078]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:41:43.078]  
[05:41:43.078]  <debugvars>
[05:41:43.078]    // Pre-defined
[05:41:43.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:41:43.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:41:43.078]    __dp=0x00000000
[05:41:43.078]    __ap=0x00000000
[05:41:43.078]    __traceout=0x00000000      (Trace Disabled)
[05:41:43.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:41:43.078]    __FlashAddr=0x00000000
[05:41:43.078]    __FlashLen=0x00000000
[05:41:43.078]    __FlashArg=0x00000000
[05:41:43.078]    __FlashOp=0x00000000
[05:41:43.078]    __Result=0x00000000
[05:41:43.078]  </debugvars>
[05:41:43.078]  
[05:41:43.078]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:41:43.078]    <block atomic="false" info="">
[05:41:43.078]      __var deviceID = 0;
[05:41:43.078]        // -> [deviceID <= 0x00000000]
[05:41:43.078]      __var version = 0;
[05:41:43.078]        // -> [version <= 0x00000000]
[05:41:43.078]      __var partNum = 0;
[05:41:43.078]        // -> [partNum <= 0x00000000]
[05:41:43.078]      __var manuf = 0;
[05:41:43.078]        // -> [manuf <= 0x00000000]
[05:41:43.078]      __var isMSPM0G1X0X_G3X0X = 0;
[05:41:43.078]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:41:43.078]      __var isProduction = 0;
[05:41:43.085]        // -> [isProduction <= 0x00000000]
[05:41:43.085]      __var continueId = 0;
[05:41:43.085]        // -> [continueId <= 0x00000000]
[05:41:43.085]      deviceID =   Read32(0x41C40004);
[05:41:43.089]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:41:43.089]        // -> [deviceID <= 0x2BB8802F]
[05:41:43.089]      version = deviceID >> 28;
[05:41:43.089]        // -> [version <= 0x00000002]
[05:41:43.089]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:41:43.089]        // -> [partNum <= 0x0000BB88]
[05:41:43.089]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:41:43.089]        // -> [manuf <= 0x00000017]
[05:41:43.089]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:41:43.089]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:41:43.089]      isProduction = (version > 0);
[05:41:43.089]        // -> [isProduction <= 0x00000001]
[05:41:43.089]    </block>
[05:41:43.089]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:41:43.089]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:41:43.089]        // =>  FALSE
[05:41:43.089]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:41:43.089]    </control>
[05:41:43.092]    <control if="continueId == 4" while="" timeout="0" info="">
[05:41:43.092]      // if-block "continueId == 4"
[05:41:43.092]        // =>  FALSE
[05:41:43.092]      // skip if-block "continueId == 4"
[05:41:43.092]    </control>
[05:41:43.092]    <control if="!isProduction" while="" timeout="0" info="">
[05:41:43.092]      // if-block "!isProduction"
[05:41:43.092]        // =>  FALSE
[05:41:43.092]      // skip if-block "!isProduction"
[05:41:43.092]    </control>
[05:41:43.092]  </sequence>
[05:41:43.092]  
[05:42:05.741]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:42:05.741]  
[05:42:05.741]  <debugvars>
[05:42:05.741]    // Pre-defined
[05:42:05.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:05.741]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:05.741]    __dp=0x00000000
[05:42:05.741]    __ap=0x00000000
[05:42:05.741]    __traceout=0x00000000      (Trace Disabled)
[05:42:05.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:05.741]    __FlashAddr=0x00000000
[05:42:05.741]    __FlashLen=0x00000000
[05:42:05.741]    __FlashArg=0x00000000
[05:42:05.741]    __FlashOp=0x00000000
[05:42:05.741]    __Result=0x00000000
[05:42:05.741]  </debugvars>
[05:42:05.741]  
[05:42:05.741]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:42:05.741]    <block atomic="false" info="">
[05:42:05.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:42:05.741]        // -> [isSWJ <= 0x00000001]
[05:42:05.741]      __var hasDormant = __protocol & 0x00020000;
[05:42:05.741]        // -> [hasDormant <= 0x00000000]
[05:42:05.741]      __var protType   = __protocol & 0x0000FFFF;
[05:42:05.741]        // -> [protType <= 0x00000002]
[05:42:05.741]    </block>
[05:42:05.741]    <control if="protType == 1" while="" timeout="0" info="">
[05:42:05.741]      // if-block "protType == 1"
[05:42:05.741]        // =>  FALSE
[05:42:05.741]      // skip if-block "protType == 1"
[05:42:05.741]    </control>
[05:42:05.741]    <control if="protType == 2" while="" timeout="0" info="">
[05:42:05.741]      // if-block "protType == 2"
[05:42:05.741]        // =>  TRUE
[05:42:05.741]      <control if="isSWJ" while="" timeout="0" info="">
[05:42:05.741]        // if-block "isSWJ"
[05:42:05.741]          // =>  TRUE
[05:42:05.741]        <control if="hasDormant" while="" timeout="0" info="">
[05:42:05.741]          // if-block "hasDormant"
[05:42:05.741]            // =>  FALSE
[05:42:05.741]          // skip if-block "hasDormant"
[05:42:05.750]        </control>
[05:42:05.750]        <control if="!hasDormant" while="" timeout="0" info="">
[05:42:05.750]          // if-block "!hasDormant"
[05:42:05.750]            // =>  TRUE
[05:42:05.750]          <block atomic="false" info="">
[05:42:05.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:42:05.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:05.750]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:42:05.750]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:42:05.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:42:05.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:05.750]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:42:05.750]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:42:05.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:42:05.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:42:05.750]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:42:05.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:42:05.760]          </block>
[05:42:05.760]          // end if-block "!hasDormant"
[05:42:05.760]        </control>
[05:42:05.760]        // end if-block "isSWJ"
[05:42:05.760]      </control>
[05:42:05.760]      <control if="!isSWJ" while="" timeout="0" info="">
[05:42:05.760]        // if-block "!isSWJ"
[05:42:05.760]          // =>  FALSE
[05:42:05.760]        // skip if-block "!isSWJ"
[05:42:05.760]      </control>
[05:42:05.760]      <block atomic="false" info="">
[05:42:05.760]        ReadDP(0x0);
[05:42:05.760]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:42:05.760]      </block>
[05:42:05.760]      // end if-block "protType == 2"
[05:42:05.760]    </control>
[05:42:05.760]  </sequence>
[05:42:05.760]  
[05:42:05.770]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:42:05.770]  
[05:42:05.770]  <debugvars>
[05:42:05.770]    // Pre-defined
[05:42:05.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:05.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:05.770]    __dp=0x00000000
[05:42:05.770]    __ap=0x00000000
[05:42:05.770]    __traceout=0x00000000      (Trace Disabled)
[05:42:05.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:05.770]    __FlashAddr=0x00000000
[05:42:05.770]    __FlashLen=0x00000000
[05:42:05.770]    __FlashArg=0x00000000
[05:42:05.770]    __FlashOp=0x00000000
[05:42:05.770]    __Result=0x00000000
[05:42:05.770]  </debugvars>
[05:42:05.770]  
[05:42:05.770]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:42:05.770]    <block atomic="false" info="">
[05:42:05.770]      __var SW_DP_ABORT       = 0x0;
[05:42:05.770]        // -> [SW_DP_ABORT <= 0x00000000]
[05:42:05.770]      __var DP_CTRL_STAT      = 0x4;
[05:42:05.770]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:42:05.770]      __var DP_SELECT         = 0x8;
[05:42:05.770]        // -> [DP_SELECT <= 0x00000008]
[05:42:05.770]      __var powered_down      = 0;
[05:42:05.770]        // -> [powered_down <= 0x00000000]
[05:42:05.770]      WriteDP(DP_SELECT, 0x00000000);
[05:42:05.770]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:42:05.770]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:42:05.770]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:42:05.770]        // -> [powered_down <= 0x00000001]
[05:42:05.770]    </block>
[05:42:05.770]    <control if="powered_down" while="" timeout="0" info="">
[05:42:05.770]      // if-block "powered_down"
[05:42:05.770]        // =>  TRUE
[05:42:05.770]      <block atomic="false" info="">
[05:42:05.770]        Message(0, "Debug/System power-up request sent");
[05:42:05.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:42:05.780]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:42:05.780]      </block>
[05:42:05.780]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:42:05.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:42:05.780]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:42:05.780]        // while-condition  =>  FALSE
[05:42:05.780]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:42:05.780]      </control>
[05:42:05.780]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:42:05.780]        // if-block "(__protocol & 0xFFFF) == 1"
[05:42:05.780]          // =>  FALSE
[05:42:05.780]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:42:05.780]      </control>
[05:42:05.780]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:42:05.780]        // if-block "(__protocol & 0xFFFF) == 2"
[05:42:05.780]          // =>  TRUE
[05:42:05.780]        <block atomic="false" info="">
[05:42:05.780]          Message(0, "executing SWD power up");
[05:42:05.780]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:42:05.780]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:42:05.780]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:42:05.791]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:42:05.791]        </block>
[05:42:05.791]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:42:05.791]      </control>
[05:42:05.791]      // end if-block "powered_down"
[05:42:05.791]    </control>
[05:42:05.791]    <block atomic="false" info="">
[05:42:05.791]      __var DEBUG_PORT_VAL    = 0;
[05:42:05.791]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:42:05.791]      __var ACCESS_POINT_VAL  = 0;
[05:42:05.791]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:42:05.791]      __ap = 1; 
[05:42:05.791]        // -> [__ap <= 0x00000001]
[05:42:05.791]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:42:05.791]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:42:05.791]      __ap = 4;
[05:42:05.791]        // -> [__ap <= 0x00000004]
[05:42:05.791]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:42:05.791]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:42:05.800]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:42:05.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:42:05.800]    </block>
[05:42:05.800]    <block atomic="false" info="">
[05:42:05.800]      __var nReset = 0x80;
[05:42:05.800]        // -> [nReset <= 0x00000080]
[05:42:05.800]      __var canReadPins = 0;
[05:42:05.800]        // -> [canReadPins <= 0x00000000]
[05:42:05.800]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:42:05.800]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:42:05.800]        // -> [canReadPins <= 0x00000001]
[05:42:05.800]    </block>
[05:42:05.800]    <control if="" while="1" timeout="200" info="">
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.800]      // while "1"  (timeout="200")
[05:42:05.800]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.810]      // while "1"  (timeout="200")
[05:42:05.810]      // while-condition  =>  TRUE
[05:42:05.820]      // while "1"  (timeout="200")
[05:42:05.820]      // while  =>  TIMEOUT
[05:42:05.820]      // end while "1"
[05:42:05.820]    </control>
[05:42:05.820]    <control if="canReadPins" while="" timeout="0" info="">
[05:42:05.820]      // if-block "canReadPins"
[05:42:05.820]        // =>  TRUE
[05:42:05.820]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:42:05.820]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:42:05.820]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:42:05.820]        // while-condition  =>  FALSE
[05:42:05.820]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:42:05.820]      </control>
[05:42:05.820]      // end if-block "canReadPins"
[05:42:05.820]    </control>
[05:42:05.820]    <control if="!canReadPins" while="" timeout="0" info="">
[05:42:05.820]      // if-block "!canReadPins"
[05:42:05.820]        // =>  FALSE
[05:42:05.820]      // skip if-block "!canReadPins"
[05:42:05.820]    </control>
[05:42:05.820]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:42:05.820]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:42:05.820]        // =>  TRUE
[05:42:05.820]      <block atomic="false" info="">
[05:42:05.820]        WriteAP(0x00, 0x190008);
[05:42:05.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:42:05.820]        WriteAP(0xF0, 0x01);
[05:42:05.820]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:42:05.830]      </block>
[05:42:05.830]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:42:05.830]    </control>
[05:42:05.830]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:42:05.830]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:42:05.830]        // =>  FALSE
[05:42:05.830]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:42:05.830]    </control>
[05:42:05.830]    <block atomic="false" info="">
[05:42:05.830]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:42:05.830]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:42:05.830]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:42:05.830]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:42:05.830]      __ap = 0; //lets make sure we reset the access point selection
[05:42:05.830]        // -> [__ap <= 0x00000000]
[05:42:05.830]    </block>
[05:42:05.830]  </sequence>
[05:42:05.830]  
[05:42:05.851]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:42:05.851]  
[05:42:05.851]  <debugvars>
[05:42:05.851]    // Pre-defined
[05:42:05.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:42:05.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:42:05.851]    __dp=0x00000000
[05:42:05.851]    __ap=0x00000000
[05:42:05.851]    __traceout=0x00000000      (Trace Disabled)
[05:42:05.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:42:05.851]    __FlashAddr=0x00000000
[05:42:05.851]    __FlashLen=0x00000000
[05:42:05.851]    __FlashArg=0x00000000
[05:42:05.851]    __FlashOp=0x00000000
[05:42:05.851]    __Result=0x00000000
[05:42:05.851]  </debugvars>
[05:42:05.851]  
[05:42:05.851]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:42:05.851]    <block atomic="false" info="">
[05:42:05.851]      __var deviceID = 0;
[05:42:05.851]        // -> [deviceID <= 0x00000000]
[05:42:05.851]      __var version = 0;
[05:42:05.851]        // -> [version <= 0x00000000]
[05:42:05.851]      __var partNum = 0;
[05:42:05.851]        // -> [partNum <= 0x00000000]
[05:42:05.851]      __var manuf = 0;
[05:42:05.851]        // -> [manuf <= 0x00000000]
[05:42:05.851]      __var isMSPM0G1X0X_G3X0X = 0;
[05:42:05.851]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:42:05.851]      __var isProduction = 0;
[05:42:05.861]        // -> [isProduction <= 0x00000000]
[05:42:05.861]      __var continueId = 0;
[05:42:05.861]        // -> [continueId <= 0x00000000]
[05:42:05.861]      deviceID =   Read32(0x41C40004);
[05:42:05.861]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:42:05.861]        // -> [deviceID <= 0x2BB8802F]
[05:42:05.861]      version = deviceID >> 28;
[05:42:05.861]        // -> [version <= 0x00000002]
[05:42:05.861]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:42:05.861]        // -> [partNum <= 0x0000BB88]
[05:42:05.861]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:42:05.861]        // -> [manuf <= 0x00000017]
[05:42:05.861]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:42:05.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:42:05.861]      isProduction = (version > 0);
[05:42:05.861]        // -> [isProduction <= 0x00000001]
[05:42:05.861]    </block>
[05:42:05.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:42:05.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:42:05.861]        // =>  FALSE
[05:42:05.861]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:42:05.861]    </control>
[05:42:05.861]    <control if="continueId == 4" while="" timeout="0" info="">
[05:42:05.861]      // if-block "continueId == 4"
[05:42:05.861]        // =>  FALSE
[05:42:05.861]      // skip if-block "continueId == 4"
[05:42:05.861]    </control>
[05:42:05.861]    <control if="!isProduction" while="" timeout="0" info="">
[05:42:05.861]      // if-block "!isProduction"
[05:42:05.861]        // =>  FALSE
[05:42:05.861]      // skip if-block "!isProduction"
[05:42:05.861]    </control>
[05:42:05.861]  </sequence>
[05:42:05.861]  
