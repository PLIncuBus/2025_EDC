/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0032.log
 *  Created     : 01:42:21 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[01:42:21.066]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:42:21.066]  
[01:42:21.066]  <debugvars>
[01:42:21.067]    // Pre-defined
[01:42:21.067]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:21.067]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:21.067]    __dp=0x00000000
[01:42:21.067]    __ap=0x00000000
[01:42:21.067]    __traceout=0x00000000      (Trace Disabled)
[01:42:21.067]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:21.067]    __FlashAddr=0x00000000
[01:42:21.067]    __FlashLen=0x00000000
[01:42:21.067]    __FlashArg=0x00000000
[01:42:21.067]    __FlashOp=0x00000000
[01:42:21.067]    __Result=0x00000000
[01:42:21.067]  </debugvars>
[01:42:21.067]  
[01:42:21.067]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:42:21.067]    <block atomic="false" info="">
[01:42:21.067]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:42:21.067]        // -> [isSWJ <= 0x00000001]
[01:42:21.067]      __var hasDormant = __protocol & 0x00020000;
[01:42:21.067]        // -> [hasDormant <= 0x00000000]
[01:42:21.067]      __var protType   = __protocol & 0x0000FFFF;
[01:42:21.067]        // -> [protType <= 0x00000002]
[01:42:21.067]    </block>
[01:42:21.067]    <control if="protType == 1" while="" timeout="0" info="">
[01:42:21.067]      // if-block "protType == 1"
[01:42:21.069]        // =>  FALSE
[01:42:21.069]      // skip if-block "protType == 1"
[01:42:21.069]    </control>
[01:42:21.069]    <control if="protType == 2" while="" timeout="0" info="">
[01:42:21.069]      // if-block "protType == 2"
[01:42:21.069]        // =>  TRUE
[01:42:21.069]      <control if="isSWJ" while="" timeout="0" info="">
[01:42:21.069]        // if-block "isSWJ"
[01:42:21.069]          // =>  TRUE
[01:42:21.069]        <control if="hasDormant" while="" timeout="0" info="">
[01:42:21.069]          // if-block "hasDormant"
[01:42:21.069]            // =>  FALSE
[01:42:21.069]          // skip if-block "hasDormant"
[01:42:21.069]        </control>
[01:42:21.069]        <control if="!hasDormant" while="" timeout="0" info="">
[01:42:21.069]          // if-block "!hasDormant"
[01:42:21.069]            // =>  TRUE
[01:42:21.069]          <block atomic="false" info="">
[01:42:21.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:42:21.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:21.073]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:42:21.073]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:42:21.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:42:21.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:21.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:42:21.078]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:42:21.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:42:21.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:21.078]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:42:21.081]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:42:21.081]          </block>
[01:42:21.081]          // end if-block "!hasDormant"
[01:42:21.081]        </control>
[01:42:21.081]        // end if-block "isSWJ"
[01:42:21.081]      </control>
[01:42:21.081]      <control if="!isSWJ" while="" timeout="0" info="">
[01:42:21.081]        // if-block "!isSWJ"
[01:42:21.081]          // =>  FALSE
[01:42:21.081]        // skip if-block "!isSWJ"
[01:42:21.081]      </control>
[01:42:21.081]      <block atomic="false" info="">
[01:42:21.081]        ReadDP(0x0);
[01:42:21.081]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:42:21.081]      </block>
[01:42:21.085]      // end if-block "protType == 2"
[01:42:21.085]    </control>
[01:42:21.085]  </sequence>
[01:42:21.085]  
[01:42:21.087]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:42:21.087]  
[01:42:21.087]  <debugvars>
[01:42:21.087]    // Pre-defined
[01:42:21.087]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:21.087]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:21.089]    __dp=0x00000000
[01:42:21.089]    __ap=0x00000000
[01:42:21.089]    __traceout=0x00000000      (Trace Disabled)
[01:42:21.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:21.089]    __FlashAddr=0x00000000
[01:42:21.089]    __FlashLen=0x00000000
[01:42:21.089]    __FlashArg=0x00000000
[01:42:21.089]    __FlashOp=0x00000000
[01:42:21.089]    __Result=0x00000000
[01:42:21.089]  </debugvars>
[01:42:21.089]  
[01:42:21.089]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:42:21.089]    <block atomic="false" info="">
[01:42:21.089]      __var SW_DP_ABORT       = 0x0;
[01:42:21.089]        // -> [SW_DP_ABORT <= 0x00000000]
[01:42:21.089]      __var DP_CTRL_STAT      = 0x4;
[01:42:21.089]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:42:21.089]      __var DP_SELECT         = 0x8;
[01:42:21.089]        // -> [DP_SELECT <= 0x00000008]
[01:42:21.089]      __var powered_down      = 0;
[01:42:21.089]        // -> [powered_down <= 0x00000000]
[01:42:21.089]      WriteDP(DP_SELECT, 0x00000000);
[01:42:21.097]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:42:21.097]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:42:21.099]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:42:21.099]        // -> [powered_down <= 0x00000001]
[01:42:21.099]    </block>
[01:42:21.099]    <control if="powered_down" while="" timeout="0" info="">
[01:42:21.099]      // if-block "powered_down"
[01:42:21.099]        // =>  TRUE
[01:42:21.099]      <block atomic="false" info="">
[01:42:21.099]        Message(0, "Debug/System power-up request sent");
[01:42:21.101]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:42:21.103]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:42:21.103]      </block>
[01:42:21.103]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:42:21.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:21.105]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:42:21.105]        // while-condition  =>  FALSE
[01:42:21.106]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:42:21.106]      </control>
[01:42:21.106]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:42:21.106]        // if-block "(__protocol & 0xFFFF) == 1"
[01:42:21.106]          // =>  FALSE
[01:42:21.106]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:42:21.106]      </control>
[01:42:21.106]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:42:21.106]        // if-block "(__protocol & 0xFFFF) == 2"
[01:42:21.106]          // =>  TRUE
[01:42:21.106]        <block atomic="false" info="">
[01:42:21.106]          Message(0, "executing SWD power up");
[01:42:21.109]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:42:21.112]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:42:21.112]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:42:21.113]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:42:21.113]        </block>
[01:42:21.113]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:42:21.113]      </control>
[01:42:21.113]      // end if-block "powered_down"
[01:42:21.113]    </control>
[01:42:21.113]    <block atomic="false" info="">
[01:42:21.113]      __var DEBUG_PORT_VAL    = 0;
[01:42:21.113]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:42:21.113]      __var ACCESS_POINT_VAL  = 0;
[01:42:21.113]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:42:21.116]      __ap = 1; 
[01:42:21.116]        // -> [__ap <= 0x00000001]
[01:42:21.116]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:42:21.119]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:42:21.119]      __ap = 4;
[01:42:21.119]        // -> [__ap <= 0x00000004]
[01:42:21.119]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:42:21.123]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:42:21.123]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:42:21.123]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:42:21.124]    </block>
[01:42:21.125]    <block atomic="false" info="">
[01:42:21.125]      __var nReset = 0x80;
[01:42:21.125]        // -> [nReset <= 0x00000080]
[01:42:21.125]      __var canReadPins = 0;
[01:42:21.125]        // -> [canReadPins <= 0x00000000]
[01:42:21.125]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:42:21.126]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:42:21.126]        // -> [canReadPins <= 0x00000001]
[01:42:21.126]    </block>
[01:42:21.126]    <control if="" while="1" timeout="200" info="">
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.126]      // while "1"  (timeout="200")
[01:42:21.126]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.130]      // while "1"  (timeout="200")
[01:42:21.130]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.133]      // while "1"  (timeout="200")
[01:42:21.133]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.134]      // while-condition  =>  TRUE
[01:42:21.134]      // while "1"  (timeout="200")
[01:42:21.136]      // while-condition  =>  TRUE
[01:42:21.136]      // while "1"  (timeout="200")
[01:42:21.136]      // while-condition  =>  TRUE
[01:42:21.136]      // while "1"  (timeout="200")
[01:42:21.136]      // while-condition  =>  TRUE
[01:42:21.136]      // while "1"  (timeout="200")
[01:42:21.136]      // while-condition  =>  TRUE
[01:42:21.136]      // while "1"  (timeout="200")
[01:42:21.136]      // while-condition  =>  TRUE
[01:42:21.136]      // while "1"  (timeout="200")
[01:42:21.137]      // while-condition  =>  TRUE
[01:42:21.137]      // while "1"  (timeout="200")
[01:42:21.137]      // while-condition  =>  TRUE
[01:42:21.137]      // while "1"  (timeout="200")
[01:42:21.137]      // while-condition  =>  TRUE
[01:42:21.137]      // while "1"  (timeout="200")
[01:42:21.137]      // while-condition  =>  TRUE
[01:42:21.137]      // while "1"  (timeout="200")
[01:42:21.137]      // while-condition  =>  TRUE
[01:42:21.137]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.138]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.138]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.138]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.138]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.138]      // while "1"  (timeout="200")
[01:42:21.138]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.139]      // while-condition  =>  TRUE
[01:42:21.139]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.142]      // while-condition  =>  TRUE
[01:42:21.142]      // while "1"  (timeout="200")
[01:42:21.146]      // while-condition  =>  TRUE
[01:42:21.146]      // while "1"  (timeout="200")
[01:42:21.146]      // while  =>  TIMEOUT
[01:42:21.146]      // end while "1"
[01:42:21.146]    </control>
[01:42:21.146]    <control if="canReadPins" while="" timeout="0" info="">
[01:42:21.146]      // if-block "canReadPins"
[01:42:21.146]        // =>  TRUE
[01:42:21.147]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:42:21.147]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:42:21.147]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:42:21.147]        // while-condition  =>  FALSE
[01:42:21.147]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:42:21.147]      </control>
[01:42:21.147]      // end if-block "canReadPins"
[01:42:21.147]    </control>
[01:42:21.147]    <control if="!canReadPins" while="" timeout="0" info="">
[01:42:21.147]      // if-block "!canReadPins"
[01:42:21.147]        // =>  FALSE
[01:42:21.147]      // skip if-block "!canReadPins"
[01:42:21.147]    </control>
[01:42:21.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:42:21.149]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:42:21.149]        // =>  TRUE
[01:42:21.149]      <block atomic="false" info="">
[01:42:21.149]        WriteAP(0x00, 0x190008);
[01:42:21.151]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:42:21.151]        WriteAP(0xF0, 0x01);
[01:42:21.154]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:42:21.154]      </block>
[01:42:21.155]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:42:21.155]    </control>
[01:42:21.155]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:42:21.155]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:42:21.155]        // =>  FALSE
[01:42:21.155]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:42:21.155]    </control>
[01:42:21.155]    <block atomic="false" info="">
[01:42:21.155]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:42:21.159]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:42:21.159]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:42:21.159]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:42:21.161]      __ap = 0; //lets make sure we reset the access point selection
[01:42:21.161]        // -> [__ap <= 0x00000000]
[01:42:21.161]    </block>
[01:42:21.161]  </sequence>
[01:42:21.161]  
[01:42:21.186]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:42:21.186]  
[01:42:21.186]  <debugvars>
[01:42:21.186]    // Pre-defined
[01:42:21.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:21.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:21.186]    __dp=0x00000000
[01:42:21.187]    __ap=0x00000000
[01:42:21.187]    __traceout=0x00000000      (Trace Disabled)
[01:42:21.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:21.187]    __FlashAddr=0x00000000
[01:42:21.187]    __FlashLen=0x00000000
[01:42:21.187]    __FlashArg=0x00000000
[01:42:21.187]    __FlashOp=0x00000000
[01:42:21.187]    __Result=0x00000000
[01:42:21.187]  </debugvars>
[01:42:21.187]  
[01:42:21.188]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:42:21.188]    <block atomic="false" info="">
[01:42:21.188]      __var deviceID = 0;
[01:42:21.188]        // -> [deviceID <= 0x00000000]
[01:42:21.188]      __var version = 0;
[01:42:21.188]        // -> [version <= 0x00000000]
[01:42:21.188]      __var partNum = 0;
[01:42:21.188]        // -> [partNum <= 0x00000000]
[01:42:21.188]      __var manuf = 0;
[01:42:21.188]        // -> [manuf <= 0x00000000]
[01:42:21.188]      __var isMSPM0G1X0X_G3X0X = 0;
[01:42:21.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:42:21.188]      __var isProduction = 0;
[01:42:21.188]        // -> [isProduction <= 0x00000000]
[01:42:21.188]      __var continueId = 0;
[01:42:21.189]        // -> [continueId <= 0x00000000]
[01:42:21.189]      deviceID =   Read32(0x41C40004);
[01:42:21.202]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:42:21.202]        // -> [deviceID <= 0x2BB8802F]
[01:42:21.202]      version = deviceID >> 28;
[01:42:21.202]        // -> [version <= 0x00000002]
[01:42:21.202]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:42:21.202]        // -> [partNum <= 0x0000BB88]
[01:42:21.202]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:42:21.202]        // -> [manuf <= 0x00000017]
[01:42:21.202]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:42:21.202]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:42:21.202]      isProduction = (version > 0);
[01:42:21.203]        // -> [isProduction <= 0x00000001]
[01:42:21.203]    </block>
[01:42:21.203]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:42:21.203]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:42:21.203]        // =>  FALSE
[01:42:21.203]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:42:21.203]    </control>
[01:42:21.203]    <control if="continueId == 4" while="" timeout="0" info="">
[01:42:21.203]      // if-block "continueId == 4"
[01:42:21.203]        // =>  FALSE
[01:42:21.203]      // skip if-block "continueId == 4"
[01:42:21.203]    </control>
[01:42:21.203]    <control if="!isProduction" while="" timeout="0" info="">
[01:42:21.203]      // if-block "!isProduction"
[01:42:21.205]        // =>  FALSE
[01:42:21.205]      // skip if-block "!isProduction"
[01:42:21.205]    </control>
[01:42:21.205]  </sequence>
[01:42:21.206]  
[01:51:10.209]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:51:10.209]  
[01:51:10.218]  <debugvars>
[01:51:10.218]    // Pre-defined
[01:51:10.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:10.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:10.218]    __dp=0x00000000
[01:51:10.218]    __ap=0x00000000
[01:51:10.218]    __traceout=0x00000000      (Trace Disabled)
[01:51:10.218]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:10.218]    __FlashAddr=0x00000000
[01:51:10.218]    __FlashLen=0x00000000
[01:51:10.218]    __FlashArg=0x00000000
[01:51:10.218]    __FlashOp=0x00000000
[01:51:10.218]    __Result=0x00000000
[01:51:10.218]  </debugvars>
[01:51:10.218]  
[01:51:10.218]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:51:10.218]    <block atomic="false" info="">
[01:51:10.218]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:51:10.218]        // -> [isSWJ <= 0x00000001]
[01:51:10.218]      __var hasDormant = __protocol & 0x00020000;
[01:51:10.218]        // -> [hasDormant <= 0x00000000]
[01:51:10.218]      __var protType   = __protocol & 0x0000FFFF;
[01:51:10.218]        // -> [protType <= 0x00000002]
[01:51:10.218]    </block>
[01:51:10.218]    <control if="protType == 1" while="" timeout="0" info="">
[01:51:10.221]      // if-block "protType == 1"
[01:51:10.221]        // =>  FALSE
[01:51:10.221]      // skip if-block "protType == 1"
[01:51:10.221]    </control>
[01:51:10.221]    <control if="protType == 2" while="" timeout="0" info="">
[01:51:10.221]      // if-block "protType == 2"
[01:51:10.221]        // =>  TRUE
[01:51:10.221]      <control if="isSWJ" while="" timeout="0" info="">
[01:51:10.221]        // if-block "isSWJ"
[01:51:10.221]          // =>  TRUE
[01:51:10.221]        <control if="hasDormant" while="" timeout="0" info="">
[01:51:10.221]          // if-block "hasDormant"
[01:51:10.221]            // =>  FALSE
[01:51:10.221]          // skip if-block "hasDormant"
[01:51:10.221]        </control>
[01:51:10.221]        <control if="!hasDormant" while="" timeout="0" info="">
[01:51:10.221]          // if-block "!hasDormant"
[01:51:10.221]            // =>  TRUE
[01:51:10.221]          <block atomic="false" info="">
[01:51:10.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:51:10.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:10.225]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:51:10.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:51:10.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:51:10.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:10.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:51:10.232]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:51:10.232]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:51:10.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:10.236]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:51:10.237]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:51:10.237]          </block>
[01:51:10.237]          // end if-block "!hasDormant"
[01:51:10.237]        </control>
[01:51:10.237]        // end if-block "isSWJ"
[01:51:10.237]      </control>
[01:51:10.237]      <control if="!isSWJ" while="" timeout="0" info="">
[01:51:10.237]        // if-block "!isSWJ"
[01:51:10.237]          // =>  FALSE
[01:51:10.237]        // skip if-block "!isSWJ"
[01:51:10.237]      </control>
[01:51:10.237]      <block atomic="false" info="">
[01:51:10.237]        ReadDP(0x0);
[01:51:10.241]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:51:10.241]      </block>
[01:51:10.241]      // end if-block "protType == 2"
[01:51:10.241]    </control>
[01:51:10.241]  </sequence>
[01:51:10.241]  
[01:51:10.245]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:51:10.245]  
[01:51:10.245]  <debugvars>
[01:51:10.245]    // Pre-defined
[01:51:10.245]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:10.245]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:10.245]    __dp=0x00000000
[01:51:10.245]    __ap=0x00000000
[01:51:10.245]    __traceout=0x00000000      (Trace Disabled)
[01:51:10.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:10.245]    __FlashAddr=0x00000000
[01:51:10.245]    __FlashLen=0x00000000
[01:51:10.245]    __FlashArg=0x00000000
[01:51:10.245]    __FlashOp=0x00000000
[01:51:10.245]    __Result=0x00000000
[01:51:10.245]  </debugvars>
[01:51:10.245]  
[01:51:10.245]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:51:10.245]    <block atomic="false" info="">
[01:51:10.245]      __var SW_DP_ABORT       = 0x0;
[01:51:10.245]        // -> [SW_DP_ABORT <= 0x00000000]
[01:51:10.245]      __var DP_CTRL_STAT      = 0x4;
[01:51:10.249]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:51:10.249]      __var DP_SELECT         = 0x8;
[01:51:10.249]        // -> [DP_SELECT <= 0x00000008]
[01:51:10.249]      __var powered_down      = 0;
[01:51:10.249]        // -> [powered_down <= 0x00000000]
[01:51:10.249]      WriteDP(DP_SELECT, 0x00000000);
[01:51:10.251]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:51:10.251]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:51:10.253]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:51:10.253]        // -> [powered_down <= 0x00000001]
[01:51:10.253]    </block>
[01:51:10.253]    <control if="powered_down" while="" timeout="0" info="">
[01:51:10.253]      // if-block "powered_down"
[01:51:10.253]        // =>  TRUE
[01:51:10.255]      <block atomic="false" info="">
[01:51:10.255]        Message(0, "Debug/System power-up request sent");
[01:51:10.256]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:51:10.259]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:51:10.259]      </block>
[01:51:10.259]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:51:10.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:51:10.259]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:51:10.259]        // while-condition  =>  FALSE
[01:51:10.259]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:51:10.259]      </control>
[01:51:10.259]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:51:10.259]        // if-block "(__protocol & 0xFFFF) == 1"
[01:51:10.259]          // =>  FALSE
[01:51:10.259]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:51:10.262]      </control>
[01:51:10.262]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:51:10.262]        // if-block "(__protocol & 0xFFFF) == 2"
[01:51:10.262]          // =>  TRUE
[01:51:10.262]        <block atomic="false" info="">
[01:51:10.262]          Message(0, "executing SWD power up");
[01:51:10.266]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:51:10.269]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:51:10.269]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:51:10.272]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:51:10.272]        </block>
[01:51:10.272]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:51:10.272]      </control>
[01:51:10.272]      // end if-block "powered_down"
[01:51:10.273]    </control>
[01:51:10.273]    <block atomic="false" info="">
[01:51:10.273]      __var DEBUG_PORT_VAL    = 0;
[01:51:10.273]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:51:10.273]      __var ACCESS_POINT_VAL  = 0;
[01:51:10.273]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:51:10.273]      __ap = 1; 
[01:51:10.273]        // -> [__ap <= 0x00000001]
[01:51:10.273]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:51:10.277]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:51:10.277]      __ap = 4;
[01:51:10.277]        // -> [__ap <= 0x00000004]
[01:51:10.277]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:10.280]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:51:10.280]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:51:10.280]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:10.285]    </block>
[01:51:10.285]    <block atomic="false" info="">
[01:51:10.285]      __var nReset = 0x80;
[01:51:10.286]        // -> [nReset <= 0x00000080]
[01:51:10.286]      __var canReadPins = 0;
[01:51:10.286]        // -> [canReadPins <= 0x00000000]
[01:51:10.286]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:51:10.288]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:51:10.289]        // -> [canReadPins <= 0x00000001]
[01:51:10.289]    </block>
[01:51:10.289]    <control if="" while="1" timeout="200" info="">
[01:51:10.289]      // while "1"  (timeout="200")
[01:51:10.289]      // while-condition  =>  TRUE
[01:51:10.289]      // while "1"  (timeout="200")
[01:51:10.289]      // while-condition  =>  TRUE
[01:51:10.289]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.290]      // while-condition  =>  TRUE
[01:51:10.290]      // while "1"  (timeout="200")
[01:51:10.292]      // while-condition  =>  TRUE
[01:51:10.292]      // while "1"  (timeout="200")
[01:51:10.292]      // while-condition  =>  TRUE
[01:51:10.292]      // while "1"  (timeout="200")
[01:51:10.292]      // while-condition  =>  TRUE
[01:51:10.292]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.293]      // while-condition  =>  TRUE
[01:51:10.293]      // while "1"  (timeout="200")
[01:51:10.294]      // while-condition  =>  TRUE
[01:51:10.294]      // while "1"  (timeout="200")
[01:51:10.294]      // while-condition  =>  TRUE
[01:51:10.294]      // while "1"  (timeout="200")
[01:51:10.295]      // while-condition  =>  TRUE
[01:51:10.295]      // while "1"  (timeout="200")
[01:51:10.295]      // while-condition  =>  TRUE
[01:51:10.295]      // while "1"  (timeout="200")
[01:51:10.295]      // while-condition  =>  TRUE
[01:51:10.295]      // while "1"  (timeout="200")
[01:51:10.295]      // while-condition  =>  TRUE
[01:51:10.295]      // while "1"  (timeout="200")
[01:51:10.295]      // while-condition  =>  TRUE
[01:51:10.295]      // while "1"  (timeout="200")
[01:51:10.296]      // while-condition  =>  TRUE
[01:51:10.296]      // while "1"  (timeout="200")
[01:51:10.296]      // while-condition  =>  TRUE
[01:51:10.296]      // while "1"  (timeout="200")
[01:51:10.296]      // while-condition  =>  TRUE
[01:51:10.296]      // while "1"  (timeout="200")
[01:51:10.296]      // while-condition  =>  TRUE
[01:51:10.296]      // while "1"  (timeout="200")
[01:51:10.296]      // while-condition  =>  TRUE
[01:51:10.296]      // while "1"  (timeout="200")
[01:51:10.297]      // while-condition  =>  TRUE
[01:51:10.297]      // while "1"  (timeout="200")
[01:51:10.297]      // while-condition  =>  TRUE
[01:51:10.297]      // while "1"  (timeout="200")
[01:51:10.297]      // while-condition  =>  TRUE
[01:51:10.298]      // while "1"  (timeout="200")
[01:51:10.298]      // while-condition  =>  TRUE
[01:51:10.298]      // while "1"  (timeout="200")
[01:51:10.298]      // while-condition  =>  TRUE
[01:51:10.298]      // while "1"  (timeout="200")
[01:51:10.298]      // while-condition  =>  TRUE
[01:51:10.298]      // while "1"  (timeout="200")
[01:51:10.298]      // while  =>  TIMEOUT
[01:51:10.298]      // end while "1"
[01:51:10.298]    </control>
[01:51:10.298]    <control if="canReadPins" while="" timeout="0" info="">
[01:51:10.298]      // if-block "canReadPins"
[01:51:10.299]        // =>  TRUE
[01:51:10.299]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:51:10.299]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:51:10.301]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:51:10.301]        // while-condition  =>  FALSE
[01:51:10.301]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:51:10.302]      </control>
[01:51:10.302]      // end if-block "canReadPins"
[01:51:10.302]    </control>
[01:51:10.302]    <control if="!canReadPins" while="" timeout="0" info="">
[01:51:10.302]      // if-block "!canReadPins"
[01:51:10.302]        // =>  FALSE
[01:51:10.302]      // skip if-block "!canReadPins"
[01:51:10.303]    </control>
[01:51:10.303]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:51:10.303]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:10.304]        // =>  TRUE
[01:51:10.304]      <block atomic="false" info="">
[01:51:10.304]        WriteAP(0x00, 0x190008);
[01:51:10.306]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:10.306]        WriteAP(0xF0, 0x01);
[01:51:10.310]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:10.310]      </block>
[01:51:10.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:10.311]    </control>
[01:51:10.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:51:10.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:10.311]        // =>  FALSE
[01:51:10.312]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:10.312]    </control>
[01:51:10.312]    <block atomic="false" info="">
[01:51:10.312]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:10.316]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:51:10.317]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:51:10.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:10.319]      __ap = 0; //lets make sure we reset the access point selection
[01:51:10.319]        // -> [__ap <= 0x00000000]
[01:51:10.319]    </block>
[01:51:10.319]  </sequence>
[01:51:10.319]  
[01:51:10.343]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:51:10.343]  
[01:51:10.343]  <debugvars>
[01:51:10.343]    // Pre-defined
[01:51:10.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:10.343]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:10.343]    __dp=0x00000000
[01:51:10.343]    __ap=0x00000000
[01:51:10.343]    __traceout=0x00000000      (Trace Disabled)
[01:51:10.343]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:10.343]    __FlashAddr=0x00000000
[01:51:10.343]    __FlashLen=0x00000000
[01:51:10.343]    __FlashArg=0x00000000
[01:51:10.344]    __FlashOp=0x00000000
[01:51:10.344]    __Result=0x00000000
[01:51:10.344]  </debugvars>
[01:51:10.344]  
[01:51:10.344]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:51:10.344]    <block atomic="false" info="">
[01:51:10.344]      __var deviceID = 0;
[01:51:10.344]        // -> [deviceID <= 0x00000000]
[01:51:10.344]      __var version = 0;
[01:51:10.344]        // -> [version <= 0x00000000]
[01:51:10.344]      __var partNum = 0;
[01:51:10.345]        // -> [partNum <= 0x00000000]
[01:51:10.345]      __var manuf = 0;
[01:51:10.345]        // -> [manuf <= 0x00000000]
[01:51:10.345]      __var isMSPM0G1X0X_G3X0X = 0;
[01:51:10.345]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:51:10.345]      __var isProduction = 0;
[01:51:10.345]        // -> [isProduction <= 0x00000000]
[01:51:10.345]      __var continueId = 0;
[01:51:10.345]        // -> [continueId <= 0x00000000]
[01:51:10.345]      deviceID =   Read32(0x41C40004);
[01:51:10.355]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:51:10.356]        // -> [deviceID <= 0x2BB8802F]
[01:51:10.356]      version = deviceID >> 28;
[01:51:10.356]        // -> [version <= 0x00000002]
[01:51:10.356]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:51:10.356]        // -> [partNum <= 0x0000BB88]
[01:51:10.356]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:51:10.356]        // -> [manuf <= 0x00000017]
[01:51:10.356]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:51:10.356]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:51:10.357]      isProduction = (version > 0);
[01:51:10.357]        // -> [isProduction <= 0x00000001]
[01:51:10.357]    </block>
[01:51:10.357]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:51:10.357]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:51:10.357]        // =>  FALSE
[01:51:10.357]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:51:10.357]    </control>
[01:51:10.357]    <control if="continueId == 4" while="" timeout="0" info="">
[01:51:10.357]      // if-block "continueId == 4"
[01:51:10.357]        // =>  FALSE
[01:51:10.357]      // skip if-block "continueId == 4"
[01:51:10.357]    </control>
[01:51:10.357]    <control if="!isProduction" while="" timeout="0" info="">
[01:51:10.357]      // if-block "!isProduction"
[01:51:10.357]        // =>  FALSE
[01:51:10.358]      // skip if-block "!isProduction"
[01:51:10.358]    </control>
[01:51:10.358]  </sequence>
[01:51:10.358]  
[01:51:37.981]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:51:37.981]  
[01:51:37.989]  <debugvars>
[01:51:37.989]    // Pre-defined
[01:51:37.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:37.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:37.989]    __dp=0x00000000
[01:51:37.989]    __ap=0x00000000
[01:51:37.989]    __traceout=0x00000000      (Trace Disabled)
[01:51:37.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:37.989]    __FlashAddr=0x00000000
[01:51:37.989]    __FlashLen=0x00000000
[01:51:37.989]    __FlashArg=0x00000000
[01:51:37.989]    __FlashOp=0x00000000
[01:51:37.989]    __Result=0x00000000
[01:51:37.989]  </debugvars>
[01:51:37.989]  
[01:51:37.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:51:37.989]    <block atomic="false" info="">
[01:51:37.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:51:37.989]        // -> [isSWJ <= 0x00000001]
[01:51:37.989]      __var hasDormant = __protocol & 0x00020000;
[01:51:37.989]        // -> [hasDormant <= 0x00000000]
[01:51:37.989]      __var protType   = __protocol & 0x0000FFFF;
[01:51:37.989]        // -> [protType <= 0x00000002]
[01:51:37.989]    </block>
[01:51:37.992]    <control if="protType == 1" while="" timeout="0" info="">
[01:51:37.992]      // if-block "protType == 1"
[01:51:37.992]        // =>  FALSE
[01:51:37.992]      // skip if-block "protType == 1"
[01:51:37.992]    </control>
[01:51:37.992]    <control if="protType == 2" while="" timeout="0" info="">
[01:51:37.992]      // if-block "protType == 2"
[01:51:37.992]        // =>  TRUE
[01:51:37.992]      <control if="isSWJ" while="" timeout="0" info="">
[01:51:37.992]        // if-block "isSWJ"
[01:51:37.992]          // =>  TRUE
[01:51:37.992]        <control if="hasDormant" while="" timeout="0" info="">
[01:51:37.992]          // if-block "hasDormant"
[01:51:37.992]            // =>  FALSE
[01:51:37.992]          // skip if-block "hasDormant"
[01:51:37.992]        </control>
[01:51:37.992]        <control if="!hasDormant" while="" timeout="0" info="">
[01:51:37.992]          // if-block "!hasDormant"
[01:51:37.992]            // =>  TRUE
[01:51:37.992]          <block atomic="false" info="">
[01:51:37.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:51:37.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:37.995]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:51:37.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:51:37.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:51:37.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:37.999]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:51:37.999]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:51:38.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:51:38.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:38.003]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:51:38.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:51:38.005]          </block>
[01:51:38.005]          // end if-block "!hasDormant"
[01:51:38.005]        </control>
[01:51:38.005]        // end if-block "isSWJ"
[01:51:38.005]      </control>
[01:51:38.005]      <control if="!isSWJ" while="" timeout="0" info="">
[01:51:38.006]        // if-block "!isSWJ"
[01:51:38.006]          // =>  FALSE
[01:51:38.006]        // skip if-block "!isSWJ"
[01:51:38.006]      </control>
[01:51:38.006]      <block atomic="false" info="">
[01:51:38.006]        ReadDP(0x0);
[01:51:38.008]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:51:38.008]      </block>
[01:51:38.008]      // end if-block "protType == 2"
[01:51:38.008]    </control>
[01:51:38.008]  </sequence>
[01:51:38.008]  
[01:51:38.009]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:51:38.009]  
[01:51:38.009]  <debugvars>
[01:51:38.009]    // Pre-defined
[01:51:38.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:38.009]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:38.009]    __dp=0x00000000
[01:51:38.009]    __ap=0x00000000
[01:51:38.009]    __traceout=0x00000000      (Trace Disabled)
[01:51:38.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:38.009]    __FlashAddr=0x00000000
[01:51:38.009]    __FlashLen=0x00000000
[01:51:38.009]    __FlashArg=0x00000000
[01:51:38.012]    __FlashOp=0x00000000
[01:51:38.012]    __Result=0x00000000
[01:51:38.012]  </debugvars>
[01:51:38.012]  
[01:51:38.012]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:51:38.012]    <block atomic="false" info="">
[01:51:38.012]      __var SW_DP_ABORT       = 0x0;
[01:51:38.012]        // -> [SW_DP_ABORT <= 0x00000000]
[01:51:38.012]      __var DP_CTRL_STAT      = 0x4;
[01:51:38.013]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:51:38.013]      __var DP_SELECT         = 0x8;
[01:51:38.013]        // -> [DP_SELECT <= 0x00000008]
[01:51:38.013]      __var powered_down      = 0;
[01:51:38.013]        // -> [powered_down <= 0x00000000]
[01:51:38.013]      WriteDP(DP_SELECT, 0x00000000);
[01:51:38.015]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:51:38.015]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:51:38.016]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:51:38.016]        // -> [powered_down <= 0x00000001]
[01:51:38.016]    </block>
[01:51:38.016]    <control if="powered_down" while="" timeout="0" info="">
[01:51:38.016]      // if-block "powered_down"
[01:51:38.016]        // =>  TRUE
[01:51:38.016]      <block atomic="false" info="">
[01:51:38.016]        Message(0, "Debug/System power-up request sent");
[01:51:38.018]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:51:38.018]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:51:38.018]      </block>
[01:51:38.020]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:51:38.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:51:38.022]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:51:38.022]        // while-condition  =>  FALSE
[01:51:38.022]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:51:38.022]      </control>
[01:51:38.022]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:51:38.022]        // if-block "(__protocol & 0xFFFF) == 1"
[01:51:38.023]          // =>  FALSE
[01:51:38.023]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:51:38.023]      </control>
[01:51:38.023]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:51:38.023]        // if-block "(__protocol & 0xFFFF) == 2"
[01:51:38.023]          // =>  TRUE
[01:51:38.023]        <block atomic="false" info="">
[01:51:38.023]          Message(0, "executing SWD power up");
[01:51:38.025]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:51:38.030]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:51:38.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:51:38.035]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:51:38.035]        </block>
[01:51:38.035]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:51:38.035]      </control>
[01:51:38.035]      // end if-block "powered_down"
[01:51:38.036]    </control>
[01:51:38.036]    <block atomic="false" info="">
[01:51:38.036]      __var DEBUG_PORT_VAL    = 0;
[01:51:38.036]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:51:38.036]      __var ACCESS_POINT_VAL  = 0;
[01:51:38.036]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:51:38.036]      __ap = 1; 
[01:51:38.036]        // -> [__ap <= 0x00000001]
[01:51:38.036]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:51:38.040]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:51:38.040]      __ap = 4;
[01:51:38.040]        // -> [__ap <= 0x00000004]
[01:51:38.040]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:38.044]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:51:38.044]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:51:38.044]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:38.047]    </block>
[01:51:38.047]    <block atomic="false" info="">
[01:51:38.047]      __var nReset = 0x80;
[01:51:38.047]        // -> [nReset <= 0x00000080]
[01:51:38.047]      __var canReadPins = 0;
[01:51:38.047]        // -> [canReadPins <= 0x00000000]
[01:51:38.047]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:51:38.049]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:51:38.049]        // -> [canReadPins <= 0x00000001]
[01:51:38.049]    </block>
[01:51:38.049]    <control if="" while="1" timeout="200" info="">
[01:51:38.049]      // while "1"  (timeout="200")
[01:51:38.049]      // while-condition  =>  TRUE
[01:51:38.050]      // while "1"  (timeout="200")
[01:51:38.050]      // while-condition  =>  TRUE
[01:51:38.050]      // while "1"  (timeout="200")
[01:51:38.050]      // while-condition  =>  TRUE
[01:51:38.050]      // while "1"  (timeout="200")
[01:51:38.050]      // while-condition  =>  TRUE
[01:51:38.050]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.051]      // while-condition  =>  TRUE
[01:51:38.051]      // while "1"  (timeout="200")
[01:51:38.052]      // while-condition  =>  TRUE
[01:51:38.052]      // while "1"  (timeout="200")
[01:51:38.053]      // while-condition  =>  TRUE
[01:51:38.053]      // while "1"  (timeout="200")
[01:51:38.053]      // while-condition  =>  TRUE
[01:51:38.053]      // while "1"  (timeout="200")
[01:51:38.053]      // while-condition  =>  TRUE
[01:51:38.053]      // while "1"  (timeout="200")
[01:51:38.053]      // while-condition  =>  TRUE
[01:51:38.053]      // while "1"  (timeout="200")
[01:51:38.053]      // while-condition  =>  TRUE
[01:51:38.054]      // while "1"  (timeout="200")
[01:51:38.054]      // while-condition  =>  TRUE
[01:51:38.054]      // while "1"  (timeout="200")
[01:51:38.054]      // while-condition  =>  TRUE
[01:51:38.054]      // while "1"  (timeout="200")
[01:51:38.054]      // while-condition  =>  TRUE
[01:51:38.054]      // while "1"  (timeout="200")
[01:51:38.054]      // while-condition  =>  TRUE
[01:51:38.055]      // while "1"  (timeout="200")
[01:51:38.055]      // while-condition  =>  TRUE
[01:51:38.055]      // while "1"  (timeout="200")
[01:51:38.055]      // while-condition  =>  TRUE
[01:51:38.055]      // while "1"  (timeout="200")
[01:51:38.055]      // while-condition  =>  TRUE
[01:51:38.055]      // while "1"  (timeout="200")
[01:51:38.055]      // while-condition  =>  TRUE
[01:51:38.055]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.056]      // while-condition  =>  TRUE
[01:51:38.056]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.057]      // while-condition  =>  TRUE
[01:51:38.057]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.059]      // while-condition  =>  TRUE
[01:51:38.059]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.060]      // while-condition  =>  TRUE
[01:51:38.060]      // while "1"  (timeout="200")
[01:51:38.062]      // while-condition  =>  TRUE
[01:51:38.062]      // while "1"  (timeout="200")
[01:51:38.062]      // while-condition  =>  TRUE
[01:51:38.062]      // while "1"  (timeout="200")
[01:51:38.062]      // while-condition  =>  TRUE
[01:51:38.062]      // while "1"  (timeout="200")
[01:51:38.062]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.063]      // while "1"  (timeout="200")
[01:51:38.063]      // while-condition  =>  TRUE
[01:51:38.064]      // while "1"  (timeout="200")
[01:51:38.064]      // while  =>  TIMEOUT
[01:51:38.064]      // end while "1"
[01:51:38.064]    </control>
[01:51:38.064]    <control if="canReadPins" while="" timeout="0" info="">
[01:51:38.064]      // if-block "canReadPins"
[01:51:38.064]        // =>  TRUE
[01:51:38.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:51:38.064]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:51:38.067]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:51:38.067]        // while-condition  =>  FALSE
[01:51:38.067]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:51:38.067]      </control>
[01:51:38.067]      // end if-block "canReadPins"
[01:51:38.067]    </control>
[01:51:38.067]    <control if="!canReadPins" while="" timeout="0" info="">
[01:51:38.067]      // if-block "!canReadPins"
[01:51:38.067]        // =>  FALSE
[01:51:38.067]      // skip if-block "!canReadPins"
[01:51:38.067]    </control>
[01:51:38.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:51:38.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:38.067]        // =>  TRUE
[01:51:38.069]      <block atomic="false" info="">
[01:51:38.069]        WriteAP(0x00, 0x190008);
[01:51:38.071]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:38.071]        WriteAP(0xF0, 0x01);
[01:51:38.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:38.077]      </block>
[01:51:38.077]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:38.077]    </control>
[01:51:38.077]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:51:38.077]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:38.077]        // =>  FALSE
[01:51:38.077]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:38.078]    </control>
[01:51:38.078]    <block atomic="false" info="">
[01:51:38.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:38.079]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:51:38.079]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:51:38.079]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:38.082]      __ap = 0; //lets make sure we reset the access point selection
[01:51:38.082]        // -> [__ap <= 0x00000000]
[01:51:38.082]    </block>
[01:51:38.082]  </sequence>
[01:51:38.082]  
[01:51:38.103]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:51:38.103]  
[01:51:38.103]  <debugvars>
[01:51:38.103]    // Pre-defined
[01:51:38.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:38.105]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:38.105]    __dp=0x00000000
[01:51:38.105]    __ap=0x00000000
[01:51:38.105]    __traceout=0x00000000      (Trace Disabled)
[01:51:38.105]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:38.105]    __FlashAddr=0x00000000
[01:51:38.105]    __FlashLen=0x00000000
[01:51:38.105]    __FlashArg=0x00000000
[01:51:38.105]    __FlashOp=0x00000000
[01:51:38.105]    __Result=0x00000000
[01:51:38.106]  </debugvars>
[01:51:38.106]  
[01:51:38.106]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:51:38.106]    <block atomic="false" info="">
[01:51:38.106]      __var deviceID = 0;
[01:51:38.106]        // -> [deviceID <= 0x00000000]
[01:51:38.106]      __var version = 0;
[01:51:38.106]        // -> [version <= 0x00000000]
[01:51:38.106]      __var partNum = 0;
[01:51:38.106]        // -> [partNum <= 0x00000000]
[01:51:38.106]      __var manuf = 0;
[01:51:38.106]        // -> [manuf <= 0x00000000]
[01:51:38.106]      __var isMSPM0G1X0X_G3X0X = 0;
[01:51:38.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:51:38.106]      __var isProduction = 0;
[01:51:38.106]        // -> [isProduction <= 0x00000000]
[01:51:38.106]      __var continueId = 0;
[01:51:38.106]        // -> [continueId <= 0x00000000]
[01:51:38.106]      deviceID =   Read32(0x41C40004);
[01:51:38.116]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:51:38.116]        // -> [deviceID <= 0x2BB8802F]
[01:51:38.116]      version = deviceID >> 28;
[01:51:38.117]        // -> [version <= 0x00000002]
[01:51:38.117]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:51:38.117]        // -> [partNum <= 0x0000BB88]
[01:51:38.117]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:51:38.117]        // -> [manuf <= 0x00000017]
[01:51:38.117]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:51:38.117]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:51:38.117]      isProduction = (version > 0);
[01:51:38.117]        // -> [isProduction <= 0x00000001]
[01:51:38.117]    </block>
[01:51:38.117]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:51:38.117]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:51:38.117]        // =>  FALSE
[01:51:38.117]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:51:38.117]    </control>
[01:51:38.118]    <control if="continueId == 4" while="" timeout="0" info="">
[01:51:38.118]      // if-block "continueId == 4"
[01:51:38.118]        // =>  FALSE
[01:51:38.118]      // skip if-block "continueId == 4"
[01:51:38.118]    </control>
[01:51:38.118]    <control if="!isProduction" while="" timeout="0" info="">
[01:51:38.118]      // if-block "!isProduction"
[01:51:38.118]        // =>  FALSE
[01:51:38.118]      // skip if-block "!isProduction"
[01:51:38.118]    </control>
[01:51:38.118]  </sequence>
[01:51:38.118]  
[01:58:30.490]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:58:30.490]  
[01:58:30.498]  <debugvars>
[01:58:30.498]    // Pre-defined
[01:58:30.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:58:30.498]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:58:30.498]    __dp=0x00000000
[01:58:30.498]    __ap=0x00000000
[01:58:30.498]    __traceout=0x00000000      (Trace Disabled)
[01:58:30.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:58:30.498]    __FlashAddr=0x00000000
[01:58:30.498]    __FlashLen=0x00000000
[01:58:30.500]    __FlashArg=0x00000000
[01:58:30.500]    __FlashOp=0x00000000
[01:58:30.500]    __Result=0x00000000
[01:58:30.500]  </debugvars>
[01:58:30.500]  
[01:58:30.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:58:30.500]    <block atomic="false" info="">
[01:58:30.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:58:30.500]        // -> [isSWJ <= 0x00000001]
[01:58:30.500]      __var hasDormant = __protocol & 0x00020000;
[01:58:30.500]        // -> [hasDormant <= 0x00000000]
[01:58:30.500]      __var protType   = __protocol & 0x0000FFFF;
[01:58:30.501]        // -> [protType <= 0x00000002]
[01:58:30.501]    </block>
[01:58:30.501]    <control if="protType == 1" while="" timeout="0" info="">
[01:58:30.501]      // if-block "protType == 1"
[01:58:30.501]        // =>  FALSE
[01:58:30.501]      // skip if-block "protType == 1"
[01:58:30.501]    </control>
[01:58:30.501]    <control if="protType == 2" while="" timeout="0" info="">
[01:58:30.501]      // if-block "protType == 2"
[01:58:30.501]        // =>  TRUE
[01:58:30.501]      <control if="isSWJ" while="" timeout="0" info="">
[01:58:30.502]        // if-block "isSWJ"
[01:58:30.502]          // =>  TRUE
[01:58:30.502]        <control if="hasDormant" while="" timeout="0" info="">
[01:58:30.502]          // if-block "hasDormant"
[01:58:30.502]            // =>  FALSE
[01:58:30.502]          // skip if-block "hasDormant"
[01:58:30.502]        </control>
[01:58:30.502]        <control if="!hasDormant" while="" timeout="0" info="">
[01:58:30.502]          // if-block "!hasDormant"
[01:58:30.502]            // =>  TRUE
[01:58:30.502]          <block atomic="false" info="">
[01:58:30.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:58:30.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:58:30.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:58:30.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:58:30.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:58:30.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:58:30.507]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:58:30.508]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:58:30.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:58:30.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:58:30.511]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:58:30.512]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:58:30.512]          </block>
[01:58:30.512]          // end if-block "!hasDormant"
[01:58:30.512]        </control>
[01:58:30.512]        // end if-block "isSWJ"
[01:58:30.512]      </control>
[01:58:30.512]      <control if="!isSWJ" while="" timeout="0" info="">
[01:58:30.512]        // if-block "!isSWJ"
[01:58:30.512]          // =>  FALSE
[01:58:30.512]        // skip if-block "!isSWJ"
[01:58:30.512]      </control>
[01:58:30.512]      <block atomic="false" info="">
[01:58:30.512]        ReadDP(0x0);
[01:58:30.515]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:58:30.515]      </block>
[01:58:30.515]      // end if-block "protType == 2"
[01:58:30.515]    </control>
[01:58:30.515]  </sequence>
[01:58:30.515]  
[01:58:30.518]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:58:30.518]  
[01:58:30.518]  <debugvars>
[01:58:30.518]    // Pre-defined
[01:58:30.518]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:58:30.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:58:30.519]    __dp=0x00000000
[01:58:30.519]    __ap=0x00000000
[01:58:30.519]    __traceout=0x00000000      (Trace Disabled)
[01:58:30.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:58:30.519]    __FlashAddr=0x00000000
[01:58:30.519]    __FlashLen=0x00000000
[01:58:30.519]    __FlashArg=0x00000000
[01:58:30.519]    __FlashOp=0x00000000
[01:58:30.519]    __Result=0x00000000
[01:58:30.519]  </debugvars>
[01:58:30.519]  
[01:58:30.519]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:58:30.519]    <block atomic="false" info="">
[01:58:30.519]      __var SW_DP_ABORT       = 0x0;
[01:58:30.520]        // -> [SW_DP_ABORT <= 0x00000000]
[01:58:30.520]      __var DP_CTRL_STAT      = 0x4;
[01:58:30.520]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:58:30.520]      __var DP_SELECT         = 0x8;
[01:58:30.520]        // -> [DP_SELECT <= 0x00000008]
[01:58:30.520]      __var powered_down      = 0;
[01:58:30.520]        // -> [powered_down <= 0x00000000]
[01:58:30.520]      WriteDP(DP_SELECT, 0x00000000);
[01:58:30.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:58:30.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:58:30.526]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:58:30.526]        // -> [powered_down <= 0x00000001]
[01:58:30.527]    </block>
[01:58:30.527]    <control if="powered_down" while="" timeout="0" info="">
[01:58:30.527]      // if-block "powered_down"
[01:58:30.527]        // =>  TRUE
[01:58:30.527]      <block atomic="false" info="">
[01:58:30.527]        Message(0, "Debug/System power-up request sent");
[01:58:30.529]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:58:30.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:58:30.532]      </block>
[01:58:30.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:58:30.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:58:30.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:58:30.533]        // while-condition  =>  FALSE
[01:58:30.533]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:58:30.533]      </control>
[01:58:30.533]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:58:30.533]        // if-block "(__protocol & 0xFFFF) == 1"
[01:58:30.533]          // =>  FALSE
[01:58:30.533]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:58:30.533]      </control>
[01:58:30.533]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:58:30.535]        // if-block "(__protocol & 0xFFFF) == 2"
[01:58:30.535]          // =>  TRUE
[01:58:30.535]        <block atomic="false" info="">
[01:58:30.535]          Message(0, "executing SWD power up");
[01:58:30.537]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:58:30.539]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:58:30.539]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:58:30.544]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:58:30.544]        </block>
[01:58:30.544]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:58:30.544]      </control>
[01:58:30.544]      // end if-block "powered_down"
[01:58:30.544]    </control>
[01:58:30.544]    <block atomic="false" info="">
[01:58:30.544]      __var DEBUG_PORT_VAL    = 0;
[01:58:30.546]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:58:30.546]      __var ACCESS_POINT_VAL  = 0;
[01:58:30.546]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:58:30.546]      __ap = 1; 
[01:58:30.546]        // -> [__ap <= 0x00000001]
[01:58:30.547]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:58:30.547]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:58:30.547]      __ap = 4;
[01:58:30.547]        // -> [__ap <= 0x00000004]
[01:58:30.551]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:58:30.551]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:58:30.551]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:58:30.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:58:30.557]    </block>
[01:58:30.557]    <block atomic="false" info="">
[01:58:30.557]      __var nReset = 0x80;
[01:58:30.557]        // -> [nReset <= 0x00000080]
[01:58:30.557]      __var canReadPins = 0;
[01:58:30.557]        // -> [canReadPins <= 0x00000000]
[01:58:30.557]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:58:30.559]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:58:30.559]        // -> [canReadPins <= 0x00000001]
[01:58:30.559]    </block>
[01:58:30.560]    <control if="" while="1" timeout="200" info="">
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.560]      // while "1"  (timeout="200")
[01:58:30.560]      // while-condition  =>  TRUE
[01:58:30.563]      // while "1"  (timeout="200")
[01:58:30.563]      // while-condition  =>  TRUE
[01:58:30.563]      // while "1"  (timeout="200")
[01:58:30.563]      // while-condition  =>  TRUE
[01:58:30.563]      // while "1"  (timeout="200")
[01:58:30.563]      // while-condition  =>  TRUE
[01:58:30.563]      // while "1"  (timeout="200")
[01:58:30.563]      // while-condition  =>  TRUE
[01:58:30.564]      // while "1"  (timeout="200")
[01:58:30.564]      // while  =>  TIMEOUT
[01:58:30.564]      // end while "1"
[01:58:30.564]    </control>
[01:58:30.564]    <control if="canReadPins" while="" timeout="0" info="">
[01:58:30.564]      // if-block "canReadPins"
[01:58:30.564]        // =>  TRUE
[01:58:30.564]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:58:30.564]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:58:30.564]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:58:30.564]        // while-condition  =>  FALSE
[01:58:30.567]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:58:30.567]      </control>
[01:58:30.567]      // end if-block "canReadPins"
[01:58:30.567]    </control>
[01:58:30.567]    <control if="!canReadPins" while="" timeout="0" info="">
[01:58:30.567]      // if-block "!canReadPins"
[01:58:30.567]        // =>  FALSE
[01:58:30.567]      // skip if-block "!canReadPins"
[01:58:30.567]    </control>
[01:58:30.567]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:58:30.567]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:58:30.567]        // =>  TRUE
[01:58:30.567]      <block atomic="false" info="">
[01:58:30.567]        WriteAP(0x00, 0x190008);
[01:58:30.570]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:58:30.570]        WriteAP(0xF0, 0x01);
[01:58:30.572]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:58:30.572]      </block>
[01:58:30.574]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:58:30.574]    </control>
[01:58:30.574]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:58:30.574]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:58:30.574]        // =>  FALSE
[01:58:30.574]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:58:30.574]    </control>
[01:58:30.574]    <block atomic="false" info="">
[01:58:30.574]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:58:30.581]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:58:30.581]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:58:30.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:58:30.584]      __ap = 0; //lets make sure we reset the access point selection
[01:58:30.584]        // -> [__ap <= 0x00000000]
[01:58:30.584]    </block>
[01:58:30.584]  </sequence>
[01:58:30.584]  
[01:58:30.607]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:58:30.607]  
[01:58:30.607]  <debugvars>
[01:58:30.608]    // Pre-defined
[01:58:30.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:58:30.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:58:30.608]    __dp=0x00000000
[01:58:30.608]    __ap=0x00000000
[01:58:30.608]    __traceout=0x00000000      (Trace Disabled)
[01:58:30.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:58:30.608]    __FlashAddr=0x00000000
[01:58:30.608]    __FlashLen=0x00000000
[01:58:30.608]    __FlashArg=0x00000000
[01:58:30.608]    __FlashOp=0x00000000
[01:58:30.608]    __Result=0x00000000
[01:58:30.608]  </debugvars>
[01:58:30.608]  
[01:58:30.608]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:58:30.608]    <block atomic="false" info="">
[01:58:30.608]      __var deviceID = 0;
[01:58:30.608]        // -> [deviceID <= 0x00000000]
[01:58:30.608]      __var version = 0;
[01:58:30.608]        // -> [version <= 0x00000000]
[01:58:30.608]      __var partNum = 0;
[01:58:30.608]        // -> [partNum <= 0x00000000]
[01:58:30.608]      __var manuf = 0;
[01:58:30.608]        // -> [manuf <= 0x00000000]
[01:58:30.608]      __var isMSPM0G1X0X_G3X0X = 0;
[01:58:30.608]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:58:30.608]      __var isProduction = 0;
[01:58:30.608]        // -> [isProduction <= 0x00000000]
[01:58:30.608]      __var continueId = 0;
[01:58:30.608]        // -> [continueId <= 0x00000000]
[01:58:30.612]      deviceID =   Read32(0x41C40004);
[01:58:30.618]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:58:30.618]        // -> [deviceID <= 0x2BB8802F]
[01:58:30.618]      version = deviceID >> 28;
[01:58:30.618]        // -> [version <= 0x00000002]
[01:58:30.618]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:58:30.618]        // -> [partNum <= 0x0000BB88]
[01:58:30.618]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:58:30.618]        // -> [manuf <= 0x00000017]
[01:58:30.618]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:58:30.618]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:58:30.618]      isProduction = (version > 0);
[01:58:30.618]        // -> [isProduction <= 0x00000001]
[01:58:30.618]    </block>
[01:58:30.618]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:58:30.618]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:58:30.618]        // =>  FALSE
[01:58:30.618]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:58:30.618]    </control>
[01:58:30.618]    <control if="continueId == 4" while="" timeout="0" info="">
[01:58:30.621]      // if-block "continueId == 4"
[01:58:30.621]        // =>  FALSE
[01:58:30.621]      // skip if-block "continueId == 4"
[01:58:30.621]    </control>
[01:58:30.621]    <control if="!isProduction" while="" timeout="0" info="">
[01:58:30.621]      // if-block "!isProduction"
[01:58:30.621]        // =>  FALSE
[01:58:30.621]      // skip if-block "!isProduction"
[01:58:30.621]    </control>
[01:58:30.621]  </sequence>
[01:58:30.621]  
