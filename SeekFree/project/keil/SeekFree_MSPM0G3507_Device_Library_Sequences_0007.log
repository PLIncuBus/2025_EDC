/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0007.log
 *  Created     : 03:22:06 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[03:22:06.208]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:22:06.208]  
[03:22:06.212]  <debugvars>
[03:22:06.212]    // Pre-defined
[03:22:06.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:06.212]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:22:06.212]    __dp=0x00000000
[03:22:06.212]    __ap=0x00000000
[03:22:06.212]    __traceout=0x00000000      (Trace Disabled)
[03:22:06.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:06.212]    __FlashAddr=0x00000000
[03:22:06.212]    __FlashLen=0x00000000
[03:22:06.212]    __FlashArg=0x00000000
[03:22:06.212]    __FlashOp=0x00000000
[03:22:06.212]    __Result=0x00000000
[03:22:06.212]  </debugvars>
[03:22:06.212]  
[03:22:06.212]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:22:06.212]    <block atomic="false" info="">
[03:22:06.212]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:22:06.212]        // -> [isSWJ <= 0x00000001]
[03:22:06.212]      __var hasDormant = __protocol & 0x00020000;
[03:22:06.212]        // -> [hasDormant <= 0x00000000]
[03:22:06.212]      __var protType   = __protocol & 0x0000FFFF;
[03:22:06.212]        // -> [protType <= 0x00000002]
[03:22:06.215]    </block>
[03:22:06.215]    <control if="protType == 1" while="" timeout="0" info="">
[03:22:06.215]      // if-block "protType == 1"
[03:22:06.215]        // =>  FALSE
[03:22:06.215]      // skip if-block "protType == 1"
[03:22:06.215]    </control>
[03:22:06.215]    <control if="protType == 2" while="" timeout="0" info="">
[03:22:06.215]      // if-block "protType == 2"
[03:22:06.215]        // =>  TRUE
[03:22:06.215]      <control if="isSWJ" while="" timeout="0" info="">
[03:22:06.215]        // if-block "isSWJ"
[03:22:06.215]          // =>  TRUE
[03:22:06.215]        <control if="hasDormant" while="" timeout="0" info="">
[03:22:06.215]          // if-block "hasDormant"
[03:22:06.215]            // =>  FALSE
[03:22:06.215]          // skip if-block "hasDormant"
[03:22:06.216]        </control>
[03:22:06.216]        <control if="!hasDormant" while="" timeout="0" info="">
[03:22:06.216]          // if-block "!hasDormant"
[03:22:06.216]            // =>  TRUE
[03:22:06.216]          <block atomic="false" info="">
[03:22:06.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:22:06.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:06.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:22:06.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:22:06.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:22:06.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:06.220]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:22:06.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:22:06.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:22:06.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:06.224]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:22:06.225]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:22:06.225]          </block>
[03:22:06.225]          // end if-block "!hasDormant"
[03:22:06.225]        </control>
[03:22:06.225]        // end if-block "isSWJ"
[03:22:06.225]      </control>
[03:22:06.225]      <control if="!isSWJ" while="" timeout="0" info="">
[03:22:06.225]        // if-block "!isSWJ"
[03:22:06.225]          // =>  FALSE
[03:22:06.225]        // skip if-block "!isSWJ"
[03:22:06.225]      </control>
[03:22:06.225]      <block atomic="false" info="">
[03:22:06.225]        ReadDP(0x0);
[03:22:06.228]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:22:06.228]      </block>
[03:22:06.228]      // end if-block "protType == 2"
[03:22:06.228]    </control>
[03:22:06.228]  </sequence>
[03:22:06.228]  
[03:22:09.399]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:22:09.399]  
[03:22:09.411]  <debugvars>
[03:22:09.411]    // Pre-defined
[03:22:09.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:09.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:22:09.411]    __dp=0x00000000
[03:22:09.411]    __ap=0x00000000
[03:22:09.411]    __traceout=0x00000000      (Trace Disabled)
[03:22:09.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:09.411]    __FlashAddr=0x00000000
[03:22:09.411]    __FlashLen=0x00000000
[03:22:09.411]    __FlashArg=0x00000000
[03:22:09.412]    __FlashOp=0x00000000
[03:22:09.412]    __Result=0x00000000
[03:22:09.412]  </debugvars>
[03:22:09.412]  
[03:22:09.412]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:22:09.412]    <block atomic="false" info="">
[03:22:09.412]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:22:09.412]        // -> [isSWJ <= 0x00000001]
[03:22:09.412]      __var hasDormant = __protocol & 0x00020000;
[03:22:09.412]        // -> [hasDormant <= 0x00000000]
[03:22:09.412]      __var protType   = __protocol & 0x0000FFFF;
[03:22:09.412]        // -> [protType <= 0x00000002]
[03:22:09.412]    </block>
[03:22:09.412]    <control if="protType == 1" while="" timeout="0" info="">
[03:22:09.412]      // if-block "protType == 1"
[03:22:09.412]        // =>  FALSE
[03:22:09.412]      // skip if-block "protType == 1"
[03:22:09.412]    </control>
[03:22:09.412]    <control if="protType == 2" while="" timeout="0" info="">
[03:22:09.412]      // if-block "protType == 2"
[03:22:09.412]        // =>  TRUE
[03:22:09.412]      <control if="isSWJ" while="" timeout="0" info="">
[03:22:09.412]        // if-block "isSWJ"
[03:22:09.412]          // =>  TRUE
[03:22:09.412]        <control if="hasDormant" while="" timeout="0" info="">
[03:22:09.412]          // if-block "hasDormant"
[03:22:09.412]            // =>  FALSE
[03:22:09.412]          // skip if-block "hasDormant"
[03:22:09.412]        </control>
[03:22:09.412]        <control if="!hasDormant" while="" timeout="0" info="">
[03:22:09.412]          // if-block "!hasDormant"
[03:22:09.412]            // =>  TRUE
[03:22:09.412]          <block atomic="false" info="">
[03:22:09.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:22:09.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:09.416]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:22:09.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:22:09.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:22:09.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:09.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:22:09.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:22:09.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:22:09.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:22:09.420]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:22:09.424]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:22:09.424]          </block>
[03:22:09.424]          // end if-block "!hasDormant"
[03:22:09.424]        </control>
[03:22:09.424]        // end if-block "isSWJ"
[03:22:09.424]      </control>
[03:22:09.424]      <control if="!isSWJ" while="" timeout="0" info="">
[03:22:09.424]        // if-block "!isSWJ"
[03:22:09.424]          // =>  FALSE
[03:22:09.424]        // skip if-block "!isSWJ"
[03:22:09.424]      </control>
[03:22:09.424]      <block atomic="false" info="">
[03:22:09.424]        ReadDP(0x0);
[03:22:09.424]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:22:09.424]      </block>
[03:22:09.428]      // end if-block "protType == 2"
[03:22:09.428]    </control>
[03:22:09.429]  </sequence>
[03:22:09.429]  
[03:22:09.429]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:22:09.429]  
[03:22:09.429]  <debugvars>
[03:22:09.432]    // Pre-defined
[03:22:09.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:09.432]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:22:09.432]    __dp=0x00000000
[03:22:09.432]    __ap=0x00000000
[03:22:09.432]    __traceout=0x00000000      (Trace Disabled)
[03:22:09.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:09.432]    __FlashAddr=0x00000000
[03:22:09.432]    __FlashLen=0x00000000
[03:22:09.432]    __FlashArg=0x00000000
[03:22:09.432]    __FlashOp=0x00000000
[03:22:09.432]    __Result=0x00000000
[03:22:09.432]  </debugvars>
[03:22:09.432]  
[03:22:09.432]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:22:09.432]    <block atomic="false" info="">
[03:22:09.432]      __var SW_DP_ABORT       = 0x0;
[03:22:09.432]        // -> [SW_DP_ABORT <= 0x00000000]
[03:22:09.432]      __var DP_CTRL_STAT      = 0x4;
[03:22:09.432]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:22:09.432]      __var DP_SELECT         = 0x8;
[03:22:09.432]        // -> [DP_SELECT <= 0x00000008]
[03:22:09.432]      __var powered_down      = 0;
[03:22:09.432]        // -> [powered_down <= 0x00000000]
[03:22:09.432]      WriteDP(DP_SELECT, 0x00000000);
[03:22:09.436]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:22:09.436]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:22:09.440]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[03:22:09.441]        // -> [powered_down <= 0x00000000]
[03:22:09.441]    </block>
[03:22:09.441]    <control if="powered_down" while="" timeout="0" info="">
[03:22:09.441]      // if-block "powered_down"
[03:22:09.441]        // =>  FALSE
[03:22:09.441]      // skip if-block "powered_down"
[03:22:09.441]    </control>
[03:22:09.441]    <block atomic="false" info="">
[03:22:09.441]      __var DEBUG_PORT_VAL    = 0;
[03:22:09.441]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:22:09.441]      __var ACCESS_POINT_VAL  = 0;
[03:22:09.441]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:22:09.442]      __ap = 1; 
[03:22:09.442]        // -> [__ap <= 0x00000001]
[03:22:09.442]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:22:09.444]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:22:09.444]      __ap = 4;
[03:22:09.444]        // -> [__ap <= 0x00000004]
[03:22:09.444]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:22:09.449]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:22:09.449]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:22:09.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:22:09.452]    </block>
[03:22:09.452]    <block atomic="false" info="">
[03:22:09.452]      __var nReset = 0x80;
[03:22:09.452]        // -> [nReset <= 0x00000080]
[03:22:09.452]      __var canReadPins = 0;
[03:22:09.452]        // -> [canReadPins <= 0x00000000]
[03:22:09.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:22:09.454]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:22:09.454]        // -> [canReadPins <= 0x00000001]
[03:22:09.454]    </block>
[03:22:09.454]    <control if="" while="1" timeout="200" info="">
[03:22:09.454]      // while "1"  (timeout="200")
[03:22:09.454]      // while-condition  =>  TRUE
[03:22:09.454]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.455]      // while-condition  =>  TRUE
[03:22:09.455]      // while "1"  (timeout="200")
[03:22:09.456]      // while-condition  =>  TRUE
[03:22:09.456]      // while "1"  (timeout="200")
[03:22:09.456]      // while-condition  =>  TRUE
[03:22:09.456]      // while "1"  (timeout="200")
[03:22:09.456]      // while-condition  =>  TRUE
[03:22:09.456]      // while "1"  (timeout="200")
[03:22:09.456]      // while-condition  =>  TRUE
[03:22:09.457]      // while "1"  (timeout="200")
[03:22:09.457]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.458]      // while "1"  (timeout="200")
[03:22:09.458]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.459]      // while "1"  (timeout="200")
[03:22:09.459]      // while-condition  =>  TRUE
[03:22:09.461]      // while "1"  (timeout="200")
[03:22:09.461]      // while-condition  =>  TRUE
[03:22:09.461]      // while "1"  (timeout="200")
[03:22:09.461]      // while-condition  =>  TRUE
[03:22:09.461]      // while "1"  (timeout="200")
[03:22:09.461]      // while-condition  =>  TRUE
[03:22:09.461]      // while "1"  (timeout="200")
[03:22:09.461]      // while-condition  =>  TRUE
[03:22:09.461]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.462]      // while-condition  =>  TRUE
[03:22:09.462]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.463]      // while-condition  =>  TRUE
[03:22:09.463]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.465]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.465]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.465]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.465]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.465]      // while "1"  (timeout="200")
[03:22:09.465]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.466]      // while "1"  (timeout="200")
[03:22:09.466]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.467]      // while "1"  (timeout="200")
[03:22:09.467]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.468]      // while "1"  (timeout="200")
[03:22:09.468]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.469]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.469]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.469]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.469]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.469]      // while-condition  =>  TRUE
[03:22:09.469]      // while "1"  (timeout="200")
[03:22:09.471]      // while-condition  =>  TRUE
[03:22:09.471]      // while "1"  (timeout="200")
[03:22:09.471]      // while  =>  TIMEOUT
[03:22:09.471]      // end while "1"
[03:22:09.471]    </control>
[03:22:09.471]    <control if="canReadPins" while="" timeout="0" info="">
[03:22:09.471]      // if-block "canReadPins"
[03:22:09.471]        // =>  TRUE
[03:22:09.471]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:22:09.471]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:22:09.472]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:22:09.472]        // while-condition  =>  FALSE
[03:22:09.472]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:22:09.472]      </control>
[03:22:09.472]      // end if-block "canReadPins"
[03:22:09.472]    </control>
[03:22:09.474]    <control if="!canReadPins" while="" timeout="0" info="">
[03:22:09.474]      // if-block "!canReadPins"
[03:22:09.474]        // =>  FALSE
[03:22:09.474]      // skip if-block "!canReadPins"
[03:22:09.474]    </control>
[03:22:09.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:22:09.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:22:09.474]        // =>  FALSE
[03:22:09.474]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:22:09.474]    </control>
[03:22:09.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:22:09.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:22:09.474]        // =>  TRUE
[03:22:09.475]      <block atomic="false" info="">
[03:22:09.475]        WriteAP(0xF0, 0x01);
[03:22:09.479]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:22:09.479]        WriteAP(0x00, 0xF90008);
[03:22:09.490]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[03:22:09.490]        WriteAP(0xF0, 0x01);
[03:22:09.495]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:22:09.495]      </block>
[03:22:09.495]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:22:09.495]    </control>
[03:22:09.495]    <block atomic="false" info="">
[03:22:09.495]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:22:09.499]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[03:22:09.499]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[03:22:09.499]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:22:09.501]      __ap = 0; //lets make sure we reset the access point selection
[03:22:09.501]        // -> [__ap <= 0x00000000]
[03:22:09.501]    </block>
[03:22:09.501]  </sequence>
[03:22:09.501]  
[03:22:09.521]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:22:09.521]  
[03:22:09.521]  <debugvars>
[03:22:09.521]    // Pre-defined
[03:22:09.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:09.521]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:22:09.521]    __dp=0x00000000
[03:22:09.521]    __ap=0x00000000
[03:22:09.524]    __traceout=0x00000000      (Trace Disabled)
[03:22:09.524]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:09.524]    __FlashAddr=0x00000000
[03:22:09.524]    __FlashLen=0x00000000
[03:22:09.524]    __FlashArg=0x00000000
[03:22:09.524]    __FlashOp=0x00000000
[03:22:09.524]    __Result=0x00000000
[03:22:09.524]  </debugvars>
[03:22:09.524]  
[03:22:09.524]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:22:09.524]    <block atomic="false" info="">
[03:22:09.524]      __var deviceID = 0;
[03:22:09.524]        // -> [deviceID <= 0x00000000]
[03:22:09.524]      __var version = 0;
[03:22:09.524]        // -> [version <= 0x00000000]
[03:22:09.524]      __var partNum = 0;
[03:22:09.524]        // -> [partNum <= 0x00000000]
[03:22:09.524]      __var manuf = 0;
[03:22:09.524]        // -> [manuf <= 0x00000000]
[03:22:09.524]      __var isMSPM0G1X0X_G3X0X = 0;
[03:22:09.524]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:22:09.524]      __var isProduction = 0;
[03:22:09.524]        // -> [isProduction <= 0x00000000]
[03:22:09.524]      __var continueId = 0;
[03:22:09.524]        // -> [continueId <= 0x00000000]
[03:22:09.524]      deviceID =   Read32(0x41C40004);
[03:22:09.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:22:09.532]        // -> [deviceID <= 0x2BB8802F]
[03:22:09.532]      version = deviceID >> 28;
[03:22:09.532]        // -> [version <= 0x00000002]
[03:22:09.532]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:22:09.532]        // -> [partNum <= 0x0000BB88]
[03:22:09.532]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:22:09.532]        // -> [manuf <= 0x00000017]
[03:22:09.532]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:22:09.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:22:09.532]      isProduction = (version > 0);
[03:22:09.532]        // -> [isProduction <= 0x00000001]
[03:22:09.532]    </block>
[03:22:09.532]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:22:09.532]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:22:09.532]        // =>  FALSE
[03:22:09.532]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:22:09.532]    </control>
[03:22:09.532]    <control if="continueId == 4" while="" timeout="0" info="">
[03:22:09.532]      // if-block "continueId == 4"
[03:22:09.532]        // =>  FALSE
[03:22:09.532]      // skip if-block "continueId == 4"
[03:22:09.532]    </control>
[03:22:09.532]    <control if="!isProduction" while="" timeout="0" info="">
[03:22:09.532]      // if-block "!isProduction"
[03:22:09.532]        // =>  FALSE
[03:22:09.532]      // skip if-block "!isProduction"
[03:22:09.532]    </control>
[03:22:09.532]  </sequence>
[03:22:09.532]  
[03:25:15.454]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:25:15.454]  
[03:25:15.454]  <debugvars>
[03:25:15.454]    // Pre-defined
[03:25:15.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:15.458]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:25:15.458]    __dp=0x00000000
[03:25:15.458]    __ap=0x00000000
[03:25:15.458]    __traceout=0x00000000      (Trace Disabled)
[03:25:15.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:15.458]    __FlashAddr=0x00000000
[03:25:15.458]    __FlashLen=0x00000000
[03:25:15.458]    __FlashArg=0x00000000
[03:25:15.458]    __FlashOp=0x00000000
[03:25:15.458]    __Result=0x00000000
[03:25:15.458]  </debugvars>
[03:25:15.458]  
[03:25:15.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:25:15.458]    <block atomic="false" info="">
[03:25:15.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:25:15.458]        // -> [isSWJ <= 0x00000001]
[03:25:15.458]      __var hasDormant = __protocol & 0x00020000;
[03:25:15.458]        // -> [hasDormant <= 0x00000000]
[03:25:15.458]      __var protType   = __protocol & 0x0000FFFF;
[03:25:15.458]        // -> [protType <= 0x00000002]
[03:25:15.458]    </block>
[03:25:15.458]    <control if="protType == 1" while="" timeout="0" info="">
[03:25:15.458]      // if-block "protType == 1"
[03:25:15.458]        // =>  FALSE
[03:25:15.458]      // skip if-block "protType == 1"
[03:25:15.458]    </control>
[03:25:15.458]    <control if="protType == 2" while="" timeout="0" info="">
[03:25:15.458]      // if-block "protType == 2"
[03:25:15.458]        // =>  TRUE
[03:25:15.458]      <control if="isSWJ" while="" timeout="0" info="">
[03:25:15.458]        // if-block "isSWJ"
[03:25:15.458]          // =>  TRUE
[03:25:15.458]        <control if="hasDormant" while="" timeout="0" info="">
[03:25:15.458]          // if-block "hasDormant"
[03:25:15.458]            // =>  FALSE
[03:25:15.458]          // skip if-block "hasDormant"
[03:25:15.458]        </control>
[03:25:15.458]        <control if="!hasDormant" while="" timeout="0" info="">
[03:25:15.458]          // if-block "!hasDormant"
[03:25:15.462]            // =>  TRUE
[03:25:15.462]          <block atomic="false" info="">
[03:25:15.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:25:15.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:15.464]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:25:15.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:25:15.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:25:15.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:15.466]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:25:15.466]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:25:15.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:25:15.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:25:15.466]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:25:15.470]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:25:15.470]          </block>
[03:25:15.470]          // end if-block "!hasDormant"
[03:25:15.470]        </control>
[03:25:15.470]        // end if-block "isSWJ"
[03:25:15.470]      </control>
[03:25:15.470]      <control if="!isSWJ" while="" timeout="0" info="">
[03:25:15.470]        // if-block "!isSWJ"
[03:25:15.470]          // =>  FALSE
[03:25:15.470]        // skip if-block "!isSWJ"
[03:25:15.470]      </control>
[03:25:15.470]      <block atomic="false" info="">
[03:25:15.470]        ReadDP(0x0);
[03:25:15.474]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:25:15.474]      </block>
[03:25:15.474]      // end if-block "protType == 2"
[03:25:15.474]    </control>
[03:25:15.474]  </sequence>
[03:25:15.474]  
[03:25:15.478]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:25:15.478]  
[03:25:15.478]  <debugvars>
[03:25:15.478]    // Pre-defined
[03:25:15.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:15.478]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:25:15.478]    __dp=0x00000000
[03:25:15.478]    __ap=0x00000000
[03:25:15.478]    __traceout=0x00000000      (Trace Disabled)
[03:25:15.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:15.478]    __FlashAddr=0x00000000
[03:25:15.478]    __FlashLen=0x00000000
[03:25:15.478]    __FlashArg=0x00000000
[03:25:15.478]    __FlashOp=0x00000000
[03:25:15.478]    __Result=0x00000000
[03:25:15.478]  </debugvars>
[03:25:15.478]  
[03:25:15.478]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:25:15.478]    <block atomic="false" info="">
[03:25:15.478]      __var SW_DP_ABORT       = 0x0;
[03:25:15.478]        // -> [SW_DP_ABORT <= 0x00000000]
[03:25:15.478]      __var DP_CTRL_STAT      = 0x4;
[03:25:15.478]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:25:15.478]      __var DP_SELECT         = 0x8;
[03:25:15.478]        // -> [DP_SELECT <= 0x00000008]
[03:25:15.478]      __var powered_down      = 0;
[03:25:15.482]        // -> [powered_down <= 0x00000000]
[03:25:15.482]      WriteDP(DP_SELECT, 0x00000000);
[03:25:15.482]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:25:15.482]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:25:15.486]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:25:15.486]        // -> [powered_down <= 0x00000001]
[03:25:15.486]    </block>
[03:25:15.486]    <control if="powered_down" while="" timeout="0" info="">
[03:25:15.486]      // if-block "powered_down"
[03:25:15.486]        // =>  TRUE
[03:25:15.486]      <block atomic="false" info="">
[03:25:15.486]        Message(0, "Debug/System power-up request sent");
[03:25:15.486]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:25:15.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:25:15.494]      </block>
[03:25:15.494]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:25:15.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:25:15.504]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:25:15.504]        // while-condition  =>  FALSE
[03:25:15.504]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:25:15.507]      </control>
[03:25:15.507]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:25:15.507]        // if-block "(__protocol & 0xFFFF) == 1"
[03:25:15.507]          // =>  FALSE
[03:25:15.507]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:25:15.507]      </control>
[03:25:15.507]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:25:15.507]        // if-block "(__protocol & 0xFFFF) == 2"
[03:25:15.508]          // =>  TRUE
[03:25:15.508]        <block atomic="false" info="">
[03:25:15.508]          Message(0, "executing SWD power up");
[03:25:15.509]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:25:15.511]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:25:15.511]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:25:15.513]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:25:15.513]        </block>
[03:25:15.513]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:25:15.513]      </control>
[03:25:15.513]      // end if-block "powered_down"
[03:25:15.513]    </control>
[03:25:15.513]    <block atomic="false" info="">
[03:25:15.513]      __var DEBUG_PORT_VAL    = 0;
[03:25:15.513]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:25:15.513]      __var ACCESS_POINT_VAL  = 0;
[03:25:15.513]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:25:15.513]      __ap = 1; 
[03:25:15.513]        // -> [__ap <= 0x00000001]
[03:25:15.513]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:25:15.519]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:25:15.519]      __ap = 4;
[03:25:15.519]        // -> [__ap <= 0x00000004]
[03:25:15.519]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:25:15.532]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:25:15.532]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:25:15.532]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:25:15.532]    </block>
[03:25:15.532]    <block atomic="false" info="">
[03:25:15.532]      __var nReset = 0x80;
[03:25:15.532]        // -> [nReset <= 0x00000080]
[03:25:15.532]      __var canReadPins = 0;
[03:25:15.532]        // -> [canReadPins <= 0x00000000]
[03:25:15.536]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:25:15.541]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:25:15.541]        // -> [canReadPins <= 0x00000001]
[03:25:15.542]    </block>
[03:25:15.542]    <control if="" while="1" timeout="200" info="">
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.542]      // while-condition  =>  TRUE
[03:25:15.542]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.543]      // while "1"  (timeout="200")
[03:25:15.543]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.545]      // while "1"  (timeout="200")
[03:25:15.545]      // while-condition  =>  TRUE
[03:25:15.546]      // while "1"  (timeout="200")
[03:25:15.546]      // while-condition  =>  TRUE
[03:25:15.546]      // while "1"  (timeout="200")
[03:25:15.546]      // while-condition  =>  TRUE
[03:25:15.546]      // while "1"  (timeout="200")
[03:25:15.546]      // while-condition  =>  TRUE
[03:25:15.546]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.547]      // while "1"  (timeout="200")
[03:25:15.547]      // while-condition  =>  TRUE
[03:25:15.549]      // while "1"  (timeout="200")
[03:25:15.549]      // while  =>  TIMEOUT
[03:25:15.549]      // end while "1"
[03:25:15.549]    </control>
[03:25:15.549]    <control if="canReadPins" while="" timeout="0" info="">
[03:25:15.549]      // if-block "canReadPins"
[03:25:15.549]        // =>  TRUE
[03:25:15.549]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:25:15.549]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:25:15.550]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:25:15.550]        // while-condition  =>  FALSE
[03:25:15.550]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:25:15.550]      </control>
[03:25:15.553]      // end if-block "canReadPins"
[03:25:15.553]    </control>
[03:25:15.553]    <control if="!canReadPins" while="" timeout="0" info="">
[03:25:15.553]      // if-block "!canReadPins"
[03:25:15.553]        // =>  FALSE
[03:25:15.553]      // skip if-block "!canReadPins"
[03:25:15.553]    </control>
[03:25:15.553]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:25:15.553]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:25:15.553]        // =>  TRUE
[03:25:15.553]      <block atomic="false" info="">
[03:25:15.553]        WriteAP(0x00, 0x190008);
[03:25:15.556]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:25:15.556]        WriteAP(0xF0, 0x01);
[03:25:15.562]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:25:15.562]      </block>
[03:25:15.562]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:25:15.562]    </control>
[03:25:15.562]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:25:15.562]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:25:15.564]        // =>  FALSE
[03:25:15.564]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:25:15.564]    </control>
[03:25:15.564]    <block atomic="false" info="">
[03:25:15.564]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:25:15.570]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:25:15.570]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:25:15.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:25:15.570]      __ap = 0; //lets make sure we reset the access point selection
[03:25:15.570]        // -> [__ap <= 0x00000000]
[03:25:15.570]    </block>
[03:25:15.570]  </sequence>
[03:25:15.570]  
[03:25:15.607]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:25:15.607]  
[03:25:15.607]  <debugvars>
[03:25:15.607]    // Pre-defined
[03:25:15.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:15.607]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:25:15.607]    __dp=0x00000000
[03:25:15.607]    __ap=0x00000000
[03:25:15.607]    __traceout=0x00000000      (Trace Disabled)
[03:25:15.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:15.607]    __FlashAddr=0x00000000
[03:25:15.607]    __FlashLen=0x00000000
[03:25:15.607]    __FlashArg=0x00000000
[03:25:15.607]    __FlashOp=0x00000000
[03:25:15.607]    __Result=0x00000000
[03:25:15.607]  </debugvars>
[03:25:15.607]  
[03:25:15.607]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:25:15.607]    <block atomic="false" info="">
[03:25:15.607]      __var deviceID = 0;
[03:25:15.607]        // -> [deviceID <= 0x00000000]
[03:25:15.611]      __var version = 0;
[03:25:15.611]        // -> [version <= 0x00000000]
[03:25:15.612]      __var partNum = 0;
[03:25:15.612]        // -> [partNum <= 0x00000000]
[03:25:15.612]      __var manuf = 0;
[03:25:15.612]        // -> [manuf <= 0x00000000]
[03:25:15.612]      __var isMSPM0G1X0X_G3X0X = 0;
[03:25:15.612]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:25:15.612]      __var isProduction = 0;
[03:25:15.612]        // -> [isProduction <= 0x00000000]
[03:25:15.612]      __var continueId = 0;
[03:25:15.612]        // -> [continueId <= 0x00000000]
[03:25:15.612]      deviceID =   Read32(0x41C40004);
[03:25:15.615]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:25:15.615]        // -> [deviceID <= 0x2BB8802F]
[03:25:15.615]      version = deviceID >> 28;
[03:25:15.615]        // -> [version <= 0x00000002]
[03:25:15.615]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:25:15.615]        // -> [partNum <= 0x0000BB88]
[03:25:15.615]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:25:15.615]        // -> [manuf <= 0x00000017]
[03:25:15.615]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:25:15.615]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:25:15.615]      isProduction = (version > 0);
[03:25:15.615]        // -> [isProduction <= 0x00000001]
[03:25:15.615]    </block>
[03:25:15.615]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:25:15.615]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:25:15.615]        // =>  FALSE
[03:25:15.615]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:25:15.615]    </control>
[03:25:15.615]    <control if="continueId == 4" while="" timeout="0" info="">
[03:25:15.615]      // if-block "continueId == 4"
[03:25:15.615]        // =>  FALSE
[03:25:15.615]      // skip if-block "continueId == 4"
[03:25:15.615]    </control>
[03:25:15.615]    <control if="!isProduction" while="" timeout="0" info="">
[03:25:15.620]      // if-block "!isProduction"
[03:25:15.620]        // =>  FALSE
[03:25:15.620]      // skip if-block "!isProduction"
[03:25:15.620]    </control>
[03:25:15.620]  </sequence>
[03:25:15.620]  
[03:26:11.985]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:11.985]  
[03:26:11.995]  <debugvars>
[03:26:11.995]    // Pre-defined
[03:26:11.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:11.995]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:11.995]    __dp=0x00000000
[03:26:11.995]    __ap=0x00000000
[03:26:11.995]    __traceout=0x00000000      (Trace Disabled)
[03:26:11.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:11.995]    __FlashAddr=0x00000000
[03:26:11.995]    __FlashLen=0x00000000
[03:26:11.995]    __FlashArg=0x00000000
[03:26:11.995]    __FlashOp=0x00000000
[03:26:11.995]    __Result=0x00000000
[03:26:11.995]  </debugvars>
[03:26:11.995]  
[03:26:11.995]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:11.995]    <block atomic="false" info="">
[03:26:11.995]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:11.995]        // -> [isSWJ <= 0x00000001]
[03:26:11.995]      __var hasDormant = __protocol & 0x00020000;
[03:26:11.995]        // -> [hasDormant <= 0x00000000]
[03:26:11.995]      __var protType   = __protocol & 0x0000FFFF;
[03:26:11.998]        // -> [protType <= 0x00000002]
[03:26:11.998]    </block>
[03:26:11.998]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:11.998]      // if-block "protType == 1"
[03:26:11.998]        // =>  FALSE
[03:26:11.998]      // skip if-block "protType == 1"
[03:26:11.998]    </control>
[03:26:11.998]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:11.998]      // if-block "protType == 2"
[03:26:11.998]        // =>  TRUE
[03:26:11.998]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:11.998]        // if-block "isSWJ"
[03:26:11.998]          // =>  TRUE
[03:26:11.998]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:11.998]          // if-block "hasDormant"
[03:26:11.998]            // =>  FALSE
[03:26:11.998]          // skip if-block "hasDormant"
[03:26:11.998]        </control>
[03:26:12.000]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.000]          // if-block "!hasDormant"
[03:26:12.000]            // =>  TRUE
[03:26:12.000]          <block atomic="false" info="">
[03:26:12.000]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.002]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.010]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.010]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.010]          </block>
[03:26:12.010]          // end if-block "!hasDormant"
[03:26:12.010]        </control>
[03:26:12.010]        // end if-block "isSWJ"
[03:26:12.010]      </control>
[03:26:12.010]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.010]        // if-block "!isSWJ"
[03:26:12.013]          // =>  FALSE
[03:26:12.013]        // skip if-block "!isSWJ"
[03:26:12.013]      </control>
[03:26:12.013]      <block atomic="false" info="">
[03:26:12.013]        ReadDP(0x0);
[03:26:12.014]  
[03:26:12.014]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.014]  
[03:26:12.014]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.014]      </block>
[03:26:12.014]      // end if-block "protType == 2"
[03:26:12.014]    </control>
[03:26:12.014]  </sequence>
[03:26:12.014]  
[03:26:12.072]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.072]  
[03:26:12.072]  <debugvars>
[03:26:12.072]    // Pre-defined
[03:26:12.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.072]    __dp=0x00000000
[03:26:12.072]    __ap=0x00000000
[03:26:12.072]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.072]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.072]    __FlashAddr=0x00000000
[03:26:12.072]    __FlashLen=0x00000000
[03:26:12.072]    __FlashArg=0x00000000
[03:26:12.072]    __FlashOp=0x00000000
[03:26:12.072]    __Result=0x00000000
[03:26:12.072]  </debugvars>
[03:26:12.072]  
[03:26:12.072]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.072]    <block atomic="false" info="">
[03:26:12.072]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.072]        // -> [isSWJ <= 0x00000001]
[03:26:12.072]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.072]        // -> [hasDormant <= 0x00000000]
[03:26:12.075]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.075]        // -> [protType <= 0x00000002]
[03:26:12.075]    </block>
[03:26:12.075]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.075]      // if-block "protType == 1"
[03:26:12.075]        // =>  FALSE
[03:26:12.075]      // skip if-block "protType == 1"
[03:26:12.075]    </control>
[03:26:12.075]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.075]      // if-block "protType == 2"
[03:26:12.075]        // =>  TRUE
[03:26:12.075]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.075]        // if-block "isSWJ"
[03:26:12.075]          // =>  TRUE
[03:26:12.075]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.075]          // if-block "hasDormant"
[03:26:12.075]            // =>  FALSE
[03:26:12.075]          // skip if-block "hasDormant"
[03:26:12.075]        </control>
[03:26:12.075]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.075]          // if-block "!hasDormant"
[03:26:12.075]            // =>  TRUE
[03:26:12.075]          <block atomic="false" info="">
[03:26:12.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.079]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.079]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.079]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.079]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.083]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.091]          </block>
[03:26:12.091]          // end if-block "!hasDormant"
[03:26:12.091]        </control>
[03:26:12.091]        // end if-block "isSWJ"
[03:26:12.091]      </control>
[03:26:12.091]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.091]        // if-block "!isSWJ"
[03:26:12.091]          // =>  FALSE
[03:26:12.091]        // skip if-block "!isSWJ"
[03:26:12.091]      </control>
[03:26:12.091]      <block atomic="false" info="">
[03:26:12.091]        ReadDP(0x0);
[03:26:12.091]  
[03:26:12.091]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.091]  
[03:26:12.091]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.091]      </block>
[03:26:12.095]      // end if-block "protType == 2"
[03:26:12.095]    </control>
[03:26:12.095]  </sequence>
[03:26:12.095]  
[03:26:12.148]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.148]  
[03:26:12.148]  <debugvars>
[03:26:12.148]    // Pre-defined
[03:26:12.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.148]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.148]    __dp=0x00000000
[03:26:12.148]    __ap=0x00000000
[03:26:12.148]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.148]    __FlashAddr=0x00000000
[03:26:12.148]    __FlashLen=0x00000000
[03:26:12.148]    __FlashArg=0x00000000
[03:26:12.148]    __FlashOp=0x00000000
[03:26:12.148]    __Result=0x00000000
[03:26:12.148]  </debugvars>
[03:26:12.148]  
[03:26:12.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.148]    <block atomic="false" info="">
[03:26:12.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.148]        // -> [isSWJ <= 0x00000001]
[03:26:12.148]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.148]        // -> [hasDormant <= 0x00000000]
[03:26:12.148]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.148]        // -> [protType <= 0x00000002]
[03:26:12.148]    </block>
[03:26:12.148]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.153]      // if-block "protType == 1"
[03:26:12.153]        // =>  FALSE
[03:26:12.153]      // skip if-block "protType == 1"
[03:26:12.153]    </control>
[03:26:12.153]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.153]      // if-block "protType == 2"
[03:26:12.153]        // =>  TRUE
[03:26:12.153]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.153]        // if-block "isSWJ"
[03:26:12.153]          // =>  TRUE
[03:26:12.153]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.153]          // if-block "hasDormant"
[03:26:12.153]            // =>  FALSE
[03:26:12.153]          // skip if-block "hasDormant"
[03:26:12.153]        </control>
[03:26:12.153]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.153]          // if-block "!hasDormant"
[03:26:12.153]            // =>  TRUE
[03:26:12.153]          <block atomic="false" info="">
[03:26:12.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.157]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.161]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.161]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.165]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.165]          </block>
[03:26:12.165]          // end if-block "!hasDormant"
[03:26:12.165]        </control>
[03:26:12.165]        // end if-block "isSWJ"
[03:26:12.165]      </control>
[03:26:12.165]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.165]        // if-block "!isSWJ"
[03:26:12.165]          // =>  FALSE
[03:26:12.165]        // skip if-block "!isSWJ"
[03:26:12.165]      </control>
[03:26:12.165]      <block atomic="false" info="">
[03:26:12.169]        ReadDP(0x0);
[03:26:12.169]  
[03:26:12.169]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.169]  
[03:26:12.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.169]      </block>
[03:26:12.169]      // end if-block "protType == 2"
[03:26:12.169]    </control>
[03:26:12.169]  </sequence>
[03:26:12.169]  
[03:26:12.222]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.222]  
[03:26:12.222]  <debugvars>
[03:26:12.224]    // Pre-defined
[03:26:12.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.224]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.224]    __dp=0x00000000
[03:26:12.224]    __ap=0x00000000
[03:26:12.224]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.224]    __FlashAddr=0x00000000
[03:26:12.224]    __FlashLen=0x00000000
[03:26:12.224]    __FlashArg=0x00000000
[03:26:12.224]    __FlashOp=0x00000000
[03:26:12.224]    __Result=0x00000000
[03:26:12.224]  </debugvars>
[03:26:12.224]  
[03:26:12.224]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.224]    <block atomic="false" info="">
[03:26:12.224]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.224]        // -> [isSWJ <= 0x00000001]
[03:26:12.224]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.224]        // -> [hasDormant <= 0x00000000]
[03:26:12.224]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.227]        // -> [protType <= 0x00000002]
[03:26:12.227]    </block>
[03:26:12.227]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.227]      // if-block "protType == 1"
[03:26:12.227]        // =>  FALSE
[03:26:12.227]      // skip if-block "protType == 1"
[03:26:12.227]    </control>
[03:26:12.227]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.227]      // if-block "protType == 2"
[03:26:12.227]        // =>  TRUE
[03:26:12.227]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.227]        // if-block "isSWJ"
[03:26:12.227]          // =>  TRUE
[03:26:12.227]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.227]          // if-block "hasDormant"
[03:26:12.227]            // =>  FALSE
[03:26:12.227]          // skip if-block "hasDormant"
[03:26:12.227]        </control>
[03:26:12.227]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.227]          // if-block "!hasDormant"
[03:26:12.227]            // =>  TRUE
[03:26:12.227]          <block atomic="false" info="">
[03:26:12.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.231]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.231]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.235]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.239]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.239]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.243]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.243]          </block>
[03:26:12.243]          // end if-block "!hasDormant"
[03:26:12.243]        </control>
[03:26:12.243]        // end if-block "isSWJ"
[03:26:12.243]      </control>
[03:26:12.243]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.243]        // if-block "!isSWJ"
[03:26:12.243]          // =>  FALSE
[03:26:12.243]        // skip if-block "!isSWJ"
[03:26:12.243]      </control>
[03:26:12.243]      <block atomic="false" info="">
[03:26:12.243]        ReadDP(0x0);
[03:26:12.243]  
[03:26:12.243]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.243]  
[03:26:12.243]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.243]      </block>
[03:26:12.247]      // end if-block "protType == 2"
[03:26:12.247]    </control>
[03:26:12.247]  </sequence>
[03:26:12.247]  
[03:26:12.308]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.308]  
[03:26:12.308]  <debugvars>
[03:26:12.308]    // Pre-defined
[03:26:12.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.308]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.308]    __dp=0x00000000
[03:26:12.308]    __ap=0x00000000
[03:26:12.308]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.308]    __FlashAddr=0x00000000
[03:26:12.308]    __FlashLen=0x00000000
[03:26:12.308]    __FlashArg=0x00000000
[03:26:12.308]    __FlashOp=0x00000000
[03:26:12.308]    __Result=0x00000000
[03:26:12.308]  </debugvars>
[03:26:12.308]  
[03:26:12.308]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.308]    <block atomic="false" info="">
[03:26:12.308]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.308]        // -> [isSWJ <= 0x00000001]
[03:26:12.308]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.308]        // -> [hasDormant <= 0x00000000]
[03:26:12.308]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.308]        // -> [protType <= 0x00000002]
[03:26:12.308]    </block>
[03:26:12.308]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.308]      // if-block "protType == 1"
[03:26:12.308]        // =>  FALSE
[03:26:12.308]      // skip if-block "protType == 1"
[03:26:12.308]    </control>
[03:26:12.308]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.312]      // if-block "protType == 2"
[03:26:12.312]        // =>  TRUE
[03:26:12.312]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.312]        // if-block "isSWJ"
[03:26:12.312]          // =>  TRUE
[03:26:12.312]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.312]          // if-block "hasDormant"
[03:26:12.312]            // =>  FALSE
[03:26:12.312]          // skip if-block "hasDormant"
[03:26:12.312]        </control>
[03:26:12.312]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.312]          // if-block "!hasDormant"
[03:26:12.312]            // =>  TRUE
[03:26:12.312]          <block atomic="false" info="">
[03:26:12.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.312]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.312]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.316]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.322]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.322]          </block>
[03:26:12.322]          // end if-block "!hasDormant"
[03:26:12.322]        </control>
[03:26:12.322]        // end if-block "isSWJ"
[03:26:12.322]      </control>
[03:26:12.322]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.322]        // if-block "!isSWJ"
[03:26:12.322]          // =>  FALSE
[03:26:12.322]        // skip if-block "!isSWJ"
[03:26:12.322]      </control>
[03:26:12.324]      <block atomic="false" info="">
[03:26:12.324]        ReadDP(0x0);
[03:26:12.324]  
[03:26:12.324]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.324]  
[03:26:12.324]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.324]      </block>
[03:26:12.324]      // end if-block "protType == 2"
[03:26:12.324]    </control>
[03:26:12.324]  </sequence>
[03:26:12.324]  
[03:26:12.381]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.381]  
[03:26:12.381]  <debugvars>
[03:26:12.381]    // Pre-defined
[03:26:12.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.381]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.381]    __dp=0x00000000
[03:26:12.381]    __ap=0x00000000
[03:26:12.381]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.381]    __FlashAddr=0x00000000
[03:26:12.381]    __FlashLen=0x00000000
[03:26:12.381]    __FlashArg=0x00000000
[03:26:12.381]    __FlashOp=0x00000000
[03:26:12.381]    __Result=0x00000000
[03:26:12.381]  </debugvars>
[03:26:12.381]  
[03:26:12.381]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.381]    <block atomic="false" info="">
[03:26:12.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.381]        // -> [isSWJ <= 0x00000001]
[03:26:12.381]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.381]        // -> [hasDormant <= 0x00000000]
[03:26:12.381]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.381]        // -> [protType <= 0x00000002]
[03:26:12.381]    </block>
[03:26:12.381]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.381]      // if-block "protType == 1"
[03:26:12.381]        // =>  FALSE
[03:26:12.381]      // skip if-block "protType == 1"
[03:26:12.381]    </control>
[03:26:12.381]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.381]      // if-block "protType == 2"
[03:26:12.381]        // =>  TRUE
[03:26:12.381]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.381]        // if-block "isSWJ"
[03:26:12.381]          // =>  TRUE
[03:26:12.385]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.385]          // if-block "hasDormant"
[03:26:12.385]            // =>  FALSE
[03:26:12.385]          // skip if-block "hasDormant"
[03:26:12.385]        </control>
[03:26:12.385]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.385]          // if-block "!hasDormant"
[03:26:12.385]            // =>  TRUE
[03:26:12.385]          <block atomic="false" info="">
[03:26:12.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.389]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.389]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.393]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.397]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.397]          </block>
[03:26:12.397]          // end if-block "!hasDormant"
[03:26:12.397]        </control>
[03:26:12.397]        // end if-block "isSWJ"
[03:26:12.397]      </control>
[03:26:12.397]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.397]        // if-block "!isSWJ"
[03:26:12.397]          // =>  FALSE
[03:26:12.397]        // skip if-block "!isSWJ"
[03:26:12.397]      </control>
[03:26:12.397]      <block atomic="false" info="">
[03:26:12.397]        ReadDP(0x0);
[03:26:12.397]  
[03:26:12.397]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.397]  
[03:26:12.397]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.397]      </block>
[03:26:12.397]      // end if-block "protType == 2"
[03:26:12.397]    </control>
[03:26:12.397]  </sequence>
[03:26:12.397]  
[03:26:12.453]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.453]  
[03:26:12.453]  <debugvars>
[03:26:12.453]    // Pre-defined
[03:26:12.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.453]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.453]    __dp=0x00000000
[03:26:12.453]    __ap=0x00000000
[03:26:12.453]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.453]    __FlashAddr=0x00000000
[03:26:12.453]    __FlashLen=0x00000000
[03:26:12.453]    __FlashArg=0x00000000
[03:26:12.453]    __FlashOp=0x00000000
[03:26:12.453]    __Result=0x00000000
[03:26:12.453]  </debugvars>
[03:26:12.453]  
[03:26:12.453]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.453]    <block atomic="false" info="">
[03:26:12.453]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.453]        // -> [isSWJ <= 0x00000001]
[03:26:12.453]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.453]        // -> [hasDormant <= 0x00000000]
[03:26:12.453]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.453]        // -> [protType <= 0x00000002]
[03:26:12.453]    </block>
[03:26:12.453]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.453]      // if-block "protType == 1"
[03:26:12.453]        // =>  FALSE
[03:26:12.453]      // skip if-block "protType == 1"
[03:26:12.453]    </control>
[03:26:12.453]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.453]      // if-block "protType == 2"
[03:26:12.453]        // =>  TRUE
[03:26:12.453]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.453]        // if-block "isSWJ"
[03:26:12.457]          // =>  TRUE
[03:26:12.457]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.457]          // if-block "hasDormant"
[03:26:12.457]            // =>  FALSE
[03:26:12.457]          // skip if-block "hasDormant"
[03:26:12.457]        </control>
[03:26:12.457]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.457]          // if-block "!hasDormant"
[03:26:12.457]            // =>  TRUE
[03:26:12.457]          <block atomic="false" info="">
[03:26:12.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.465]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.469]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.473]          </block>
[03:26:12.473]          // end if-block "!hasDormant"
[03:26:12.473]        </control>
[03:26:12.473]        // end if-block "isSWJ"
[03:26:12.473]      </control>
[03:26:12.473]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.473]        // if-block "!isSWJ"
[03:26:12.473]          // =>  FALSE
[03:26:12.473]        // skip if-block "!isSWJ"
[03:26:12.473]      </control>
[03:26:12.473]      <block atomic="false" info="">
[03:26:12.473]        ReadDP(0x0);
[03:26:12.477]  
[03:26:12.477]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.477]  
[03:26:12.477]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.477]      </block>
[03:26:12.477]      // end if-block "protType == 2"
[03:26:12.477]    </control>
[03:26:12.477]  </sequence>
[03:26:12.477]  
[03:26:12.537]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.537]  
[03:26:12.537]  <debugvars>
[03:26:12.537]    // Pre-defined
[03:26:12.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.537]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.537]    __dp=0x00000000
[03:26:12.537]    __ap=0x00000000
[03:26:12.537]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.537]    __FlashAddr=0x00000000
[03:26:12.537]    __FlashLen=0x00000000
[03:26:12.537]    __FlashArg=0x00000000
[03:26:12.537]    __FlashOp=0x00000000
[03:26:12.537]    __Result=0x00000000
[03:26:12.537]  </debugvars>
[03:26:12.537]  
[03:26:12.537]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.537]    <block atomic="false" info="">
[03:26:12.537]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.537]        // -> [isSWJ <= 0x00000001]
[03:26:12.541]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.541]        // -> [hasDormant <= 0x00000000]
[03:26:12.541]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.541]        // -> [protType <= 0x00000002]
[03:26:12.541]    </block>
[03:26:12.541]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.541]      // if-block "protType == 1"
[03:26:12.541]        // =>  FALSE
[03:26:12.541]      // skip if-block "protType == 1"
[03:26:12.541]    </control>
[03:26:12.541]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.541]      // if-block "protType == 2"
[03:26:12.541]        // =>  TRUE
[03:26:12.541]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.541]        // if-block "isSWJ"
[03:26:12.541]          // =>  TRUE
[03:26:12.541]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.541]          // if-block "hasDormant"
[03:26:12.541]            // =>  FALSE
[03:26:12.541]          // skip if-block "hasDormant"
[03:26:12.541]        </control>
[03:26:12.541]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.541]          // if-block "!hasDormant"
[03:26:12.541]            // =>  TRUE
[03:26:12.541]          <block atomic="false" info="">
[03:26:12.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.545]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.545]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.549]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.553]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.553]          </block>
[03:26:12.553]          // end if-block "!hasDormant"
[03:26:12.553]        </control>
[03:26:12.553]        // end if-block "isSWJ"
[03:26:12.553]      </control>
[03:26:12.553]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.553]        // if-block "!isSWJ"
[03:26:12.553]          // =>  FALSE
[03:26:12.553]        // skip if-block "!isSWJ"
[03:26:12.553]      </control>
[03:26:12.553]      <block atomic="false" info="">
[03:26:12.553]        ReadDP(0x0);
[03:26:12.557]  
[03:26:12.557]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.557]  
[03:26:12.557]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.561]      </block>
[03:26:12.561]      // end if-block "protType == 2"
[03:26:12.561]    </control>
[03:26:12.561]  </sequence>
[03:26:12.561]  
[03:26:12.621]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.621]  
[03:26:12.621]  <debugvars>
[03:26:12.621]    // Pre-defined
[03:26:12.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.621]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.621]    __dp=0x00000000
[03:26:12.621]    __ap=0x00000000
[03:26:12.621]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.621]    __FlashAddr=0x00000000
[03:26:12.621]    __FlashLen=0x00000000
[03:26:12.621]    __FlashArg=0x00000000
[03:26:12.621]    __FlashOp=0x00000000
[03:26:12.621]    __Result=0x00000000
[03:26:12.621]  </debugvars>
[03:26:12.621]  
[03:26:12.621]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.621]    <block atomic="false" info="">
[03:26:12.621]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.621]        // -> [isSWJ <= 0x00000001]
[03:26:12.621]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.621]        // -> [hasDormant <= 0x00000000]
[03:26:12.621]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.621]        // -> [protType <= 0x00000002]
[03:26:12.621]    </block>
[03:26:12.621]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.621]      // if-block "protType == 1"
[03:26:12.621]        // =>  FALSE
[03:26:12.621]      // skip if-block "protType == 1"
[03:26:12.621]    </control>
[03:26:12.621]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.621]      // if-block "protType == 2"
[03:26:12.621]        // =>  TRUE
[03:26:12.621]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.625]        // if-block "isSWJ"
[03:26:12.625]          // =>  TRUE
[03:26:12.625]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.625]          // if-block "hasDormant"
[03:26:12.625]            // =>  FALSE
[03:26:12.625]          // skip if-block "hasDormant"
[03:26:12.625]        </control>
[03:26:12.625]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.625]          // if-block "!hasDormant"
[03:26:12.625]            // =>  TRUE
[03:26:12.625]          <block atomic="false" info="">
[03:26:12.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.633]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.637]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.645]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.649]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.649]          </block>
[03:26:12.649]          // end if-block "!hasDormant"
[03:26:12.649]        </control>
[03:26:12.649]        // end if-block "isSWJ"
[03:26:12.649]      </control>
[03:26:12.649]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.649]        // if-block "!isSWJ"
[03:26:12.649]          // =>  FALSE
[03:26:12.649]        // skip if-block "!isSWJ"
[03:26:12.649]      </control>
[03:26:12.649]      <block atomic="false" info="">
[03:26:12.649]        ReadDP(0x0);
[03:26:12.649]  
[03:26:12.649]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.649]  
[03:26:12.649]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.649]      </block>
[03:26:12.649]      // end if-block "protType == 2"
[03:26:12.649]    </control>
[03:26:12.649]  </sequence>
[03:26:12.649]  
[03:26:12.706]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.706]  
[03:26:12.706]  <debugvars>
[03:26:12.706]    // Pre-defined
[03:26:12.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.706]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.706]    __dp=0x00000000
[03:26:12.706]    __ap=0x00000000
[03:26:12.706]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.706]    __FlashAddr=0x00000000
[03:26:12.706]    __FlashLen=0x00000000
[03:26:12.706]    __FlashArg=0x00000000
[03:26:12.706]    __FlashOp=0x00000000
[03:26:12.706]    __Result=0x00000000
[03:26:12.706]  </debugvars>
[03:26:12.706]  
[03:26:12.706]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.706]    <block atomic="false" info="">
[03:26:12.706]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.706]        // -> [isSWJ <= 0x00000001]
[03:26:12.706]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.706]        // -> [hasDormant <= 0x00000000]
[03:26:12.706]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.706]        // -> [protType <= 0x00000002]
[03:26:12.706]    </block>
[03:26:12.706]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.706]      // if-block "protType == 1"
[03:26:12.706]        // =>  FALSE
[03:26:12.706]      // skip if-block "protType == 1"
[03:26:12.706]    </control>
[03:26:12.706]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.706]      // if-block "protType == 2"
[03:26:12.706]        // =>  TRUE
[03:26:12.706]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.706]        // if-block "isSWJ"
[03:26:12.710]          // =>  TRUE
[03:26:12.710]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.710]          // if-block "hasDormant"
[03:26:12.710]            // =>  FALSE
[03:26:12.710]          // skip if-block "hasDormant"
[03:26:12.710]        </control>
[03:26:12.710]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.710]          // if-block "!hasDormant"
[03:26:12.710]            // =>  TRUE
[03:26:12.710]          <block atomic="false" info="">
[03:26:12.710]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.710]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.714]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.718]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.718]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.718]          </block>
[03:26:12.718]          // end if-block "!hasDormant"
[03:26:12.718]        </control>
[03:26:12.718]        // end if-block "isSWJ"
[03:26:12.718]      </control>
[03:26:12.718]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.718]        // if-block "!isSWJ"
[03:26:12.718]          // =>  FALSE
[03:26:12.718]        // skip if-block "!isSWJ"
[03:26:12.718]      </control>
[03:26:12.718]      <block atomic="false" info="">
[03:26:12.718]        ReadDP(0x0);
[03:26:12.722]  
[03:26:12.722]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.722]  
[03:26:12.722]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.722]      </block>
[03:26:12.722]      // end if-block "protType == 2"
[03:26:12.722]    </control>
[03:26:12.722]  </sequence>
[03:26:12.722]  
[03:26:12.778]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.778]  
[03:26:12.778]  <debugvars>
[03:26:12.778]    // Pre-defined
[03:26:12.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.778]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.778]    __dp=0x00000000
[03:26:12.778]    __ap=0x00000000
[03:26:12.778]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.778]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.778]    __FlashAddr=0x00000000
[03:26:12.778]    __FlashLen=0x00000000
[03:26:12.778]    __FlashArg=0x00000000
[03:26:12.778]    __FlashOp=0x00000000
[03:26:12.778]    __Result=0x00000000
[03:26:12.778]  </debugvars>
[03:26:12.778]  
[03:26:12.778]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.778]    <block atomic="false" info="">
[03:26:12.778]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.778]        // -> [isSWJ <= 0x00000001]
[03:26:12.778]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.778]        // -> [hasDormant <= 0x00000000]
[03:26:12.778]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.778]        // -> [protType <= 0x00000002]
[03:26:12.778]    </block>
[03:26:12.778]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.778]      // if-block "protType == 1"
[03:26:12.778]        // =>  FALSE
[03:26:12.778]      // skip if-block "protType == 1"
[03:26:12.782]    </control>
[03:26:12.782]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.782]      // if-block "protType == 2"
[03:26:12.782]        // =>  TRUE
[03:26:12.782]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.782]        // if-block "isSWJ"
[03:26:12.782]          // =>  TRUE
[03:26:12.782]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.782]          // if-block "hasDormant"
[03:26:12.782]            // =>  FALSE
[03:26:12.782]          // skip if-block "hasDormant"
[03:26:12.782]        </control>
[03:26:12.782]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.782]          // if-block "!hasDormant"
[03:26:12.782]            // =>  TRUE
[03:26:12.782]          <block atomic="false" info="">
[03:26:12.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.782]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.790]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.794]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.794]          </block>
[03:26:12.794]          // end if-block "!hasDormant"
[03:26:12.794]        </control>
[03:26:12.794]        // end if-block "isSWJ"
[03:26:12.794]      </control>
[03:26:12.794]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.794]        // if-block "!isSWJ"
[03:26:12.794]          // =>  FALSE
[03:26:12.794]        // skip if-block "!isSWJ"
[03:26:12.794]      </control>
[03:26:12.794]      <block atomic="false" info="">
[03:26:12.794]        ReadDP(0x0);
[03:26:12.798]  
[03:26:12.798]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.798]  
[03:26:12.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.798]      </block>
[03:26:12.798]      // end if-block "protType == 2"
[03:26:12.798]    </control>
[03:26:12.798]  </sequence>
[03:26:12.798]  
[03:26:12.850]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.850]  
[03:26:12.850]  <debugvars>
[03:26:12.850]    // Pre-defined
[03:26:12.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.852]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.852]    __dp=0x00000000
[03:26:12.852]    __ap=0x00000000
[03:26:12.852]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.853]    __FlashAddr=0x00000000
[03:26:12.853]    __FlashLen=0x00000000
[03:26:12.853]    __FlashArg=0x00000000
[03:26:12.853]    __FlashOp=0x00000000
[03:26:12.853]    __Result=0x00000000
[03:26:12.853]  </debugvars>
[03:26:12.853]  
[03:26:12.853]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.853]    <block atomic="false" info="">
[03:26:12.853]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.853]        // -> [isSWJ <= 0x00000001]
[03:26:12.853]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.853]        // -> [hasDormant <= 0x00000000]
[03:26:12.853]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.853]        // -> [protType <= 0x00000002]
[03:26:12.853]    </block>
[03:26:12.853]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.855]      // if-block "protType == 1"
[03:26:12.855]        // =>  FALSE
[03:26:12.855]      // skip if-block "protType == 1"
[03:26:12.855]    </control>
[03:26:12.855]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.855]      // if-block "protType == 2"
[03:26:12.855]        // =>  TRUE
[03:26:12.855]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.855]        // if-block "isSWJ"
[03:26:12.855]          // =>  TRUE
[03:26:12.855]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.855]          // if-block "hasDormant"
[03:26:12.855]            // =>  FALSE
[03:26:12.855]          // skip if-block "hasDormant"
[03:26:12.855]        </control>
[03:26:12.855]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.855]          // if-block "!hasDormant"
[03:26:12.855]            // =>  TRUE
[03:26:12.855]          <block atomic="false" info="">
[03:26:12.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.859]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.867]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.867]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.871]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.871]          </block>
[03:26:12.871]          // end if-block "!hasDormant"
[03:26:12.871]        </control>
[03:26:12.871]        // end if-block "isSWJ"
[03:26:12.871]      </control>
[03:26:12.871]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.871]        // if-block "!isSWJ"
[03:26:12.871]          // =>  FALSE
[03:26:12.871]        // skip if-block "!isSWJ"
[03:26:12.871]      </control>
[03:26:12.871]      <block atomic="false" info="">
[03:26:12.871]        ReadDP(0x0);
[03:26:12.875]  
[03:26:12.875]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.875]  
[03:26:12.875]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.875]      </block>
[03:26:12.875]      // end if-block "protType == 2"
[03:26:12.875]    </control>
[03:26:12.875]  </sequence>
[03:26:12.875]  
[03:26:12.935]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:12.935]  
[03:26:12.935]  <debugvars>
[03:26:12.935]    // Pre-defined
[03:26:12.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:12.935]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:12.935]    __dp=0x00000000
[03:26:12.935]    __ap=0x00000000
[03:26:12.935]    __traceout=0x00000000      (Trace Disabled)
[03:26:12.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:12.935]    __FlashAddr=0x00000000
[03:26:12.935]    __FlashLen=0x00000000
[03:26:12.935]    __FlashArg=0x00000000
[03:26:12.935]    __FlashOp=0x00000000
[03:26:12.935]    __Result=0x00000000
[03:26:12.935]  </debugvars>
[03:26:12.935]  
[03:26:12.935]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:12.935]    <block atomic="false" info="">
[03:26:12.935]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:12.935]        // -> [isSWJ <= 0x00000001]
[03:26:12.935]      __var hasDormant = __protocol & 0x00020000;
[03:26:12.935]        // -> [hasDormant <= 0x00000000]
[03:26:12.935]      __var protType   = __protocol & 0x0000FFFF;
[03:26:12.935]        // -> [protType <= 0x00000002]
[03:26:12.935]    </block>
[03:26:12.935]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:12.935]      // if-block "protType == 1"
[03:26:12.935]        // =>  FALSE
[03:26:12.935]      // skip if-block "protType == 1"
[03:26:12.939]    </control>
[03:26:12.939]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:12.939]      // if-block "protType == 2"
[03:26:12.939]        // =>  TRUE
[03:26:12.939]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:12.939]        // if-block "isSWJ"
[03:26:12.939]          // =>  TRUE
[03:26:12.939]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:12.939]          // if-block "hasDormant"
[03:26:12.939]            // =>  FALSE
[03:26:12.939]          // skip if-block "hasDormant"
[03:26:12.939]        </control>
[03:26:12.939]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:12.939]          // if-block "!hasDormant"
[03:26:12.939]            // =>  TRUE
[03:26:12.939]          <block atomic="false" info="">
[03:26:12.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:12.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.939]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:12.943]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:12.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:12.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.943]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:12.943]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:12.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:12.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:12.951]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:12.951]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:12.951]          </block>
[03:26:12.951]          // end if-block "!hasDormant"
[03:26:12.951]        </control>
[03:26:12.951]        // end if-block "isSWJ"
[03:26:12.951]      </control>
[03:26:12.951]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:12.951]        // if-block "!isSWJ"
[03:26:12.951]          // =>  FALSE
[03:26:12.951]        // skip if-block "!isSWJ"
[03:26:12.951]      </control>
[03:26:12.951]      <block atomic="false" info="">
[03:26:12.951]        ReadDP(0x0);
[03:26:12.955]  
[03:26:12.955]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:12.955]  
[03:26:12.955]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:12.955]      </block>
[03:26:12.955]      // end if-block "protType == 2"
[03:26:12.955]    </control>
[03:26:12.955]  </sequence>
[03:26:12.955]  
[03:26:13.008]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.008]  
[03:26:13.008]  <debugvars>
[03:26:13.008]    // Pre-defined
[03:26:13.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.009]    __dp=0x00000000
[03:26:13.009]    __ap=0x00000000
[03:26:13.009]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.009]    __FlashAddr=0x00000000
[03:26:13.009]    __FlashLen=0x00000000
[03:26:13.009]    __FlashArg=0x00000000
[03:26:13.009]    __FlashOp=0x00000000
[03:26:13.009]    __Result=0x00000000
[03:26:13.009]  </debugvars>
[03:26:13.009]  
[03:26:13.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.009]    <block atomic="false" info="">
[03:26:13.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.009]        // -> [isSWJ <= 0x00000001]
[03:26:13.009]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.011]        // -> [hasDormant <= 0x00000000]
[03:26:13.011]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.011]        // -> [protType <= 0x00000002]
[03:26:13.011]    </block>
[03:26:13.011]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.011]      // if-block "protType == 1"
[03:26:13.011]        // =>  FALSE
[03:26:13.011]      // skip if-block "protType == 1"
[03:26:13.011]    </control>
[03:26:13.011]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.011]      // if-block "protType == 2"
[03:26:13.011]        // =>  TRUE
[03:26:13.011]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.011]        // if-block "isSWJ"
[03:26:13.011]          // =>  TRUE
[03:26:13.011]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.011]          // if-block "hasDormant"
[03:26:13.011]            // =>  FALSE
[03:26:13.011]          // skip if-block "hasDormant"
[03:26:13.011]        </control>
[03:26:13.011]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.011]          // if-block "!hasDormant"
[03:26:13.011]            // =>  TRUE
[03:26:13.011]          <block atomic="false" info="">
[03:26:13.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.015]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.015]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.023]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.027]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.027]          </block>
[03:26:13.027]          // end if-block "!hasDormant"
[03:26:13.027]        </control>
[03:26:13.027]        // end if-block "isSWJ"
[03:26:13.027]      </control>
[03:26:13.027]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.027]        // if-block "!isSWJ"
[03:26:13.031]          // =>  FALSE
[03:26:13.031]        // skip if-block "!isSWJ"
[03:26:13.031]      </control>
[03:26:13.031]      <block atomic="false" info="">
[03:26:13.031]        ReadDP(0x0);
[03:26:13.031]  
[03:26:13.031]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.031]  
[03:26:13.031]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.031]      </block>
[03:26:13.031]      // end if-block "protType == 2"
[03:26:13.031]    </control>
[03:26:13.031]  </sequence>
[03:26:13.031]  
[03:26:13.086]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.086]  
[03:26:13.086]  <debugvars>
[03:26:13.086]    // Pre-defined
[03:26:13.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.086]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.086]    __dp=0x00000000
[03:26:13.086]    __ap=0x00000000
[03:26:13.086]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.086]    __FlashAddr=0x00000000
[03:26:13.086]    __FlashLen=0x00000000
[03:26:13.086]    __FlashArg=0x00000000
[03:26:13.086]    __FlashOp=0x00000000
[03:26:13.086]    __Result=0x00000000
[03:26:13.086]  </debugvars>
[03:26:13.088]  
[03:26:13.088]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.088]    <block atomic="false" info="">
[03:26:13.088]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.088]        // -> [isSWJ <= 0x00000001]
[03:26:13.088]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.088]        // -> [hasDormant <= 0x00000000]
[03:26:13.088]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.088]        // -> [protType <= 0x00000002]
[03:26:13.089]    </block>
[03:26:13.089]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.089]      // if-block "protType == 1"
[03:26:13.089]        // =>  FALSE
[03:26:13.089]      // skip if-block "protType == 1"
[03:26:13.089]    </control>
[03:26:13.089]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.089]      // if-block "protType == 2"
[03:26:13.089]        // =>  TRUE
[03:26:13.089]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.089]        // if-block "isSWJ"
[03:26:13.089]          // =>  TRUE
[03:26:13.089]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.091]          // if-block "hasDormant"
[03:26:13.091]            // =>  FALSE
[03:26:13.091]          // skip if-block "hasDormant"
[03:26:13.091]        </control>
[03:26:13.091]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.091]          // if-block "!hasDormant"
[03:26:13.091]            // =>  TRUE
[03:26:13.091]          <block atomic="false" info="">
[03:26:13.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.094]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.098]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.103]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.107]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.107]          </block>
[03:26:13.107]          // end if-block "!hasDormant"
[03:26:13.107]        </control>
[03:26:13.107]        // end if-block "isSWJ"
[03:26:13.107]      </control>
[03:26:13.107]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.107]        // if-block "!isSWJ"
[03:26:13.107]          // =>  FALSE
[03:26:13.107]        // skip if-block "!isSWJ"
[03:26:13.107]      </control>
[03:26:13.107]      <block atomic="false" info="">
[03:26:13.107]        ReadDP(0x0);
[03:26:13.110]  
[03:26:13.110]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.110]  
[03:26:13.110]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.110]      </block>
[03:26:13.110]      // end if-block "protType == 2"
[03:26:13.110]    </control>
[03:26:13.110]  </sequence>
[03:26:13.110]  
[03:26:13.171]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.171]  
[03:26:13.171]  <debugvars>
[03:26:13.171]    // Pre-defined
[03:26:13.171]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.171]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.171]    __dp=0x00000000
[03:26:13.171]    __ap=0x00000000
[03:26:13.171]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.171]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.171]    __FlashAddr=0x00000000
[03:26:13.171]    __FlashLen=0x00000000
[03:26:13.171]    __FlashArg=0x00000000
[03:26:13.171]    __FlashOp=0x00000000
[03:26:13.171]    __Result=0x00000000
[03:26:13.171]  </debugvars>
[03:26:13.171]  
[03:26:13.171]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.171]    <block atomic="false" info="">
[03:26:13.171]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.171]        // -> [isSWJ <= 0x00000001]
[03:26:13.171]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.171]        // -> [hasDormant <= 0x00000000]
[03:26:13.171]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.171]        // -> [protType <= 0x00000002]
[03:26:13.171]    </block>
[03:26:13.171]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.171]      // if-block "protType == 1"
[03:26:13.171]        // =>  FALSE
[03:26:13.171]      // skip if-block "protType == 1"
[03:26:13.171]    </control>
[03:26:13.175]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.175]      // if-block "protType == 2"
[03:26:13.175]        // =>  TRUE
[03:26:13.175]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.175]        // if-block "isSWJ"
[03:26:13.175]          // =>  TRUE
[03:26:13.175]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.175]          // if-block "hasDormant"
[03:26:13.175]            // =>  FALSE
[03:26:13.175]          // skip if-block "hasDormant"
[03:26:13.175]        </control>
[03:26:13.175]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.175]          // if-block "!hasDormant"
[03:26:13.175]            // =>  TRUE
[03:26:13.175]          <block atomic="false" info="">
[03:26:13.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.175]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.183]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.187]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.187]          </block>
[03:26:13.187]          // end if-block "!hasDormant"
[03:26:13.187]        </control>
[03:26:13.187]        // end if-block "isSWJ"
[03:26:13.187]      </control>
[03:26:13.187]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.187]        // if-block "!isSWJ"
[03:26:13.187]          // =>  FALSE
[03:26:13.187]        // skip if-block "!isSWJ"
[03:26:13.187]      </control>
[03:26:13.187]      <block atomic="false" info="">
[03:26:13.187]        ReadDP(0x0);
[03:26:13.191]  
[03:26:13.191]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.191]  
[03:26:13.191]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.191]      </block>
[03:26:13.191]      // end if-block "protType == 2"
[03:26:13.191]    </control>
[03:26:13.191]  </sequence>
[03:26:13.191]  
[03:26:13.243]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.243]  
[03:26:13.243]  <debugvars>
[03:26:13.243]    // Pre-defined
[03:26:13.243]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.243]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.243]    __dp=0x00000000
[03:26:13.243]    __ap=0x00000000
[03:26:13.243]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.245]    __FlashAddr=0x00000000
[03:26:13.245]    __FlashLen=0x00000000
[03:26:13.245]    __FlashArg=0x00000000
[03:26:13.245]    __FlashOp=0x00000000
[03:26:13.245]    __Result=0x00000000
[03:26:13.245]  </debugvars>
[03:26:13.245]  
[03:26:13.245]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.245]    <block atomic="false" info="">
[03:26:13.245]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.245]        // -> [isSWJ <= 0x00000001]
[03:26:13.245]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.245]        // -> [hasDormant <= 0x00000000]
[03:26:13.245]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.245]        // -> [protType <= 0x00000002]
[03:26:13.247]    </block>
[03:26:13.247]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.247]      // if-block "protType == 1"
[03:26:13.247]        // =>  FALSE
[03:26:13.247]      // skip if-block "protType == 1"
[03:26:13.247]    </control>
[03:26:13.247]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.247]      // if-block "protType == 2"
[03:26:13.247]        // =>  TRUE
[03:26:13.247]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.247]        // if-block "isSWJ"
[03:26:13.247]          // =>  TRUE
[03:26:13.247]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.247]          // if-block "hasDormant"
[03:26:13.247]            // =>  FALSE
[03:26:13.247]          // skip if-block "hasDormant"
[03:26:13.247]        </control>
[03:26:13.247]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.247]          // if-block "!hasDormant"
[03:26:13.247]            // =>  TRUE
[03:26:13.247]          <block atomic="false" info="">
[03:26:13.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.258]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.259]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.267]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.267]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.267]          </block>
[03:26:13.267]          // end if-block "!hasDormant"
[03:26:13.267]        </control>
[03:26:13.267]        // end if-block "isSWJ"
[03:26:13.267]      </control>
[03:26:13.267]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.267]        // if-block "!isSWJ"
[03:26:13.267]          // =>  FALSE
[03:26:13.267]        // skip if-block "!isSWJ"
[03:26:13.267]      </control>
[03:26:13.267]      <block atomic="false" info="">
[03:26:13.267]        ReadDP(0x0);
[03:26:13.271]  
[03:26:13.271]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.271]  
[03:26:13.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.271]      </block>
[03:26:13.271]      // end if-block "protType == 2"
[03:26:13.271]    </control>
[03:26:13.275]  </sequence>
[03:26:13.275]  
[03:26:13.328]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.328]  
[03:26:13.328]  <debugvars>
[03:26:13.328]    // Pre-defined
[03:26:13.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.328]    __dp=0x00000000
[03:26:13.328]    __ap=0x00000000
[03:26:13.328]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.328]    __FlashAddr=0x00000000
[03:26:13.328]    __FlashLen=0x00000000
[03:26:13.328]    __FlashArg=0x00000000
[03:26:13.328]    __FlashOp=0x00000000
[03:26:13.328]    __Result=0x00000000
[03:26:13.328]  </debugvars>
[03:26:13.328]  
[03:26:13.328]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.328]    <block atomic="false" info="">
[03:26:13.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.328]        // -> [isSWJ <= 0x00000001]
[03:26:13.328]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.328]        // -> [hasDormant <= 0x00000000]
[03:26:13.328]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.328]        // -> [protType <= 0x00000002]
[03:26:13.328]    </block>
[03:26:13.328]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.328]      // if-block "protType == 1"
[03:26:13.328]        // =>  FALSE
[03:26:13.328]      // skip if-block "protType == 1"
[03:26:13.328]    </control>
[03:26:13.328]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.328]      // if-block "protType == 2"
[03:26:13.328]        // =>  TRUE
[03:26:13.328]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.332]        // if-block "isSWJ"
[03:26:13.332]          // =>  TRUE
[03:26:13.332]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.332]          // if-block "hasDormant"
[03:26:13.332]            // =>  FALSE
[03:26:13.332]          // skip if-block "hasDormant"
[03:26:13.332]        </control>
[03:26:13.332]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.332]          // if-block "!hasDormant"
[03:26:13.332]            // =>  TRUE
[03:26:13.332]          <block atomic="false" info="">
[03:26:13.332]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.340]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.340]          </block>
[03:26:13.340]          // end if-block "!hasDormant"
[03:26:13.340]        </control>
[03:26:13.340]        // end if-block "isSWJ"
[03:26:13.340]      </control>
[03:26:13.340]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.340]        // if-block "!isSWJ"
[03:26:13.340]          // =>  FALSE
[03:26:13.340]        // skip if-block "!isSWJ"
[03:26:13.340]      </control>
[03:26:13.340]      <block atomic="false" info="">
[03:26:13.340]        ReadDP(0x0);
[03:26:13.344]  
[03:26:13.344]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.344]  
[03:26:13.344]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.344]      </block>
[03:26:13.344]      // end if-block "protType == 2"
[03:26:13.344]    </control>
[03:26:13.344]  </sequence>
[03:26:13.344]  
[03:26:13.400]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.400]  
[03:26:13.400]  <debugvars>
[03:26:13.400]    // Pre-defined
[03:26:13.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.400]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.400]    __dp=0x00000000
[03:26:13.400]    __ap=0x00000000
[03:26:13.400]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.400]    __FlashAddr=0x00000000
[03:26:13.400]    __FlashLen=0x00000000
[03:26:13.400]    __FlashArg=0x00000000
[03:26:13.400]    __FlashOp=0x00000000
[03:26:13.400]    __Result=0x00000000
[03:26:13.400]  </debugvars>
[03:26:13.400]  
[03:26:13.400]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.400]    <block atomic="false" info="">
[03:26:13.400]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.400]        // -> [isSWJ <= 0x00000001]
[03:26:13.400]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.404]        // -> [hasDormant <= 0x00000000]
[03:26:13.404]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.404]        // -> [protType <= 0x00000002]
[03:26:13.404]    </block>
[03:26:13.404]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.404]      // if-block "protType == 1"
[03:26:13.404]        // =>  FALSE
[03:26:13.404]      // skip if-block "protType == 1"
[03:26:13.404]    </control>
[03:26:13.404]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.404]      // if-block "protType == 2"
[03:26:13.404]        // =>  TRUE
[03:26:13.404]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.404]        // if-block "isSWJ"
[03:26:13.404]          // =>  TRUE
[03:26:13.404]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.404]          // if-block "hasDormant"
[03:26:13.404]            // =>  FALSE
[03:26:13.404]          // skip if-block "hasDormant"
[03:26:13.404]        </control>
[03:26:13.404]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.404]          // if-block "!hasDormant"
[03:26:13.404]            // =>  TRUE
[03:26:13.404]          <block atomic="false" info="">
[03:26:13.404]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.408]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.408]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.412]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.412]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.416]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.416]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.416]          </block>
[03:26:13.416]          // end if-block "!hasDormant"
[03:26:13.416]        </control>
[03:26:13.416]        // end if-block "isSWJ"
[03:26:13.416]      </control>
[03:26:13.416]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.416]        // if-block "!isSWJ"
[03:26:13.416]          // =>  FALSE
[03:26:13.416]        // skip if-block "!isSWJ"
[03:26:13.416]      </control>
[03:26:13.416]      <block atomic="false" info="">
[03:26:13.416]        ReadDP(0x0);
[03:26:13.420]  
[03:26:13.420]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.420]  
[03:26:13.420]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.420]      </block>
[03:26:13.420]      // end if-block "protType == 2"
[03:26:13.420]    </control>
[03:26:13.420]  </sequence>
[03:26:13.420]  
[03:26:13.472]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.472]  
[03:26:13.472]  <debugvars>
[03:26:13.472]    // Pre-defined
[03:26:13.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.472]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.472]    __dp=0x00000000
[03:26:13.472]    __ap=0x00000000
[03:26:13.472]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.472]    __FlashAddr=0x00000000
[03:26:13.472]    __FlashLen=0x00000000
[03:26:13.472]    __FlashArg=0x00000000
[03:26:13.472]    __FlashOp=0x00000000
[03:26:13.472]    __Result=0x00000000
[03:26:13.472]  </debugvars>
[03:26:13.472]  
[03:26:13.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.472]    <block atomic="false" info="">
[03:26:13.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.472]        // -> [isSWJ <= 0x00000001]
[03:26:13.472]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.472]        // -> [hasDormant <= 0x00000000]
[03:26:13.472]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.472]        // -> [protType <= 0x00000002]
[03:26:13.472]    </block>
[03:26:13.472]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.472]      // if-block "protType == 1"
[03:26:13.472]        // =>  FALSE
[03:26:13.476]      // skip if-block "protType == 1"
[03:26:13.476]    </control>
[03:26:13.476]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.476]      // if-block "protType == 2"
[03:26:13.476]        // =>  TRUE
[03:26:13.476]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.476]        // if-block "isSWJ"
[03:26:13.476]          // =>  TRUE
[03:26:13.476]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.476]          // if-block "hasDormant"
[03:26:13.476]            // =>  FALSE
[03:26:13.476]          // skip if-block "hasDormant"
[03:26:13.476]        </control>
[03:26:13.476]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.476]          // if-block "!hasDormant"
[03:26:13.476]            // =>  TRUE
[03:26:13.476]          <block atomic="false" info="">
[03:26:13.476]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.476]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.480]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.480]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.484]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.484]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.488]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.492]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.492]          </block>
[03:26:13.492]          // end if-block "!hasDormant"
[03:26:13.492]        </control>
[03:26:13.492]        // end if-block "isSWJ"
[03:26:13.492]      </control>
[03:26:13.492]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.492]        // if-block "!isSWJ"
[03:26:13.492]          // =>  FALSE
[03:26:13.492]        // skip if-block "!isSWJ"
[03:26:13.492]      </control>
[03:26:13.492]      <block atomic="false" info="">
[03:26:13.492]        ReadDP(0x0);
[03:26:13.496]  
[03:26:13.496]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.496]  
[03:26:13.496]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.496]      </block>
[03:26:13.496]      // end if-block "protType == 2"
[03:26:13.496]    </control>
[03:26:13.496]  </sequence>
[03:26:13.496]  
[03:26:13.556]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.556]  
[03:26:13.556]  <debugvars>
[03:26:13.556]    // Pre-defined
[03:26:13.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.556]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.556]    __dp=0x00000000
[03:26:13.556]    __ap=0x00000000
[03:26:13.556]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.556]    __FlashAddr=0x00000000
[03:26:13.556]    __FlashLen=0x00000000
[03:26:13.556]    __FlashArg=0x00000000
[03:26:13.556]    __FlashOp=0x00000000
[03:26:13.556]    __Result=0x00000000
[03:26:13.556]  </debugvars>
[03:26:13.556]  
[03:26:13.556]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.556]    <block atomic="false" info="">
[03:26:13.556]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.556]        // -> [isSWJ <= 0x00000001]
[03:26:13.556]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.556]        // -> [hasDormant <= 0x00000000]
[03:26:13.556]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.556]        // -> [protType <= 0x00000002]
[03:26:13.556]    </block>
[03:26:13.556]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.556]      // if-block "protType == 1"
[03:26:13.556]        // =>  FALSE
[03:26:13.556]      // skip if-block "protType == 1"
[03:26:13.556]    </control>
[03:26:13.556]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.556]      // if-block "protType == 2"
[03:26:13.556]        // =>  TRUE
[03:26:13.556]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.560]        // if-block "isSWJ"
[03:26:13.560]          // =>  TRUE
[03:26:13.560]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.560]          // if-block "hasDormant"
[03:26:13.560]            // =>  FALSE
[03:26:13.560]          // skip if-block "hasDormant"
[03:26:13.560]        </control>
[03:26:13.560]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.560]          // if-block "!hasDormant"
[03:26:13.560]            // =>  TRUE
[03:26:13.560]          <block atomic="false" info="">
[03:26:13.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.560]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.564]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.576]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.576]          </block>
[03:26:13.576]          // end if-block "!hasDormant"
[03:26:13.576]        </control>
[03:26:13.576]        // end if-block "isSWJ"
[03:26:13.576]      </control>
[03:26:13.576]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.576]        // if-block "!isSWJ"
[03:26:13.576]          // =>  FALSE
[03:26:13.576]        // skip if-block "!isSWJ"
[03:26:13.576]      </control>
[03:26:13.576]      <block atomic="false" info="">
[03:26:13.576]        ReadDP(0x0);
[03:26:13.580]  
[03:26:13.580]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.580]  
[03:26:13.580]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.580]      </block>
[03:26:13.580]      // end if-block "protType == 2"
[03:26:13.580]    </control>
[03:26:13.580]  </sequence>
[03:26:13.580]  
[03:26:13.641]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.641]  
[03:26:13.641]  <debugvars>
[03:26:13.641]    // Pre-defined
[03:26:13.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.641]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.641]    __dp=0x00000000
[03:26:13.641]    __ap=0x00000000
[03:26:13.641]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.641]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.641]    __FlashAddr=0x00000000
[03:26:13.641]    __FlashLen=0x00000000
[03:26:13.641]    __FlashArg=0x00000000
[03:26:13.641]    __FlashOp=0x00000000
[03:26:13.641]    __Result=0x00000000
[03:26:13.641]  </debugvars>
[03:26:13.641]  
[03:26:13.641]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.641]    <block atomic="false" info="">
[03:26:13.641]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.641]        // -> [isSWJ <= 0x00000001]
[03:26:13.641]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.641]        // -> [hasDormant <= 0x00000000]
[03:26:13.641]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.641]        // -> [protType <= 0x00000002]
[03:26:13.641]    </block>
[03:26:13.641]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.641]      // if-block "protType == 1"
[03:26:13.641]        // =>  FALSE
[03:26:13.641]      // skip if-block "protType == 1"
[03:26:13.641]    </control>
[03:26:13.641]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.641]      // if-block "protType == 2"
[03:26:13.641]        // =>  TRUE
[03:26:13.641]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.641]        // if-block "isSWJ"
[03:26:13.641]          // =>  TRUE
[03:26:13.645]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.645]          // if-block "hasDormant"
[03:26:13.645]            // =>  FALSE
[03:26:13.645]          // skip if-block "hasDormant"
[03:26:13.645]        </control>
[03:26:13.645]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.645]          // if-block "!hasDormant"
[03:26:13.645]            // =>  TRUE
[03:26:13.645]          <block atomic="false" info="">
[03:26:13.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.645]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.653]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.657]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.657]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.661]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.661]          </block>
[03:26:13.661]          // end if-block "!hasDormant"
[03:26:13.661]        </control>
[03:26:13.661]        // end if-block "isSWJ"
[03:26:13.661]      </control>
[03:26:13.661]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.661]        // if-block "!isSWJ"
[03:26:13.661]          // =>  FALSE
[03:26:13.661]        // skip if-block "!isSWJ"
[03:26:13.661]      </control>
[03:26:13.661]      <block atomic="false" info="">
[03:26:13.661]        ReadDP(0x0);
[03:26:13.661]  
[03:26:13.661]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.661]  
[03:26:13.661]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.661]      </block>
[03:26:13.661]      // end if-block "protType == 2"
[03:26:13.661]    </control>
[03:26:13.661]  </sequence>
[03:26:13.661]  
[03:26:13.713]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.713]  
[03:26:13.713]  <debugvars>
[03:26:13.713]    // Pre-defined
[03:26:13.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.713]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.713]    __dp=0x00000000
[03:26:13.713]    __ap=0x00000000
[03:26:13.713]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.713]    __FlashAddr=0x00000000
[03:26:13.713]    __FlashLen=0x00000000
[03:26:13.713]    __FlashArg=0x00000000
[03:26:13.713]    __FlashOp=0x00000000
[03:26:13.713]    __Result=0x00000000
[03:26:13.713]  </debugvars>
[03:26:13.713]  
[03:26:13.713]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.713]    <block atomic="false" info="">
[03:26:13.713]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.713]        // -> [isSWJ <= 0x00000001]
[03:26:13.713]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.713]        // -> [hasDormant <= 0x00000000]
[03:26:13.713]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.713]        // -> [protType <= 0x00000002]
[03:26:13.713]    </block>
[03:26:13.713]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.713]      // if-block "protType == 1"
[03:26:13.713]        // =>  FALSE
[03:26:13.713]      // skip if-block "protType == 1"
[03:26:13.713]    </control>
[03:26:13.713]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.713]      // if-block "protType == 2"
[03:26:13.717]        // =>  TRUE
[03:26:13.717]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.717]        // if-block "isSWJ"
[03:26:13.717]          // =>  TRUE
[03:26:13.717]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.717]          // if-block "hasDormant"
[03:26:13.717]            // =>  FALSE
[03:26:13.717]          // skip if-block "hasDormant"
[03:26:13.717]        </control>
[03:26:13.717]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.717]          // if-block "!hasDormant"
[03:26:13.717]            // =>  TRUE
[03:26:13.717]          <block atomic="false" info="">
[03:26:13.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.721]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.721]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.721]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.721]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.725]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.725]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.725]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.729]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.729]          </block>
[03:26:13.729]          // end if-block "!hasDormant"
[03:26:13.729]        </control>
[03:26:13.729]        // end if-block "isSWJ"
[03:26:13.729]      </control>
[03:26:13.729]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.729]        // if-block "!isSWJ"
[03:26:13.729]          // =>  FALSE
[03:26:13.729]        // skip if-block "!isSWJ"
[03:26:13.729]      </control>
[03:26:13.729]      <block atomic="false" info="">
[03:26:13.729]        ReadDP(0x0);
[03:26:13.729]  
[03:26:13.729]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.729]  
[03:26:13.729]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.729]      </block>
[03:26:13.733]      // end if-block "protType == 2"
[03:26:13.733]    </control>
[03:26:13.733]  </sequence>
[03:26:13.733]  
[03:26:13.785]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.785]  
[03:26:13.785]  <debugvars>
[03:26:13.785]    // Pre-defined
[03:26:13.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.785]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.785]    __dp=0x00000000
[03:26:13.785]    __ap=0x00000000
[03:26:13.785]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.785]    __FlashAddr=0x00000000
[03:26:13.785]    __FlashLen=0x00000000
[03:26:13.785]    __FlashArg=0x00000000
[03:26:13.785]    __FlashOp=0x00000000
[03:26:13.787]    __Result=0x00000000
[03:26:13.787]  </debugvars>
[03:26:13.787]  
[03:26:13.787]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.787]    <block atomic="false" info="">
[03:26:13.787]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.788]        // -> [isSWJ <= 0x00000001]
[03:26:13.788]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.788]        // -> [hasDormant <= 0x00000000]
[03:26:13.788]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.788]        // -> [protType <= 0x00000002]
[03:26:13.788]    </block>
[03:26:13.788]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.788]      // if-block "protType == 1"
[03:26:13.788]        // =>  FALSE
[03:26:13.788]      // skip if-block "protType == 1"
[03:26:13.788]    </control>
[03:26:13.788]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.788]      // if-block "protType == 2"
[03:26:13.788]        // =>  TRUE
[03:26:13.789]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.789]        // if-block "isSWJ"
[03:26:13.790]          // =>  TRUE
[03:26:13.790]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.790]          // if-block "hasDormant"
[03:26:13.790]            // =>  FALSE
[03:26:13.790]          // skip if-block "hasDormant"
[03:26:13.790]        </control>
[03:26:13.790]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.790]          // if-block "!hasDormant"
[03:26:13.790]            // =>  TRUE
[03:26:13.790]          <block atomic="false" info="">
[03:26:13.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.792]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.797]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.798]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.798]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.798]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.801]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.801]          </block>
[03:26:13.801]          // end if-block "!hasDormant"
[03:26:13.801]        </control>
[03:26:13.801]        // end if-block "isSWJ"
[03:26:13.801]      </control>
[03:26:13.801]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.801]        // if-block "!isSWJ"
[03:26:13.801]          // =>  FALSE
[03:26:13.801]        // skip if-block "!isSWJ"
[03:26:13.801]      </control>
[03:26:13.803]      <block atomic="false" info="">
[03:26:13.803]        ReadDP(0x0);
[03:26:13.804]  
[03:26:13.804]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.804]  
[03:26:13.804]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.804]      </block>
[03:26:13.804]      // end if-block "protType == 2"
[03:26:13.804]    </control>
[03:26:13.806]  </sequence>
[03:26:13.806]  
[03:26:13.863]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.863]  
[03:26:13.863]  <debugvars>
[03:26:13.863]    // Pre-defined
[03:26:13.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.863]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.864]    __dp=0x00000000
[03:26:13.864]    __ap=0x00000000
[03:26:13.864]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.864]    __FlashAddr=0x00000000
[03:26:13.864]    __FlashLen=0x00000000
[03:26:13.864]    __FlashArg=0x00000000
[03:26:13.864]    __FlashOp=0x00000000
[03:26:13.864]    __Result=0x00000000
[03:26:13.864]  </debugvars>
[03:26:13.866]  
[03:26:13.866]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.866]    <block atomic="false" info="">
[03:26:13.866]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.866]        // -> [isSWJ <= 0x00000001]
[03:26:13.866]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.867]        // -> [hasDormant <= 0x00000000]
[03:26:13.867]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.867]        // -> [protType <= 0x00000002]
[03:26:13.867]    </block>
[03:26:13.867]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.867]      // if-block "protType == 1"
[03:26:13.867]        // =>  FALSE
[03:26:13.867]      // skip if-block "protType == 1"
[03:26:13.868]    </control>
[03:26:13.868]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.868]      // if-block "protType == 2"
[03:26:13.868]        // =>  TRUE
[03:26:13.868]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.868]        // if-block "isSWJ"
[03:26:13.868]          // =>  TRUE
[03:26:13.868]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.868]          // if-block "hasDormant"
[03:26:13.868]            // =>  FALSE
[03:26:13.868]          // skip if-block "hasDormant"
[03:26:13.868]        </control>
[03:26:13.868]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.868]          // if-block "!hasDormant"
[03:26:13.868]            // =>  TRUE
[03:26:13.868]          <block atomic="false" info="">
[03:26:13.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.873]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.875]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.879]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.879]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.879]          </block>
[03:26:13.879]          // end if-block "!hasDormant"
[03:26:13.879]        </control>
[03:26:13.879]        // end if-block "isSWJ"
[03:26:13.879]      </control>
[03:26:13.879]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.879]        // if-block "!isSWJ"
[03:26:13.879]          // =>  FALSE
[03:26:13.879]        // skip if-block "!isSWJ"
[03:26:13.882]      </control>
[03:26:13.882]      <block atomic="false" info="">
[03:26:13.882]        ReadDP(0x0);
[03:26:13.886]  
[03:26:13.886]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.886]  
[03:26:13.886]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.886]      </block>
[03:26:13.886]      // end if-block "protType == 2"
[03:26:13.886]    </control>
[03:26:13.886]  </sequence>
[03:26:13.886]  
[03:26:13.944]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:13.944]  
[03:26:13.944]  <debugvars>
[03:26:13.944]    // Pre-defined
[03:26:13.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:13.944]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:13.944]    __dp=0x00000000
[03:26:13.944]    __ap=0x00000000
[03:26:13.944]    __traceout=0x00000000      (Trace Disabled)
[03:26:13.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:13.944]    __FlashAddr=0x00000000
[03:26:13.944]    __FlashLen=0x00000000
[03:26:13.944]    __FlashArg=0x00000000
[03:26:13.944]    __FlashOp=0x00000000
[03:26:13.944]    __Result=0x00000000
[03:26:13.944]  </debugvars>
[03:26:13.944]  
[03:26:13.944]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:13.944]    <block atomic="false" info="">
[03:26:13.944]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:13.944]        // -> [isSWJ <= 0x00000001]
[03:26:13.944]      __var hasDormant = __protocol & 0x00020000;
[03:26:13.944]        // -> [hasDormant <= 0x00000000]
[03:26:13.944]      __var protType   = __protocol & 0x0000FFFF;
[03:26:13.944]        // -> [protType <= 0x00000002]
[03:26:13.944]    </block>
[03:26:13.944]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:13.944]      // if-block "protType == 1"
[03:26:13.944]        // =>  FALSE
[03:26:13.944]      // skip if-block "protType == 1"
[03:26:13.948]    </control>
[03:26:13.948]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:13.948]      // if-block "protType == 2"
[03:26:13.948]        // =>  TRUE
[03:26:13.948]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:13.948]        // if-block "isSWJ"
[03:26:13.948]          // =>  TRUE
[03:26:13.948]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:13.948]          // if-block "hasDormant"
[03:26:13.948]            // =>  FALSE
[03:26:13.948]          // skip if-block "hasDormant"
[03:26:13.948]        </control>
[03:26:13.948]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:13.948]          // if-block "!hasDormant"
[03:26:13.948]            // =>  TRUE
[03:26:13.948]          <block atomic="false" info="">
[03:26:13.948]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:13.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.948]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:13.956]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:13.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:13.958]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.958]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:13.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:13.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:13.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:13.960]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:13.960]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:13.960]          </block>
[03:26:13.960]          // end if-block "!hasDormant"
[03:26:13.960]        </control>
[03:26:13.960]        // end if-block "isSWJ"
[03:26:13.960]      </control>
[03:26:13.960]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:13.960]        // if-block "!isSWJ"
[03:26:13.960]          // =>  FALSE
[03:26:13.960]        // skip if-block "!isSWJ"
[03:26:13.964]      </control>
[03:26:13.964]      <block atomic="false" info="">
[03:26:13.964]        ReadDP(0x0);
[03:26:13.968]  
[03:26:13.968]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:13.968]  
[03:26:13.968]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:13.968]      </block>
[03:26:13.968]      // end if-block "protType == 2"
[03:26:13.968]    </control>
[03:26:13.968]  </sequence>
[03:26:13.968]  
[03:26:14.020]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.020]  
[03:26:14.020]  <debugvars>
[03:26:14.022]    // Pre-defined
[03:26:14.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.022]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.022]    __dp=0x00000000
[03:26:14.022]    __ap=0x00000000
[03:26:14.022]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.022]    __FlashAddr=0x00000000
[03:26:14.022]    __FlashLen=0x00000000
[03:26:14.022]    __FlashArg=0x00000000
[03:26:14.022]    __FlashOp=0x00000000
[03:26:14.022]    __Result=0x00000000
[03:26:14.022]  </debugvars>
[03:26:14.022]  
[03:26:14.022]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.023]    <block atomic="false" info="">
[03:26:14.023]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.023]        // -> [isSWJ <= 0x00000001]
[03:26:14.023]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.023]        // -> [hasDormant <= 0x00000000]
[03:26:14.024]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.024]        // -> [protType <= 0x00000002]
[03:26:14.024]    </block>
[03:26:14.024]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.024]      // if-block "protType == 1"
[03:26:14.024]        // =>  FALSE
[03:26:14.024]      // skip if-block "protType == 1"
[03:26:14.024]    </control>
[03:26:14.024]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.025]      // if-block "protType == 2"
[03:26:14.025]        // =>  TRUE
[03:26:14.025]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.025]        // if-block "isSWJ"
[03:26:14.025]          // =>  TRUE
[03:26:14.025]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.025]          // if-block "hasDormant"
[03:26:14.025]            // =>  FALSE
[03:26:14.025]          // skip if-block "hasDormant"
[03:26:14.025]        </control>
[03:26:14.025]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.025]          // if-block "!hasDormant"
[03:26:14.025]            // =>  TRUE
[03:26:14.025]          <block atomic="false" info="">
[03:26:14.025]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.027]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.029]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.033]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.036]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.037]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.037]          </block>
[03:26:14.037]          // end if-block "!hasDormant"
[03:26:14.037]        </control>
[03:26:14.037]        // end if-block "isSWJ"
[03:26:14.037]      </control>
[03:26:14.038]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.038]        // if-block "!isSWJ"
[03:26:14.038]          // =>  FALSE
[03:26:14.038]        // skip if-block "!isSWJ"
[03:26:14.038]      </control>
[03:26:14.038]      <block atomic="false" info="">
[03:26:14.038]        ReadDP(0x0);
[03:26:14.043]  
[03:26:14.043]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.043]  
[03:26:14.043]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.043]      </block>
[03:26:14.043]      // end if-block "protType == 2"
[03:26:14.043]    </control>
[03:26:14.043]  </sequence>
[03:26:14.043]  
[03:26:14.096]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.096]  
[03:26:14.096]  <debugvars>
[03:26:14.096]    // Pre-defined
[03:26:14.096]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.096]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.096]    __dp=0x00000000
[03:26:14.096]    __ap=0x00000000
[03:26:14.097]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.097]    __FlashAddr=0x00000000
[03:26:14.097]    __FlashLen=0x00000000
[03:26:14.097]    __FlashArg=0x00000000
[03:26:14.097]    __FlashOp=0x00000000
[03:26:14.097]    __Result=0x00000000
[03:26:14.097]  </debugvars>
[03:26:14.097]  
[03:26:14.097]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.097]    <block atomic="false" info="">
[03:26:14.097]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.097]        // -> [isSWJ <= 0x00000001]
[03:26:14.097]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.097]        // -> [hasDormant <= 0x00000000]
[03:26:14.097]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.097]        // -> [protType <= 0x00000002]
[03:26:14.097]    </block>
[03:26:14.097]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.097]      // if-block "protType == 1"
[03:26:14.097]        // =>  FALSE
[03:26:14.097]      // skip if-block "protType == 1"
[03:26:14.097]    </control>
[03:26:14.097]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.097]      // if-block "protType == 2"
[03:26:14.097]        // =>  TRUE
[03:26:14.100]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.100]        // if-block "isSWJ"
[03:26:14.100]          // =>  TRUE
[03:26:14.100]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.100]          // if-block "hasDormant"
[03:26:14.100]            // =>  FALSE
[03:26:14.100]          // skip if-block "hasDormant"
[03:26:14.100]        </control>
[03:26:14.100]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.100]          // if-block "!hasDormant"
[03:26:14.100]            // =>  TRUE
[03:26:14.100]          <block atomic="false" info="">
[03:26:14.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.104]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.112]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.122]          </block>
[03:26:14.122]          // end if-block "!hasDormant"
[03:26:14.122]        </control>
[03:26:14.122]        // end if-block "isSWJ"
[03:26:14.122]      </control>
[03:26:14.122]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.122]        // if-block "!isSWJ"
[03:26:14.124]          // =>  FALSE
[03:26:14.124]        // skip if-block "!isSWJ"
[03:26:14.124]      </control>
[03:26:14.124]      <block atomic="false" info="">
[03:26:14.124]        ReadDP(0x0);
[03:26:14.124]  
[03:26:14.124]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.124]  
[03:26:14.124]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.124]      </block>
[03:26:14.124]      // end if-block "protType == 2"
[03:26:14.124]    </control>
[03:26:14.124]  </sequence>
[03:26:14.124]  
[03:26:14.181]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.181]  
[03:26:14.181]  <debugvars>
[03:26:14.181]    // Pre-defined
[03:26:14.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.181]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.181]    __dp=0x00000000
[03:26:14.181]    __ap=0x00000000
[03:26:14.181]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.181]    __FlashAddr=0x00000000
[03:26:14.181]    __FlashLen=0x00000000
[03:26:14.181]    __FlashArg=0x00000000
[03:26:14.181]    __FlashOp=0x00000000
[03:26:14.181]    __Result=0x00000000
[03:26:14.181]  </debugvars>
[03:26:14.181]  
[03:26:14.181]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.181]    <block atomic="false" info="">
[03:26:14.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.183]        // -> [isSWJ <= 0x00000001]
[03:26:14.183]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.183]        // -> [hasDormant <= 0x00000000]
[03:26:14.183]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.183]        // -> [protType <= 0x00000002]
[03:26:14.183]    </block>
[03:26:14.183]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.183]      // if-block "protType == 1"
[03:26:14.183]        // =>  FALSE
[03:26:14.183]      // skip if-block "protType == 1"
[03:26:14.183]    </control>
[03:26:14.184]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.184]      // if-block "protType == 2"
[03:26:14.184]        // =>  TRUE
[03:26:14.184]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.184]        // if-block "isSWJ"
[03:26:14.184]          // =>  TRUE
[03:26:14.184]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.184]          // if-block "hasDormant"
[03:26:14.184]            // =>  FALSE
[03:26:14.185]          // skip if-block "hasDormant"
[03:26:14.185]        </control>
[03:26:14.185]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.185]          // if-block "!hasDormant"
[03:26:14.185]            // =>  TRUE
[03:26:14.185]          <block atomic="false" info="">
[03:26:14.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.187]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.190]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.194]          </block>
[03:26:14.194]          // end if-block "!hasDormant"
[03:26:14.194]        </control>
[03:26:14.194]        // end if-block "isSWJ"
[03:26:14.194]      </control>
[03:26:14.194]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.194]        // if-block "!isSWJ"
[03:26:14.194]          // =>  FALSE
[03:26:14.194]        // skip if-block "!isSWJ"
[03:26:14.194]      </control>
[03:26:14.194]      <block atomic="false" info="">
[03:26:14.194]        ReadDP(0x0);
[03:26:14.197]  
[03:26:14.197]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.197]  
[03:26:14.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.197]      </block>
[03:26:14.197]      // end if-block "protType == 2"
[03:26:14.197]    </control>
[03:26:14.197]  </sequence>
[03:26:14.197]  
[03:26:14.254]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.254]  
[03:26:14.254]  <debugvars>
[03:26:14.254]    // Pre-defined
[03:26:14.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.254]    __dp=0x00000000
[03:26:14.254]    __ap=0x00000000
[03:26:14.255]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.255]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.255]    __FlashAddr=0x00000000
[03:26:14.255]    __FlashLen=0x00000000
[03:26:14.255]    __FlashArg=0x00000000
[03:26:14.255]    __FlashOp=0x00000000
[03:26:14.255]    __Result=0x00000000
[03:26:14.255]  </debugvars>
[03:26:14.255]  
[03:26:14.255]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.257]    <block atomic="false" info="">
[03:26:14.257]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.257]        // -> [isSWJ <= 0x00000001]
[03:26:14.257]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.257]        // -> [hasDormant <= 0x00000000]
[03:26:14.257]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.257]        // -> [protType <= 0x00000002]
[03:26:14.257]    </block>
[03:26:14.257]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.257]      // if-block "protType == 1"
[03:26:14.257]        // =>  FALSE
[03:26:14.257]      // skip if-block "protType == 1"
[03:26:14.257]    </control>
[03:26:14.257]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.258]      // if-block "protType == 2"
[03:26:14.258]        // =>  TRUE
[03:26:14.258]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.258]        // if-block "isSWJ"
[03:26:14.258]          // =>  TRUE
[03:26:14.258]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.258]          // if-block "hasDormant"
[03:26:14.258]            // =>  FALSE
[03:26:14.258]          // skip if-block "hasDormant"
[03:26:14.258]        </control>
[03:26:14.259]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.259]          // if-block "!hasDormant"
[03:26:14.259]            // =>  TRUE
[03:26:14.259]          <block atomic="false" info="">
[03:26:14.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.260]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.263]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.266]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.267]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.268]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.268]          </block>
[03:26:14.268]          // end if-block "!hasDormant"
[03:26:14.268]        </control>
[03:26:14.268]        // end if-block "isSWJ"
[03:26:14.268]      </control>
[03:26:14.268]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.268]        // if-block "!isSWJ"
[03:26:14.268]          // =>  FALSE
[03:26:14.268]        // skip if-block "!isSWJ"
[03:26:14.268]      </control>
[03:26:14.268]      <block atomic="false" info="">
[03:26:14.268]        ReadDP(0x0);
[03:26:14.271]  
[03:26:14.271]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.271]  
[03:26:14.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.271]      </block>
[03:26:14.271]      // end if-block "protType == 2"
[03:26:14.271]    </control>
[03:26:14.271]  </sequence>
[03:26:14.271]  
[03:26:14.328]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.328]  
[03:26:14.328]  <debugvars>
[03:26:14.328]    // Pre-defined
[03:26:14.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.329]    __dp=0x00000000
[03:26:14.329]    __ap=0x00000000
[03:26:14.329]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.329]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.329]    __FlashAddr=0x00000000
[03:26:14.329]    __FlashLen=0x00000000
[03:26:14.329]    __FlashArg=0x00000000
[03:26:14.329]    __FlashOp=0x00000000
[03:26:14.329]    __Result=0x00000000
[03:26:14.329]  </debugvars>
[03:26:14.329]  
[03:26:14.330]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.330]    <block atomic="false" info="">
[03:26:14.330]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.330]        // -> [isSWJ <= 0x00000001]
[03:26:14.330]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.330]        // -> [hasDormant <= 0x00000000]
[03:26:14.330]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.330]        // -> [protType <= 0x00000002]
[03:26:14.330]    </block>
[03:26:14.330]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.330]      // if-block "protType == 1"
[03:26:14.331]        // =>  FALSE
[03:26:14.331]      // skip if-block "protType == 1"
[03:26:14.331]    </control>
[03:26:14.331]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.331]      // if-block "protType == 2"
[03:26:14.331]        // =>  TRUE
[03:26:14.331]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.331]        // if-block "isSWJ"
[03:26:14.331]          // =>  TRUE
[03:26:14.331]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.332]          // if-block "hasDormant"
[03:26:14.332]            // =>  FALSE
[03:26:14.332]          // skip if-block "hasDormant"
[03:26:14.332]        </control>
[03:26:14.332]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.332]          // if-block "!hasDormant"
[03:26:14.332]            // =>  TRUE
[03:26:14.332]          <block atomic="false" info="">
[03:26:14.332]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.336]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.340]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.341]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.341]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.341]          </block>
[03:26:14.341]          // end if-block "!hasDormant"
[03:26:14.345]        </control>
[03:26:14.345]        // end if-block "isSWJ"
[03:26:14.345]      </control>
[03:26:14.345]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.345]        // if-block "!isSWJ"
[03:26:14.345]          // =>  FALSE
[03:26:14.345]        // skip if-block "!isSWJ"
[03:26:14.345]      </control>
[03:26:14.345]      <block atomic="false" info="">
[03:26:14.345]        ReadDP(0x0);
[03:26:14.345]  
[03:26:14.345]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.345]  
[03:26:14.345]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.345]      </block>
[03:26:14.345]      // end if-block "protType == 2"
[03:26:14.345]    </control>
[03:26:14.345]  </sequence>
[03:26:14.345]  
[03:26:14.402]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.402]  
[03:26:14.404]  <debugvars>
[03:26:14.404]    // Pre-defined
[03:26:14.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.404]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.404]    __dp=0x00000000
[03:26:14.404]    __ap=0x00000000
[03:26:14.404]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.404]    __FlashAddr=0x00000000
[03:26:14.404]    __FlashLen=0x00000000
[03:26:14.404]    __FlashArg=0x00000000
[03:26:14.404]    __FlashOp=0x00000000
[03:26:14.404]    __Result=0x00000000
[03:26:14.404]  </debugvars>
[03:26:14.404]  
[03:26:14.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.404]    <block atomic="false" info="">
[03:26:14.404]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.404]        // -> [isSWJ <= 0x00000001]
[03:26:14.404]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.404]        // -> [hasDormant <= 0x00000000]
[03:26:14.406]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.406]        // -> [protType <= 0x00000002]
[03:26:14.406]    </block>
[03:26:14.406]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.406]      // if-block "protType == 1"
[03:26:14.406]        // =>  FALSE
[03:26:14.406]      // skip if-block "protType == 1"
[03:26:14.406]    </control>
[03:26:14.406]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.406]      // if-block "protType == 2"
[03:26:14.406]        // =>  TRUE
[03:26:14.406]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.406]        // if-block "isSWJ"
[03:26:14.406]          // =>  TRUE
[03:26:14.406]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.406]          // if-block "hasDormant"
[03:26:14.406]            // =>  FALSE
[03:26:14.406]          // skip if-block "hasDormant"
[03:26:14.406]        </control>
[03:26:14.406]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.406]          // if-block "!hasDormant"
[03:26:14.406]            // =>  TRUE
[03:26:14.406]          <block atomic="false" info="">
[03:26:14.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.410]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.410]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.410]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.414]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.416]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.418]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.418]          </block>
[03:26:14.418]          // end if-block "!hasDormant"
[03:26:14.418]        </control>
[03:26:14.418]        // end if-block "isSWJ"
[03:26:14.418]      </control>
[03:26:14.418]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.418]        // if-block "!isSWJ"
[03:26:14.418]          // =>  FALSE
[03:26:14.418]        // skip if-block "!isSWJ"
[03:26:14.418]      </control>
[03:26:14.418]      <block atomic="false" info="">
[03:26:14.418]        ReadDP(0x0);
[03:26:14.418]  
[03:26:14.418]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.418]  
[03:26:14.418]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.418]      </block>
[03:26:14.418]      // end if-block "protType == 2"
[03:26:14.422]    </control>
[03:26:14.422]  </sequence>
[03:26:14.422]  
[03:26:14.476]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.476]  
[03:26:14.476]  <debugvars>
[03:26:14.476]    // Pre-defined
[03:26:14.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.476]    __dp=0x00000000
[03:26:14.476]    __ap=0x00000000
[03:26:14.476]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.476]    __FlashAddr=0x00000000
[03:26:14.476]    __FlashLen=0x00000000
[03:26:14.476]    __FlashArg=0x00000000
[03:26:14.476]    __FlashOp=0x00000000
[03:26:14.476]    __Result=0x00000000
[03:26:14.476]  </debugvars>
[03:26:14.476]  
[03:26:14.476]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.476]    <block atomic="false" info="">
[03:26:14.476]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.476]        // -> [isSWJ <= 0x00000001]
[03:26:14.476]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.476]        // -> [hasDormant <= 0x00000000]
[03:26:14.476]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.476]        // -> [protType <= 0x00000002]
[03:26:14.480]    </block>
[03:26:14.480]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.480]      // if-block "protType == 1"
[03:26:14.480]        // =>  FALSE
[03:26:14.480]      // skip if-block "protType == 1"
[03:26:14.480]    </control>
[03:26:14.480]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.480]      // if-block "protType == 2"
[03:26:14.482]        // =>  TRUE
[03:26:14.482]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.482]        // if-block "isSWJ"
[03:26:14.482]          // =>  TRUE
[03:26:14.482]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.482]          // if-block "hasDormant"
[03:26:14.482]            // =>  FALSE
[03:26:14.482]          // skip if-block "hasDormant"
[03:26:14.482]        </control>
[03:26:14.482]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.482]          // if-block "!hasDormant"
[03:26:14.482]            // =>  TRUE
[03:26:14.482]          <block atomic="false" info="">
[03:26:14.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.484]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.484]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.492]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.493]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.494]          </block>
[03:26:14.494]          // end if-block "!hasDormant"
[03:26:14.494]        </control>
[03:26:14.494]        // end if-block "isSWJ"
[03:26:14.494]      </control>
[03:26:14.494]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.494]        // if-block "!isSWJ"
[03:26:14.494]          // =>  FALSE
[03:26:14.494]        // skip if-block "!isSWJ"
[03:26:14.494]      </control>
[03:26:14.495]      <block atomic="false" info="">
[03:26:14.495]        ReadDP(0x0);
[03:26:14.495]  
[03:26:14.495]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.495]  
[03:26:14.497]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.497]      </block>
[03:26:14.497]      // end if-block "protType == 2"
[03:26:14.497]    </control>
[03:26:14.497]  </sequence>
[03:26:14.497]  
[03:26:14.550]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.550]  
[03:26:14.550]  <debugvars>
[03:26:14.550]    // Pre-defined
[03:26:14.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.550]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.550]    __dp=0x00000000
[03:26:14.550]    __ap=0x00000000
[03:26:14.550]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.550]    __FlashAddr=0x00000000
[03:26:14.550]    __FlashLen=0x00000000
[03:26:14.550]    __FlashArg=0x00000000
[03:26:14.550]    __FlashOp=0x00000000
[03:26:14.550]    __Result=0x00000000
[03:26:14.550]  </debugvars>
[03:26:14.550]  
[03:26:14.550]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.550]    <block atomic="false" info="">
[03:26:14.550]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.550]        // -> [isSWJ <= 0x00000001]
[03:26:14.550]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.550]        // -> [hasDormant <= 0x00000000]
[03:26:14.550]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.554]        // -> [protType <= 0x00000002]
[03:26:14.554]    </block>
[03:26:14.554]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.554]      // if-block "protType == 1"
[03:26:14.554]        // =>  FALSE
[03:26:14.554]      // skip if-block "protType == 1"
[03:26:14.554]    </control>
[03:26:14.554]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.554]      // if-block "protType == 2"
[03:26:14.554]        // =>  TRUE
[03:26:14.554]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.554]        // if-block "isSWJ"
[03:26:14.554]          // =>  TRUE
[03:26:14.554]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.554]          // if-block "hasDormant"
[03:26:14.554]            // =>  FALSE
[03:26:14.554]          // skip if-block "hasDormant"
[03:26:14.554]        </control>
[03:26:14.554]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.554]          // if-block "!hasDormant"
[03:26:14.554]            // =>  TRUE
[03:26:14.554]          <block atomic="false" info="">
[03:26:14.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.558]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.562]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.574]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.574]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.574]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.574]          </block>
[03:26:14.574]          // end if-block "!hasDormant"
[03:26:14.574]        </control>
[03:26:14.578]        // end if-block "isSWJ"
[03:26:14.578]      </control>
[03:26:14.578]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.578]        // if-block "!isSWJ"
[03:26:14.578]          // =>  FALSE
[03:26:14.578]        // skip if-block "!isSWJ"
[03:26:14.578]      </control>
[03:26:14.578]      <block atomic="false" info="">
[03:26:14.578]        ReadDP(0x0);
[03:26:14.578]  
[03:26:14.578]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.578]  
[03:26:14.578]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.578]      </block>
[03:26:14.578]      // end if-block "protType == 2"
[03:26:14.578]    </control>
[03:26:14.578]  </sequence>
[03:26:14.578]  
[03:26:14.634]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.634]  
[03:26:14.634]  <debugvars>
[03:26:14.634]    // Pre-defined
[03:26:14.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.634]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.634]    __dp=0x00000000
[03:26:14.634]    __ap=0x00000000
[03:26:14.634]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.634]    __FlashAddr=0x00000000
[03:26:14.634]    __FlashLen=0x00000000
[03:26:14.634]    __FlashArg=0x00000000
[03:26:14.634]    __FlashOp=0x00000000
[03:26:14.634]    __Result=0x00000000
[03:26:14.634]  </debugvars>
[03:26:14.634]  
[03:26:14.634]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.634]    <block atomic="false" info="">
[03:26:14.634]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.634]        // -> [isSWJ <= 0x00000001]
[03:26:14.634]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.634]        // -> [hasDormant <= 0x00000000]
[03:26:14.634]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.638]        // -> [protType <= 0x00000002]
[03:26:14.638]    </block>
[03:26:14.638]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.638]      // if-block "protType == 1"
[03:26:14.638]        // =>  FALSE
[03:26:14.638]      // skip if-block "protType == 1"
[03:26:14.638]    </control>
[03:26:14.638]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.638]      // if-block "protType == 2"
[03:26:14.638]        // =>  TRUE
[03:26:14.638]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.638]        // if-block "isSWJ"
[03:26:14.638]          // =>  TRUE
[03:26:14.638]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.638]          // if-block "hasDormant"
[03:26:14.638]            // =>  FALSE
[03:26:14.638]          // skip if-block "hasDormant"
[03:26:14.638]        </control>
[03:26:14.638]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.638]          // if-block "!hasDormant"
[03:26:14.638]            // =>  TRUE
[03:26:14.638]          <block atomic="false" info="">
[03:26:14.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.642]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.642]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.642]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.642]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.646]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.646]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.646]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.650]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.650]          </block>
[03:26:14.650]          // end if-block "!hasDormant"
[03:26:14.650]        </control>
[03:26:14.650]        // end if-block "isSWJ"
[03:26:14.650]      </control>
[03:26:14.650]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.650]        // if-block "!isSWJ"
[03:26:14.650]          // =>  FALSE
[03:26:14.650]        // skip if-block "!isSWJ"
[03:26:14.650]      </control>
[03:26:14.650]      <block atomic="false" info="">
[03:26:14.650]        ReadDP(0x0);
[03:26:14.650]  
[03:26:14.650]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.650]  
[03:26:14.650]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.650]      </block>
[03:26:14.654]      // end if-block "protType == 2"
[03:26:14.654]    </control>
[03:26:14.654]  </sequence>
[03:26:14.654]  
[03:26:14.707]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.707]  
[03:26:14.707]  <debugvars>
[03:26:14.707]    // Pre-defined
[03:26:14.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.707]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.707]    __dp=0x00000000
[03:26:14.707]    __ap=0x00000000
[03:26:14.707]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.707]    __FlashAddr=0x00000000
[03:26:14.707]    __FlashLen=0x00000000
[03:26:14.707]    __FlashArg=0x00000000
[03:26:14.707]    __FlashOp=0x00000000
[03:26:14.707]    __Result=0x00000000
[03:26:14.707]  </debugvars>
[03:26:14.707]  
[03:26:14.707]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.707]    <block atomic="false" info="">
[03:26:14.707]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.707]        // -> [isSWJ <= 0x00000001]
[03:26:14.707]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.707]        // -> [hasDormant <= 0x00000000]
[03:26:14.707]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.707]        // -> [protType <= 0x00000002]
[03:26:14.707]    </block>
[03:26:14.707]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.711]      // if-block "protType == 1"
[03:26:14.711]        // =>  FALSE
[03:26:14.711]      // skip if-block "protType == 1"
[03:26:14.711]    </control>
[03:26:14.711]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.711]      // if-block "protType == 2"
[03:26:14.711]        // =>  TRUE
[03:26:14.711]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.711]        // if-block "isSWJ"
[03:26:14.711]          // =>  TRUE
[03:26:14.711]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.711]          // if-block "hasDormant"
[03:26:14.711]            // =>  FALSE
[03:26:14.711]          // skip if-block "hasDormant"
[03:26:14.711]        </control>
[03:26:14.711]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.711]          // if-block "!hasDormant"
[03:26:14.711]            // =>  TRUE
[03:26:14.711]          <block atomic="false" info="">
[03:26:14.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.711]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.719]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.727]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.727]          </block>
[03:26:14.727]          // end if-block "!hasDormant"
[03:26:14.727]        </control>
[03:26:14.727]        // end if-block "isSWJ"
[03:26:14.727]      </control>
[03:26:14.727]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.727]        // if-block "!isSWJ"
[03:26:14.727]          // =>  FALSE
[03:26:14.727]        // skip if-block "!isSWJ"
[03:26:14.727]      </control>
[03:26:14.727]      <block atomic="false" info="">
[03:26:14.727]        ReadDP(0x0);
[03:26:14.731]  
[03:26:14.731]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.731]  
[03:26:14.731]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.731]      </block>
[03:26:14.731]      // end if-block "protType == 2"
[03:26:14.731]    </control>
[03:26:14.731]  </sequence>
[03:26:14.731]  
[03:26:14.791]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.791]  
[03:26:14.791]  <debugvars>
[03:26:14.791]    // Pre-defined
[03:26:14.791]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.791]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.791]    __dp=0x00000000
[03:26:14.791]    __ap=0x00000000
[03:26:14.791]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.791]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.791]    __FlashAddr=0x00000000
[03:26:14.791]    __FlashLen=0x00000000
[03:26:14.791]    __FlashArg=0x00000000
[03:26:14.791]    __FlashOp=0x00000000
[03:26:14.791]    __Result=0x00000000
[03:26:14.791]  </debugvars>
[03:26:14.791]  
[03:26:14.791]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.791]    <block atomic="false" info="">
[03:26:14.791]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.791]        // -> [isSWJ <= 0x00000001]
[03:26:14.791]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.791]        // -> [hasDormant <= 0x00000000]
[03:26:14.791]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.791]        // -> [protType <= 0x00000002]
[03:26:14.791]    </block>
[03:26:14.791]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.791]      // if-block "protType == 1"
[03:26:14.791]        // =>  FALSE
[03:26:14.791]      // skip if-block "protType == 1"
[03:26:14.791]    </control>
[03:26:14.791]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.791]      // if-block "protType == 2"
[03:26:14.791]        // =>  TRUE
[03:26:14.791]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.795]        // if-block "isSWJ"
[03:26:14.795]          // =>  TRUE
[03:26:14.795]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.795]          // if-block "hasDormant"
[03:26:14.795]            // =>  FALSE
[03:26:14.795]          // skip if-block "hasDormant"
[03:26:14.795]        </control>
[03:26:14.795]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.795]          // if-block "!hasDormant"
[03:26:14.795]            // =>  TRUE
[03:26:14.795]          <block atomic="false" info="">
[03:26:14.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.799]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.799]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.803]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.803]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.807]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.807]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.807]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.807]          </block>
[03:26:14.807]          // end if-block "!hasDormant"
[03:26:14.807]        </control>
[03:26:14.807]        // end if-block "isSWJ"
[03:26:14.807]      </control>
[03:26:14.807]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.807]        // if-block "!isSWJ"
[03:26:14.807]          // =>  FALSE
[03:26:14.807]        // skip if-block "!isSWJ"
[03:26:14.807]      </control>
[03:26:14.807]      <block atomic="false" info="">
[03:26:14.807]        ReadDP(0x0);
[03:26:14.811]  
[03:26:14.811]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.811]  
[03:26:14.811]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.811]      </block>
[03:26:14.811]      // end if-block "protType == 2"
[03:26:14.811]    </control>
[03:26:14.811]  </sequence>
[03:26:14.811]  
[03:26:14.863]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.863]  
[03:26:14.863]  <debugvars>
[03:26:14.863]    // Pre-defined
[03:26:14.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.863]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.863]    __dp=0x00000000
[03:26:14.863]    __ap=0x00000000
[03:26:14.863]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.863]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.863]    __FlashAddr=0x00000000
[03:26:14.863]    __FlashLen=0x00000000
[03:26:14.863]    __FlashArg=0x00000000
[03:26:14.863]    __FlashOp=0x00000000
[03:26:14.863]    __Result=0x00000000
[03:26:14.863]  </debugvars>
[03:26:14.863]  
[03:26:14.863]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.863]    <block atomic="false" info="">
[03:26:14.863]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.863]        // -> [isSWJ <= 0x00000001]
[03:26:14.863]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.863]        // -> [hasDormant <= 0x00000000]
[03:26:14.867]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.867]        // -> [protType <= 0x00000002]
[03:26:14.867]    </block>
[03:26:14.867]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.867]      // if-block "protType == 1"
[03:26:14.867]        // =>  FALSE
[03:26:14.867]      // skip if-block "protType == 1"
[03:26:14.867]    </control>
[03:26:14.867]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.867]      // if-block "protType == 2"
[03:26:14.867]        // =>  TRUE
[03:26:14.867]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.867]        // if-block "isSWJ"
[03:26:14.867]          // =>  TRUE
[03:26:14.867]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.867]          // if-block "hasDormant"
[03:26:14.867]            // =>  FALSE
[03:26:14.867]          // skip if-block "hasDormant"
[03:26:14.867]        </control>
[03:26:14.867]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.867]          // if-block "!hasDormant"
[03:26:14.867]            // =>  TRUE
[03:26:14.867]          <block atomic="false" info="">
[03:26:14.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.871]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.871]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.871]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.879]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.879]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.879]          </block>
[03:26:14.879]          // end if-block "!hasDormant"
[03:26:14.879]        </control>
[03:26:14.879]        // end if-block "isSWJ"
[03:26:14.879]      </control>
[03:26:14.879]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.879]        // if-block "!isSWJ"
[03:26:14.879]          // =>  FALSE
[03:26:14.879]        // skip if-block "!isSWJ"
[03:26:14.879]      </control>
[03:26:14.879]      <block atomic="false" info="">
[03:26:14.879]        ReadDP(0x0);
[03:26:14.883]  
[03:26:14.883]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.883]  
[03:26:14.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.883]      </block>
[03:26:14.883]      // end if-block "protType == 2"
[03:26:14.883]    </control>
[03:26:14.883]  </sequence>
[03:26:14.883]  
[03:26:14.935]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:14.935]  
[03:26:14.935]  <debugvars>
[03:26:14.935]    // Pre-defined
[03:26:14.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:14.935]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:14.935]    __dp=0x00000000
[03:26:14.935]    __ap=0x00000000
[03:26:14.935]    __traceout=0x00000000      (Trace Disabled)
[03:26:14.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:14.935]    __FlashAddr=0x00000000
[03:26:14.935]    __FlashLen=0x00000000
[03:26:14.935]    __FlashArg=0x00000000
[03:26:14.935]    __FlashOp=0x00000000
[03:26:14.935]    __Result=0x00000000
[03:26:14.935]  </debugvars>
[03:26:14.935]  
[03:26:14.935]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:14.935]    <block atomic="false" info="">
[03:26:14.935]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:14.935]        // -> [isSWJ <= 0x00000001]
[03:26:14.935]      __var hasDormant = __protocol & 0x00020000;
[03:26:14.935]        // -> [hasDormant <= 0x00000000]
[03:26:14.935]      __var protType   = __protocol & 0x0000FFFF;
[03:26:14.935]        // -> [protType <= 0x00000002]
[03:26:14.935]    </block>
[03:26:14.935]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:14.935]      // if-block "protType == 1"
[03:26:14.935]        // =>  FALSE
[03:26:14.935]      // skip if-block "protType == 1"
[03:26:14.935]    </control>
[03:26:14.935]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:14.935]      // if-block "protType == 2"
[03:26:14.935]        // =>  TRUE
[03:26:14.935]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:14.939]        // if-block "isSWJ"
[03:26:14.939]          // =>  TRUE
[03:26:14.939]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:14.939]          // if-block "hasDormant"
[03:26:14.939]            // =>  FALSE
[03:26:14.939]          // skip if-block "hasDormant"
[03:26:14.939]        </control>
[03:26:14.939]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:14.939]          // if-block "!hasDormant"
[03:26:14.939]            // =>  TRUE
[03:26:14.939]          <block atomic="false" info="">
[03:26:14.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:14.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.943]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:14.943]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:14.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:14.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:14.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:14.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:14.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:14.947]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:14.951]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:14.951]          </block>
[03:26:14.951]          // end if-block "!hasDormant"
[03:26:14.951]        </control>
[03:26:14.951]        // end if-block "isSWJ"
[03:26:14.951]      </control>
[03:26:14.951]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:14.951]        // if-block "!isSWJ"
[03:26:14.951]          // =>  FALSE
[03:26:14.951]        // skip if-block "!isSWJ"
[03:26:14.951]      </control>
[03:26:14.951]      <block atomic="false" info="">
[03:26:14.951]        ReadDP(0x0);
[03:26:14.951]  
[03:26:14.951]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:14.951]  
[03:26:14.951]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:14.951]      </block>
[03:26:14.955]      // end if-block "protType == 2"
[03:26:14.955]    </control>
[03:26:14.955]  </sequence>
[03:26:14.955]  
[03:26:15.007]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.007]  
[03:26:15.007]  <debugvars>
[03:26:15.007]    // Pre-defined
[03:26:15.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.007]    __dp=0x00000000
[03:26:15.007]    __ap=0x00000000
[03:26:15.007]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.007]    __FlashAddr=0x00000000
[03:26:15.007]    __FlashLen=0x00000000
[03:26:15.007]    __FlashArg=0x00000000
[03:26:15.007]    __FlashOp=0x00000000
[03:26:15.007]    __Result=0x00000000
[03:26:15.007]  </debugvars>
[03:26:15.007]  
[03:26:15.007]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.007]    <block atomic="false" info="">
[03:26:15.007]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.007]        // -> [isSWJ <= 0x00000001]
[03:26:15.007]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.007]        // -> [hasDormant <= 0x00000000]
[03:26:15.007]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.011]        // -> [protType <= 0x00000002]
[03:26:15.011]    </block>
[03:26:15.011]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.011]      // if-block "protType == 1"
[03:26:15.011]        // =>  FALSE
[03:26:15.011]      // skip if-block "protType == 1"
[03:26:15.011]    </control>
[03:26:15.011]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.011]      // if-block "protType == 2"
[03:26:15.011]        // =>  TRUE
[03:26:15.011]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.011]        // if-block "isSWJ"
[03:26:15.011]          // =>  TRUE
[03:26:15.011]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.011]          // if-block "hasDormant"
[03:26:15.011]            // =>  FALSE
[03:26:15.011]          // skip if-block "hasDormant"
[03:26:15.011]        </control>
[03:26:15.011]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.011]          // if-block "!hasDormant"
[03:26:15.011]            // =>  TRUE
[03:26:15.011]          <block atomic="false" info="">
[03:26:15.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.015]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.023]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.027]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.035]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.035]          </block>
[03:26:15.035]          // end if-block "!hasDormant"
[03:26:15.035]        </control>
[03:26:15.035]        // end if-block "isSWJ"
[03:26:15.035]      </control>
[03:26:15.035]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.035]        // if-block "!isSWJ"
[03:26:15.035]          // =>  FALSE
[03:26:15.035]        // skip if-block "!isSWJ"
[03:26:15.035]      </control>
[03:26:15.035]      <block atomic="false" info="">
[03:26:15.039]        ReadDP(0x0);
[03:26:15.039]  
[03:26:15.039]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.039]  
[03:26:15.039]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.039]      </block>
[03:26:15.039]      // end if-block "protType == 2"
[03:26:15.039]    </control>
[03:26:15.039]  </sequence>
[03:26:15.039]  
[03:26:15.091]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.091]  
[03:26:15.091]  <debugvars>
[03:26:15.091]    // Pre-defined
[03:26:15.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.091]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.091]    __dp=0x00000000
[03:26:15.091]    __ap=0x00000000
[03:26:15.091]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.091]    __FlashAddr=0x00000000
[03:26:15.091]    __FlashLen=0x00000000
[03:26:15.091]    __FlashArg=0x00000000
[03:26:15.091]    __FlashOp=0x00000000
[03:26:15.091]    __Result=0x00000000
[03:26:15.091]  </debugvars>
[03:26:15.091]  
[03:26:15.091]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.091]    <block atomic="false" info="">
[03:26:15.091]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.091]        // -> [isSWJ <= 0x00000001]
[03:26:15.091]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.091]        // -> [hasDormant <= 0x00000000]
[03:26:15.091]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.091]        // -> [protType <= 0x00000002]
[03:26:15.091]    </block>
[03:26:15.091]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.091]      // if-block "protType == 1"
[03:26:15.091]        // =>  FALSE
[03:26:15.091]      // skip if-block "protType == 1"
[03:26:15.091]    </control>
[03:26:15.091]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.091]      // if-block "protType == 2"
[03:26:15.091]        // =>  TRUE
[03:26:15.095]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.095]        // if-block "isSWJ"
[03:26:15.095]          // =>  TRUE
[03:26:15.095]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.095]          // if-block "hasDormant"
[03:26:15.095]            // =>  FALSE
[03:26:15.095]          // skip if-block "hasDormant"
[03:26:15.095]        </control>
[03:26:15.095]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.095]          // if-block "!hasDormant"
[03:26:15.095]            // =>  TRUE
[03:26:15.095]          <block atomic="false" info="">
[03:26:15.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.095]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.103]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.111]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.111]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.111]          </block>
[03:26:15.111]          // end if-block "!hasDormant"
[03:26:15.111]        </control>
[03:26:15.111]        // end if-block "isSWJ"
[03:26:15.111]      </control>
[03:26:15.111]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.111]        // if-block "!isSWJ"
[03:26:15.111]          // =>  FALSE
[03:26:15.111]        // skip if-block "!isSWJ"
[03:26:15.111]      </control>
[03:26:15.111]      <block atomic="false" info="">
[03:26:15.111]        ReadDP(0x0);
[03:26:15.115]  
[03:26:15.115]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.115]  
[03:26:15.115]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.115]      </block>
[03:26:15.115]      // end if-block "protType == 2"
[03:26:15.115]    </control>
[03:26:15.115]  </sequence>
[03:26:15.115]  
[03:26:15.175]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.175]  
[03:26:15.175]  <debugvars>
[03:26:15.175]    // Pre-defined
[03:26:15.175]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.175]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.175]    __dp=0x00000000
[03:26:15.176]    __ap=0x00000000
[03:26:15.177]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.177]    __FlashAddr=0x00000000
[03:26:15.177]    __FlashLen=0x00000000
[03:26:15.177]    __FlashArg=0x00000000
[03:26:15.177]    __FlashOp=0x00000000
[03:26:15.177]    __Result=0x00000000
[03:26:15.177]  </debugvars>
[03:26:15.177]  
[03:26:15.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.177]    <block atomic="false" info="">
[03:26:15.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.177]        // -> [isSWJ <= 0x00000001]
[03:26:15.177]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.177]        // -> [hasDormant <= 0x00000000]
[03:26:15.177]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.177]        // -> [protType <= 0x00000002]
[03:26:15.177]    </block>
[03:26:15.177]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.178]      // if-block "protType == 1"
[03:26:15.178]        // =>  FALSE
[03:26:15.178]      // skip if-block "protType == 1"
[03:26:15.178]    </control>
[03:26:15.178]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.178]      // if-block "protType == 2"
[03:26:15.178]        // =>  TRUE
[03:26:15.178]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.178]        // if-block "isSWJ"
[03:26:15.178]          // =>  TRUE
[03:26:15.178]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.180]          // if-block "hasDormant"
[03:26:15.180]            // =>  FALSE
[03:26:15.180]          // skip if-block "hasDormant"
[03:26:15.180]        </control>
[03:26:15.180]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.180]          // if-block "!hasDormant"
[03:26:15.180]            // =>  TRUE
[03:26:15.180]          <block atomic="false" info="">
[03:26:15.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.181]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.186]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.189]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.189]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.189]          </block>
[03:26:15.189]          // end if-block "!hasDormant"
[03:26:15.189]        </control>
[03:26:15.189]        // end if-block "isSWJ"
[03:26:15.189]      </control>
[03:26:15.189]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.189]        // if-block "!isSWJ"
[03:26:15.189]          // =>  FALSE
[03:26:15.189]        // skip if-block "!isSWJ"
[03:26:15.189]      </control>
[03:26:15.189]      <block atomic="false" info="">
[03:26:15.189]        ReadDP(0x0);
[03:26:15.192]  
[03:26:15.192]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.192]  
[03:26:15.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.193]      </block>
[03:26:15.193]      // end if-block "protType == 2"
[03:26:15.193]    </control>
[03:26:15.193]  </sequence>
[03:26:15.193]  
[03:26:15.249]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.249]  
[03:26:15.250]  <debugvars>
[03:26:15.250]    // Pre-defined
[03:26:15.250]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.250]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.250]    __dp=0x00000000
[03:26:15.250]    __ap=0x00000000
[03:26:15.251]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.251]    __FlashAddr=0x00000000
[03:26:15.251]    __FlashLen=0x00000000
[03:26:15.251]    __FlashArg=0x00000000
[03:26:15.251]    __FlashOp=0x00000000
[03:26:15.251]    __Result=0x00000000
[03:26:15.251]  </debugvars>
[03:26:15.251]  
[03:26:15.251]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.251]    <block atomic="false" info="">
[03:26:15.251]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.251]        // -> [isSWJ <= 0x00000001]
[03:26:15.251]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.251]        // -> [hasDormant <= 0x00000000]
[03:26:15.251]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.251]        // -> [protType <= 0x00000002]
[03:26:15.251]    </block>
[03:26:15.251]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.251]      // if-block "protType == 1"
[03:26:15.253]        // =>  FALSE
[03:26:15.253]      // skip if-block "protType == 1"
[03:26:15.253]    </control>
[03:26:15.253]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.253]      // if-block "protType == 2"
[03:26:15.253]        // =>  TRUE
[03:26:15.253]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.253]        // if-block "isSWJ"
[03:26:15.253]          // =>  TRUE
[03:26:15.253]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.254]          // if-block "hasDormant"
[03:26:15.254]            // =>  FALSE
[03:26:15.254]          // skip if-block "hasDormant"
[03:26:15.254]        </control>
[03:26:15.254]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.254]          // if-block "!hasDormant"
[03:26:15.254]            // =>  TRUE
[03:26:15.254]          <block atomic="false" info="">
[03:26:15.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.255]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.255]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.258]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.261]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.262]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.263]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.263]          </block>
[03:26:15.263]          // end if-block "!hasDormant"
[03:26:15.263]        </control>
[03:26:15.263]        // end if-block "isSWJ"
[03:26:15.263]      </control>
[03:26:15.263]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.263]        // if-block "!isSWJ"
[03:26:15.265]          // =>  FALSE
[03:26:15.265]        // skip if-block "!isSWJ"
[03:26:15.265]      </control>
[03:26:15.265]      <block atomic="false" info="">
[03:26:15.265]        ReadDP(0x0);
[03:26:15.267]  
[03:26:15.267]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.267]  
[03:26:15.267]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.267]      </block>
[03:26:15.267]      // end if-block "protType == 2"
[03:26:15.267]    </control>
[03:26:15.267]  </sequence>
[03:26:15.267]  
[03:26:15.323]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.323]  
[03:26:15.323]  <debugvars>
[03:26:15.323]    // Pre-defined
[03:26:15.323]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.323]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.323]    __dp=0x00000000
[03:26:15.323]    __ap=0x00000000
[03:26:15.323]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.323]    __FlashAddr=0x00000000
[03:26:15.323]    __FlashLen=0x00000000
[03:26:15.323]    __FlashArg=0x00000000
[03:26:15.323]    __FlashOp=0x00000000
[03:26:15.323]    __Result=0x00000000
[03:26:15.323]  </debugvars>
[03:26:15.323]  
[03:26:15.323]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.323]    <block atomic="false" info="">
[03:26:15.323]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.323]        // -> [isSWJ <= 0x00000001]
[03:26:15.323]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.323]        // -> [hasDormant <= 0x00000000]
[03:26:15.327]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.327]        // -> [protType <= 0x00000002]
[03:26:15.327]    </block>
[03:26:15.327]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.327]      // if-block "protType == 1"
[03:26:15.327]        // =>  FALSE
[03:26:15.327]      // skip if-block "protType == 1"
[03:26:15.327]    </control>
[03:26:15.327]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.327]      // if-block "protType == 2"
[03:26:15.327]        // =>  TRUE
[03:26:15.327]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.327]        // if-block "isSWJ"
[03:26:15.327]          // =>  TRUE
[03:26:15.327]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.327]          // if-block "hasDormant"
[03:26:15.327]            // =>  FALSE
[03:26:15.327]          // skip if-block "hasDormant"
[03:26:15.327]        </control>
[03:26:15.327]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.327]          // if-block "!hasDormant"
[03:26:15.327]            // =>  TRUE
[03:26:15.327]          <block atomic="false" info="">
[03:26:15.327]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.331]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.335]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.339]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.343]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.343]          </block>
[03:26:15.343]          // end if-block "!hasDormant"
[03:26:15.343]        </control>
[03:26:15.343]        // end if-block "isSWJ"
[03:26:15.343]      </control>
[03:26:15.343]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.343]        // if-block "!isSWJ"
[03:26:15.343]          // =>  FALSE
[03:26:15.343]        // skip if-block "!isSWJ"
[03:26:15.343]      </control>
[03:26:15.343]      <block atomic="false" info="">
[03:26:15.343]        ReadDP(0x0);
[03:26:15.343]  
[03:26:15.343]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.343]  
[03:26:15.343]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.343]      </block>
[03:26:15.343]      // end if-block "protType == 2"
[03:26:15.347]    </control>
[03:26:15.347]  </sequence>
[03:26:15.347]  
[03:26:15.409]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.409]  
[03:26:15.409]  <debugvars>
[03:26:15.409]    // Pre-defined
[03:26:15.409]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.409]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.409]    __dp=0x00000000
[03:26:15.409]    __ap=0x00000000
[03:26:15.409]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.409]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.409]    __FlashAddr=0x00000000
[03:26:15.409]    __FlashLen=0x00000000
[03:26:15.409]    __FlashArg=0x00000000
[03:26:15.409]    __FlashOp=0x00000000
[03:26:15.409]    __Result=0x00000000
[03:26:15.411]  </debugvars>
[03:26:15.411]  
[03:26:15.411]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.411]    <block atomic="false" info="">
[03:26:15.411]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.411]        // -> [isSWJ <= 0x00000001]
[03:26:15.411]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.411]        // -> [hasDormant <= 0x00000000]
[03:26:15.411]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.411]        // -> [protType <= 0x00000002]
[03:26:15.411]    </block>
[03:26:15.412]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.412]      // if-block "protType == 1"
[03:26:15.412]        // =>  FALSE
[03:26:15.412]      // skip if-block "protType == 1"
[03:26:15.412]    </control>
[03:26:15.412]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.412]      // if-block "protType == 2"
[03:26:15.412]        // =>  TRUE
[03:26:15.412]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.412]        // if-block "isSWJ"
[03:26:15.412]          // =>  TRUE
[03:26:15.412]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.412]          // if-block "hasDormant"
[03:26:15.412]            // =>  FALSE
[03:26:15.412]          // skip if-block "hasDormant"
[03:26:15.412]        </control>
[03:26:15.413]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.413]          // if-block "!hasDormant"
[03:26:15.413]            // =>  TRUE
[03:26:15.413]          <block atomic="false" info="">
[03:26:15.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.419]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.426]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.428]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.428]          </block>
[03:26:15.428]          // end if-block "!hasDormant"
[03:26:15.428]        </control>
[03:26:15.428]        // end if-block "isSWJ"
[03:26:15.428]      </control>
[03:26:15.429]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.429]        // if-block "!isSWJ"
[03:26:15.429]          // =>  FALSE
[03:26:15.429]        // skip if-block "!isSWJ"
[03:26:15.429]      </control>
[03:26:15.429]      <block atomic="false" info="">
[03:26:15.429]        ReadDP(0x0);
[03:26:15.431]  
[03:26:15.431]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.431]  
[03:26:15.431]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.433]      </block>
[03:26:15.433]      // end if-block "protType == 2"
[03:26:15.433]    </control>
[03:26:15.433]  </sequence>
[03:26:15.433]  
[03:26:15.488]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.488]  
[03:26:15.488]  <debugvars>
[03:26:15.488]    // Pre-defined
[03:26:15.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.488]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.488]    __dp=0x00000000
[03:26:15.488]    __ap=0x00000000
[03:26:15.489]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.489]    __FlashAddr=0x00000000
[03:26:15.489]    __FlashLen=0x00000000
[03:26:15.489]    __FlashArg=0x00000000
[03:26:15.489]    __FlashOp=0x00000000
[03:26:15.489]    __Result=0x00000000
[03:26:15.489]  </debugvars>
[03:26:15.489]  
[03:26:15.489]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.489]    <block atomic="false" info="">
[03:26:15.489]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.489]        // -> [isSWJ <= 0x00000001]
[03:26:15.489]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.489]        // -> [hasDormant <= 0x00000000]
[03:26:15.489]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.489]        // -> [protType <= 0x00000002]
[03:26:15.489]    </block>
[03:26:15.491]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.491]      // if-block "protType == 1"
[03:26:15.491]        // =>  FALSE
[03:26:15.491]      // skip if-block "protType == 1"
[03:26:15.491]    </control>
[03:26:15.491]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.491]      // if-block "protType == 2"
[03:26:15.491]        // =>  TRUE
[03:26:15.491]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.491]        // if-block "isSWJ"
[03:26:15.491]          // =>  TRUE
[03:26:15.491]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.491]          // if-block "hasDormant"
[03:26:15.491]            // =>  FALSE
[03:26:15.491]          // skip if-block "hasDormant"
[03:26:15.491]        </control>
[03:26:15.491]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.491]          // if-block "!hasDormant"
[03:26:15.491]            // =>  TRUE
[03:26:15.491]          <block atomic="false" info="">
[03:26:15.491]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.491]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.495]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.499]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.507]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.507]          </block>
[03:26:15.507]          // end if-block "!hasDormant"
[03:26:15.507]        </control>
[03:26:15.507]        // end if-block "isSWJ"
[03:26:15.507]      </control>
[03:26:15.507]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.507]        // if-block "!isSWJ"
[03:26:15.507]          // =>  FALSE
[03:26:15.507]        // skip if-block "!isSWJ"
[03:26:15.507]      </control>
[03:26:15.507]      <block atomic="false" info="">
[03:26:15.507]        ReadDP(0x0);
[03:26:15.515]  
[03:26:15.515]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.515]  
[03:26:15.515]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.515]      </block>
[03:26:15.515]      // end if-block "protType == 2"
[03:26:15.515]    </control>
[03:26:15.515]  </sequence>
[03:26:15.515]  
[03:26:15.572]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.572]  
[03:26:15.572]  <debugvars>
[03:26:15.572]    // Pre-defined
[03:26:15.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.572]    __dp=0x00000000
[03:26:15.572]    __ap=0x00000000
[03:26:15.572]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.572]    __FlashAddr=0x00000000
[03:26:15.572]    __FlashLen=0x00000000
[03:26:15.572]    __FlashArg=0x00000000
[03:26:15.572]    __FlashOp=0x00000000
[03:26:15.572]    __Result=0x00000000
[03:26:15.572]  </debugvars>
[03:26:15.572]  
[03:26:15.572]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.572]    <block atomic="false" info="">
[03:26:15.572]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.572]        // -> [isSWJ <= 0x00000001]
[03:26:15.572]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.572]        // -> [hasDormant <= 0x00000000]
[03:26:15.572]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.572]        // -> [protType <= 0x00000002]
[03:26:15.572]    </block>
[03:26:15.572]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.572]      // if-block "protType == 1"
[03:26:15.572]        // =>  FALSE
[03:26:15.576]      // skip if-block "protType == 1"
[03:26:15.576]    </control>
[03:26:15.576]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.576]      // if-block "protType == 2"
[03:26:15.576]        // =>  TRUE
[03:26:15.576]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.576]        // if-block "isSWJ"
[03:26:15.577]          // =>  TRUE
[03:26:15.577]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.577]          // if-block "hasDormant"
[03:26:15.577]            // =>  FALSE
[03:26:15.577]          // skip if-block "hasDormant"
[03:26:15.577]        </control>
[03:26:15.577]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.577]          // if-block "!hasDormant"
[03:26:15.577]            // =>  TRUE
[03:26:15.577]          <block atomic="false" info="">
[03:26:15.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.577]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.580]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.580]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.584]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.584]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.586]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.586]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.586]          </block>
[03:26:15.586]          // end if-block "!hasDormant"
[03:26:15.586]        </control>
[03:26:15.586]        // end if-block "isSWJ"
[03:26:15.588]      </control>
[03:26:15.588]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.588]        // if-block "!isSWJ"
[03:26:15.588]          // =>  FALSE
[03:26:15.588]        // skip if-block "!isSWJ"
[03:26:15.588]      </control>
[03:26:15.588]      <block atomic="false" info="">
[03:26:15.588]        ReadDP(0x0);
[03:26:15.588]  
[03:26:15.588]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.588]  
[03:26:15.588]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.588]      </block>
[03:26:15.588]      // end if-block "protType == 2"
[03:26:15.588]    </control>
[03:26:15.588]  </sequence>
[03:26:15.588]  
[03:26:15.646]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.646]  
[03:26:15.646]  <debugvars>
[03:26:15.646]    // Pre-defined
[03:26:15.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.646]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.646]    __dp=0x00000000
[03:26:15.646]    __ap=0x00000000
[03:26:15.646]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.646]    __FlashAddr=0x00000000
[03:26:15.646]    __FlashLen=0x00000000
[03:26:15.646]    __FlashArg=0x00000000
[03:26:15.646]    __FlashOp=0x00000000
[03:26:15.646]    __Result=0x00000000
[03:26:15.646]  </debugvars>
[03:26:15.646]  
[03:26:15.646]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.646]    <block atomic="false" info="">
[03:26:15.646]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.646]        // -> [isSWJ <= 0x00000001]
[03:26:15.646]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.646]        // -> [hasDormant <= 0x00000000]
[03:26:15.646]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.646]        // -> [protType <= 0x00000002]
[03:26:15.649]    </block>
[03:26:15.649]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.649]      // if-block "protType == 1"
[03:26:15.649]        // =>  FALSE
[03:26:15.649]      // skip if-block "protType == 1"
[03:26:15.649]    </control>
[03:26:15.649]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.649]      // if-block "protType == 2"
[03:26:15.650]        // =>  TRUE
[03:26:15.650]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.650]        // if-block "isSWJ"
[03:26:15.650]          // =>  TRUE
[03:26:15.650]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.650]          // if-block "hasDormant"
[03:26:15.650]            // =>  FALSE
[03:26:15.650]          // skip if-block "hasDormant"
[03:26:15.651]        </control>
[03:26:15.651]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.651]          // if-block "!hasDormant"
[03:26:15.651]            // =>  TRUE
[03:26:15.651]          <block atomic="false" info="">
[03:26:15.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.652]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.656]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.656]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.662]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.665]          </block>
[03:26:15.665]          // end if-block "!hasDormant"
[03:26:15.665]        </control>
[03:26:15.665]        // end if-block "isSWJ"
[03:26:15.665]      </control>
[03:26:15.665]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.665]        // if-block "!isSWJ"
[03:26:15.666]          // =>  FALSE
[03:26:15.666]        // skip if-block "!isSWJ"
[03:26:15.666]      </control>
[03:26:15.666]      <block atomic="false" info="">
[03:26:15.666]        ReadDP(0x0);
[03:26:15.667]  
[03:26:15.667]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.667]  
[03:26:15.667]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.667]      </block>
[03:26:15.667]      // end if-block "protType == 2"
[03:26:15.667]    </control>
[03:26:15.667]  </sequence>
[03:26:15.667]  
[03:26:15.720]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.720]  
[03:26:15.720]  <debugvars>
[03:26:15.720]    // Pre-defined
[03:26:15.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.721]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.721]    __dp=0x00000000
[03:26:15.721]    __ap=0x00000000
[03:26:15.721]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.721]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.721]    __FlashAddr=0x00000000
[03:26:15.721]    __FlashLen=0x00000000
[03:26:15.721]    __FlashArg=0x00000000
[03:26:15.721]    __FlashOp=0x00000000
[03:26:15.721]    __Result=0x00000000
[03:26:15.721]  </debugvars>
[03:26:15.721]  
[03:26:15.721]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.723]    <block atomic="false" info="">
[03:26:15.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.723]        // -> [isSWJ <= 0x00000001]
[03:26:15.723]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.723]        // -> [hasDormant <= 0x00000000]
[03:26:15.723]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.723]        // -> [protType <= 0x00000002]
[03:26:15.723]    </block>
[03:26:15.723]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.723]      // if-block "protType == 1"
[03:26:15.723]        // =>  FALSE
[03:26:15.723]      // skip if-block "protType == 1"
[03:26:15.723]    </control>
[03:26:15.725]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.725]      // if-block "protType == 2"
[03:26:15.725]        // =>  TRUE
[03:26:15.725]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.725]        // if-block "isSWJ"
[03:26:15.725]          // =>  TRUE
[03:26:15.725]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.725]          // if-block "hasDormant"
[03:26:15.725]            // =>  FALSE
[03:26:15.725]          // skip if-block "hasDormant"
[03:26:15.725]        </control>
[03:26:15.725]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.725]          // if-block "!hasDormant"
[03:26:15.725]            // =>  TRUE
[03:26:15.725]          <block atomic="false" info="">
[03:26:15.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.727]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.729]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.730]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.731]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.733]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.735]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.735]          </block>
[03:26:15.735]          // end if-block "!hasDormant"
[03:26:15.735]        </control>
[03:26:15.735]        // end if-block "isSWJ"
[03:26:15.735]      </control>
[03:26:15.735]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.736]        // if-block "!isSWJ"
[03:26:15.736]          // =>  FALSE
[03:26:15.736]        // skip if-block "!isSWJ"
[03:26:15.736]      </control>
[03:26:15.736]      <block atomic="false" info="">
[03:26:15.737]        ReadDP(0x0);
[03:26:15.739]  
[03:26:15.739]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.739]  
[03:26:15.741]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.741]      </block>
[03:26:15.741]      // end if-block "protType == 2"
[03:26:15.741]    </control>
[03:26:15.742]  </sequence>
[03:26:15.742]  
[03:26:15.796]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.796]  
[03:26:15.796]  <debugvars>
[03:26:15.796]    // Pre-defined
[03:26:15.796]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.796]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.796]    __dp=0x00000000
[03:26:15.796]    __ap=0x00000000
[03:26:15.796]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.796]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.796]    __FlashAddr=0x00000000
[03:26:15.796]    __FlashLen=0x00000000
[03:26:15.796]    __FlashArg=0x00000000
[03:26:15.796]    __FlashOp=0x00000000
[03:26:15.796]    __Result=0x00000000
[03:26:15.796]  </debugvars>
[03:26:15.796]  
[03:26:15.796]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.796]    <block atomic="false" info="">
[03:26:15.796]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.799]        // -> [isSWJ <= 0x00000001]
[03:26:15.799]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.799]        // -> [hasDormant <= 0x00000000]
[03:26:15.799]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.799]        // -> [protType <= 0x00000002]
[03:26:15.799]    </block>
[03:26:15.799]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.799]      // if-block "protType == 1"
[03:26:15.799]        // =>  FALSE
[03:26:15.799]      // skip if-block "protType == 1"
[03:26:15.799]    </control>
[03:26:15.799]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.799]      // if-block "protType == 2"
[03:26:15.800]        // =>  TRUE
[03:26:15.800]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.800]        // if-block "isSWJ"
[03:26:15.800]          // =>  TRUE
[03:26:15.800]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.800]          // if-block "hasDormant"
[03:26:15.801]            // =>  FALSE
[03:26:15.801]          // skip if-block "hasDormant"
[03:26:15.801]        </control>
[03:26:15.801]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.801]          // if-block "!hasDormant"
[03:26:15.801]            // =>  TRUE
[03:26:15.801]          <block atomic="false" info="">
[03:26:15.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.801]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.804]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.808]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.809]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.809]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.816]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.816]          </block>
[03:26:15.817]          // end if-block "!hasDormant"
[03:26:15.817]        </control>
[03:26:15.817]        // end if-block "isSWJ"
[03:26:15.817]      </control>
[03:26:15.817]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.817]        // if-block "!isSWJ"
[03:26:15.817]          // =>  FALSE
[03:26:15.817]        // skip if-block "!isSWJ"
[03:26:15.817]      </control>
[03:26:15.817]      <block atomic="false" info="">
[03:26:15.817]        ReadDP(0x0);
[03:26:15.825]  
[03:26:15.825]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.825]  
[03:26:15.825]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.825]      </block>
[03:26:15.825]      // end if-block "protType == 2"
[03:26:15.825]    </control>
[03:26:15.825]  </sequence>
[03:26:15.825]  
[03:26:15.882]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.882]  
[03:26:15.882]  <debugvars>
[03:26:15.882]    // Pre-defined
[03:26:15.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.882]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.883]    __dp=0x00000000
[03:26:15.883]    __ap=0x00000000
[03:26:15.883]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.883]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.883]    __FlashAddr=0x00000000
[03:26:15.883]    __FlashLen=0x00000000
[03:26:15.883]    __FlashArg=0x00000000
[03:26:15.883]    __FlashOp=0x00000000
[03:26:15.883]    __Result=0x00000000
[03:26:15.883]  </debugvars>
[03:26:15.883]  
[03:26:15.883]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.883]    <block atomic="false" info="">
[03:26:15.883]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.883]        // -> [isSWJ <= 0x00000001]
[03:26:15.883]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.883]        // -> [hasDormant <= 0x00000000]
[03:26:15.883]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.883]        // -> [protType <= 0x00000002]
[03:26:15.883]    </block>
[03:26:15.883]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.883]      // if-block "protType == 1"
[03:26:15.883]        // =>  FALSE
[03:26:15.883]      // skip if-block "protType == 1"
[03:26:15.883]    </control>
[03:26:15.883]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.883]      // if-block "protType == 2"
[03:26:15.883]        // =>  TRUE
[03:26:15.883]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.883]        // if-block "isSWJ"
[03:26:15.883]          // =>  TRUE
[03:26:15.886]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.886]          // if-block "hasDormant"
[03:26:15.886]            // =>  FALSE
[03:26:15.886]          // skip if-block "hasDormant"
[03:26:15.886]        </control>
[03:26:15.886]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.886]          // if-block "!hasDormant"
[03:26:15.886]            // =>  TRUE
[03:26:15.886]          <block atomic="false" info="">
[03:26:15.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.886]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.890]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.890]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.890]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.894]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.896]          </block>
[03:26:15.896]          // end if-block "!hasDormant"
[03:26:15.896]        </control>
[03:26:15.896]        // end if-block "isSWJ"
[03:26:15.896]      </control>
[03:26:15.896]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.896]        // if-block "!isSWJ"
[03:26:15.896]          // =>  FALSE
[03:26:15.896]        // skip if-block "!isSWJ"
[03:26:15.896]      </control>
[03:26:15.896]      <block atomic="false" info="">
[03:26:15.896]        ReadDP(0x0);
[03:26:15.899]  
[03:26:15.899]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.899]  
[03:26:15.899]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.899]      </block>
[03:26:15.899]      // end if-block "protType == 2"
[03:26:15.899]    </control>
[03:26:15.899]  </sequence>
[03:26:15.899]  
[03:26:15.955]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:15.955]  
[03:26:15.955]  <debugvars>
[03:26:15.955]    // Pre-defined
[03:26:15.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:15.956]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:15.956]    __dp=0x00000000
[03:26:15.956]    __ap=0x00000000
[03:26:15.956]    __traceout=0x00000000      (Trace Disabled)
[03:26:15.956]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:15.956]    __FlashAddr=0x00000000
[03:26:15.956]    __FlashLen=0x00000000
[03:26:15.956]    __FlashArg=0x00000000
[03:26:15.956]    __FlashOp=0x00000000
[03:26:15.956]    __Result=0x00000000
[03:26:15.956]  </debugvars>
[03:26:15.956]  
[03:26:15.956]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:15.956]    <block atomic="false" info="">
[03:26:15.956]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:15.956]        // -> [isSWJ <= 0x00000001]
[03:26:15.956]      __var hasDormant = __protocol & 0x00020000;
[03:26:15.956]        // -> [hasDormant <= 0x00000000]
[03:26:15.956]      __var protType   = __protocol & 0x0000FFFF;
[03:26:15.958]        // -> [protType <= 0x00000002]
[03:26:15.958]    </block>
[03:26:15.958]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:15.958]      // if-block "protType == 1"
[03:26:15.958]        // =>  FALSE
[03:26:15.958]      // skip if-block "protType == 1"
[03:26:15.958]    </control>
[03:26:15.958]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:15.958]      // if-block "protType == 2"
[03:26:15.958]        // =>  TRUE
[03:26:15.958]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:15.958]        // if-block "isSWJ"
[03:26:15.958]          // =>  TRUE
[03:26:15.958]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:15.960]          // if-block "hasDormant"
[03:26:15.960]            // =>  FALSE
[03:26:15.960]          // skip if-block "hasDormant"
[03:26:15.960]        </control>
[03:26:15.960]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:15.960]          // if-block "!hasDormant"
[03:26:15.960]            // =>  TRUE
[03:26:15.960]          <block atomic="false" info="">
[03:26:15.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:15.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.962]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:15.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:15.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:15.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.971]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:15.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:15.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:15.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:15.975]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:15.977]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:15.977]          </block>
[03:26:15.977]          // end if-block "!hasDormant"
[03:26:15.977]        </control>
[03:26:15.977]        // end if-block "isSWJ"
[03:26:15.977]      </control>
[03:26:15.977]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:15.977]        // if-block "!isSWJ"
[03:26:15.977]          // =>  FALSE
[03:26:15.977]        // skip if-block "!isSWJ"
[03:26:15.977]      </control>
[03:26:15.977]      <block atomic="false" info="">
[03:26:15.977]        ReadDP(0x0);
[03:26:15.980]  
[03:26:15.980]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:15.980]  
[03:26:15.980]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:15.980]      </block>
[03:26:15.980]      // end if-block "protType == 2"
[03:26:15.980]    </control>
[03:26:15.981]  </sequence>
[03:26:15.981]  
[03:26:16.041]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.041]  
[03:26:16.041]  <debugvars>
[03:26:16.041]    // Pre-defined
[03:26:16.041]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.041]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.041]    __dp=0x00000000
[03:26:16.041]    __ap=0x00000000
[03:26:16.041]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.041]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.041]    __FlashAddr=0x00000000
[03:26:16.041]    __FlashLen=0x00000000
[03:26:16.041]    __FlashArg=0x00000000
[03:26:16.041]    __FlashOp=0x00000000
[03:26:16.041]    __Result=0x00000000
[03:26:16.041]  </debugvars>
[03:26:16.041]  
[03:26:16.041]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.041]    <block atomic="false" info="">
[03:26:16.041]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.041]        // -> [isSWJ <= 0x00000001]
[03:26:16.041]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.041]        // -> [hasDormant <= 0x00000000]
[03:26:16.041]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.041]        // -> [protType <= 0x00000002]
[03:26:16.041]    </block>
[03:26:16.041]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.041]      // if-block "protType == 1"
[03:26:16.041]        // =>  FALSE
[03:26:16.041]      // skip if-block "protType == 1"
[03:26:16.041]    </control>
[03:26:16.041]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.045]      // if-block "protType == 2"
[03:26:16.045]        // =>  TRUE
[03:26:16.045]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.045]        // if-block "isSWJ"
[03:26:16.045]          // =>  TRUE
[03:26:16.045]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.045]          // if-block "hasDormant"
[03:26:16.045]            // =>  FALSE
[03:26:16.045]          // skip if-block "hasDormant"
[03:26:16.045]        </control>
[03:26:16.045]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.045]          // if-block "!hasDormant"
[03:26:16.045]            // =>  TRUE
[03:26:16.045]          <block atomic="false" info="">
[03:26:16.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.049]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.049]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.049]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.049]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.057]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.057]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.057]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.057]          </block>
[03:26:16.057]          // end if-block "!hasDormant"
[03:26:16.057]        </control>
[03:26:16.057]        // end if-block "isSWJ"
[03:26:16.057]      </control>
[03:26:16.057]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.057]        // if-block "!isSWJ"
[03:26:16.057]          // =>  FALSE
[03:26:16.057]        // skip if-block "!isSWJ"
[03:26:16.057]      </control>
[03:26:16.057]      <block atomic="false" info="">
[03:26:16.061]        ReadDP(0x0);
[03:26:16.061]  
[03:26:16.061]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.061]  
[03:26:16.061]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.061]      </block>
[03:26:16.061]      // end if-block "protType == 2"
[03:26:16.061]    </control>
[03:26:16.061]  </sequence>
[03:26:16.061]  
[03:26:16.115]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.115]  
[03:26:16.115]  <debugvars>
[03:26:16.115]    // Pre-defined
[03:26:16.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.115]    __dp=0x00000000
[03:26:16.115]    __ap=0x00000000
[03:26:16.115]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.115]    __FlashAddr=0x00000000
[03:26:16.115]    __FlashLen=0x00000000
[03:26:16.115]    __FlashArg=0x00000000
[03:26:16.115]    __FlashOp=0x00000000
[03:26:16.115]    __Result=0x00000000
[03:26:16.115]  </debugvars>
[03:26:16.115]  
[03:26:16.115]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.115]    <block atomic="false" info="">
[03:26:16.115]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.115]        // -> [isSWJ <= 0x00000001]
[03:26:16.115]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.115]        // -> [hasDormant <= 0x00000000]
[03:26:16.115]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.115]        // -> [protType <= 0x00000002]
[03:26:16.115]    </block>
[03:26:16.115]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.115]      // if-block "protType == 1"
[03:26:16.115]        // =>  FALSE
[03:26:16.115]      // skip if-block "protType == 1"
[03:26:16.115]    </control>
[03:26:16.119]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.119]      // if-block "protType == 2"
[03:26:16.119]        // =>  TRUE
[03:26:16.119]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.119]        // if-block "isSWJ"
[03:26:16.119]          // =>  TRUE
[03:26:16.119]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.119]          // if-block "hasDormant"
[03:26:16.119]            // =>  FALSE
[03:26:16.119]          // skip if-block "hasDormant"
[03:26:16.119]        </control>
[03:26:16.119]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.120]          // if-block "!hasDormant"
[03:26:16.120]            // =>  TRUE
[03:26:16.120]          <block atomic="false" info="">
[03:26:16.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.123]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.129]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.134]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.136]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.137]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.137]          </block>
[03:26:16.138]          // end if-block "!hasDormant"
[03:26:16.138]        </control>
[03:26:16.138]        // end if-block "isSWJ"
[03:26:16.138]      </control>
[03:26:16.138]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.138]        // if-block "!isSWJ"
[03:26:16.138]          // =>  FALSE
[03:26:16.138]        // skip if-block "!isSWJ"
[03:26:16.138]      </control>
[03:26:16.138]      <block atomic="false" info="">
[03:26:16.139]        ReadDP(0x0);
[03:26:16.140]  
[03:26:16.140]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.140]  
[03:26:16.141]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.141]      </block>
[03:26:16.141]      // end if-block "protType == 2"
[03:26:16.141]    </control>
[03:26:16.141]  </sequence>
[03:26:16.141]  
[03:26:16.194]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.194]  
[03:26:16.194]  <debugvars>
[03:26:16.194]    // Pre-defined
[03:26:16.194]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.194]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.194]    __dp=0x00000000
[03:26:16.194]    __ap=0x00000000
[03:26:16.194]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.194]    __FlashAddr=0x00000000
[03:26:16.194]    __FlashLen=0x00000000
[03:26:16.194]    __FlashArg=0x00000000
[03:26:16.194]    __FlashOp=0x00000000
[03:26:16.194]    __Result=0x00000000
[03:26:16.194]  </debugvars>
[03:26:16.194]  
[03:26:16.194]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.194]    <block atomic="false" info="">
[03:26:16.194]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.194]        // -> [isSWJ <= 0x00000001]
[03:26:16.194]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.194]        // -> [hasDormant <= 0x00000000]
[03:26:16.194]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.194]        // -> [protType <= 0x00000002]
[03:26:16.194]    </block>
[03:26:16.194]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.194]      // if-block "protType == 1"
[03:26:16.194]        // =>  FALSE
[03:26:16.198]      // skip if-block "protType == 1"
[03:26:16.198]    </control>
[03:26:16.198]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.198]      // if-block "protType == 2"
[03:26:16.198]        // =>  TRUE
[03:26:16.198]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.198]        // if-block "isSWJ"
[03:26:16.198]          // =>  TRUE
[03:26:16.198]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.198]          // if-block "hasDormant"
[03:26:16.198]            // =>  FALSE
[03:26:16.198]          // skip if-block "hasDormant"
[03:26:16.198]        </control>
[03:26:16.198]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.198]          // if-block "!hasDormant"
[03:26:16.198]            // =>  TRUE
[03:26:16.198]          <block atomic="false" info="">
[03:26:16.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.201]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.202]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.202]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.206]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.206]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.210]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.210]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.210]          </block>
[03:26:16.210]          // end if-block "!hasDormant"
[03:26:16.210]        </control>
[03:26:16.210]        // end if-block "isSWJ"
[03:26:16.214]      </control>
[03:26:16.214]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.214]        // if-block "!isSWJ"
[03:26:16.214]          // =>  FALSE
[03:26:16.214]        // skip if-block "!isSWJ"
[03:26:16.214]      </control>
[03:26:16.214]      <block atomic="false" info="">
[03:26:16.214]        ReadDP(0x0);
[03:26:16.214]  
[03:26:16.214]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.214]  
[03:26:16.214]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.214]      </block>
[03:26:16.214]      // end if-block "protType == 2"
[03:26:16.214]    </control>
[03:26:16.214]  </sequence>
[03:26:16.214]  
[03:26:16.268]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.268]  
[03:26:16.269]  <debugvars>
[03:26:16.269]    // Pre-defined
[03:26:16.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.269]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.269]    __dp=0x00000000
[03:26:16.269]    __ap=0x00000000
[03:26:16.269]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.269]    __FlashAddr=0x00000000
[03:26:16.269]    __FlashLen=0x00000000
[03:26:16.269]    __FlashArg=0x00000000
[03:26:16.269]    __FlashOp=0x00000000
[03:26:16.269]    __Result=0x00000000
[03:26:16.271]  </debugvars>
[03:26:16.271]  
[03:26:16.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.271]    <block atomic="false" info="">
[03:26:16.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.271]        // -> [isSWJ <= 0x00000001]
[03:26:16.271]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.271]        // -> [hasDormant <= 0x00000000]
[03:26:16.271]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.271]        // -> [protType <= 0x00000002]
[03:26:16.271]    </block>
[03:26:16.271]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.272]      // if-block "protType == 1"
[03:26:16.272]        // =>  FALSE
[03:26:16.272]      // skip if-block "protType == 1"
[03:26:16.272]    </control>
[03:26:16.272]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.272]      // if-block "protType == 2"
[03:26:16.272]        // =>  TRUE
[03:26:16.272]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.272]        // if-block "isSWJ"
[03:26:16.272]          // =>  TRUE
[03:26:16.272]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.272]          // if-block "hasDormant"
[03:26:16.272]            // =>  FALSE
[03:26:16.272]          // skip if-block "hasDormant"
[03:26:16.272]        </control>
[03:26:16.272]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.272]          // if-block "!hasDormant"
[03:26:16.274]            // =>  TRUE
[03:26:16.274]          <block atomic="false" info="">
[03:26:16.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.276]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.276]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.280]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.280]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.284]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.284]          </block>
[03:26:16.284]          // end if-block "!hasDormant"
[03:26:16.284]        </control>
[03:26:16.284]        // end if-block "isSWJ"
[03:26:16.284]      </control>
[03:26:16.284]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.284]        // if-block "!isSWJ"
[03:26:16.284]          // =>  FALSE
[03:26:16.284]        // skip if-block "!isSWJ"
[03:26:16.284]      </control>
[03:26:16.284]      <block atomic="false" info="">
[03:26:16.284]        ReadDP(0x0);
[03:26:16.284]  
[03:26:16.284]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.284]  
[03:26:16.284]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.284]      </block>
[03:26:16.284]      // end if-block "protType == 2"
[03:26:16.284]    </control>
[03:26:16.284]  </sequence>
[03:26:16.284]  
[03:26:16.345]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.345]  
[03:26:16.345]  <debugvars>
[03:26:16.345]    // Pre-defined
[03:26:16.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.345]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.345]    __dp=0x00000000
[03:26:16.345]    __ap=0x00000000
[03:26:16.345]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.345]    __FlashAddr=0x00000000
[03:26:16.345]    __FlashLen=0x00000000
[03:26:16.345]    __FlashArg=0x00000000
[03:26:16.345]    __FlashOp=0x00000000
[03:26:16.345]    __Result=0x00000000
[03:26:16.345]  </debugvars>
[03:26:16.345]  
[03:26:16.345]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.345]    <block atomic="false" info="">
[03:26:16.345]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.345]        // -> [isSWJ <= 0x00000001]
[03:26:16.345]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.345]        // -> [hasDormant <= 0x00000000]
[03:26:16.345]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.345]        // -> [protType <= 0x00000002]
[03:26:16.345]    </block>
[03:26:16.348]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.348]      // if-block "protType == 1"
[03:26:16.348]        // =>  FALSE
[03:26:16.348]      // skip if-block "protType == 1"
[03:26:16.348]    </control>
[03:26:16.348]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.348]      // if-block "protType == 2"
[03:26:16.348]        // =>  TRUE
[03:26:16.348]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.348]        // if-block "isSWJ"
[03:26:16.349]          // =>  TRUE
[03:26:16.350]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.350]          // if-block "hasDormant"
[03:26:16.350]            // =>  FALSE
[03:26:16.350]          // skip if-block "hasDormant"
[03:26:16.350]        </control>
[03:26:16.350]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.350]          // if-block "!hasDormant"
[03:26:16.350]            // =>  TRUE
[03:26:16.350]          <block atomic="false" info="">
[03:26:16.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.351]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.358]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.360]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.362]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.362]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.362]          </block>
[03:26:16.362]          // end if-block "!hasDormant"
[03:26:16.366]        </control>
[03:26:16.366]        // end if-block "isSWJ"
[03:26:16.366]      </control>
[03:26:16.366]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.366]        // if-block "!isSWJ"
[03:26:16.366]          // =>  FALSE
[03:26:16.366]        // skip if-block "!isSWJ"
[03:26:16.366]      </control>
[03:26:16.366]      <block atomic="false" info="">
[03:26:16.366]        ReadDP(0x0);
[03:26:16.368]  
[03:26:16.368]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.368]  
[03:26:16.368]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.368]      </block>
[03:26:16.368]      // end if-block "protType == 2"
[03:26:16.368]    </control>
[03:26:16.368]  </sequence>
[03:26:16.368]  
[03:26:16.420]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.420]  
[03:26:16.420]  <debugvars>
[03:26:16.420]    // Pre-defined
[03:26:16.420]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.420]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.420]    __dp=0x00000000
[03:26:16.422]    __ap=0x00000000
[03:26:16.422]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.422]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.422]    __FlashAddr=0x00000000
[03:26:16.422]    __FlashLen=0x00000000
[03:26:16.422]    __FlashArg=0x00000000
[03:26:16.422]    __FlashOp=0x00000000
[03:26:16.422]    __Result=0x00000000
[03:26:16.422]  </debugvars>
[03:26:16.422]  
[03:26:16.422]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.422]    <block atomic="false" info="">
[03:26:16.423]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.423]        // -> [isSWJ <= 0x00000001]
[03:26:16.423]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.423]        // -> [hasDormant <= 0x00000000]
[03:26:16.423]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.423]        // -> [protType <= 0x00000002]
[03:26:16.423]    </block>
[03:26:16.423]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.423]      // if-block "protType == 1"
[03:26:16.423]        // =>  FALSE
[03:26:16.423]      // skip if-block "protType == 1"
[03:26:16.423]    </control>
[03:26:16.424]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.424]      // if-block "protType == 2"
[03:26:16.424]        // =>  TRUE
[03:26:16.424]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.424]        // if-block "isSWJ"
[03:26:16.424]          // =>  TRUE
[03:26:16.425]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.425]          // if-block "hasDormant"
[03:26:16.425]            // =>  FALSE
[03:26:16.425]          // skip if-block "hasDormant"
[03:26:16.425]        </control>
[03:26:16.425]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.425]          // if-block "!hasDormant"
[03:26:16.425]            // =>  TRUE
[03:26:16.425]          <block atomic="false" info="">
[03:26:16.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.429]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.429]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.429]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.429]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.433]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.434]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.434]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.434]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.441]          </block>
[03:26:16.441]          // end if-block "!hasDormant"
[03:26:16.441]        </control>
[03:26:16.441]        // end if-block "isSWJ"
[03:26:16.442]      </control>
[03:26:16.442]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.442]        // if-block "!isSWJ"
[03:26:16.442]          // =>  FALSE
[03:26:16.442]        // skip if-block "!isSWJ"
[03:26:16.442]      </control>
[03:26:16.442]      <block atomic="false" info="">
[03:26:16.442]        ReadDP(0x0);
[03:26:16.443]  
[03:26:16.443]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.443]  
[03:26:16.443]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.443]      </block>
[03:26:16.443]      // end if-block "protType == 2"
[03:26:16.443]    </control>
[03:26:16.443]  </sequence>
[03:26:16.443]  
[03:26:16.494]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.494]  
[03:26:16.494]  <debugvars>
[03:26:16.494]    // Pre-defined
[03:26:16.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.494]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.494]    __dp=0x00000000
[03:26:16.494]    __ap=0x00000000
[03:26:16.496]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.496]    __FlashAddr=0x00000000
[03:26:16.496]    __FlashLen=0x00000000
[03:26:16.496]    __FlashArg=0x00000000
[03:26:16.496]    __FlashOp=0x00000000
[03:26:16.496]    __Result=0x00000000
[03:26:16.496]  </debugvars>
[03:26:16.496]  
[03:26:16.496]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.496]    <block atomic="false" info="">
[03:26:16.496]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.496]        // -> [isSWJ <= 0x00000001]
[03:26:16.496]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.496]        // -> [hasDormant <= 0x00000000]
[03:26:16.496]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.498]        // -> [protType <= 0x00000002]
[03:26:16.498]    </block>
[03:26:16.498]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.498]      // if-block "protType == 1"
[03:26:16.498]        // =>  FALSE
[03:26:16.498]      // skip if-block "protType == 1"
[03:26:16.498]    </control>
[03:26:16.498]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.498]      // if-block "protType == 2"
[03:26:16.498]        // =>  TRUE
[03:26:16.498]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.498]        // if-block "isSWJ"
[03:26:16.498]          // =>  TRUE
[03:26:16.498]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.498]          // if-block "hasDormant"
[03:26:16.498]            // =>  FALSE
[03:26:16.498]          // skip if-block "hasDormant"
[03:26:16.498]        </control>
[03:26:16.498]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.500]          // if-block "!hasDormant"
[03:26:16.500]            // =>  TRUE
[03:26:16.500]          <block atomic="false" info="">
[03:26:16.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.502]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.506]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.508]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.510]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.510]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.510]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.510]          </block>
[03:26:16.510]          // end if-block "!hasDormant"
[03:26:16.510]        </control>
[03:26:16.510]        // end if-block "isSWJ"
[03:26:16.510]      </control>
[03:26:16.510]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.510]        // if-block "!isSWJ"
[03:26:16.510]          // =>  FALSE
[03:26:16.510]        // skip if-block "!isSWJ"
[03:26:16.510]      </control>
[03:26:16.510]      <block atomic="false" info="">
[03:26:16.510]        ReadDP(0x0);
[03:26:16.514]  
[03:26:16.514]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.514]  
[03:26:16.514]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.514]      </block>
[03:26:16.514]      // end if-block "protType == 2"
[03:26:16.514]    </control>
[03:26:16.514]  </sequence>
[03:26:16.514]  
[03:26:16.566]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.566]  
[03:26:16.566]  <debugvars>
[03:26:16.566]    // Pre-defined
[03:26:16.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.566]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.566]    __dp=0x00000000
[03:26:16.566]    __ap=0x00000000
[03:26:16.566]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.566]    __FlashAddr=0x00000000
[03:26:16.566]    __FlashLen=0x00000000
[03:26:16.566]    __FlashArg=0x00000000
[03:26:16.566]    __FlashOp=0x00000000
[03:26:16.566]    __Result=0x00000000
[03:26:16.566]  </debugvars>
[03:26:16.566]  
[03:26:16.566]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.566]    <block atomic="false" info="">
[03:26:16.566]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.566]        // -> [isSWJ <= 0x00000001]
[03:26:16.566]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.566]        // -> [hasDormant <= 0x00000000]
[03:26:16.566]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.566]        // -> [protType <= 0x00000002]
[03:26:16.566]    </block>
[03:26:16.566]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.566]      // if-block "protType == 1"
[03:26:16.570]        // =>  FALSE
[03:26:16.570]      // skip if-block "protType == 1"
[03:26:16.570]    </control>
[03:26:16.570]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.570]      // if-block "protType == 2"
[03:26:16.570]        // =>  TRUE
[03:26:16.570]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.570]        // if-block "isSWJ"
[03:26:16.570]          // =>  TRUE
[03:26:16.570]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.570]          // if-block "hasDormant"
[03:26:16.570]            // =>  FALSE
[03:26:16.570]          // skip if-block "hasDormant"
[03:26:16.570]        </control>
[03:26:16.570]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.570]          // if-block "!hasDormant"
[03:26:16.570]            // =>  TRUE
[03:26:16.570]          <block atomic="false" info="">
[03:26:16.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.570]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.574]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.574]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.574]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.574]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.578]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.582]          </block>
[03:26:16.582]          // end if-block "!hasDormant"
[03:26:16.582]        </control>
[03:26:16.582]        // end if-block "isSWJ"
[03:26:16.582]      </control>
[03:26:16.582]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.582]        // if-block "!isSWJ"
[03:26:16.582]          // =>  FALSE
[03:26:16.582]        // skip if-block "!isSWJ"
[03:26:16.582]      </control>
[03:26:16.582]      <block atomic="false" info="">
[03:26:16.582]        ReadDP(0x0);
[03:26:16.582]  
[03:26:16.582]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.582]  
[03:26:16.582]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.586]      </block>
[03:26:16.586]      // end if-block "protType == 2"
[03:26:16.586]    </control>
[03:26:16.586]  </sequence>
[03:26:16.586]  
[03:26:16.639]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.639]  
[03:26:16.639]  <debugvars>
[03:26:16.639]    // Pre-defined
[03:26:16.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.639]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.639]    __dp=0x00000000
[03:26:16.639]    __ap=0x00000000
[03:26:16.639]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.640]    __FlashAddr=0x00000000
[03:26:16.640]    __FlashLen=0x00000000
[03:26:16.640]    __FlashArg=0x00000000
[03:26:16.640]    __FlashOp=0x00000000
[03:26:16.640]    __Result=0x00000000
[03:26:16.640]  </debugvars>
[03:26:16.640]  
[03:26:16.640]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.640]    <block atomic="false" info="">
[03:26:16.640]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.640]        // -> [isSWJ <= 0x00000001]
[03:26:16.640]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.640]        // -> [hasDormant <= 0x00000000]
[03:26:16.640]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.640]        // -> [protType <= 0x00000002]
[03:26:16.642]    </block>
[03:26:16.642]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.642]      // if-block "protType == 1"
[03:26:16.642]        // =>  FALSE
[03:26:16.642]      // skip if-block "protType == 1"
[03:26:16.642]    </control>
[03:26:16.642]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.642]      // if-block "protType == 2"
[03:26:16.642]        // =>  TRUE
[03:26:16.642]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.642]        // if-block "isSWJ"
[03:26:16.642]          // =>  TRUE
[03:26:16.643]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.643]          // if-block "hasDormant"
[03:26:16.643]            // =>  FALSE
[03:26:16.643]          // skip if-block "hasDormant"
[03:26:16.643]        </control>
[03:26:16.643]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.643]          // if-block "!hasDormant"
[03:26:16.643]            // =>  TRUE
[03:26:16.643]          <block atomic="false" info="">
[03:26:16.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.647]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.647]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.647]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.647]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.647]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.647]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.651]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.651]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.651]          </block>
[03:26:16.651]          // end if-block "!hasDormant"
[03:26:16.651]        </control>
[03:26:16.651]        // end if-block "isSWJ"
[03:26:16.651]      </control>
[03:26:16.651]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.651]        // if-block "!isSWJ"
[03:26:16.651]          // =>  FALSE
[03:26:16.651]        // skip if-block "!isSWJ"
[03:26:16.655]      </control>
[03:26:16.655]      <block atomic="false" info="">
[03:26:16.655]        ReadDP(0x0);
[03:26:16.655]  
[03:26:16.655]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.655]  
[03:26:16.655]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.655]      </block>
[03:26:16.655]      // end if-block "protType == 2"
[03:26:16.655]    </control>
[03:26:16.655]  </sequence>
[03:26:16.655]  
[03:26:16.712]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.712]  
[03:26:16.712]  <debugvars>
[03:26:16.713]    // Pre-defined
[03:26:16.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.713]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.713]    __dp=0x00000000
[03:26:16.713]    __ap=0x00000000
[03:26:16.713]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.713]    __FlashAddr=0x00000000
[03:26:16.713]    __FlashLen=0x00000000
[03:26:16.713]    __FlashArg=0x00000000
[03:26:16.713]    __FlashOp=0x00000000
[03:26:16.713]    __Result=0x00000000
[03:26:16.713]  </debugvars>
[03:26:16.713]  
[03:26:16.713]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.713]    <block atomic="false" info="">
[03:26:16.713]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.714]        // -> [isSWJ <= 0x00000001]
[03:26:16.714]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.714]        // -> [hasDormant <= 0x00000000]
[03:26:16.714]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.714]        // -> [protType <= 0x00000002]
[03:26:16.714]    </block>
[03:26:16.714]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.716]      // if-block "protType == 1"
[03:26:16.716]        // =>  FALSE
[03:26:16.716]      // skip if-block "protType == 1"
[03:26:16.716]    </control>
[03:26:16.716]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.716]      // if-block "protType == 2"
[03:26:16.716]        // =>  TRUE
[03:26:16.716]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.716]        // if-block "isSWJ"
[03:26:16.716]          // =>  TRUE
[03:26:16.717]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.717]          // if-block "hasDormant"
[03:26:16.717]            // =>  FALSE
[03:26:16.717]          // skip if-block "hasDormant"
[03:26:16.717]        </control>
[03:26:16.717]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.718]          // if-block "!hasDormant"
[03:26:16.718]            // =>  TRUE
[03:26:16.718]          <block atomic="false" info="">
[03:26:16.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.720]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.725]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.726]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.730]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.730]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.732]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.732]          </block>
[03:26:16.732]          // end if-block "!hasDormant"
[03:26:16.732]        </control>
[03:26:16.732]        // end if-block "isSWJ"
[03:26:16.732]      </control>
[03:26:16.732]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.732]        // if-block "!isSWJ"
[03:26:16.732]          // =>  FALSE
[03:26:16.732]        // skip if-block "!isSWJ"
[03:26:16.732]      </control>
[03:26:16.732]      <block atomic="false" info="">
[03:26:16.732]        ReadDP(0x0);
[03:26:16.734]  
[03:26:16.734]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.734]  
[03:26:16.734]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.734]      </block>
[03:26:16.734]      // end if-block "protType == 2"
[03:26:16.734]    </control>
[03:26:16.734]  </sequence>
[03:26:16.734]  
[03:26:16.787]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.787]  
[03:26:16.787]  <debugvars>
[03:26:16.787]    // Pre-defined
[03:26:16.787]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.787]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.787]    __dp=0x00000000
[03:26:16.787]    __ap=0x00000000
[03:26:16.787]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.787]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.787]    __FlashAddr=0x00000000
[03:26:16.787]    __FlashLen=0x00000000
[03:26:16.787]    __FlashArg=0x00000000
[03:26:16.787]    __FlashOp=0x00000000
[03:26:16.787]    __Result=0x00000000
[03:26:16.789]  </debugvars>
[03:26:16.789]  
[03:26:16.789]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.789]    <block atomic="false" info="">
[03:26:16.789]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.789]        // -> [isSWJ <= 0x00000001]
[03:26:16.789]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.789]        // -> [hasDormant <= 0x00000000]
[03:26:16.789]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.789]        // -> [protType <= 0x00000002]
[03:26:16.790]    </block>
[03:26:16.790]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.790]      // if-block "protType == 1"
[03:26:16.790]        // =>  FALSE
[03:26:16.790]      // skip if-block "protType == 1"
[03:26:16.790]    </control>
[03:26:16.790]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.790]      // if-block "protType == 2"
[03:26:16.791]        // =>  TRUE
[03:26:16.791]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.791]        // if-block "isSWJ"
[03:26:16.791]          // =>  TRUE
[03:26:16.791]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.792]          // if-block "hasDormant"
[03:26:16.792]            // =>  FALSE
[03:26:16.792]          // skip if-block "hasDormant"
[03:26:16.792]        </control>
[03:26:16.792]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.792]          // if-block "!hasDormant"
[03:26:16.792]            // =>  TRUE
[03:26:16.792]          <block atomic="false" info="">
[03:26:16.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.793]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.795]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.797]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.797]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.798]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.800]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.804]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.804]          </block>
[03:26:16.804]          // end if-block "!hasDormant"
[03:26:16.804]        </control>
[03:26:16.804]        // end if-block "isSWJ"
[03:26:16.804]      </control>
[03:26:16.804]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.804]        // if-block "!isSWJ"
[03:26:16.804]          // =>  FALSE
[03:26:16.804]        // skip if-block "!isSWJ"
[03:26:16.804]      </control>
[03:26:16.805]      <block atomic="false" info="">
[03:26:16.805]        ReadDP(0x0);
[03:26:16.808]  
[03:26:16.808]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.808]  
[03:26:16.808]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.808]      </block>
[03:26:16.808]      // end if-block "protType == 2"
[03:26:16.808]    </control>
[03:26:16.808]  </sequence>
[03:26:16.808]  
[03:26:16.862]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.862]  
[03:26:16.862]  <debugvars>
[03:26:16.862]    // Pre-defined
[03:26:16.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.862]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.862]    __dp=0x00000000
[03:26:16.862]    __ap=0x00000000
[03:26:16.862]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.862]    __FlashAddr=0x00000000
[03:26:16.862]    __FlashLen=0x00000000
[03:26:16.862]    __FlashArg=0x00000000
[03:26:16.865]    __FlashOp=0x00000000
[03:26:16.865]    __Result=0x00000000
[03:26:16.865]  </debugvars>
[03:26:16.865]  
[03:26:16.865]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.865]    <block atomic="false" info="">
[03:26:16.865]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.865]        // -> [isSWJ <= 0x00000001]
[03:26:16.866]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.866]        // -> [hasDormant <= 0x00000000]
[03:26:16.866]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.866]        // -> [protType <= 0x00000002]
[03:26:16.866]    </block>
[03:26:16.866]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.866]      // if-block "protType == 1"
[03:26:16.866]        // =>  FALSE
[03:26:16.866]      // skip if-block "protType == 1"
[03:26:16.866]    </control>
[03:26:16.867]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.867]      // if-block "protType == 2"
[03:26:16.867]        // =>  TRUE
[03:26:16.867]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.867]        // if-block "isSWJ"
[03:26:16.867]          // =>  TRUE
[03:26:16.867]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.867]          // if-block "hasDormant"
[03:26:16.867]            // =>  FALSE
[03:26:16.867]          // skip if-block "hasDormant"
[03:26:16.868]        </control>
[03:26:16.868]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.868]          // if-block "!hasDormant"
[03:26:16.868]            // =>  TRUE
[03:26:16.868]          <block atomic="false" info="">
[03:26:16.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.878]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.879]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.879]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.879]          </block>
[03:26:16.879]          // end if-block "!hasDormant"
[03:26:16.879]        </control>
[03:26:16.879]        // end if-block "isSWJ"
[03:26:16.883]      </control>
[03:26:16.883]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.883]        // if-block "!isSWJ"
[03:26:16.883]          // =>  FALSE
[03:26:16.883]        // skip if-block "!isSWJ"
[03:26:16.883]      </control>
[03:26:16.883]      <block atomic="false" info="">
[03:26:16.883]        ReadDP(0x0);
[03:26:16.883]  
[03:26:16.883]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.883]  
[03:26:16.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.883]      </block>
[03:26:16.883]      // end if-block "protType == 2"
[03:26:16.883]    </control>
[03:26:16.883]  </sequence>
[03:26:16.883]  
[03:26:16.937]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:16.937]  
[03:26:16.937]  <debugvars>
[03:26:16.937]    // Pre-defined
[03:26:16.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:16.937]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:16.937]    __dp=0x00000000
[03:26:16.937]    __ap=0x00000000
[03:26:16.937]    __traceout=0x00000000      (Trace Disabled)
[03:26:16.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:16.937]    __FlashAddr=0x00000000
[03:26:16.937]    __FlashLen=0x00000000
[03:26:16.937]    __FlashArg=0x00000000
[03:26:16.937]    __FlashOp=0x00000000
[03:26:16.937]    __Result=0x00000000
[03:26:16.937]  </debugvars>
[03:26:16.937]  
[03:26:16.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:16.937]    <block atomic="false" info="">
[03:26:16.937]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:16.937]        // -> [isSWJ <= 0x00000001]
[03:26:16.937]      __var hasDormant = __protocol & 0x00020000;
[03:26:16.937]        // -> [hasDormant <= 0x00000000]
[03:26:16.937]      __var protType   = __protocol & 0x0000FFFF;
[03:26:16.937]        // -> [protType <= 0x00000002]
[03:26:16.937]    </block>
[03:26:16.937]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:16.937]      // if-block "protType == 1"
[03:26:16.937]        // =>  FALSE
[03:26:16.937]      // skip if-block "protType == 1"
[03:26:16.937]    </control>
[03:26:16.937]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:16.937]      // if-block "protType == 2"
[03:26:16.937]        // =>  TRUE
[03:26:16.937]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:16.937]        // if-block "isSWJ"
[03:26:16.937]          // =>  TRUE
[03:26:16.937]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:16.941]          // if-block "hasDormant"
[03:26:16.941]            // =>  FALSE
[03:26:16.941]          // skip if-block "hasDormant"
[03:26:16.941]        </control>
[03:26:16.941]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:16.941]          // if-block "!hasDormant"
[03:26:16.941]            // =>  TRUE
[03:26:16.941]          <block atomic="false" info="">
[03:26:16.941]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:16.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.941]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:16.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:16.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:16.953]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.953]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:16.953]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:16.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:16.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:16.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:16.959]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:16.959]          </block>
[03:26:16.959]          // end if-block "!hasDormant"
[03:26:16.959]        </control>
[03:26:16.959]        // end if-block "isSWJ"
[03:26:16.959]      </control>
[03:26:16.959]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:16.959]        // if-block "!isSWJ"
[03:26:16.959]          // =>  FALSE
[03:26:16.959]        // skip if-block "!isSWJ"
[03:26:16.961]      </control>
[03:26:16.961]      <block atomic="false" info="">
[03:26:16.961]        ReadDP(0x0);
[03:26:16.961]  
[03:26:16.961]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:16.961]  
[03:26:16.961]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:16.961]      </block>
[03:26:16.961]      // end if-block "protType == 2"
[03:26:16.961]    </control>
[03:26:16.961]  </sequence>
[03:26:16.961]  
[03:26:17.022]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.022]  
[03:26:17.022]  <debugvars>
[03:26:17.022]    // Pre-defined
[03:26:17.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.022]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.022]    __dp=0x00000000
[03:26:17.022]    __ap=0x00000000
[03:26:17.022]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.022]    __FlashAddr=0x00000000
[03:26:17.022]    __FlashLen=0x00000000
[03:26:17.022]    __FlashArg=0x00000000
[03:26:17.022]    __FlashOp=0x00000000
[03:26:17.022]    __Result=0x00000000
[03:26:17.022]  </debugvars>
[03:26:17.022]  
[03:26:17.022]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.022]    <block atomic="false" info="">
[03:26:17.022]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.022]        // -> [isSWJ <= 0x00000001]
[03:26:17.022]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.022]        // -> [hasDormant <= 0x00000000]
[03:26:17.022]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.022]        // -> [protType <= 0x00000002]
[03:26:17.022]    </block>
[03:26:17.022]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.022]      // if-block "protType == 1"
[03:26:17.022]        // =>  FALSE
[03:26:17.022]      // skip if-block "protType == 1"
[03:26:17.022]    </control>
[03:26:17.026]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.026]      // if-block "protType == 2"
[03:26:17.026]        // =>  TRUE
[03:26:17.027]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.027]        // if-block "isSWJ"
[03:26:17.027]          // =>  TRUE
[03:26:17.027]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.027]          // if-block "hasDormant"
[03:26:17.027]            // =>  FALSE
[03:26:17.027]          // skip if-block "hasDormant"
[03:26:17.027]        </control>
[03:26:17.027]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.027]          // if-block "!hasDormant"
[03:26:17.027]            // =>  TRUE
[03:26:17.027]          <block atomic="false" info="">
[03:26:17.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.033]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.037]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.039]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.040]          </block>
[03:26:17.040]          // end if-block "!hasDormant"
[03:26:17.040]        </control>
[03:26:17.040]        // end if-block "isSWJ"
[03:26:17.040]      </control>
[03:26:17.040]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.040]        // if-block "!isSWJ"
[03:26:17.040]          // =>  FALSE
[03:26:17.041]        // skip if-block "!isSWJ"
[03:26:17.041]      </control>
[03:26:17.041]      <block atomic="false" info="">
[03:26:17.041]        ReadDP(0x0);
[03:26:17.041]  
[03:26:17.041]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.041]  
[03:26:17.043]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.043]      </block>
[03:26:17.043]      // end if-block "protType == 2"
[03:26:17.043]    </control>
[03:26:17.043]  </sequence>
[03:26:17.043]  
[03:26:17.097]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.097]  
[03:26:17.098]  <debugvars>
[03:26:17.098]    // Pre-defined
[03:26:17.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.098]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.098]    __dp=0x00000000
[03:26:17.098]    __ap=0x00000000
[03:26:17.098]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.098]    __FlashAddr=0x00000000
[03:26:17.098]    __FlashLen=0x00000000
[03:26:17.098]    __FlashArg=0x00000000
[03:26:17.098]    __FlashOp=0x00000000
[03:26:17.098]    __Result=0x00000000
[03:26:17.098]  </debugvars>
[03:26:17.098]  
[03:26:17.098]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.098]    <block atomic="false" info="">
[03:26:17.098]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.098]        // -> [isSWJ <= 0x00000001]
[03:26:17.098]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.098]        // -> [hasDormant <= 0x00000000]
[03:26:17.098]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.098]        // -> [protType <= 0x00000002]
[03:26:17.098]    </block>
[03:26:17.098]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.101]      // if-block "protType == 1"
[03:26:17.101]        // =>  FALSE
[03:26:17.101]      // skip if-block "protType == 1"
[03:26:17.101]    </control>
[03:26:17.101]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.101]      // if-block "protType == 2"
[03:26:17.101]        // =>  TRUE
[03:26:17.101]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.101]        // if-block "isSWJ"
[03:26:17.101]          // =>  TRUE
[03:26:17.101]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.101]          // if-block "hasDormant"
[03:26:17.101]            // =>  FALSE
[03:26:17.101]          // skip if-block "hasDormant"
[03:26:17.101]        </control>
[03:26:17.101]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.101]          // if-block "!hasDormant"
[03:26:17.101]            // =>  TRUE
[03:26:17.101]          <block atomic="false" info="">
[03:26:17.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.105]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.109]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.109]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.113]          </block>
[03:26:17.113]          // end if-block "!hasDormant"
[03:26:17.113]        </control>
[03:26:17.113]        // end if-block "isSWJ"
[03:26:17.113]      </control>
[03:26:17.113]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.113]        // if-block "!isSWJ"
[03:26:17.113]          // =>  FALSE
[03:26:17.113]        // skip if-block "!isSWJ"
[03:26:17.113]      </control>
[03:26:17.113]      <block atomic="false" info="">
[03:26:17.113]        ReadDP(0x0);
[03:26:17.113]  
[03:26:17.113]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.113]  
[03:26:17.113]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.113]      </block>
[03:26:17.113]      // end if-block "protType == 2"
[03:26:17.113]    </control>
[03:26:17.113]  </sequence>
[03:26:17.113]  
[03:26:17.170]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.170]  
[03:26:17.170]  <debugvars>
[03:26:17.170]    // Pre-defined
[03:26:17.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.170]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.170]    __dp=0x00000000
[03:26:17.170]    __ap=0x00000000
[03:26:17.170]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.170]    __FlashAddr=0x00000000
[03:26:17.170]    __FlashLen=0x00000000
[03:26:17.170]    __FlashArg=0x00000000
[03:26:17.170]    __FlashOp=0x00000000
[03:26:17.170]    __Result=0x00000000
[03:26:17.170]  </debugvars>
[03:26:17.170]  
[03:26:17.170]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.170]    <block atomic="false" info="">
[03:26:17.170]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.170]        // -> [isSWJ <= 0x00000001]
[03:26:17.170]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.170]        // -> [hasDormant <= 0x00000000]
[03:26:17.170]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.170]        // -> [protType <= 0x00000002]
[03:26:17.170]    </block>
[03:26:17.170]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.170]      // if-block "protType == 1"
[03:26:17.170]        // =>  FALSE
[03:26:17.170]      // skip if-block "protType == 1"
[03:26:17.170]    </control>
[03:26:17.170]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.170]      // if-block "protType == 2"
[03:26:17.170]        // =>  TRUE
[03:26:17.170]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.174]        // if-block "isSWJ"
[03:26:17.174]          // =>  TRUE
[03:26:17.174]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.174]          // if-block "hasDormant"
[03:26:17.174]            // =>  FALSE
[03:26:17.174]          // skip if-block "hasDormant"
[03:26:17.174]        </control>
[03:26:17.174]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.174]          // if-block "!hasDormant"
[03:26:17.174]            // =>  TRUE
[03:26:17.174]          <block atomic="false" info="">
[03:26:17.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.178]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.178]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.178]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.178]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.178]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.186]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.191]          </block>
[03:26:17.191]          // end if-block "!hasDormant"
[03:26:17.191]        </control>
[03:26:17.191]        // end if-block "isSWJ"
[03:26:17.191]      </control>
[03:26:17.191]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.192]        // if-block "!isSWJ"
[03:26:17.192]          // =>  FALSE
[03:26:17.192]        // skip if-block "!isSWJ"
[03:26:17.192]      </control>
[03:26:17.192]      <block atomic="false" info="">
[03:26:17.192]        ReadDP(0x0);
[03:26:17.192]  
[03:26:17.192]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.192]  
[03:26:17.192]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.192]      </block>
[03:26:17.192]      // end if-block "protType == 2"
[03:26:17.194]    </control>
[03:26:17.194]  </sequence>
[03:26:17.194]  
[03:26:17.256]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.256]  
[03:26:17.256]  <debugvars>
[03:26:17.256]    // Pre-defined
[03:26:17.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.256]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.256]    __dp=0x00000000
[03:26:17.256]    __ap=0x00000000
[03:26:17.256]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.256]    __FlashAddr=0x00000000
[03:26:17.256]    __FlashLen=0x00000000
[03:26:17.256]    __FlashArg=0x00000000
[03:26:17.256]    __FlashOp=0x00000000
[03:26:17.256]    __Result=0x00000000
[03:26:17.258]  </debugvars>
[03:26:17.258]  
[03:26:17.258]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.258]    <block atomic="false" info="">
[03:26:17.258]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.258]        // -> [isSWJ <= 0x00000001]
[03:26:17.258]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.258]        // -> [hasDormant <= 0x00000000]
[03:26:17.258]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.258]        // -> [protType <= 0x00000002]
[03:26:17.258]    </block>
[03:26:17.258]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.258]      // if-block "protType == 1"
[03:26:17.260]        // =>  FALSE
[03:26:17.260]      // skip if-block "protType == 1"
[03:26:17.260]    </control>
[03:26:17.260]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.260]      // if-block "protType == 2"
[03:26:17.260]        // =>  TRUE
[03:26:17.260]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.260]        // if-block "isSWJ"
[03:26:17.261]          // =>  TRUE
[03:26:17.261]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.261]          // if-block "hasDormant"
[03:26:17.261]            // =>  FALSE
[03:26:17.261]          // skip if-block "hasDormant"
[03:26:17.261]        </control>
[03:26:17.261]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.261]          // if-block "!hasDormant"
[03:26:17.261]            // =>  TRUE
[03:26:17.261]          <block atomic="false" info="">
[03:26:17.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.264]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.267]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.270]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.276]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.276]          </block>
[03:26:17.276]          // end if-block "!hasDormant"
[03:26:17.276]        </control>
[03:26:17.276]        // end if-block "isSWJ"
[03:26:17.276]      </control>
[03:26:17.276]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.276]        // if-block "!isSWJ"
[03:26:17.276]          // =>  FALSE
[03:26:17.276]        // skip if-block "!isSWJ"
[03:26:17.276]      </control>
[03:26:17.276]      <block atomic="false" info="">
[03:26:17.276]        ReadDP(0x0);
[03:26:17.279]  
[03:26:17.279]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.279]  
[03:26:17.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.281]      </block>
[03:26:17.281]      // end if-block "protType == 2"
[03:26:17.281]    </control>
[03:26:17.281]  </sequence>
[03:26:17.281]  
[03:26:17.343]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.343]  
[03:26:17.343]  <debugvars>
[03:26:17.343]    // Pre-defined
[03:26:17.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.343]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.343]    __dp=0x00000000
[03:26:17.343]    __ap=0x00000000
[03:26:17.343]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.343]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.343]    __FlashAddr=0x00000000
[03:26:17.343]    __FlashLen=0x00000000
[03:26:17.343]    __FlashArg=0x00000000
[03:26:17.343]    __FlashOp=0x00000000
[03:26:17.343]    __Result=0x00000000
[03:26:17.343]  </debugvars>
[03:26:17.343]  
[03:26:17.343]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.343]    <block atomic="false" info="">
[03:26:17.343]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.343]        // -> [isSWJ <= 0x00000001]
[03:26:17.343]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.343]        // -> [hasDormant <= 0x00000000]
[03:26:17.343]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.343]        // -> [protType <= 0x00000002]
[03:26:17.343]    </block>
[03:26:17.343]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.343]      // if-block "protType == 1"
[03:26:17.343]        // =>  FALSE
[03:26:17.343]      // skip if-block "protType == 1"
[03:26:17.343]    </control>
[03:26:17.347]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.347]      // if-block "protType == 2"
[03:26:17.347]        // =>  TRUE
[03:26:17.347]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.347]        // if-block "isSWJ"
[03:26:17.347]          // =>  TRUE
[03:26:17.347]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.347]          // if-block "hasDormant"
[03:26:17.347]            // =>  FALSE
[03:26:17.347]          // skip if-block "hasDormant"
[03:26:17.347]        </control>
[03:26:17.347]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.347]          // if-block "!hasDormant"
[03:26:17.347]            // =>  TRUE
[03:26:17.347]          <block atomic="false" info="">
[03:26:17.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.351]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.355]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.359]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.363]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.363]          </block>
[03:26:17.363]          // end if-block "!hasDormant"
[03:26:17.363]        </control>
[03:26:17.363]        // end if-block "isSWJ"
[03:26:17.363]      </control>
[03:26:17.363]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.363]        // if-block "!isSWJ"
[03:26:17.363]          // =>  FALSE
[03:26:17.363]        // skip if-block "!isSWJ"
[03:26:17.363]      </control>
[03:26:17.363]      <block atomic="false" info="">
[03:26:17.363]        ReadDP(0x0);
[03:26:17.371]  
[03:26:17.371]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.371]  
[03:26:17.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.371]      </block>
[03:26:17.371]      // end if-block "protType == 2"
[03:26:17.371]    </control>
[03:26:17.371]  </sequence>
[03:26:17.371]  
[03:26:17.428]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.428]  
[03:26:17.428]  <debugvars>
[03:26:17.428]    // Pre-defined
[03:26:17.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.428]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.428]    __dp=0x00000000
[03:26:17.428]    __ap=0x00000000
[03:26:17.428]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.428]    __FlashAddr=0x00000000
[03:26:17.428]    __FlashLen=0x00000000
[03:26:17.428]    __FlashArg=0x00000000
[03:26:17.428]    __FlashOp=0x00000000
[03:26:17.428]    __Result=0x00000000
[03:26:17.428]  </debugvars>
[03:26:17.428]  
[03:26:17.428]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.428]    <block atomic="false" info="">
[03:26:17.428]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.428]        // -> [isSWJ <= 0x00000001]
[03:26:17.428]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.428]        // -> [hasDormant <= 0x00000000]
[03:26:17.428]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.428]        // -> [protType <= 0x00000002]
[03:26:17.428]    </block>
[03:26:17.428]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.428]      // if-block "protType == 1"
[03:26:17.428]        // =>  FALSE
[03:26:17.428]      // skip if-block "protType == 1"
[03:26:17.432]    </control>
[03:26:17.432]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.432]      // if-block "protType == 2"
[03:26:17.432]        // =>  TRUE
[03:26:17.432]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.432]        // if-block "isSWJ"
[03:26:17.432]          // =>  TRUE
[03:26:17.432]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.432]          // if-block "hasDormant"
[03:26:17.432]            // =>  FALSE
[03:26:17.432]          // skip if-block "hasDormant"
[03:26:17.433]        </control>
[03:26:17.433]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.433]          // if-block "!hasDormant"
[03:26:17.433]            // =>  TRUE
[03:26:17.433]          <block atomic="false" info="">
[03:26:17.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.435]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.438]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.438]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.439]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.440]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.443]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.443]          </block>
[03:26:17.443]          // end if-block "!hasDormant"
[03:26:17.444]        </control>
[03:26:17.444]        // end if-block "isSWJ"
[03:26:17.444]      </control>
[03:26:17.444]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.444]        // if-block "!isSWJ"
[03:26:17.444]          // =>  FALSE
[03:26:17.444]        // skip if-block "!isSWJ"
[03:26:17.444]      </control>
[03:26:17.444]      <block atomic="false" info="">
[03:26:17.444]        ReadDP(0x0);
[03:26:17.446]  
[03:26:17.446]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.446]  
[03:26:17.446]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.446]      </block>
[03:26:17.446]      // end if-block "protType == 2"
[03:26:17.446]    </control>
[03:26:17.446]  </sequence>
[03:26:17.446]  
[03:26:17.501]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.501]  
[03:26:17.501]  <debugvars>
[03:26:17.501]    // Pre-defined
[03:26:17.501]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.501]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.501]    __dp=0x00000000
[03:26:17.501]    __ap=0x00000000
[03:26:17.501]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.501]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.501]    __FlashAddr=0x00000000
[03:26:17.501]    __FlashLen=0x00000000
[03:26:17.501]    __FlashArg=0x00000000
[03:26:17.501]    __FlashOp=0x00000000
[03:26:17.501]    __Result=0x00000000
[03:26:17.501]  </debugvars>
[03:26:17.501]  
[03:26:17.501]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.501]    <block atomic="false" info="">
[03:26:17.501]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.501]        // -> [isSWJ <= 0x00000001]
[03:26:17.504]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.504]        // -> [hasDormant <= 0x00000000]
[03:26:17.504]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.504]        // -> [protType <= 0x00000002]
[03:26:17.504]    </block>
[03:26:17.505]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.505]      // if-block "protType == 1"
[03:26:17.505]        // =>  FALSE
[03:26:17.505]      // skip if-block "protType == 1"
[03:26:17.505]    </control>
[03:26:17.505]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.505]      // if-block "protType == 2"
[03:26:17.505]        // =>  TRUE
[03:26:17.505]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.505]        // if-block "isSWJ"
[03:26:17.505]          // =>  TRUE
[03:26:17.505]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.505]          // if-block "hasDormant"
[03:26:17.507]            // =>  FALSE
[03:26:17.507]          // skip if-block "hasDormant"
[03:26:17.507]        </control>
[03:26:17.507]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.507]          // if-block "!hasDormant"
[03:26:17.507]            // =>  TRUE
[03:26:17.507]          <block atomic="false" info="">
[03:26:17.507]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.509]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.510]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.510]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.510]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.517]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.518]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.519]          </block>
[03:26:17.519]          // end if-block "!hasDormant"
[03:26:17.519]        </control>
[03:26:17.519]        // end if-block "isSWJ"
[03:26:17.519]      </control>
[03:26:17.519]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.519]        // if-block "!isSWJ"
[03:26:17.519]          // =>  FALSE
[03:26:17.519]        // skip if-block "!isSWJ"
[03:26:17.519]      </control>
[03:26:17.520]      <block atomic="false" info="">
[03:26:17.520]        ReadDP(0x0);
[03:26:17.521]  
[03:26:17.521]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.521]  
[03:26:17.521]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.521]      </block>
[03:26:17.521]      // end if-block "protType == 2"
[03:26:17.521]    </control>
[03:26:17.521]  </sequence>
[03:26:17.521]  
[03:26:17.575]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.575]  
[03:26:17.575]  <debugvars>
[03:26:17.575]    // Pre-defined
[03:26:17.575]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.575]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.575]    __dp=0x00000000
[03:26:17.575]    __ap=0x00000000
[03:26:17.575]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.575]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.575]    __FlashAddr=0x00000000
[03:26:17.575]    __FlashLen=0x00000000
[03:26:17.575]    __FlashArg=0x00000000
[03:26:17.575]    __FlashOp=0x00000000
[03:26:17.575]    __Result=0x00000000
[03:26:17.575]  </debugvars>
[03:26:17.575]  
[03:26:17.578]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.578]    <block atomic="false" info="">
[03:26:17.578]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.578]        // -> [isSWJ <= 0x00000001]
[03:26:17.578]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.578]        // -> [hasDormant <= 0x00000000]
[03:26:17.578]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.578]        // -> [protType <= 0x00000002]
[03:26:17.578]    </block>
[03:26:17.578]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.578]      // if-block "protType == 1"
[03:26:17.578]        // =>  FALSE
[03:26:17.578]      // skip if-block "protType == 1"
[03:26:17.578]    </control>
[03:26:17.578]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.578]      // if-block "protType == 2"
[03:26:17.578]        // =>  TRUE
[03:26:17.580]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.580]        // if-block "isSWJ"
[03:26:17.580]          // =>  TRUE
[03:26:17.580]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.580]          // if-block "hasDormant"
[03:26:17.580]            // =>  FALSE
[03:26:17.580]          // skip if-block "hasDormant"
[03:26:17.580]        </control>
[03:26:17.580]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.580]          // if-block "!hasDormant"
[03:26:17.580]            // =>  TRUE
[03:26:17.580]          <block atomic="false" info="">
[03:26:17.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.595]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.596]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.596]          </block>
[03:26:17.596]          // end if-block "!hasDormant"
[03:26:17.596]        </control>
[03:26:17.596]        // end if-block "isSWJ"
[03:26:17.596]      </control>
[03:26:17.596]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.596]        // if-block "!isSWJ"
[03:26:17.596]          // =>  FALSE
[03:26:17.596]        // skip if-block "!isSWJ"
[03:26:17.596]      </control>
[03:26:17.596]      <block atomic="false" info="">
[03:26:17.596]        ReadDP(0x0);
[03:26:17.599]  
[03:26:17.599]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.599]  
[03:26:17.599]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.599]      </block>
[03:26:17.599]      // end if-block "protType == 2"
[03:26:17.599]    </control>
[03:26:17.599]  </sequence>
[03:26:17.599]  
[03:26:17.660]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.660]  
[03:26:17.660]  <debugvars>
[03:26:17.660]    // Pre-defined
[03:26:17.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.660]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.660]    __dp=0x00000000
[03:26:17.660]    __ap=0x00000000
[03:26:17.660]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.660]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.660]    __FlashAddr=0x00000000
[03:26:17.660]    __FlashLen=0x00000000
[03:26:17.660]    __FlashArg=0x00000000
[03:26:17.660]    __FlashOp=0x00000000
[03:26:17.660]    __Result=0x00000000
[03:26:17.660]  </debugvars>
[03:26:17.660]  
[03:26:17.660]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.662]    <block atomic="false" info="">
[03:26:17.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.662]        // -> [isSWJ <= 0x00000001]
[03:26:17.662]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.662]        // -> [hasDormant <= 0x00000000]
[03:26:17.662]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.662]        // -> [protType <= 0x00000002]
[03:26:17.662]    </block>
[03:26:17.662]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.662]      // if-block "protType == 1"
[03:26:17.663]        // =>  FALSE
[03:26:17.663]      // skip if-block "protType == 1"
[03:26:17.663]    </control>
[03:26:17.663]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.663]      // if-block "protType == 2"
[03:26:17.663]        // =>  TRUE
[03:26:17.663]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.663]        // if-block "isSWJ"
[03:26:17.663]          // =>  TRUE
[03:26:17.663]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.663]          // if-block "hasDormant"
[03:26:17.663]            // =>  FALSE
[03:26:17.664]          // skip if-block "hasDormant"
[03:26:17.664]        </control>
[03:26:17.664]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.664]          // if-block "!hasDormant"
[03:26:17.664]            // =>  TRUE
[03:26:17.664]          <block atomic="false" info="">
[03:26:17.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.672]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.672]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.672]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.676]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.676]          </block>
[03:26:17.676]          // end if-block "!hasDormant"
[03:26:17.676]        </control>
[03:26:17.676]        // end if-block "isSWJ"
[03:26:17.676]      </control>
[03:26:17.677]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.677]        // if-block "!isSWJ"
[03:26:17.677]          // =>  FALSE
[03:26:17.677]        // skip if-block "!isSWJ"
[03:26:17.677]      </control>
[03:26:17.677]      <block atomic="false" info="">
[03:26:17.677]        ReadDP(0x0);
[03:26:17.678]  
[03:26:17.678]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.678]  
[03:26:17.678]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.678]      </block>
[03:26:17.678]      // end if-block "protType == 2"
[03:26:17.678]    </control>
[03:26:17.678]  </sequence>
[03:26:17.678]  
[03:26:17.733]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.733]  
[03:26:17.733]  <debugvars>
[03:26:17.733]    // Pre-defined
[03:26:17.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.733]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.733]    __dp=0x00000000
[03:26:17.733]    __ap=0x00000000
[03:26:17.734]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.734]    __FlashAddr=0x00000000
[03:26:17.734]    __FlashLen=0x00000000
[03:26:17.734]    __FlashArg=0x00000000
[03:26:17.734]    __FlashOp=0x00000000
[03:26:17.734]    __Result=0x00000000
[03:26:17.734]  </debugvars>
[03:26:17.734]  
[03:26:17.734]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.734]    <block atomic="false" info="">
[03:26:17.735]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.735]        // -> [isSWJ <= 0x00000001]
[03:26:17.735]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.735]        // -> [hasDormant <= 0x00000000]
[03:26:17.735]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.735]        // -> [protType <= 0x00000002]
[03:26:17.735]    </block>
[03:26:17.735]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.735]      // if-block "protType == 1"
[03:26:17.735]        // =>  FALSE
[03:26:17.735]      // skip if-block "protType == 1"
[03:26:17.735]    </control>
[03:26:17.737]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.737]      // if-block "protType == 2"
[03:26:17.737]        // =>  TRUE
[03:26:17.737]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.737]        // if-block "isSWJ"
[03:26:17.738]          // =>  TRUE
[03:26:17.738]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.738]          // if-block "hasDormant"
[03:26:17.738]            // =>  FALSE
[03:26:17.738]          // skip if-block "hasDormant"
[03:26:17.738]        </control>
[03:26:17.738]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.738]          // if-block "!hasDormant"
[03:26:17.738]            // =>  TRUE
[03:26:17.738]          <block atomic="false" info="">
[03:26:17.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.745]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.745]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.745]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.750]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.763]          </block>
[03:26:17.763]          // end if-block "!hasDormant"
[03:26:17.763]        </control>
[03:26:17.763]        // end if-block "isSWJ"
[03:26:17.763]      </control>
[03:26:17.763]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.763]        // if-block "!isSWJ"
[03:26:17.766]          // =>  FALSE
[03:26:17.766]        // skip if-block "!isSWJ"
[03:26:17.766]      </control>
[03:26:17.766]      <block atomic="false" info="">
[03:26:17.766]        ReadDP(0x0);
[03:26:17.768]  
[03:26:17.768]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.768]  
[03:26:17.768]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.768]      </block>
[03:26:17.768]      // end if-block "protType == 2"
[03:26:17.768]    </control>
[03:26:17.768]  </sequence>
[03:26:17.768]  
[03:26:17.821]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.821]  
[03:26:17.821]  <debugvars>
[03:26:17.821]    // Pre-defined
[03:26:17.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.822]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.822]    __dp=0x00000000
[03:26:17.822]    __ap=0x00000000
[03:26:17.822]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.822]    __FlashAddr=0x00000000
[03:26:17.822]    __FlashLen=0x00000000
[03:26:17.822]    __FlashArg=0x00000000
[03:26:17.822]    __FlashOp=0x00000000
[03:26:17.822]    __Result=0x00000000
[03:26:17.822]  </debugvars>
[03:26:17.822]  
[03:26:17.822]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.822]    <block atomic="false" info="">
[03:26:17.822]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.822]        // -> [isSWJ <= 0x00000001]
[03:26:17.822]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.822]        // -> [hasDormant <= 0x00000000]
[03:26:17.822]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.822]        // -> [protType <= 0x00000002]
[03:26:17.822]    </block>
[03:26:17.822]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.822]      // if-block "protType == 1"
[03:26:17.822]        // =>  FALSE
[03:26:17.825]      // skip if-block "protType == 1"
[03:26:17.825]    </control>
[03:26:17.825]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.825]      // if-block "protType == 2"
[03:26:17.825]        // =>  TRUE
[03:26:17.825]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.825]        // if-block "isSWJ"
[03:26:17.825]          // =>  TRUE
[03:26:17.825]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.825]          // if-block "hasDormant"
[03:26:17.825]            // =>  FALSE
[03:26:17.825]          // skip if-block "hasDormant"
[03:26:17.825]        </control>
[03:26:17.825]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.825]          // if-block "!hasDormant"
[03:26:17.825]            // =>  TRUE
[03:26:17.825]          <block atomic="false" info="">
[03:26:17.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.829]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.829]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.833]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.833]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.837]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.837]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.837]          </block>
[03:26:17.837]          // end if-block "!hasDormant"
[03:26:17.837]        </control>
[03:26:17.837]        // end if-block "isSWJ"
[03:26:17.837]      </control>
[03:26:17.837]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.837]        // if-block "!isSWJ"
[03:26:17.837]          // =>  FALSE
[03:26:17.837]        // skip if-block "!isSWJ"
[03:26:17.837]      </control>
[03:26:17.837]      <block atomic="false" info="">
[03:26:17.837]        ReadDP(0x0);
[03:26:17.841]  
[03:26:17.841]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.841]  
[03:26:17.841]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.841]      </block>
[03:26:17.841]      // end if-block "protType == 2"
[03:26:17.841]    </control>
[03:26:17.841]  </sequence>
[03:26:17.841]  
[03:26:17.893]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.893]  
[03:26:17.893]  <debugvars>
[03:26:17.893]    // Pre-defined
[03:26:17.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.893]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.893]    __dp=0x00000000
[03:26:17.893]    __ap=0x00000000
[03:26:17.893]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.893]    __FlashAddr=0x00000000
[03:26:17.893]    __FlashLen=0x00000000
[03:26:17.893]    __FlashArg=0x00000000
[03:26:17.893]    __FlashOp=0x00000000
[03:26:17.893]    __Result=0x00000000
[03:26:17.893]  </debugvars>
[03:26:17.893]  
[03:26:17.893]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.893]    <block atomic="false" info="">
[03:26:17.893]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.893]        // -> [isSWJ <= 0x00000001]
[03:26:17.893]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.893]        // -> [hasDormant <= 0x00000000]
[03:26:17.897]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.897]        // -> [protType <= 0x00000002]
[03:26:17.897]    </block>
[03:26:17.897]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.897]      // if-block "protType == 1"
[03:26:17.897]        // =>  FALSE
[03:26:17.897]      // skip if-block "protType == 1"
[03:26:17.897]    </control>
[03:26:17.897]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.897]      // if-block "protType == 2"
[03:26:17.897]        // =>  TRUE
[03:26:17.897]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.897]        // if-block "isSWJ"
[03:26:17.897]          // =>  TRUE
[03:26:17.897]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.897]          // if-block "hasDormant"
[03:26:17.897]            // =>  FALSE
[03:26:17.897]          // skip if-block "hasDormant"
[03:26:17.897]        </control>
[03:26:17.897]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.897]          // if-block "!hasDormant"
[03:26:17.897]            // =>  TRUE
[03:26:17.897]          <block atomic="false" info="">
[03:26:17.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.905]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.909]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.913]          </block>
[03:26:17.913]          // end if-block "!hasDormant"
[03:26:17.913]        </control>
[03:26:17.913]        // end if-block "isSWJ"
[03:26:17.913]      </control>
[03:26:17.913]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.913]        // if-block "!isSWJ"
[03:26:17.913]          // =>  FALSE
[03:26:17.917]        // skip if-block "!isSWJ"
[03:26:17.917]      </control>
[03:26:17.917]      <block atomic="false" info="">
[03:26:17.917]        ReadDP(0x0);
[03:26:17.919]  
[03:26:17.919]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.919]  
[03:26:17.919]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.919]      </block>
[03:26:17.919]      // end if-block "protType == 2"
[03:26:17.919]    </control>
[03:26:17.919]  </sequence>
[03:26:17.919]  
[03:26:17.978]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:17.978]  
[03:26:17.978]  <debugvars>
[03:26:17.978]    // Pre-defined
[03:26:17.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:17.978]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:17.978]    __dp=0x00000000
[03:26:17.978]    __ap=0x00000000
[03:26:17.978]    __traceout=0x00000000      (Trace Disabled)
[03:26:17.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:17.978]    __FlashAddr=0x00000000
[03:26:17.978]    __FlashLen=0x00000000
[03:26:17.978]    __FlashArg=0x00000000
[03:26:17.978]    __FlashOp=0x00000000
[03:26:17.978]    __Result=0x00000000
[03:26:17.978]  </debugvars>
[03:26:17.978]  
[03:26:17.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:17.978]    <block atomic="false" info="">
[03:26:17.978]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:17.978]        // -> [isSWJ <= 0x00000001]
[03:26:17.978]      __var hasDormant = __protocol & 0x00020000;
[03:26:17.978]        // -> [hasDormant <= 0x00000000]
[03:26:17.978]      __var protType   = __protocol & 0x0000FFFF;
[03:26:17.978]        // -> [protType <= 0x00000002]
[03:26:17.978]    </block>
[03:26:17.982]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:17.982]      // if-block "protType == 1"
[03:26:17.982]        // =>  FALSE
[03:26:17.982]      // skip if-block "protType == 1"
[03:26:17.982]    </control>
[03:26:17.982]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:17.982]      // if-block "protType == 2"
[03:26:17.982]        // =>  TRUE
[03:26:17.982]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:17.982]        // if-block "isSWJ"
[03:26:17.982]          // =>  TRUE
[03:26:17.982]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:17.982]          // if-block "hasDormant"
[03:26:17.982]            // =>  FALSE
[03:26:17.982]          // skip if-block "hasDormant"
[03:26:17.982]        </control>
[03:26:17.982]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:17.982]          // if-block "!hasDormant"
[03:26:17.982]            // =>  TRUE
[03:26:17.982]          <block atomic="false" info="">
[03:26:17.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:17.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.986]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:17.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:17.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:17.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.990]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:17.990]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:17.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:17.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:17.993]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:17.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:17.995]          </block>
[03:26:17.995]          // end if-block "!hasDormant"
[03:26:17.995]        </control>
[03:26:17.995]        // end if-block "isSWJ"
[03:26:17.995]      </control>
[03:26:17.995]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:17.995]        // if-block "!isSWJ"
[03:26:17.995]          // =>  FALSE
[03:26:17.995]        // skip if-block "!isSWJ"
[03:26:17.995]      </control>
[03:26:17.995]      <block atomic="false" info="">
[03:26:17.995]        ReadDP(0x0);
[03:26:17.997]  
[03:26:17.997]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:17.997]  
[03:26:17.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:17.997]      </block>
[03:26:17.997]      // end if-block "protType == 2"
[03:26:17.997]    </control>
[03:26:17.997]  </sequence>
[03:26:17.997]  
[03:26:18.056]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.056]  
[03:26:18.056]  <debugvars>
[03:26:18.057]    // Pre-defined
[03:26:18.057]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.057]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.057]    __dp=0x00000000
[03:26:18.057]    __ap=0x00000000
[03:26:18.057]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.057]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.057]    __FlashAddr=0x00000000
[03:26:18.057]    __FlashLen=0x00000000
[03:26:18.057]    __FlashArg=0x00000000
[03:26:18.057]    __FlashOp=0x00000000
[03:26:18.057]    __Result=0x00000000
[03:26:18.057]  </debugvars>
[03:26:18.057]  
[03:26:18.057]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.057]    <block atomic="false" info="">
[03:26:18.057]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.057]        // -> [isSWJ <= 0x00000001]
[03:26:18.057]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.057]        // -> [hasDormant <= 0x00000000]
[03:26:18.057]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.060]        // -> [protType <= 0x00000002]
[03:26:18.060]    </block>
[03:26:18.060]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.060]      // if-block "protType == 1"
[03:26:18.060]        // =>  FALSE
[03:26:18.060]      // skip if-block "protType == 1"
[03:26:18.060]    </control>
[03:26:18.060]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.060]      // if-block "protType == 2"
[03:26:18.060]        // =>  TRUE
[03:26:18.060]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.060]        // if-block "isSWJ"
[03:26:18.060]          // =>  TRUE
[03:26:18.060]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.060]          // if-block "hasDormant"
[03:26:18.060]            // =>  FALSE
[03:26:18.060]          // skip if-block "hasDormant"
[03:26:18.060]        </control>
[03:26:18.060]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.060]          // if-block "!hasDormant"
[03:26:18.060]            // =>  TRUE
[03:26:18.060]          <block atomic="false" info="">
[03:26:18.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.064]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.064]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.064]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.068]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.074]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.074]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.074]          </block>
[03:26:18.074]          // end if-block "!hasDormant"
[03:26:18.074]        </control>
[03:26:18.074]        // end if-block "isSWJ"
[03:26:18.074]      </control>
[03:26:18.074]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.076]        // if-block "!isSWJ"
[03:26:18.076]          // =>  FALSE
[03:26:18.076]        // skip if-block "!isSWJ"
[03:26:18.076]      </control>
[03:26:18.076]      <block atomic="false" info="">
[03:26:18.076]        ReadDP(0x0);
[03:26:18.077]  
[03:26:18.077]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.077]  
[03:26:18.077]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.077]      </block>
[03:26:18.077]      // end if-block "protType == 2"
[03:26:18.077]    </control>
[03:26:18.077]  </sequence>
[03:26:18.079]  
[03:26:18.130]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.130]  
[03:26:18.130]  <debugvars>
[03:26:18.130]    // Pre-defined
[03:26:18.130]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.130]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.130]    __dp=0x00000000
[03:26:18.131]    __ap=0x00000000
[03:26:18.131]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.132]    __FlashAddr=0x00000000
[03:26:18.132]    __FlashLen=0x00000000
[03:26:18.132]    __FlashArg=0x00000000
[03:26:18.132]    __FlashOp=0x00000000
[03:26:18.132]    __Result=0x00000000
[03:26:18.132]  </debugvars>
[03:26:18.132]  
[03:26:18.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.132]    <block atomic="false" info="">
[03:26:18.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.133]        // -> [isSWJ <= 0x00000001]
[03:26:18.133]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.133]        // -> [hasDormant <= 0x00000000]
[03:26:18.133]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.133]        // -> [protType <= 0x00000002]
[03:26:18.133]    </block>
[03:26:18.133]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.133]      // if-block "protType == 1"
[03:26:18.133]        // =>  FALSE
[03:26:18.133]      // skip if-block "protType == 1"
[03:26:18.133]    </control>
[03:26:18.133]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.133]      // if-block "protType == 2"
[03:26:18.134]        // =>  TRUE
[03:26:18.134]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.134]        // if-block "isSWJ"
[03:26:18.134]          // =>  TRUE
[03:26:18.134]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.134]          // if-block "hasDormant"
[03:26:18.134]            // =>  FALSE
[03:26:18.134]          // skip if-block "hasDormant"
[03:26:18.134]        </control>
[03:26:18.134]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.134]          // if-block "!hasDormant"
[03:26:18.134]            // =>  TRUE
[03:26:18.134]          <block atomic="false" info="">
[03:26:18.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.137]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.145]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.148]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.148]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.148]          </block>
[03:26:18.151]          // end if-block "!hasDormant"
[03:26:18.151]        </control>
[03:26:18.151]        // end if-block "isSWJ"
[03:26:18.151]      </control>
[03:26:18.151]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.151]        // if-block "!isSWJ"
[03:26:18.151]          // =>  FALSE
[03:26:18.151]        // skip if-block "!isSWJ"
[03:26:18.151]      </control>
[03:26:18.151]      <block atomic="false" info="">
[03:26:18.151]        ReadDP(0x0);
[03:26:18.151]  
[03:26:18.151]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.151]  
[03:26:18.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.151]      </block>
[03:26:18.151]      // end if-block "protType == 2"
[03:26:18.151]    </control>
[03:26:18.151]  </sequence>
[03:26:18.151]  
[03:26:18.203]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.203]  
[03:26:18.203]  <debugvars>
[03:26:18.203]    // Pre-defined
[03:26:18.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.203]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.203]    __dp=0x00000000
[03:26:18.203]    __ap=0x00000000
[03:26:18.203]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.203]    __FlashAddr=0x00000000
[03:26:18.203]    __FlashLen=0x00000000
[03:26:18.203]    __FlashArg=0x00000000
[03:26:18.203]    __FlashOp=0x00000000
[03:26:18.203]    __Result=0x00000000
[03:26:18.203]  </debugvars>
[03:26:18.203]  
[03:26:18.203]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.203]    <block atomic="false" info="">
[03:26:18.203]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.203]        // -> [isSWJ <= 0x00000001]
[03:26:18.203]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.203]        // -> [hasDormant <= 0x00000000]
[03:26:18.203]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.203]        // -> [protType <= 0x00000002]
[03:26:18.203]    </block>
[03:26:18.203]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.203]      // if-block "protType == 1"
[03:26:18.203]        // =>  FALSE
[03:26:18.203]      // skip if-block "protType == 1"
[03:26:18.203]    </control>
[03:26:18.203]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.203]      // if-block "protType == 2"
[03:26:18.203]        // =>  TRUE
[03:26:18.203]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.207]        // if-block "isSWJ"
[03:26:18.207]          // =>  TRUE
[03:26:18.207]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.207]          // if-block "hasDormant"
[03:26:18.207]            // =>  FALSE
[03:26:18.207]          // skip if-block "hasDormant"
[03:26:18.207]        </control>
[03:26:18.207]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.207]          // if-block "!hasDormant"
[03:26:18.207]            // =>  TRUE
[03:26:18.207]          <block atomic="false" info="">
[03:26:18.207]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.207]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.207]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.220]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.221]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.222]          </block>
[03:26:18.222]          // end if-block "!hasDormant"
[03:26:18.222]        </control>
[03:26:18.222]        // end if-block "isSWJ"
[03:26:18.222]      </control>
[03:26:18.222]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.222]        // if-block "!isSWJ"
[03:26:18.222]          // =>  FALSE
[03:26:18.222]        // skip if-block "!isSWJ"
[03:26:18.222]      </control>
[03:26:18.222]      <block atomic="false" info="">
[03:26:18.222]        ReadDP(0x0);
[03:26:18.224]  
[03:26:18.224]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.224]  
[03:26:18.224]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.224]      </block>
[03:26:18.224]      // end if-block "protType == 2"
[03:26:18.224]    </control>
[03:26:18.224]  </sequence>
[03:26:18.224]  
[03:26:18.278]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.278]  
[03:26:18.278]  <debugvars>
[03:26:18.278]    // Pre-defined
[03:26:18.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.278]    __dp=0x00000000
[03:26:18.278]    __ap=0x00000000
[03:26:18.278]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.278]    __FlashAddr=0x00000000
[03:26:18.278]    __FlashLen=0x00000000
[03:26:18.278]    __FlashArg=0x00000000
[03:26:18.278]    __FlashOp=0x00000000
[03:26:18.278]    __Result=0x00000000
[03:26:18.278]  </debugvars>
[03:26:18.278]  
[03:26:18.278]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.278]    <block atomic="false" info="">
[03:26:18.278]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.278]        // -> [isSWJ <= 0x00000001]
[03:26:18.278]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.278]        // -> [hasDormant <= 0x00000000]
[03:26:18.278]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.278]        // -> [protType <= 0x00000002]
[03:26:18.281]    </block>
[03:26:18.281]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.281]      // if-block "protType == 1"
[03:26:18.281]        // =>  FALSE
[03:26:18.281]      // skip if-block "protType == 1"
[03:26:18.281]    </control>
[03:26:18.281]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.281]      // if-block "protType == 2"
[03:26:18.281]        // =>  TRUE
[03:26:18.281]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.281]        // if-block "isSWJ"
[03:26:18.281]          // =>  TRUE
[03:26:18.281]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.281]          // if-block "hasDormant"
[03:26:18.281]            // =>  FALSE
[03:26:18.281]          // skip if-block "hasDormant"
[03:26:18.281]        </control>
[03:26:18.281]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.281]          // if-block "!hasDormant"
[03:26:18.281]            // =>  TRUE
[03:26:18.283]          <block atomic="false" info="">
[03:26:18.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.284]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.291]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.292]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.295]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.298]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.298]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.303]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.303]          </block>
[03:26:18.303]          // end if-block "!hasDormant"
[03:26:18.303]        </control>
[03:26:18.303]        // end if-block "isSWJ"
[03:26:18.303]      </control>
[03:26:18.303]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.303]        // if-block "!isSWJ"
[03:26:18.303]          // =>  FALSE
[03:26:18.303]        // skip if-block "!isSWJ"
[03:26:18.306]      </control>
[03:26:18.306]      <block atomic="false" info="">
[03:26:18.306]        ReadDP(0x0);
[03:26:18.306]  
[03:26:18.306]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.306]  
[03:26:18.306]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.306]      </block>
[03:26:18.306]      // end if-block "protType == 2"
[03:26:18.306]    </control>
[03:26:18.306]  </sequence>
[03:26:18.306]  
[03:26:18.369]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.369]  
[03:26:18.370]  <debugvars>
[03:26:18.370]    // Pre-defined
[03:26:18.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.370]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.370]    __dp=0x00000000
[03:26:18.370]    __ap=0x00000000
[03:26:18.370]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.371]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.371]    __FlashAddr=0x00000000
[03:26:18.371]    __FlashLen=0x00000000
[03:26:18.371]    __FlashArg=0x00000000
[03:26:18.371]    __FlashOp=0x00000000
[03:26:18.371]    __Result=0x00000000
[03:26:18.371]  </debugvars>
[03:26:18.371]  
[03:26:18.371]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.372]    <block atomic="false" info="">
[03:26:18.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.372]        // -> [isSWJ <= 0x00000001]
[03:26:18.372]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.372]        // -> [hasDormant <= 0x00000000]
[03:26:18.372]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.372]        // -> [protType <= 0x00000002]
[03:26:18.372]    </block>
[03:26:18.372]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.373]      // if-block "protType == 1"
[03:26:18.373]        // =>  FALSE
[03:26:18.373]      // skip if-block "protType == 1"
[03:26:18.373]    </control>
[03:26:18.373]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.373]      // if-block "protType == 2"
[03:26:18.373]        // =>  TRUE
[03:26:18.373]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.373]        // if-block "isSWJ"
[03:26:18.373]          // =>  TRUE
[03:26:18.374]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.374]          // if-block "hasDormant"
[03:26:18.374]            // =>  FALSE
[03:26:18.374]          // skip if-block "hasDormant"
[03:26:18.374]        </control>
[03:26:18.374]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.374]          // if-block "!hasDormant"
[03:26:18.374]            // =>  TRUE
[03:26:18.375]          <block atomic="false" info="">
[03:26:18.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.378]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.378]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.379]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.379]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.381]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.381]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.383]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.385]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.386]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.386]          </block>
[03:26:18.387]          // end if-block "!hasDormant"
[03:26:18.387]        </control>
[03:26:18.387]        // end if-block "isSWJ"
[03:26:18.387]      </control>
[03:26:18.387]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.387]        // if-block "!isSWJ"
[03:26:18.387]          // =>  FALSE
[03:26:18.387]        // skip if-block "!isSWJ"
[03:26:18.388]      </control>
[03:26:18.388]      <block atomic="false" info="">
[03:26:18.388]        ReadDP(0x0);
[03:26:18.389]  
[03:26:18.389]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.389]  
[03:26:18.390]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.390]      </block>
[03:26:18.390]      // end if-block "protType == 2"
[03:26:18.390]    </control>
[03:26:18.390]  </sequence>
[03:26:18.390]  
[03:26:18.449]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.449]  
[03:26:18.449]  <debugvars>
[03:26:18.449]    // Pre-defined
[03:26:18.449]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.449]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.449]    __dp=0x00000000
[03:26:18.449]    __ap=0x00000000
[03:26:18.449]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.449]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.449]    __FlashAddr=0x00000000
[03:26:18.449]    __FlashLen=0x00000000
[03:26:18.449]    __FlashArg=0x00000000
[03:26:18.449]    __FlashOp=0x00000000
[03:26:18.449]    __Result=0x00000000
[03:26:18.449]  </debugvars>
[03:26:18.449]  
[03:26:18.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.449]    <block atomic="false" info="">
[03:26:18.449]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.449]        // -> [isSWJ <= 0x00000001]
[03:26:18.449]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.449]        // -> [hasDormant <= 0x00000000]
[03:26:18.449]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.449]        // -> [protType <= 0x00000002]
[03:26:18.449]    </block>
[03:26:18.449]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.449]      // if-block "protType == 1"
[03:26:18.449]        // =>  FALSE
[03:26:18.452]      // skip if-block "protType == 1"
[03:26:18.452]    </control>
[03:26:18.452]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.452]      // if-block "protType == 2"
[03:26:18.452]        // =>  TRUE
[03:26:18.452]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.452]        // if-block "isSWJ"
[03:26:18.452]          // =>  TRUE
[03:26:18.452]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.452]          // if-block "hasDormant"
[03:26:18.454]            // =>  FALSE
[03:26:18.454]          // skip if-block "hasDormant"
[03:26:18.454]        </control>
[03:26:18.454]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.454]          // if-block "!hasDormant"
[03:26:18.454]            // =>  TRUE
[03:26:18.454]          <block atomic="false" info="">
[03:26:18.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.459]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.462]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.462]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.462]          </block>
[03:26:18.462]          // end if-block "!hasDormant"
[03:26:18.465]        </control>
[03:26:18.465]        // end if-block "isSWJ"
[03:26:18.465]      </control>
[03:26:18.465]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.465]        // if-block "!isSWJ"
[03:26:18.465]          // =>  FALSE
[03:26:18.465]        // skip if-block "!isSWJ"
[03:26:18.465]      </control>
[03:26:18.465]      <block atomic="false" info="">
[03:26:18.465]        ReadDP(0x0);
[03:26:18.465]  
[03:26:18.465]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.465]  
[03:26:18.465]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.465]      </block>
[03:26:18.465]      // end if-block "protType == 2"
[03:26:18.465]    </control>
[03:26:18.465]  </sequence>
[03:26:18.465]  
[03:26:18.522]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.522]  
[03:26:18.522]  <debugvars>
[03:26:18.522]    // Pre-defined
[03:26:18.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.523]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.523]    __dp=0x00000000
[03:26:18.523]    __ap=0x00000000
[03:26:18.523]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.523]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.523]    __FlashAddr=0x00000000
[03:26:18.523]    __FlashLen=0x00000000
[03:26:18.523]    __FlashArg=0x00000000
[03:26:18.523]    __FlashOp=0x00000000
[03:26:18.523]    __Result=0x00000000
[03:26:18.523]  </debugvars>
[03:26:18.523]  
[03:26:18.523]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.523]    <block atomic="false" info="">
[03:26:18.524]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.524]        // -> [isSWJ <= 0x00000001]
[03:26:18.524]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.524]        // -> [hasDormant <= 0x00000000]
[03:26:18.524]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.524]        // -> [protType <= 0x00000002]
[03:26:18.524]    </block>
[03:26:18.524]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.524]      // if-block "protType == 1"
[03:26:18.524]        // =>  FALSE
[03:26:18.526]      // skip if-block "protType == 1"
[03:26:18.526]    </control>
[03:26:18.526]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.526]      // if-block "protType == 2"
[03:26:18.526]        // =>  TRUE
[03:26:18.526]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.526]        // if-block "isSWJ"
[03:26:18.526]          // =>  TRUE
[03:26:18.526]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.526]          // if-block "hasDormant"
[03:26:18.526]            // =>  FALSE
[03:26:18.526]          // skip if-block "hasDormant"
[03:26:18.526]        </control>
[03:26:18.526]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.526]          // if-block "!hasDormant"
[03:26:18.526]            // =>  TRUE
[03:26:18.528]          <block atomic="false" info="">
[03:26:18.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.530]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.531]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.533]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.534]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.538]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.538]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.538]          </block>
[03:26:18.538]          // end if-block "!hasDormant"
[03:26:18.538]        </control>
[03:26:18.538]        // end if-block "isSWJ"
[03:26:18.538]      </control>
[03:26:18.538]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.538]        // if-block "!isSWJ"
[03:26:18.538]          // =>  FALSE
[03:26:18.538]        // skip if-block "!isSWJ"
[03:26:18.538]      </control>
[03:26:18.538]      <block atomic="false" info="">
[03:26:18.538]        ReadDP(0x0);
[03:26:18.542]  
[03:26:18.542]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.542]  
[03:26:18.542]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.542]      </block>
[03:26:18.542]      // end if-block "protType == 2"
[03:26:18.542]    </control>
[03:26:18.542]  </sequence>
[03:26:18.542]  
[03:26:18.599]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.599]  
[03:26:18.599]  <debugvars>
[03:26:18.599]    // Pre-defined
[03:26:18.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.599]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.600]    __dp=0x00000000
[03:26:18.600]    __ap=0x00000000
[03:26:18.600]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.601]    __FlashAddr=0x00000000
[03:26:18.601]    __FlashLen=0x00000000
[03:26:18.601]    __FlashArg=0x00000000
[03:26:18.601]    __FlashOp=0x00000000
[03:26:18.601]    __Result=0x00000000
[03:26:18.601]  </debugvars>
[03:26:18.601]  
[03:26:18.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.601]    <block atomic="false" info="">
[03:26:18.601]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.601]        // -> [isSWJ <= 0x00000001]
[03:26:18.601]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.601]        // -> [hasDormant <= 0x00000000]
[03:26:18.601]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.601]        // -> [protType <= 0x00000002]
[03:26:18.601]    </block>
[03:26:18.601]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.601]      // if-block "protType == 1"
[03:26:18.601]        // =>  FALSE
[03:26:18.601]      // skip if-block "protType == 1"
[03:26:18.601]    </control>
[03:26:18.601]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.601]      // if-block "protType == 2"
[03:26:18.601]        // =>  TRUE
[03:26:18.601]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.603]        // if-block "isSWJ"
[03:26:18.603]          // =>  TRUE
[03:26:18.603]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.603]          // if-block "hasDormant"
[03:26:18.603]            // =>  FALSE
[03:26:18.603]          // skip if-block "hasDormant"
[03:26:18.603]        </control>
[03:26:18.603]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.603]          // if-block "!hasDormant"
[03:26:18.603]            // =>  TRUE
[03:26:18.603]          <block atomic="false" info="">
[03:26:18.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.607]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.607]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.611]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.614]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.615]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.615]          </block>
[03:26:18.615]          // end if-block "!hasDormant"
[03:26:18.615]        </control>
[03:26:18.615]        // end if-block "isSWJ"
[03:26:18.615]      </control>
[03:26:18.619]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.619]        // if-block "!isSWJ"
[03:26:18.619]          // =>  FALSE
[03:26:18.619]        // skip if-block "!isSWJ"
[03:26:18.619]      </control>
[03:26:18.619]      <block atomic="false" info="">
[03:26:18.619]        ReadDP(0x0);
[03:26:18.619]  
[03:26:18.619]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.619]  
[03:26:18.619]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.619]      </block>
[03:26:18.619]      // end if-block "protType == 2"
[03:26:18.619]    </control>
[03:26:18.619]  </sequence>
[03:26:18.619]  
[03:26:18.673]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.673]  
[03:26:18.673]  <debugvars>
[03:26:18.673]    // Pre-defined
[03:26:18.673]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.673]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.673]    __dp=0x00000000
[03:26:18.673]    __ap=0x00000000
[03:26:18.673]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.673]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.673]    __FlashAddr=0x00000000
[03:26:18.673]    __FlashLen=0x00000000
[03:26:18.673]    __FlashArg=0x00000000
[03:26:18.673]    __FlashOp=0x00000000
[03:26:18.673]    __Result=0x00000000
[03:26:18.673]  </debugvars>
[03:26:18.673]  
[03:26:18.673]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.673]    <block atomic="false" info="">
[03:26:18.673]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.673]        // -> [isSWJ <= 0x00000001]
[03:26:18.673]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.673]        // -> [hasDormant <= 0x00000000]
[03:26:18.673]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.673]        // -> [protType <= 0x00000002]
[03:26:18.673]    </block>
[03:26:18.673]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.673]      // if-block "protType == 1"
[03:26:18.673]        // =>  FALSE
[03:26:18.673]      // skip if-block "protType == 1"
[03:26:18.673]    </control>
[03:26:18.673]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.673]      // if-block "protType == 2"
[03:26:18.677]        // =>  TRUE
[03:26:18.677]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.677]        // if-block "isSWJ"
[03:26:18.677]          // =>  TRUE
[03:26:18.677]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.677]          // if-block "hasDormant"
[03:26:18.677]            // =>  FALSE
[03:26:18.677]          // skip if-block "hasDormant"
[03:26:18.677]        </control>
[03:26:18.677]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.677]          // if-block "!hasDormant"
[03:26:18.677]            // =>  TRUE
[03:26:18.677]          <block atomic="false" info="">
[03:26:18.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.681]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.685]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.689]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.693]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.693]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.693]          </block>
[03:26:18.693]          // end if-block "!hasDormant"
[03:26:18.693]        </control>
[03:26:18.693]        // end if-block "isSWJ"
[03:26:18.697]      </control>
[03:26:18.697]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.697]        // if-block "!isSWJ"
[03:26:18.697]          // =>  FALSE
[03:26:18.697]        // skip if-block "!isSWJ"
[03:26:18.697]      </control>
[03:26:18.697]      <block atomic="false" info="">
[03:26:18.697]        ReadDP(0x0);
[03:26:18.697]  
[03:26:18.697]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.697]  
[03:26:18.697]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.697]      </block>
[03:26:18.697]      // end if-block "protType == 2"
[03:26:18.697]    </control>
[03:26:18.697]  </sequence>
[03:26:18.697]  
[03:26:18.748]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.748]  
[03:26:18.748]  <debugvars>
[03:26:18.748]    // Pre-defined
[03:26:18.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.748]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.748]    __dp=0x00000000
[03:26:18.748]    __ap=0x00000000
[03:26:18.748]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.748]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.748]    __FlashAddr=0x00000000
[03:26:18.748]    __FlashLen=0x00000000
[03:26:18.748]    __FlashArg=0x00000000
[03:26:18.748]    __FlashOp=0x00000000
[03:26:18.748]    __Result=0x00000000
[03:26:18.748]  </debugvars>
[03:26:18.748]  
[03:26:18.748]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.748]    <block atomic="false" info="">
[03:26:18.748]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.748]        // -> [isSWJ <= 0x00000001]
[03:26:18.748]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.748]        // -> [hasDormant <= 0x00000000]
[03:26:18.748]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.748]        // -> [protType <= 0x00000002]
[03:26:18.748]    </block>
[03:26:18.748]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.748]      // if-block "protType == 1"
[03:26:18.748]        // =>  FALSE
[03:26:18.748]      // skip if-block "protType == 1"
[03:26:18.748]    </control>
[03:26:18.748]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.748]      // if-block "protType == 2"
[03:26:18.748]        // =>  TRUE
[03:26:18.748]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.748]        // if-block "isSWJ"
[03:26:18.748]          // =>  TRUE
[03:26:18.752]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.752]          // if-block "hasDormant"
[03:26:18.752]            // =>  FALSE
[03:26:18.752]          // skip if-block "hasDormant"
[03:26:18.752]        </control>
[03:26:18.752]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.752]          // if-block "!hasDormant"
[03:26:18.752]            // =>  TRUE
[03:26:18.752]          <block atomic="false" info="">
[03:26:18.752]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.756]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.760]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.760]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.760]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.760]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.764]          </block>
[03:26:18.764]          // end if-block "!hasDormant"
[03:26:18.764]        </control>
[03:26:18.764]        // end if-block "isSWJ"
[03:26:18.764]      </control>
[03:26:18.764]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.764]        // if-block "!isSWJ"
[03:26:18.764]          // =>  FALSE
[03:26:18.764]        // skip if-block "!isSWJ"
[03:26:18.764]      </control>
[03:26:18.764]      <block atomic="false" info="">
[03:26:18.768]        ReadDP(0x0);
[03:26:18.772]  
[03:26:18.772]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.772]  
[03:26:18.772]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.772]      </block>
[03:26:18.772]      // end if-block "protType == 2"
[03:26:18.772]    </control>
[03:26:18.772]  </sequence>
[03:26:18.772]  
[03:26:18.833]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.833]  
[03:26:18.833]  <debugvars>
[03:26:18.833]    // Pre-defined
[03:26:18.833]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.833]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.833]    __dp=0x00000000
[03:26:18.833]    __ap=0x00000000
[03:26:18.833]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.833]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.833]    __FlashAddr=0x00000000
[03:26:18.833]    __FlashLen=0x00000000
[03:26:18.833]    __FlashArg=0x00000000
[03:26:18.833]    __FlashOp=0x00000000
[03:26:18.833]    __Result=0x00000000
[03:26:18.833]  </debugvars>
[03:26:18.833]  
[03:26:18.833]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.833]    <block atomic="false" info="">
[03:26:18.833]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.833]        // -> [isSWJ <= 0x00000001]
[03:26:18.833]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.833]        // -> [hasDormant <= 0x00000000]
[03:26:18.833]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.833]        // -> [protType <= 0x00000002]
[03:26:18.833]    </block>
[03:26:18.833]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.833]      // if-block "protType == 1"
[03:26:18.833]        // =>  FALSE
[03:26:18.833]      // skip if-block "protType == 1"
[03:26:18.833]    </control>
[03:26:18.833]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.833]      // if-block "protType == 2"
[03:26:18.833]        // =>  TRUE
[03:26:18.833]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.833]        // if-block "isSWJ"
[03:26:18.837]          // =>  TRUE
[03:26:18.837]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.837]          // if-block "hasDormant"
[03:26:18.837]            // =>  FALSE
[03:26:18.837]          // skip if-block "hasDormant"
[03:26:18.837]        </control>
[03:26:18.837]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.837]          // if-block "!hasDormant"
[03:26:18.837]            // =>  TRUE
[03:26:18.837]          <block atomic="false" info="">
[03:26:18.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.837]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.841]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.845]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.847]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.847]          </block>
[03:26:18.847]          // end if-block "!hasDormant"
[03:26:18.847]        </control>
[03:26:18.848]        // end if-block "isSWJ"
[03:26:18.848]      </control>
[03:26:18.848]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.848]        // if-block "!isSWJ"
[03:26:18.848]          // =>  FALSE
[03:26:18.848]        // skip if-block "!isSWJ"
[03:26:18.848]      </control>
[03:26:18.848]      <block atomic="false" info="">
[03:26:18.848]        ReadDP(0x0);
[03:26:18.849]  
[03:26:18.849]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.849]  
[03:26:18.849]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.849]      </block>
[03:26:18.849]      // end if-block "protType == 2"
[03:26:18.849]    </control>
[03:26:18.849]  </sequence>
[03:26:18.849]  
[03:26:18.907]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.907]  
[03:26:18.907]  <debugvars>
[03:26:18.907]    // Pre-defined
[03:26:18.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.907]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.907]    __dp=0x00000000
[03:26:18.907]    __ap=0x00000000
[03:26:18.907]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.907]    __FlashAddr=0x00000000
[03:26:18.907]    __FlashLen=0x00000000
[03:26:18.907]    __FlashArg=0x00000000
[03:26:18.907]    __FlashOp=0x00000000
[03:26:18.907]    __Result=0x00000000
[03:26:18.907]  </debugvars>
[03:26:18.907]  
[03:26:18.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.907]    <block atomic="false" info="">
[03:26:18.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.907]        // -> [isSWJ <= 0x00000001]
[03:26:18.907]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.907]        // -> [hasDormant <= 0x00000000]
[03:26:18.907]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.907]        // -> [protType <= 0x00000002]
[03:26:18.907]    </block>
[03:26:18.907]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.907]      // if-block "protType == 1"
[03:26:18.907]        // =>  FALSE
[03:26:18.907]      // skip if-block "protType == 1"
[03:26:18.907]    </control>
[03:26:18.907]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.907]      // if-block "protType == 2"
[03:26:18.907]        // =>  TRUE
[03:26:18.907]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.907]        // if-block "isSWJ"
[03:26:18.907]          // =>  TRUE
[03:26:18.907]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.911]          // if-block "hasDormant"
[03:26:18.911]            // =>  FALSE
[03:26:18.911]          // skip if-block "hasDormant"
[03:26:18.911]        </control>
[03:26:18.911]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.911]          // if-block "!hasDormant"
[03:26:18.911]            // =>  TRUE
[03:26:18.911]          <block atomic="false" info="">
[03:26:18.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.911]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.919]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.923]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.927]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.927]          </block>
[03:26:18.927]          // end if-block "!hasDormant"
[03:26:18.927]        </control>
[03:26:18.927]        // end if-block "isSWJ"
[03:26:18.927]      </control>
[03:26:18.927]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.927]        // if-block "!isSWJ"
[03:26:18.927]          // =>  FALSE
[03:26:18.927]        // skip if-block "!isSWJ"
[03:26:18.927]      </control>
[03:26:18.927]      <block atomic="false" info="">
[03:26:18.927]        ReadDP(0x0);
[03:26:18.931]  
[03:26:18.931]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:18.931]  
[03:26:18.931]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.931]      </block>
[03:26:18.931]      // end if-block "protType == 2"
[03:26:18.931]    </control>
[03:26:18.931]  </sequence>
[03:26:18.931]  
[03:26:18.991]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:18.991]  
[03:26:18.991]  <debugvars>
[03:26:18.991]    // Pre-defined
[03:26:18.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.991]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:18.991]    __dp=0x00000000
[03:26:18.991]    __ap=0x00000000
[03:26:18.991]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.991]    __FlashAddr=0x00000000
[03:26:18.991]    __FlashLen=0x00000000
[03:26:18.991]    __FlashArg=0x00000000
[03:26:18.991]    __FlashOp=0x00000000
[03:26:18.991]    __Result=0x00000000
[03:26:18.991]  </debugvars>
[03:26:18.991]  
[03:26:18.991]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.991]    <block atomic="false" info="">
[03:26:18.994]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.994]        // -> [isSWJ <= 0x00000001]
[03:26:18.994]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.994]        // -> [hasDormant <= 0x00000000]
[03:26:18.994]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.994]        // -> [protType <= 0x00000002]
[03:26:18.994]    </block>
[03:26:18.994]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.994]      // if-block "protType == 1"
[03:26:18.994]        // =>  FALSE
[03:26:18.994]      // skip if-block "protType == 1"
[03:26:18.994]    </control>
[03:26:18.994]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.994]      // if-block "protType == 2"
[03:26:18.994]        // =>  TRUE
[03:26:18.994]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.994]        // if-block "isSWJ"
[03:26:18.994]          // =>  TRUE
[03:26:18.994]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.994]          // if-block "hasDormant"
[03:26:18.994]            // =>  FALSE
[03:26:18.994]          // skip if-block "hasDormant"
[03:26:18.994]        </control>
[03:26:18.996]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.996]          // if-block "!hasDormant"
[03:26:18.996]            // =>  TRUE
[03:26:18.996]          <block atomic="false" info="">
[03:26:18.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.996]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.000]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.004]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.005]          </block>
[03:26:19.005]          // end if-block "!hasDormant"
[03:26:19.005]        </control>
[03:26:19.005]        // end if-block "isSWJ"
[03:26:19.005]      </control>
[03:26:19.005]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.005]        // if-block "!isSWJ"
[03:26:19.005]          // =>  FALSE
[03:26:19.005]        // skip if-block "!isSWJ"
[03:26:19.005]      </control>
[03:26:19.005]      <block atomic="false" info="">
[03:26:19.008]        ReadDP(0x0);
[03:26:19.008]  
[03:26:19.008]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.008]  
[03:26:19.008]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.008]      </block>
[03:26:19.008]      // end if-block "protType == 2"
[03:26:19.008]    </control>
[03:26:19.008]  </sequence>
[03:26:19.008]  
[03:26:19.066]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.066]  
[03:26:19.066]  <debugvars>
[03:26:19.066]    // Pre-defined
[03:26:19.066]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.066]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.067]    __dp=0x00000000
[03:26:19.067]    __ap=0x00000000
[03:26:19.067]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.067]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.067]    __FlashAddr=0x00000000
[03:26:19.067]    __FlashLen=0x00000000
[03:26:19.067]    __FlashArg=0x00000000
[03:26:19.067]    __FlashOp=0x00000000
[03:26:19.067]    __Result=0x00000000
[03:26:19.067]  </debugvars>
[03:26:19.067]  
[03:26:19.067]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.067]    <block atomic="false" info="">
[03:26:19.067]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.067]        // -> [isSWJ <= 0x00000001]
[03:26:19.067]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.067]        // -> [hasDormant <= 0x00000000]
[03:26:19.067]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.067]        // -> [protType <= 0x00000002]
[03:26:19.067]    </block>
[03:26:19.067]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.067]      // if-block "protType == 1"
[03:26:19.067]        // =>  FALSE
[03:26:19.067]      // skip if-block "protType == 1"
[03:26:19.067]    </control>
[03:26:19.070]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.070]      // if-block "protType == 2"
[03:26:19.070]        // =>  TRUE
[03:26:19.070]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.070]        // if-block "isSWJ"
[03:26:19.070]          // =>  TRUE
[03:26:19.070]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.070]          // if-block "hasDormant"
[03:26:19.070]            // =>  FALSE
[03:26:19.070]          // skip if-block "hasDormant"
[03:26:19.070]        </control>
[03:26:19.070]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.070]          // if-block "!hasDormant"
[03:26:19.070]            // =>  TRUE
[03:26:19.070]          <block atomic="false" info="">
[03:26:19.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.070]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.074]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.074]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.074]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.078]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.078]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.078]          </block>
[03:26:19.078]          // end if-block "!hasDormant"
[03:26:19.078]        </control>
[03:26:19.078]        // end if-block "isSWJ"
[03:26:19.078]      </control>
[03:26:19.078]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.078]        // if-block "!isSWJ"
[03:26:19.078]          // =>  FALSE
[03:26:19.078]        // skip if-block "!isSWJ"
[03:26:19.078]      </control>
[03:26:19.078]      <block atomic="false" info="">
[03:26:19.078]        ReadDP(0x0);
[03:26:19.082]  
[03:26:19.082]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.082]  
[03:26:19.082]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.082]      </block>
[03:26:19.082]      // end if-block "protType == 2"
[03:26:19.082]    </control>
[03:26:19.082]  </sequence>
[03:26:19.082]  
[03:26:19.139]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.139]  
[03:26:19.139]  <debugvars>
[03:26:19.140]    // Pre-defined
[03:26:19.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.140]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.140]    __dp=0x00000000
[03:26:19.140]    __ap=0x00000000
[03:26:19.140]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.140]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.140]    __FlashAddr=0x00000000
[03:26:19.140]    __FlashLen=0x00000000
[03:26:19.140]    __FlashArg=0x00000000
[03:26:19.140]    __FlashOp=0x00000000
[03:26:19.140]    __Result=0x00000000
[03:26:19.140]  </debugvars>
[03:26:19.140]  
[03:26:19.140]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.140]    <block atomic="false" info="">
[03:26:19.140]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.140]        // -> [isSWJ <= 0x00000001]
[03:26:19.140]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.140]        // -> [hasDormant <= 0x00000000]
[03:26:19.140]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.140]        // -> [protType <= 0x00000002]
[03:26:19.140]    </block>
[03:26:19.140]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.140]      // if-block "protType == 1"
[03:26:19.140]        // =>  FALSE
[03:26:19.140]      // skip if-block "protType == 1"
[03:26:19.140]    </control>
[03:26:19.140]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.140]      // if-block "protType == 2"
[03:26:19.140]        // =>  TRUE
[03:26:19.140]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.140]        // if-block "isSWJ"
[03:26:19.140]          // =>  TRUE
[03:26:19.140]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.140]          // if-block "hasDormant"
[03:26:19.143]            // =>  FALSE
[03:26:19.143]          // skip if-block "hasDormant"
[03:26:19.143]        </control>
[03:26:19.143]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.143]          // if-block "!hasDormant"
[03:26:19.143]            // =>  TRUE
[03:26:19.143]          <block atomic="false" info="">
[03:26:19.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.143]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.147]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.155]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.159]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.159]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.159]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.159]          </block>
[03:26:19.159]          // end if-block "!hasDormant"
[03:26:19.159]        </control>
[03:26:19.159]        // end if-block "isSWJ"
[03:26:19.159]      </control>
[03:26:19.159]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.159]        // if-block "!isSWJ"
[03:26:19.159]          // =>  FALSE
[03:26:19.159]        // skip if-block "!isSWJ"
[03:26:19.159]      </control>
[03:26:19.159]      <block atomic="false" info="">
[03:26:19.159]        ReadDP(0x0);
[03:26:19.164]  
[03:26:19.164]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.164]  
[03:26:19.164]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.164]      </block>
[03:26:19.164]      // end if-block "protType == 2"
[03:26:19.164]    </control>
[03:26:19.164]  </sequence>
[03:26:19.164]  
[03:26:19.224]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.224]  
[03:26:19.224]  <debugvars>
[03:26:19.224]    // Pre-defined
[03:26:19.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.224]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.224]    __dp=0x00000000
[03:26:19.224]    __ap=0x00000000
[03:26:19.224]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.224]    __FlashAddr=0x00000000
[03:26:19.224]    __FlashLen=0x00000000
[03:26:19.224]    __FlashArg=0x00000000
[03:26:19.224]    __FlashOp=0x00000000
[03:26:19.224]    __Result=0x00000000
[03:26:19.224]  </debugvars>
[03:26:19.224]  
[03:26:19.224]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.224]    <block atomic="false" info="">
[03:26:19.224]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.224]        // -> [isSWJ <= 0x00000001]
[03:26:19.224]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.224]        // -> [hasDormant <= 0x00000000]
[03:26:19.224]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.224]        // -> [protType <= 0x00000002]
[03:26:19.224]    </block>
[03:26:19.224]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.224]      // if-block "protType == 1"
[03:26:19.224]        // =>  FALSE
[03:26:19.224]      // skip if-block "protType == 1"
[03:26:19.224]    </control>
[03:26:19.224]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.224]      // if-block "protType == 2"
[03:26:19.224]        // =>  TRUE
[03:26:19.224]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.224]        // if-block "isSWJ"
[03:26:19.228]          // =>  TRUE
[03:26:19.228]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.228]          // if-block "hasDormant"
[03:26:19.228]            // =>  FALSE
[03:26:19.228]          // skip if-block "hasDormant"
[03:26:19.228]        </control>
[03:26:19.228]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.228]          // if-block "!hasDormant"
[03:26:19.228]            // =>  TRUE
[03:26:19.228]          <block atomic="false" info="">
[03:26:19.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.232]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.232]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.232]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.236]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.238]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.245]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.245]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.245]          </block>
[03:26:19.245]          // end if-block "!hasDormant"
[03:26:19.245]        </control>
[03:26:19.245]        // end if-block "isSWJ"
[03:26:19.245]      </control>
[03:26:19.245]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.245]        // if-block "!isSWJ"
[03:26:19.245]          // =>  FALSE
[03:26:19.245]        // skip if-block "!isSWJ"
[03:26:19.245]      </control>
[03:26:19.245]      <block atomic="false" info="">
[03:26:19.245]        ReadDP(0x0);
[03:26:19.249]  
[03:26:19.249]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.249]  
[03:26:19.249]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.249]      </block>
[03:26:19.249]      // end if-block "protType == 2"
[03:26:19.249]    </control>
[03:26:19.249]  </sequence>
[03:26:19.249]  
[03:26:19.310]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.310]  
[03:26:19.310]  <debugvars>
[03:26:19.310]    // Pre-defined
[03:26:19.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.310]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.310]    __dp=0x00000000
[03:26:19.310]    __ap=0x00000000
[03:26:19.310]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.310]    __FlashAddr=0x00000000
[03:26:19.310]    __FlashLen=0x00000000
[03:26:19.310]    __FlashArg=0x00000000
[03:26:19.310]    __FlashOp=0x00000000
[03:26:19.310]    __Result=0x00000000
[03:26:19.310]  </debugvars>
[03:26:19.310]  
[03:26:19.310]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.312]    <block atomic="false" info="">
[03:26:19.312]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.312]        // -> [isSWJ <= 0x00000001]
[03:26:19.312]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.312]        // -> [hasDormant <= 0x00000000]
[03:26:19.312]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.313]        // -> [protType <= 0x00000002]
[03:26:19.313]    </block>
[03:26:19.313]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.313]      // if-block "protType == 1"
[03:26:19.313]        // =>  FALSE
[03:26:19.313]      // skip if-block "protType == 1"
[03:26:19.313]    </control>
[03:26:19.313]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.313]      // if-block "protType == 2"
[03:26:19.313]        // =>  TRUE
[03:26:19.313]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.313]        // if-block "isSWJ"
[03:26:19.313]          // =>  TRUE
[03:26:19.315]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.315]          // if-block "hasDormant"
[03:26:19.315]            // =>  FALSE
[03:26:19.315]          // skip if-block "hasDormant"
[03:26:19.315]        </control>
[03:26:19.315]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.315]          // if-block "!hasDormant"
[03:26:19.315]            // =>  TRUE
[03:26:19.315]          <block atomic="false" info="">
[03:26:19.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.319]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.322]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.325]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.328]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.330]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.332]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.332]          </block>
[03:26:19.332]          // end if-block "!hasDormant"
[03:26:19.332]        </control>
[03:26:19.332]        // end if-block "isSWJ"
[03:26:19.332]      </control>
[03:26:19.332]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.332]        // if-block "!isSWJ"
[03:26:19.332]          // =>  FALSE
[03:26:19.332]        // skip if-block "!isSWJ"
[03:26:19.332]      </control>
[03:26:19.332]      <block atomic="false" info="">
[03:26:19.332]        ReadDP(0x0);
[03:26:19.335]  
[03:26:19.335]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.335]  
[03:26:19.335]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.335]      </block>
[03:26:19.335]      // end if-block "protType == 2"
[03:26:19.336]    </control>
[03:26:19.337]  </sequence>
[03:26:19.337]  
[03:26:19.396]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.396]  
[03:26:19.396]  <debugvars>
[03:26:19.396]    // Pre-defined
[03:26:19.396]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.396]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.396]    __dp=0x00000000
[03:26:19.396]    __ap=0x00000000
[03:26:19.396]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.396]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.396]    __FlashAddr=0x00000000
[03:26:19.396]    __FlashLen=0x00000000
[03:26:19.396]    __FlashArg=0x00000000
[03:26:19.396]    __FlashOp=0x00000000
[03:26:19.396]    __Result=0x00000000
[03:26:19.396]  </debugvars>
[03:26:19.396]  
[03:26:19.396]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.396]    <block atomic="false" info="">
[03:26:19.396]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.396]        // -> [isSWJ <= 0x00000001]
[03:26:19.396]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.396]        // -> [hasDormant <= 0x00000000]
[03:26:19.396]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.396]        // -> [protType <= 0x00000002]
[03:26:19.396]    </block>
[03:26:19.396]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.396]      // if-block "protType == 1"
[03:26:19.396]        // =>  FALSE
[03:26:19.396]      // skip if-block "protType == 1"
[03:26:19.400]    </control>
[03:26:19.400]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.400]      // if-block "protType == 2"
[03:26:19.400]        // =>  TRUE
[03:26:19.400]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.400]        // if-block "isSWJ"
[03:26:19.400]          // =>  TRUE
[03:26:19.400]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.400]          // if-block "hasDormant"
[03:26:19.400]            // =>  FALSE
[03:26:19.400]          // skip if-block "hasDormant"
[03:26:19.401]        </control>
[03:26:19.401]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.401]          // if-block "!hasDormant"
[03:26:19.401]            // =>  TRUE
[03:26:19.401]          <block atomic="false" info="">
[03:26:19.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.402]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.404]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.404]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.406]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.407]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.408]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.411]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.411]          </block>
[03:26:19.411]          // end if-block "!hasDormant"
[03:26:19.411]        </control>
[03:26:19.411]        // end if-block "isSWJ"
[03:26:19.411]      </control>
[03:26:19.412]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.412]        // if-block "!isSWJ"
[03:26:19.412]          // =>  FALSE
[03:26:19.412]        // skip if-block "!isSWJ"
[03:26:19.412]      </control>
[03:26:19.412]      <block atomic="false" info="">
[03:26:19.412]        ReadDP(0x0);
[03:26:19.414]  
[03:26:19.414]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.414]  
[03:26:19.414]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.414]      </block>
[03:26:19.414]      // end if-block "protType == 2"
[03:26:19.414]    </control>
[03:26:19.414]  </sequence>
[03:26:19.414]  
[03:26:19.471]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.471]  
[03:26:19.471]  <debugvars>
[03:26:19.471]    // Pre-defined
[03:26:19.471]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.471]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.471]    __dp=0x00000000
[03:26:19.471]    __ap=0x00000000
[03:26:19.472]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.472]    __FlashAddr=0x00000000
[03:26:19.472]    __FlashLen=0x00000000
[03:26:19.472]    __FlashArg=0x00000000
[03:26:19.472]    __FlashOp=0x00000000
[03:26:19.472]    __Result=0x00000000
[03:26:19.472]  </debugvars>
[03:26:19.472]  
[03:26:19.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.472]    <block atomic="false" info="">
[03:26:19.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.472]        // -> [isSWJ <= 0x00000001]
[03:26:19.472]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.472]        // -> [hasDormant <= 0x00000000]
[03:26:19.472]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.472]        // -> [protType <= 0x00000002]
[03:26:19.472]    </block>
[03:26:19.472]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.472]      // if-block "protType == 1"
[03:26:19.472]        // =>  FALSE
[03:26:19.472]      // skip if-block "protType == 1"
[03:26:19.472]    </control>
[03:26:19.472]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.472]      // if-block "protType == 2"
[03:26:19.472]        // =>  TRUE
[03:26:19.475]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.475]        // if-block "isSWJ"
[03:26:19.475]          // =>  TRUE
[03:26:19.475]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.475]          // if-block "hasDormant"
[03:26:19.475]            // =>  FALSE
[03:26:19.475]          // skip if-block "hasDormant"
[03:26:19.475]        </control>
[03:26:19.475]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.475]          // if-block "!hasDormant"
[03:26:19.475]            // =>  TRUE
[03:26:19.475]          <block atomic="false" info="">
[03:26:19.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.475]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.479]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.485]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.485]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.485]          </block>
[03:26:19.485]          // end if-block "!hasDormant"
[03:26:19.485]        </control>
[03:26:19.485]        // end if-block "isSWJ"
[03:26:19.487]      </control>
[03:26:19.487]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.487]        // if-block "!isSWJ"
[03:26:19.487]          // =>  FALSE
[03:26:19.487]        // skip if-block "!isSWJ"
[03:26:19.488]      </control>
[03:26:19.488]      <block atomic="false" info="">
[03:26:19.488]        ReadDP(0x0);
[03:26:19.489]  
[03:26:19.489]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.489]  
[03:26:19.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.489]      </block>
[03:26:19.489]      // end if-block "protType == 2"
[03:26:19.489]    </control>
[03:26:19.489]  </sequence>
[03:26:19.489]  
[03:26:19.545]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.545]  
[03:26:19.545]  <debugvars>
[03:26:19.545]    // Pre-defined
[03:26:19.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.545]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.545]    __dp=0x00000000
[03:26:19.546]    __ap=0x00000000
[03:26:19.546]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.546]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.546]    __FlashAddr=0x00000000
[03:26:19.546]    __FlashLen=0x00000000
[03:26:19.546]    __FlashArg=0x00000000
[03:26:19.546]    __FlashOp=0x00000000
[03:26:19.546]    __Result=0x00000000
[03:26:19.546]  </debugvars>
[03:26:19.546]  
[03:26:19.546]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.547]    <block atomic="false" info="">
[03:26:19.547]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.547]        // -> [isSWJ <= 0x00000001]
[03:26:19.547]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.547]        // -> [hasDormant <= 0x00000000]
[03:26:19.547]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.547]        // -> [protType <= 0x00000002]
[03:26:19.547]    </block>
[03:26:19.547]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.547]      // if-block "protType == 1"
[03:26:19.547]        // =>  FALSE
[03:26:19.547]      // skip if-block "protType == 1"
[03:26:19.549]    </control>
[03:26:19.549]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.549]      // if-block "protType == 2"
[03:26:19.549]        // =>  TRUE
[03:26:19.549]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.549]        // if-block "isSWJ"
[03:26:19.549]          // =>  TRUE
[03:26:19.549]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.549]          // if-block "hasDormant"
[03:26:19.549]            // =>  FALSE
[03:26:19.549]          // skip if-block "hasDormant"
[03:26:19.549]        </control>
[03:26:19.549]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.549]          // if-block "!hasDormant"
[03:26:19.549]            // =>  TRUE
[03:26:19.549]          <block atomic="false" info="">
[03:26:19.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.553]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.554]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.556]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.559]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.566]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.566]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.567]          </block>
[03:26:19.567]          // end if-block "!hasDormant"
[03:26:19.567]        </control>
[03:26:19.567]        // end if-block "isSWJ"
[03:26:19.567]      </control>
[03:26:19.567]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.567]        // if-block "!isSWJ"
[03:26:19.567]          // =>  FALSE
[03:26:19.567]        // skip if-block "!isSWJ"
[03:26:19.567]      </control>
[03:26:19.569]      <block atomic="false" info="">
[03:26:19.569]        ReadDP(0x0);
[03:26:19.569]  
[03:26:19.569]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.569]  
[03:26:19.569]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.569]      </block>
[03:26:19.570]      // end if-block "protType == 2"
[03:26:19.570]    </control>
[03:26:19.570]  </sequence>
[03:26:19.570]  
[03:26:19.631]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.631]  
[03:26:19.631]  <debugvars>
[03:26:19.631]    // Pre-defined
[03:26:19.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.631]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.633]    __dp=0x00000000
[03:26:19.633]    __ap=0x00000000
[03:26:19.633]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.633]    __FlashAddr=0x00000000
[03:26:19.633]    __FlashLen=0x00000000
[03:26:19.633]    __FlashArg=0x00000000
[03:26:19.633]    __FlashOp=0x00000000
[03:26:19.633]    __Result=0x00000000
[03:26:19.633]  </debugvars>
[03:26:19.633]  
[03:26:19.633]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.633]    <block atomic="false" info="">
[03:26:19.633]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.633]        // -> [isSWJ <= 0x00000001]
[03:26:19.633]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.633]        // -> [hasDormant <= 0x00000000]
[03:26:19.633]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.633]        // -> [protType <= 0x00000002]
[03:26:19.635]    </block>
[03:26:19.635]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.635]      // if-block "protType == 1"
[03:26:19.635]        // =>  FALSE
[03:26:19.635]      // skip if-block "protType == 1"
[03:26:19.635]    </control>
[03:26:19.635]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.635]      // if-block "protType == 2"
[03:26:19.635]        // =>  TRUE
[03:26:19.635]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.635]        // if-block "isSWJ"
[03:26:19.635]          // =>  TRUE
[03:26:19.635]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.635]          // if-block "hasDormant"
[03:26:19.635]            // =>  FALSE
[03:26:19.635]          // skip if-block "hasDormant"
[03:26:19.635]        </control>
[03:26:19.635]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.635]          // if-block "!hasDormant"
[03:26:19.635]            // =>  TRUE
[03:26:19.635]          <block atomic="false" info="">
[03:26:19.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.638]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.643]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.643]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.645]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.647]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.647]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.648]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.651]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.651]          </block>
[03:26:19.651]          // end if-block "!hasDormant"
[03:26:19.651]        </control>
[03:26:19.651]        // end if-block "isSWJ"
[03:26:19.651]      </control>
[03:26:19.651]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.653]        // if-block "!isSWJ"
[03:26:19.653]          // =>  FALSE
[03:26:19.653]        // skip if-block "!isSWJ"
[03:26:19.653]      </control>
[03:26:19.653]      <block atomic="false" info="">
[03:26:19.653]        ReadDP(0x0);
[03:26:19.653]  
[03:26:19.653]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.653]  
[03:26:19.653]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.653]      </block>
[03:26:19.655]      // end if-block "protType == 2"
[03:26:19.656]    </control>
[03:26:19.656]  </sequence>
[03:26:19.656]  
[03:26:19.712]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.712]  
[03:26:19.712]  <debugvars>
[03:26:19.712]    // Pre-defined
[03:26:19.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.712]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.712]    __dp=0x00000000
[03:26:19.712]    __ap=0x00000000
[03:26:19.712]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.712]    __FlashAddr=0x00000000
[03:26:19.712]    __FlashLen=0x00000000
[03:26:19.712]    __FlashArg=0x00000000
[03:26:19.712]    __FlashOp=0x00000000
[03:26:19.712]    __Result=0x00000000
[03:26:19.712]  </debugvars>
[03:26:19.712]  
[03:26:19.712]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.712]    <block atomic="false" info="">
[03:26:19.712]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.712]        // -> [isSWJ <= 0x00000001]
[03:26:19.712]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.712]        // -> [hasDormant <= 0x00000000]
[03:26:19.712]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.712]        // -> [protType <= 0x00000002]
[03:26:19.712]    </block>
[03:26:19.712]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.712]      // if-block "protType == 1"
[03:26:19.712]        // =>  FALSE
[03:26:19.712]      // skip if-block "protType == 1"
[03:26:19.712]    </control>
[03:26:19.712]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.712]      // if-block "protType == 2"
[03:26:19.712]        // =>  TRUE
[03:26:19.712]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.712]        // if-block "isSWJ"
[03:26:19.716]          // =>  TRUE
[03:26:19.716]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.716]          // if-block "hasDormant"
[03:26:19.716]            // =>  FALSE
[03:26:19.716]          // skip if-block "hasDormant"
[03:26:19.716]        </control>
[03:26:19.716]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.716]          // if-block "!hasDormant"
[03:26:19.716]            // =>  TRUE
[03:26:19.716]          <block atomic="false" info="">
[03:26:19.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.716]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.720]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.724]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.724]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.724]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.724]          </block>
[03:26:19.724]          // end if-block "!hasDormant"
[03:26:19.724]        </control>
[03:26:19.724]        // end if-block "isSWJ"
[03:26:19.724]      </control>
[03:26:19.724]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.724]        // if-block "!isSWJ"
[03:26:19.724]          // =>  FALSE
[03:26:19.724]        // skip if-block "!isSWJ"
[03:26:19.724]      </control>
[03:26:19.724]      <block atomic="false" info="">
[03:26:19.728]        ReadDP(0x0);
[03:26:19.728]  
[03:26:19.728]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.728]  
[03:26:19.728]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.728]      </block>
[03:26:19.728]      // end if-block "protType == 2"
[03:26:19.728]    </control>
[03:26:19.728]  </sequence>
[03:26:19.728]  
[03:26:19.785]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.785]  
[03:26:19.785]  <debugvars>
[03:26:19.785]    // Pre-defined
[03:26:19.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.785]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.785]    __dp=0x00000000
[03:26:19.785]    __ap=0x00000000
[03:26:19.785]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.785]    __FlashAddr=0x00000000
[03:26:19.785]    __FlashLen=0x00000000
[03:26:19.785]    __FlashArg=0x00000000
[03:26:19.785]    __FlashOp=0x00000000
[03:26:19.785]    __Result=0x00000000
[03:26:19.785]  </debugvars>
[03:26:19.785]  
[03:26:19.785]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.785]    <block atomic="false" info="">
[03:26:19.785]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.785]        // -> [isSWJ <= 0x00000001]
[03:26:19.785]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.785]        // -> [hasDormant <= 0x00000000]
[03:26:19.785]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.785]        // -> [protType <= 0x00000002]
[03:26:19.785]    </block>
[03:26:19.785]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.785]      // if-block "protType == 1"
[03:26:19.785]        // =>  FALSE
[03:26:19.785]      // skip if-block "protType == 1"
[03:26:19.789]    </control>
[03:26:19.790]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.790]      // if-block "protType == 2"
[03:26:19.790]        // =>  TRUE
[03:26:19.790]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.790]        // if-block "isSWJ"
[03:26:19.790]          // =>  TRUE
[03:26:19.790]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.790]          // if-block "hasDormant"
[03:26:19.790]            // =>  FALSE
[03:26:19.790]          // skip if-block "hasDormant"
[03:26:19.790]        </control>
[03:26:19.790]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.790]          // if-block "!hasDormant"
[03:26:19.790]            // =>  TRUE
[03:26:19.790]          <block atomic="false" info="">
[03:26:19.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.791]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.796]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.798]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.798]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.801]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.801]          </block>
[03:26:19.801]          // end if-block "!hasDormant"
[03:26:19.801]        </control>
[03:26:19.801]        // end if-block "isSWJ"
[03:26:19.801]      </control>
[03:26:19.801]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.801]        // if-block "!isSWJ"
[03:26:19.801]          // =>  FALSE
[03:26:19.801]        // skip if-block "!isSWJ"
[03:26:19.801]      </control>
[03:26:19.803]      <block atomic="false" info="">
[03:26:19.803]        ReadDP(0x0);
[03:26:19.810]  
[03:26:19.810]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.810]  
[03:26:19.811]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.811]      </block>
[03:26:19.811]      // end if-block "protType == 2"
[03:26:19.811]    </control>
[03:26:19.811]  </sequence>
[03:26:19.811]  
[03:26:19.872]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.872]  
[03:26:19.872]  <debugvars>
[03:26:19.872]    // Pre-defined
[03:26:19.873]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.873]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.873]    __dp=0x00000000
[03:26:19.873]    __ap=0x00000000
[03:26:19.873]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.874]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.874]    __FlashAddr=0x00000000
[03:26:19.874]    __FlashLen=0x00000000
[03:26:19.874]    __FlashArg=0x00000000
[03:26:19.874]    __FlashOp=0x00000000
[03:26:19.874]    __Result=0x00000000
[03:26:19.874]  </debugvars>
[03:26:19.874]  
[03:26:19.874]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.874]    <block atomic="false" info="">
[03:26:19.874]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.874]        // -> [isSWJ <= 0x00000001]
[03:26:19.874]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.874]        // -> [hasDormant <= 0x00000000]
[03:26:19.874]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.874]        // -> [protType <= 0x00000002]
[03:26:19.874]    </block>
[03:26:19.874]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.874]      // if-block "protType == 1"
[03:26:19.874]        // =>  FALSE
[03:26:19.874]      // skip if-block "protType == 1"
[03:26:19.874]    </control>
[03:26:19.874]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.876]      // if-block "protType == 2"
[03:26:19.876]        // =>  TRUE
[03:26:19.876]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.876]        // if-block "isSWJ"
[03:26:19.876]          // =>  TRUE
[03:26:19.876]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.876]          // if-block "hasDormant"
[03:26:19.876]            // =>  FALSE
[03:26:19.876]          // skip if-block "hasDormant"
[03:26:19.876]        </control>
[03:26:19.876]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.876]          // if-block "!hasDormant"
[03:26:19.876]            // =>  TRUE
[03:26:19.876]          <block atomic="false" info="">
[03:26:19.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.879]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.880]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.880]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.884]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.886]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.888]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.888]          </block>
[03:26:19.888]          // end if-block "!hasDormant"
[03:26:19.888]        </control>
[03:26:19.888]        // end if-block "isSWJ"
[03:26:19.888]      </control>
[03:26:19.888]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.888]        // if-block "!isSWJ"
[03:26:19.888]          // =>  FALSE
[03:26:19.888]        // skip if-block "!isSWJ"
[03:26:19.888]      </control>
[03:26:19.888]      <block atomic="false" info="">
[03:26:19.888]        ReadDP(0x0);
[03:26:19.888]  
[03:26:19.888]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.888]  
[03:26:19.888]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.888]      </block>
[03:26:19.888]      // end if-block "protType == 2"
[03:26:19.888]    </control>
[03:26:19.888]  </sequence>
[03:26:19.892]  
[03:26:19.945]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:19.945]  
[03:26:19.945]  <debugvars>
[03:26:19.945]    // Pre-defined
[03:26:19.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:19.946]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:19.946]    __dp=0x00000000
[03:26:19.946]    __ap=0x00000000
[03:26:19.946]    __traceout=0x00000000      (Trace Disabled)
[03:26:19.946]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:19.946]    __FlashAddr=0x00000000
[03:26:19.946]    __FlashLen=0x00000000
[03:26:19.946]    __FlashArg=0x00000000
[03:26:19.946]    __FlashOp=0x00000000
[03:26:19.946]    __Result=0x00000000
[03:26:19.946]  </debugvars>
[03:26:19.946]  
[03:26:19.946]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:19.946]    <block atomic="false" info="">
[03:26:19.946]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:19.946]        // -> [isSWJ <= 0x00000001]
[03:26:19.946]      __var hasDormant = __protocol & 0x00020000;
[03:26:19.946]        // -> [hasDormant <= 0x00000000]
[03:26:19.946]      __var protType   = __protocol & 0x0000FFFF;
[03:26:19.946]        // -> [protType <= 0x00000002]
[03:26:19.946]    </block>
[03:26:19.946]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:19.949]      // if-block "protType == 1"
[03:26:19.949]        // =>  FALSE
[03:26:19.949]      // skip if-block "protType == 1"
[03:26:19.949]    </control>
[03:26:19.949]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:19.949]      // if-block "protType == 2"
[03:26:19.949]        // =>  TRUE
[03:26:19.949]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:19.949]        // if-block "isSWJ"
[03:26:19.949]          // =>  TRUE
[03:26:19.949]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:19.949]          // if-block "hasDormant"
[03:26:19.949]            // =>  FALSE
[03:26:19.949]          // skip if-block "hasDormant"
[03:26:19.949]        </control>
[03:26:19.949]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:19.949]          // if-block "!hasDormant"
[03:26:19.949]            // =>  TRUE
[03:26:19.949]          <block atomic="false" info="">
[03:26:19.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:19.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.949]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:19.953]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:19.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:19.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.957]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:19.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:19.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:19.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:19.962]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:19.962]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:19.962]          </block>
[03:26:19.962]          // end if-block "!hasDormant"
[03:26:19.966]        </control>
[03:26:19.966]        // end if-block "isSWJ"
[03:26:19.966]      </control>
[03:26:19.966]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:19.966]        // if-block "!isSWJ"
[03:26:19.966]          // =>  FALSE
[03:26:19.966]        // skip if-block "!isSWJ"
[03:26:19.966]      </control>
[03:26:19.966]      <block atomic="false" info="">
[03:26:19.966]        ReadDP(0x0);
[03:26:19.966]  
[03:26:19.966]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:19.966]  
[03:26:19.966]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:19.966]      </block>
[03:26:19.966]      // end if-block "protType == 2"
[03:26:19.966]    </control>
[03:26:19.966]  </sequence>
[03:26:19.970]  
[03:26:20.031]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.031]  
[03:26:20.031]  <debugvars>
[03:26:20.031]    // Pre-defined
[03:26:20.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.031]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.031]    __dp=0x00000000
[03:26:20.031]    __ap=0x00000000
[03:26:20.031]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.031]    __FlashAddr=0x00000000
[03:26:20.031]    __FlashLen=0x00000000
[03:26:20.031]    __FlashArg=0x00000000
[03:26:20.031]    __FlashOp=0x00000000
[03:26:20.031]    __Result=0x00000000
[03:26:20.031]  </debugvars>
[03:26:20.031]  
[03:26:20.031]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.031]    <block atomic="false" info="">
[03:26:20.031]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.031]        // -> [isSWJ <= 0x00000001]
[03:26:20.031]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.031]        // -> [hasDormant <= 0x00000000]
[03:26:20.031]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.031]        // -> [protType <= 0x00000002]
[03:26:20.031]    </block>
[03:26:20.031]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.035]      // if-block "protType == 1"
[03:26:20.035]        // =>  FALSE
[03:26:20.035]      // skip if-block "protType == 1"
[03:26:20.035]    </control>
[03:26:20.035]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.035]      // if-block "protType == 2"
[03:26:20.035]        // =>  TRUE
[03:26:20.035]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.035]        // if-block "isSWJ"
[03:26:20.035]          // =>  TRUE
[03:26:20.035]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.035]          // if-block "hasDormant"
[03:26:20.035]            // =>  FALSE
[03:26:20.035]          // skip if-block "hasDormant"
[03:26:20.035]        </control>
[03:26:20.035]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.035]          // if-block "!hasDormant"
[03:26:20.035]            // =>  TRUE
[03:26:20.035]          <block atomic="false" info="">
[03:26:20.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.039]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.045]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.047]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.057]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.057]          </block>
[03:26:20.057]          // end if-block "!hasDormant"
[03:26:20.057]        </control>
[03:26:20.057]        // end if-block "isSWJ"
[03:26:20.057]      </control>
[03:26:20.057]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.057]        // if-block "!isSWJ"
[03:26:20.057]          // =>  FALSE
[03:26:20.057]        // skip if-block "!isSWJ"
[03:26:20.057]      </control>
[03:26:20.057]      <block atomic="false" info="">
[03:26:20.057]        ReadDP(0x0);
[03:26:20.059]  
[03:26:20.059]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.059]  
[03:26:20.063]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.063]      </block>
[03:26:20.063]      // end if-block "protType == 2"
[03:26:20.063]    </control>
[03:26:20.063]  </sequence>
[03:26:20.063]  
[03:26:20.116]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.116]  
[03:26:20.116]  <debugvars>
[03:26:20.116]    // Pre-defined
[03:26:20.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.116]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.116]    __dp=0x00000000
[03:26:20.116]    __ap=0x00000000
[03:26:20.116]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.116]    __FlashAddr=0x00000000
[03:26:20.116]    __FlashLen=0x00000000
[03:26:20.116]    __FlashArg=0x00000000
[03:26:20.116]    __FlashOp=0x00000000
[03:26:20.116]    __Result=0x00000000
[03:26:20.116]  </debugvars>
[03:26:20.116]  
[03:26:20.116]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.116]    <block atomic="false" info="">
[03:26:20.116]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.116]        // -> [isSWJ <= 0x00000001]
[03:26:20.116]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.116]        // -> [hasDormant <= 0x00000000]
[03:26:20.116]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.116]        // -> [protType <= 0x00000002]
[03:26:20.116]    </block>
[03:26:20.116]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.116]      // if-block "protType == 1"
[03:26:20.116]        // =>  FALSE
[03:26:20.116]      // skip if-block "protType == 1"
[03:26:20.116]    </control>
[03:26:20.116]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.116]      // if-block "protType == 2"
[03:26:20.116]        // =>  TRUE
[03:26:20.120]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.120]        // if-block "isSWJ"
[03:26:20.120]          // =>  TRUE
[03:26:20.120]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.120]          // if-block "hasDormant"
[03:26:20.120]            // =>  FALSE
[03:26:20.120]          // skip if-block "hasDormant"
[03:26:20.120]        </control>
[03:26:20.120]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.120]          // if-block "!hasDormant"
[03:26:20.120]            // =>  TRUE
[03:26:20.120]          <block atomic="false" info="">
[03:26:20.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.124]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.124]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.124]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.124]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.124]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.128]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.128]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.128]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.128]          </block>
[03:26:20.128]          // end if-block "!hasDormant"
[03:26:20.128]        </control>
[03:26:20.128]        // end if-block "isSWJ"
[03:26:20.128]      </control>
[03:26:20.128]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.128]        // if-block "!isSWJ"
[03:26:20.128]          // =>  FALSE
[03:26:20.128]        // skip if-block "!isSWJ"
[03:26:20.128]      </control>
[03:26:20.128]      <block atomic="false" info="">
[03:26:20.132]        ReadDP(0x0);
[03:26:20.132]  
[03:26:20.132]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.132]  
[03:26:20.132]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.132]      </block>
[03:26:20.132]      // end if-block "protType == 2"
[03:26:20.132]    </control>
[03:26:20.132]  </sequence>
[03:26:20.132]  
[03:26:20.188]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.188]  
[03:26:20.188]  <debugvars>
[03:26:20.189]    // Pre-defined
[03:26:20.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.189]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.189]    __dp=0x00000000
[03:26:20.189]    __ap=0x00000000
[03:26:20.189]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.189]    __FlashAddr=0x00000000
[03:26:20.189]    __FlashLen=0x00000000
[03:26:20.189]    __FlashArg=0x00000000
[03:26:20.189]    __FlashOp=0x00000000
[03:26:20.189]    __Result=0x00000000
[03:26:20.189]  </debugvars>
[03:26:20.189]  
[03:26:20.189]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.189]    <block atomic="false" info="">
[03:26:20.189]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.189]        // -> [isSWJ <= 0x00000001]
[03:26:20.189]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.189]        // -> [hasDormant <= 0x00000000]
[03:26:20.189]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.189]        // -> [protType <= 0x00000002]
[03:26:20.189]    </block>
[03:26:20.189]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.189]      // if-block "protType == 1"
[03:26:20.189]        // =>  FALSE
[03:26:20.189]      // skip if-block "protType == 1"
[03:26:20.189]    </control>
[03:26:20.189]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.189]      // if-block "protType == 2"
[03:26:20.189]        // =>  TRUE
[03:26:20.189]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.192]        // if-block "isSWJ"
[03:26:20.192]          // =>  TRUE
[03:26:20.192]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.192]          // if-block "hasDormant"
[03:26:20.192]            // =>  FALSE
[03:26:20.192]          // skip if-block "hasDormant"
[03:26:20.192]        </control>
[03:26:20.192]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.192]          // if-block "!hasDormant"
[03:26:20.192]            // =>  TRUE
[03:26:20.192]          <block atomic="false" info="">
[03:26:20.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.192]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.192]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.196]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.196]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.200]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.200]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.200]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.200]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.200]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.200]          </block>
[03:26:20.204]          // end if-block "!hasDormant"
[03:26:20.204]        </control>
[03:26:20.204]        // end if-block "isSWJ"
[03:26:20.204]      </control>
[03:26:20.204]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.204]        // if-block "!isSWJ"
[03:26:20.204]          // =>  FALSE
[03:26:20.204]        // skip if-block "!isSWJ"
[03:26:20.204]      </control>
[03:26:20.204]      <block atomic="false" info="">
[03:26:20.204]        ReadDP(0x0);
[03:26:20.204]  
[03:26:20.204]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.204]  
[03:26:20.204]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.204]      </block>
[03:26:20.204]      // end if-block "protType == 2"
[03:26:20.204]    </control>
[03:26:20.204]  </sequence>
[03:26:20.204]  
[03:26:20.260]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.260]  
[03:26:20.260]  <debugvars>
[03:26:20.260]    // Pre-defined
[03:26:20.260]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.260]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.260]    __dp=0x00000000
[03:26:20.260]    __ap=0x00000000
[03:26:20.260]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.260]    __FlashAddr=0x00000000
[03:26:20.260]    __FlashLen=0x00000000
[03:26:20.260]    __FlashArg=0x00000000
[03:26:20.260]    __FlashOp=0x00000000
[03:26:20.260]    __Result=0x00000000
[03:26:20.260]  </debugvars>
[03:26:20.260]  
[03:26:20.260]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.260]    <block atomic="false" info="">
[03:26:20.260]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.260]        // -> [isSWJ <= 0x00000001]
[03:26:20.260]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.260]        // -> [hasDormant <= 0x00000000]
[03:26:20.260]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.260]        // -> [protType <= 0x00000002]
[03:26:20.264]    </block>
[03:26:20.264]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.264]      // if-block "protType == 1"
[03:26:20.264]        // =>  FALSE
[03:26:20.264]      // skip if-block "protType == 1"
[03:26:20.264]    </control>
[03:26:20.264]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.264]      // if-block "protType == 2"
[03:26:20.264]        // =>  TRUE
[03:26:20.264]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.264]        // if-block "isSWJ"
[03:26:20.264]          // =>  TRUE
[03:26:20.264]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.264]          // if-block "hasDormant"
[03:26:20.264]            // =>  FALSE
[03:26:20.264]          // skip if-block "hasDormant"
[03:26:20.264]        </control>
[03:26:20.264]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.264]          // if-block "!hasDormant"
[03:26:20.264]            // =>  TRUE
[03:26:20.264]          <block atomic="false" info="">
[03:26:20.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.264]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.268]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.272]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.272]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.272]          </block>
[03:26:20.272]          // end if-block "!hasDormant"
[03:26:20.272]        </control>
[03:26:20.276]        // end if-block "isSWJ"
[03:26:20.276]      </control>
[03:26:20.276]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.276]        // if-block "!isSWJ"
[03:26:20.276]          // =>  FALSE
[03:26:20.276]        // skip if-block "!isSWJ"
[03:26:20.276]      </control>
[03:26:20.276]      <block atomic="false" info="">
[03:26:20.276]        ReadDP(0x0);
[03:26:20.276]  
[03:26:20.276]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.276]  
[03:26:20.276]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.276]      </block>
[03:26:20.276]      // end if-block "protType == 2"
[03:26:20.276]    </control>
[03:26:20.276]  </sequence>
[03:26:20.276]  
[03:26:20.332]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.332]  
[03:26:20.332]  <debugvars>
[03:26:20.332]    // Pre-defined
[03:26:20.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.332]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.332]    __dp=0x00000000
[03:26:20.332]    __ap=0x00000000
[03:26:20.332]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.332]    __FlashAddr=0x00000000
[03:26:20.332]    __FlashLen=0x00000000
[03:26:20.332]    __FlashArg=0x00000000
[03:26:20.332]    __FlashOp=0x00000000
[03:26:20.332]    __Result=0x00000000
[03:26:20.332]  </debugvars>
[03:26:20.332]  
[03:26:20.332]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.332]    <block atomic="false" info="">
[03:26:20.332]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.332]        // -> [isSWJ <= 0x00000001]
[03:26:20.332]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.332]        // -> [hasDormant <= 0x00000000]
[03:26:20.332]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.336]        // -> [protType <= 0x00000002]
[03:26:20.336]    </block>
[03:26:20.336]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.336]      // if-block "protType == 1"
[03:26:20.336]        // =>  FALSE
[03:26:20.336]      // skip if-block "protType == 1"
[03:26:20.336]    </control>
[03:26:20.336]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.336]      // if-block "protType == 2"
[03:26:20.336]        // =>  TRUE
[03:26:20.336]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.336]        // if-block "isSWJ"
[03:26:20.336]          // =>  TRUE
[03:26:20.336]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.336]          // if-block "hasDormant"
[03:26:20.336]            // =>  FALSE
[03:26:20.336]          // skip if-block "hasDormant"
[03:26:20.336]        </control>
[03:26:20.336]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.336]          // if-block "!hasDormant"
[03:26:20.336]            // =>  TRUE
[03:26:20.336]          <block atomic="false" info="">
[03:26:20.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.336]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.340]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.344]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.344]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.348]          </block>
[03:26:20.348]          // end if-block "!hasDormant"
[03:26:20.348]        </control>
[03:26:20.348]        // end if-block "isSWJ"
[03:26:20.348]      </control>
[03:26:20.348]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.348]        // if-block "!isSWJ"
[03:26:20.348]          // =>  FALSE
[03:26:20.348]        // skip if-block "!isSWJ"
[03:26:20.348]      </control>
[03:26:20.348]      <block atomic="false" info="">
[03:26:20.348]        ReadDP(0x0);
[03:26:20.352]  
[03:26:20.352]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.352]  
[03:26:20.352]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.352]      </block>
[03:26:20.352]      // end if-block "protType == 2"
[03:26:20.352]    </control>
[03:26:20.352]  </sequence>
[03:26:20.352]  
[03:26:20.404]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.404]  
[03:26:20.404]  <debugvars>
[03:26:20.404]    // Pre-defined
[03:26:20.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.404]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.404]    __dp=0x00000000
[03:26:20.404]    __ap=0x00000000
[03:26:20.404]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.404]    __FlashAddr=0x00000000
[03:26:20.404]    __FlashLen=0x00000000
[03:26:20.404]    __FlashArg=0x00000000
[03:26:20.404]    __FlashOp=0x00000000
[03:26:20.404]    __Result=0x00000000
[03:26:20.404]  </debugvars>
[03:26:20.404]  
[03:26:20.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.404]    <block atomic="false" info="">
[03:26:20.404]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.404]        // -> [isSWJ <= 0x00000001]
[03:26:20.404]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.404]        // -> [hasDormant <= 0x00000000]
[03:26:20.404]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.404]        // -> [protType <= 0x00000002]
[03:26:20.404]    </block>
[03:26:20.404]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.404]      // if-block "protType == 1"
[03:26:20.404]        // =>  FALSE
[03:26:20.404]      // skip if-block "protType == 1"
[03:26:20.404]    </control>
[03:26:20.404]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.408]      // if-block "protType == 2"
[03:26:20.408]        // =>  TRUE
[03:26:20.408]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.408]        // if-block "isSWJ"
[03:26:20.408]          // =>  TRUE
[03:26:20.408]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.408]          // if-block "hasDormant"
[03:26:20.408]            // =>  FALSE
[03:26:20.408]          // skip if-block "hasDormant"
[03:26:20.408]        </control>
[03:26:20.408]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.408]          // if-block "!hasDormant"
[03:26:20.408]            // =>  TRUE
[03:26:20.408]          <block atomic="false" info="">
[03:26:20.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.408]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.412]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.412]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.416]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.416]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.416]          </block>
[03:26:20.416]          // end if-block "!hasDormant"
[03:26:20.416]        </control>
[03:26:20.416]        // end if-block "isSWJ"
[03:26:20.420]      </control>
[03:26:20.420]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.420]        // if-block "!isSWJ"
[03:26:20.420]          // =>  FALSE
[03:26:20.420]        // skip if-block "!isSWJ"
[03:26:20.420]      </control>
[03:26:20.420]      <block atomic="false" info="">
[03:26:20.420]        ReadDP(0x0);
[03:26:20.420]  
[03:26:20.420]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.420]  
[03:26:20.420]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.420]      </block>
[03:26:20.420]      // end if-block "protType == 2"
[03:26:20.420]    </control>
[03:26:20.420]  </sequence>
[03:26:20.420]  
[03:26:20.476]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.476]  
[03:26:20.476]  <debugvars>
[03:26:20.476]    // Pre-defined
[03:26:20.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.476]    __dp=0x00000000
[03:26:20.476]    __ap=0x00000000
[03:26:20.476]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.476]    __FlashAddr=0x00000000
[03:26:20.476]    __FlashLen=0x00000000
[03:26:20.476]    __FlashArg=0x00000000
[03:26:20.476]    __FlashOp=0x00000000
[03:26:20.476]    __Result=0x00000000
[03:26:20.476]  </debugvars>
[03:26:20.476]  
[03:26:20.476]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.476]    <block atomic="false" info="">
[03:26:20.476]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.476]        // -> [isSWJ <= 0x00000001]
[03:26:20.476]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.476]        // -> [hasDormant <= 0x00000000]
[03:26:20.476]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.476]        // -> [protType <= 0x00000002]
[03:26:20.476]    </block>
[03:26:20.476]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.480]      // if-block "protType == 1"
[03:26:20.480]        // =>  FALSE
[03:26:20.480]      // skip if-block "protType == 1"
[03:26:20.480]    </control>
[03:26:20.480]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.480]      // if-block "protType == 2"
[03:26:20.480]        // =>  TRUE
[03:26:20.480]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.480]        // if-block "isSWJ"
[03:26:20.480]          // =>  TRUE
[03:26:20.480]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.480]          // if-block "hasDormant"
[03:26:20.480]            // =>  FALSE
[03:26:20.480]          // skip if-block "hasDormant"
[03:26:20.480]        </control>
[03:26:20.480]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.480]          // if-block "!hasDormant"
[03:26:20.480]            // =>  TRUE
[03:26:20.480]          <block atomic="false" info="">
[03:26:20.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.480]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.484]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.484]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.496]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.496]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.496]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.496]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.500]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.500]          </block>
[03:26:20.500]          // end if-block "!hasDormant"
[03:26:20.500]        </control>
[03:26:20.500]        // end if-block "isSWJ"
[03:26:20.500]      </control>
[03:26:20.500]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.500]        // if-block "!isSWJ"
[03:26:20.500]          // =>  FALSE
[03:26:20.500]        // skip if-block "!isSWJ"
[03:26:20.500]      </control>
[03:26:20.500]      <block atomic="false" info="">
[03:26:20.500]        ReadDP(0x0);
[03:26:20.500]  
[03:26:20.500]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.500]  
[03:26:20.500]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.500]      </block>
[03:26:20.500]      // end if-block "protType == 2"
[03:26:20.500]    </control>
[03:26:20.504]  </sequence>
[03:26:20.504]  
[03:26:20.560]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.560]  
[03:26:20.560]  <debugvars>
[03:26:20.560]    // Pre-defined
[03:26:20.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.560]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.560]    __dp=0x00000000
[03:26:20.560]    __ap=0x00000000
[03:26:20.560]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.560]    __FlashAddr=0x00000000
[03:26:20.560]    __FlashLen=0x00000000
[03:26:20.560]    __FlashArg=0x00000000
[03:26:20.560]    __FlashOp=0x00000000
[03:26:20.560]    __Result=0x00000000
[03:26:20.560]  </debugvars>
[03:26:20.560]  
[03:26:20.560]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.560]    <block atomic="false" info="">
[03:26:20.560]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.560]        // -> [isSWJ <= 0x00000001]
[03:26:20.560]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.560]        // -> [hasDormant <= 0x00000000]
[03:26:20.560]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.560]        // -> [protType <= 0x00000002]
[03:26:20.560]    </block>
[03:26:20.560]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.560]      // if-block "protType == 1"
[03:26:20.560]        // =>  FALSE
[03:26:20.564]      // skip if-block "protType == 1"
[03:26:20.564]    </control>
[03:26:20.564]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.564]      // if-block "protType == 2"
[03:26:20.564]        // =>  TRUE
[03:26:20.564]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.564]        // if-block "isSWJ"
[03:26:20.564]          // =>  TRUE
[03:26:20.564]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.564]          // if-block "hasDormant"
[03:26:20.564]            // =>  FALSE
[03:26:20.564]          // skip if-block "hasDormant"
[03:26:20.564]        </control>
[03:26:20.564]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.564]          // if-block "!hasDormant"
[03:26:20.564]            // =>  TRUE
[03:26:20.564]          <block atomic="false" info="">
[03:26:20.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.568]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.568]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.568]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.568]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.572]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.576]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.576]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.576]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.576]          </block>
[03:26:20.576]          // end if-block "!hasDormant"
[03:26:20.576]        </control>
[03:26:20.576]        // end if-block "isSWJ"
[03:26:20.576]      </control>
[03:26:20.576]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.576]        // if-block "!isSWJ"
[03:26:20.576]          // =>  FALSE
[03:26:20.576]        // skip if-block "!isSWJ"
[03:26:20.576]      </control>
[03:26:20.580]      <block atomic="false" info="">
[03:26:20.580]        ReadDP(0x0);
[03:26:20.580]  
[03:26:20.580]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.580]  
[03:26:20.580]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.580]      </block>
[03:26:20.580]      // end if-block "protType == 2"
[03:26:20.580]    </control>
[03:26:20.580]  </sequence>
[03:26:20.580]  
[03:26:20.635]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.635]  
[03:26:20.637]  <debugvars>
[03:26:20.637]    // Pre-defined
[03:26:20.637]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.637]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.637]    __dp=0x00000000
[03:26:20.637]    __ap=0x00000000
[03:26:20.637]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.637]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.637]    __FlashAddr=0x00000000
[03:26:20.637]    __FlashLen=0x00000000
[03:26:20.637]    __FlashArg=0x00000000
[03:26:20.637]    __FlashOp=0x00000000
[03:26:20.637]    __Result=0x00000000
[03:26:20.637]  </debugvars>
[03:26:20.637]  
[03:26:20.637]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.637]    <block atomic="false" info="">
[03:26:20.637]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.637]        // -> [isSWJ <= 0x00000001]
[03:26:20.637]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.640]        // -> [hasDormant <= 0x00000000]
[03:26:20.640]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.640]        // -> [protType <= 0x00000002]
[03:26:20.640]    </block>
[03:26:20.640]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.640]      // if-block "protType == 1"
[03:26:20.640]        // =>  FALSE
[03:26:20.640]      // skip if-block "protType == 1"
[03:26:20.640]    </control>
[03:26:20.640]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.640]      // if-block "protType == 2"
[03:26:20.640]        // =>  TRUE
[03:26:20.640]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.640]        // if-block "isSWJ"
[03:26:20.640]          // =>  TRUE
[03:26:20.640]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.640]          // if-block "hasDormant"
[03:26:20.640]            // =>  FALSE
[03:26:20.640]          // skip if-block "hasDormant"
[03:26:20.640]        </control>
[03:26:20.640]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.640]          // if-block "!hasDormant"
[03:26:20.640]            // =>  TRUE
[03:26:20.640]          <block atomic="false" info="">
[03:26:20.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.648]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.648]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.652]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.652]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.652]          </block>
[03:26:20.652]          // end if-block "!hasDormant"
[03:26:20.652]        </control>
[03:26:20.652]        // end if-block "isSWJ"
[03:26:20.652]      </control>
[03:26:20.652]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.652]        // if-block "!isSWJ"
[03:26:20.652]          // =>  FALSE
[03:26:20.652]        // skip if-block "!isSWJ"
[03:26:20.652]      </control>
[03:26:20.652]      <block atomic="false" info="">
[03:26:20.652]        ReadDP(0x0);
[03:26:20.656]  
[03:26:20.656]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.656]  
[03:26:20.656]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.656]      </block>
[03:26:20.656]      // end if-block "protType == 2"
[03:26:20.656]    </control>
[03:26:20.656]  </sequence>
[03:26:20.656]  
[03:26:20.708]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.708]  
[03:26:20.708]  <debugvars>
[03:26:20.708]    // Pre-defined
[03:26:20.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.708]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.708]    __dp=0x00000000
[03:26:20.708]    __ap=0x00000000
[03:26:20.708]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.708]    __FlashAddr=0x00000000
[03:26:20.708]    __FlashLen=0x00000000
[03:26:20.708]    __FlashArg=0x00000000
[03:26:20.708]    __FlashOp=0x00000000
[03:26:20.708]    __Result=0x00000000
[03:26:20.708]  </debugvars>
[03:26:20.708]  
[03:26:20.708]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.708]    <block atomic="false" info="">
[03:26:20.708]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.708]        // -> [isSWJ <= 0x00000001]
[03:26:20.708]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.708]        // -> [hasDormant <= 0x00000000]
[03:26:20.708]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.712]        // -> [protType <= 0x00000002]
[03:26:20.712]    </block>
[03:26:20.712]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.712]      // if-block "protType == 1"
[03:26:20.712]        // =>  FALSE
[03:26:20.712]      // skip if-block "protType == 1"
[03:26:20.712]    </control>
[03:26:20.712]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.712]      // if-block "protType == 2"
[03:26:20.712]        // =>  TRUE
[03:26:20.712]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.712]        // if-block "isSWJ"
[03:26:20.712]          // =>  TRUE
[03:26:20.712]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.712]          // if-block "hasDormant"
[03:26:20.712]            // =>  FALSE
[03:26:20.712]          // skip if-block "hasDormant"
[03:26:20.712]        </control>
[03:26:20.712]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.712]          // if-block "!hasDormant"
[03:26:20.712]            // =>  TRUE
[03:26:20.712]          <block atomic="false" info="">
[03:26:20.712]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.716]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.716]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.716]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.720]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.720]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.724]          </block>
[03:26:20.724]          // end if-block "!hasDormant"
[03:26:20.724]        </control>
[03:26:20.724]        // end if-block "isSWJ"
[03:26:20.724]      </control>
[03:26:20.724]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.724]        // if-block "!isSWJ"
[03:26:20.724]          // =>  FALSE
[03:26:20.724]        // skip if-block "!isSWJ"
[03:26:20.724]      </control>
[03:26:20.724]      <block atomic="false" info="">
[03:26:20.724]        ReadDP(0x0);
[03:26:20.724]  
[03:26:20.724]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.724]  
[03:26:20.724]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.724]      </block>
[03:26:20.724]      // end if-block "protType == 2"
[03:26:20.724]    </control>
[03:26:20.724]  </sequence>
[03:26:20.724]  
[03:26:20.780]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.780]  
[03:26:20.780]  <debugvars>
[03:26:20.780]    // Pre-defined
[03:26:20.780]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.780]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.780]    __dp=0x00000000
[03:26:20.780]    __ap=0x00000000
[03:26:20.781]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.781]    __FlashAddr=0x00000000
[03:26:20.781]    __FlashLen=0x00000000
[03:26:20.782]    __FlashArg=0x00000000
[03:26:20.782]    __FlashOp=0x00000000
[03:26:20.782]    __Result=0x00000000
[03:26:20.782]  </debugvars>
[03:26:20.782]  
[03:26:20.782]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.782]    <block atomic="false" info="">
[03:26:20.782]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.782]        // -> [isSWJ <= 0x00000001]
[03:26:20.782]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.782]        // -> [hasDormant <= 0x00000000]
[03:26:20.782]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.782]        // -> [protType <= 0x00000002]
[03:26:20.782]    </block>
[03:26:20.782]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.782]      // if-block "protType == 1"
[03:26:20.782]        // =>  FALSE
[03:26:20.782]      // skip if-block "protType == 1"
[03:26:20.782]    </control>
[03:26:20.782]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.782]      // if-block "protType == 2"
[03:26:20.782]        // =>  TRUE
[03:26:20.782]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.784]        // if-block "isSWJ"
[03:26:20.784]          // =>  TRUE
[03:26:20.784]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.784]          // if-block "hasDormant"
[03:26:20.784]            // =>  FALSE
[03:26:20.784]          // skip if-block "hasDormant"
[03:26:20.784]        </control>
[03:26:20.784]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.784]          // if-block "!hasDormant"
[03:26:20.784]            // =>  TRUE
[03:26:20.784]          <block atomic="false" info="">
[03:26:20.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.784]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.788]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.788]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.788]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.792]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.792]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.792]          </block>
[03:26:20.792]          // end if-block "!hasDormant"
[03:26:20.792]        </control>
[03:26:20.792]        // end if-block "isSWJ"
[03:26:20.792]      </control>
[03:26:20.792]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.792]        // if-block "!isSWJ"
[03:26:20.792]          // =>  FALSE
[03:26:20.792]        // skip if-block "!isSWJ"
[03:26:20.792]      </control>
[03:26:20.792]      <block atomic="false" info="">
[03:26:20.792]        ReadDP(0x0);
[03:26:20.796]  
[03:26:20.796]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.796]  
[03:26:20.796]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.796]      </block>
[03:26:20.796]      // end if-block "protType == 2"
[03:26:20.796]    </control>
[03:26:20.796]  </sequence>
[03:26:20.796]  
[03:26:20.852]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.852]  
[03:26:20.852]  <debugvars>
[03:26:20.852]    // Pre-defined
[03:26:20.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.852]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.852]    __dp=0x00000000
[03:26:20.853]    __ap=0x00000000
[03:26:20.853]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.853]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.853]    __FlashAddr=0x00000000
[03:26:20.854]    __FlashLen=0x00000000
[03:26:20.854]    __FlashArg=0x00000000
[03:26:20.854]    __FlashOp=0x00000000
[03:26:20.854]    __Result=0x00000000
[03:26:20.854]  </debugvars>
[03:26:20.854]  
[03:26:20.854]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.854]    <block atomic="false" info="">
[03:26:20.854]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.854]        // -> [isSWJ <= 0x00000001]
[03:26:20.854]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.854]        // -> [hasDormant <= 0x00000000]
[03:26:20.854]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.854]        // -> [protType <= 0x00000002]
[03:26:20.854]    </block>
[03:26:20.854]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.854]      // if-block "protType == 1"
[03:26:20.854]        // =>  FALSE
[03:26:20.856]      // skip if-block "protType == 1"
[03:26:20.856]    </control>
[03:26:20.856]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.856]      // if-block "protType == 2"
[03:26:20.856]        // =>  TRUE
[03:26:20.856]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.856]        // if-block "isSWJ"
[03:26:20.856]          // =>  TRUE
[03:26:20.856]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.856]          // if-block "hasDormant"
[03:26:20.856]            // =>  FALSE
[03:26:20.856]          // skip if-block "hasDormant"
[03:26:20.856]        </control>
[03:26:20.856]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.856]          // if-block "!hasDormant"
[03:26:20.856]            // =>  TRUE
[03:26:20.856]          <block atomic="false" info="">
[03:26:20.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.861]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.869]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.873]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.873]          </block>
[03:26:20.873]          // end if-block "!hasDormant"
[03:26:20.873]        </control>
[03:26:20.873]        // end if-block "isSWJ"
[03:26:20.873]      </control>
[03:26:20.873]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.873]        // if-block "!isSWJ"
[03:26:20.873]          // =>  FALSE
[03:26:20.873]        // skip if-block "!isSWJ"
[03:26:20.873]      </control>
[03:26:20.873]      <block atomic="false" info="">
[03:26:20.873]        ReadDP(0x0);
[03:26:20.873]  
[03:26:20.873]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.873]  
[03:26:20.873]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.873]      </block>
[03:26:20.877]      // end if-block "protType == 2"
[03:26:20.877]    </control>
[03:26:20.877]  </sequence>
[03:26:20.877]  
[03:26:20.937]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:20.937]  
[03:26:20.937]  <debugvars>
[03:26:20.937]    // Pre-defined
[03:26:20.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:20.937]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:20.937]    __dp=0x00000000
[03:26:20.937]    __ap=0x00000000
[03:26:20.937]    __traceout=0x00000000      (Trace Disabled)
[03:26:20.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:20.937]    __FlashAddr=0x00000000
[03:26:20.937]    __FlashLen=0x00000000
[03:26:20.937]    __FlashArg=0x00000000
[03:26:20.937]    __FlashOp=0x00000000
[03:26:20.937]    __Result=0x00000000
[03:26:20.937]  </debugvars>
[03:26:20.937]  
[03:26:20.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:20.937]    <block atomic="false" info="">
[03:26:20.937]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:20.937]        // -> [isSWJ <= 0x00000001]
[03:26:20.937]      __var hasDormant = __protocol & 0x00020000;
[03:26:20.937]        // -> [hasDormant <= 0x00000000]
[03:26:20.937]      __var protType   = __protocol & 0x0000FFFF;
[03:26:20.937]        // -> [protType <= 0x00000002]
[03:26:20.937]    </block>
[03:26:20.937]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:20.937]      // if-block "protType == 1"
[03:26:20.937]        // =>  FALSE
[03:26:20.941]      // skip if-block "protType == 1"
[03:26:20.941]    </control>
[03:26:20.941]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:20.941]      // if-block "protType == 2"
[03:26:20.941]        // =>  TRUE
[03:26:20.941]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:20.941]        // if-block "isSWJ"
[03:26:20.941]          // =>  TRUE
[03:26:20.941]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:20.941]          // if-block "hasDormant"
[03:26:20.941]            // =>  FALSE
[03:26:20.941]          // skip if-block "hasDormant"
[03:26:20.941]        </control>
[03:26:20.941]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:20.941]          // if-block "!hasDormant"
[03:26:20.941]            // =>  TRUE
[03:26:20.941]          <block atomic="false" info="">
[03:26:20.941]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:20.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.941]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:20.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:20.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:20.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:20.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:20.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:20.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:20.949]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:20.949]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:20.949]          </block>
[03:26:20.949]          // end if-block "!hasDormant"
[03:26:20.949]        </control>
[03:26:20.949]        // end if-block "isSWJ"
[03:26:20.949]      </control>
[03:26:20.949]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:20.953]        // if-block "!isSWJ"
[03:26:20.953]          // =>  FALSE
[03:26:20.953]        // skip if-block "!isSWJ"
[03:26:20.953]      </control>
[03:26:20.953]      <block atomic="false" info="">
[03:26:20.953]        ReadDP(0x0);
[03:26:20.953]  
[03:26:20.953]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:20.953]  
[03:26:20.953]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:20.953]      </block>
[03:26:20.953]      // end if-block "protType == 2"
[03:26:20.953]    </control>
[03:26:20.953]  </sequence>
[03:26:20.953]  
[03:26:21.009]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.009]  
[03:26:21.009]  <debugvars>
[03:26:21.009]    // Pre-defined
[03:26:21.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.009]    __dp=0x00000000
[03:26:21.009]    __ap=0x00000000
[03:26:21.009]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.009]    __FlashAddr=0x00000000
[03:26:21.009]    __FlashLen=0x00000000
[03:26:21.009]    __FlashArg=0x00000000
[03:26:21.009]    __FlashOp=0x00000000
[03:26:21.009]    __Result=0x00000000
[03:26:21.009]  </debugvars>
[03:26:21.009]  
[03:26:21.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.009]    <block atomic="false" info="">
[03:26:21.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.009]        // -> [isSWJ <= 0x00000001]
[03:26:21.009]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.013]        // -> [hasDormant <= 0x00000000]
[03:26:21.013]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.013]        // -> [protType <= 0x00000002]
[03:26:21.013]    </block>
[03:26:21.013]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.013]      // if-block "protType == 1"
[03:26:21.013]        // =>  FALSE
[03:26:21.013]      // skip if-block "protType == 1"
[03:26:21.013]    </control>
[03:26:21.013]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.013]      // if-block "protType == 2"
[03:26:21.013]        // =>  TRUE
[03:26:21.013]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.013]        // if-block "isSWJ"
[03:26:21.013]          // =>  TRUE
[03:26:21.013]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.013]          // if-block "hasDormant"
[03:26:21.013]            // =>  FALSE
[03:26:21.013]          // skip if-block "hasDormant"
[03:26:21.013]        </control>
[03:26:21.013]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.013]          // if-block "!hasDormant"
[03:26:21.013]            // =>  TRUE
[03:26:21.013]          <block atomic="false" info="">
[03:26:21.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.017]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.017]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.023]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.025]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.025]          </block>
[03:26:21.025]          // end if-block "!hasDormant"
[03:26:21.025]        </control>
[03:26:21.025]        // end if-block "isSWJ"
[03:26:21.025]      </control>
[03:26:21.025]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.025]        // if-block "!isSWJ"
[03:26:21.025]          // =>  FALSE
[03:26:21.025]        // skip if-block "!isSWJ"
[03:26:21.025]      </control>
[03:26:21.025]      <block atomic="false" info="">
[03:26:21.025]        ReadDP(0x0);
[03:26:21.029]  
[03:26:21.029]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.029]  
[03:26:21.029]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.029]      </block>
[03:26:21.029]      // end if-block "protType == 2"
[03:26:21.029]    </control>
[03:26:21.029]  </sequence>
[03:26:21.029]  
[03:26:21.081]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.081]  
[03:26:21.083]  <debugvars>
[03:26:21.083]    // Pre-defined
[03:26:21.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.083]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.083]    __dp=0x00000000
[03:26:21.083]    __ap=0x00000000
[03:26:21.083]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.083]    __FlashAddr=0x00000000
[03:26:21.083]    __FlashLen=0x00000000
[03:26:21.083]    __FlashArg=0x00000000
[03:26:21.084]    __FlashOp=0x00000000
[03:26:21.084]    __Result=0x00000000
[03:26:21.084]  </debugvars>
[03:26:21.084]  
[03:26:21.084]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.084]    <block atomic="false" info="">
[03:26:21.084]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.084]        // -> [isSWJ <= 0x00000001]
[03:26:21.084]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.084]        // -> [hasDormant <= 0x00000000]
[03:26:21.084]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.084]        // -> [protType <= 0x00000002]
[03:26:21.084]    </block>
[03:26:21.084]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.084]      // if-block "protType == 1"
[03:26:21.085]        // =>  FALSE
[03:26:21.085]      // skip if-block "protType == 1"
[03:26:21.085]    </control>
[03:26:21.085]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.085]      // if-block "protType == 2"
[03:26:21.085]        // =>  TRUE
[03:26:21.085]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.085]        // if-block "isSWJ"
[03:26:21.085]          // =>  TRUE
[03:26:21.085]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.085]          // if-block "hasDormant"
[03:26:21.085]            // =>  FALSE
[03:26:21.085]          // skip if-block "hasDormant"
[03:26:21.085]        </control>
[03:26:21.085]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.085]          // if-block "!hasDormant"
[03:26:21.085]            // =>  TRUE
[03:26:21.085]          <block atomic="false" info="">
[03:26:21.085]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.085]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.085]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.089]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.089]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.093]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.093]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.093]          </block>
[03:26:21.093]          // end if-block "!hasDormant"
[03:26:21.097]        </control>
[03:26:21.097]        // end if-block "isSWJ"
[03:26:21.097]      </control>
[03:26:21.097]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.097]        // if-block "!isSWJ"
[03:26:21.097]          // =>  FALSE
[03:26:21.097]        // skip if-block "!isSWJ"
[03:26:21.097]      </control>
[03:26:21.097]      <block atomic="false" info="">
[03:26:21.097]        ReadDP(0x0);
[03:26:21.099]  
[03:26:21.099]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.099]  
[03:26:21.100]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.100]      </block>
[03:26:21.100]      // end if-block "protType == 2"
[03:26:21.100]    </control>
[03:26:21.100]  </sequence>
[03:26:21.100]  
[03:26:21.156]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.156]  
[03:26:21.156]  <debugvars>
[03:26:21.156]    // Pre-defined
[03:26:21.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.157]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.157]    __dp=0x00000000
[03:26:21.157]    __ap=0x00000000
[03:26:21.157]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.157]    __FlashAddr=0x00000000
[03:26:21.157]    __FlashLen=0x00000000
[03:26:21.157]    __FlashArg=0x00000000
[03:26:21.157]    __FlashOp=0x00000000
[03:26:21.157]    __Result=0x00000000
[03:26:21.157]  </debugvars>
[03:26:21.157]  
[03:26:21.157]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.157]    <block atomic="false" info="">
[03:26:21.159]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.159]        // -> [isSWJ <= 0x00000001]
[03:26:21.159]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.159]        // -> [hasDormant <= 0x00000000]
[03:26:21.159]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.159]        // -> [protType <= 0x00000002]
[03:26:21.159]    </block>
[03:26:21.159]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.159]      // if-block "protType == 1"
[03:26:21.159]        // =>  FALSE
[03:26:21.159]      // skip if-block "protType == 1"
[03:26:21.161]    </control>
[03:26:21.161]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.161]      // if-block "protType == 2"
[03:26:21.161]        // =>  TRUE
[03:26:21.161]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.161]        // if-block "isSWJ"
[03:26:21.161]          // =>  TRUE
[03:26:21.161]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.161]          // if-block "hasDormant"
[03:26:21.161]            // =>  FALSE
[03:26:21.161]          // skip if-block "hasDormant"
[03:26:21.162]        </control>
[03:26:21.162]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.162]          // if-block "!hasDormant"
[03:26:21.162]            // =>  TRUE
[03:26:21.162]          <block atomic="false" info="">
[03:26:21.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.162]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.165]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.165]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.170]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.170]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.170]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.170]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.174]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.174]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.174]          </block>
[03:26:21.174]          // end if-block "!hasDormant"
[03:26:21.174]        </control>
[03:26:21.174]        // end if-block "isSWJ"
[03:26:21.174]      </control>
[03:26:21.174]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.174]        // if-block "!isSWJ"
[03:26:21.174]          // =>  FALSE
[03:26:21.174]        // skip if-block "!isSWJ"
[03:26:21.174]      </control>
[03:26:21.174]      <block atomic="false" info="">
[03:26:21.174]        ReadDP(0x0);
[03:26:21.177]  
[03:26:21.177]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.177]  
[03:26:21.177]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.177]      </block>
[03:26:21.177]      // end if-block "protType == 2"
[03:26:21.177]    </control>
[03:26:21.177]  </sequence>
[03:26:21.177]  
[03:26:21.234]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.234]  
[03:26:21.234]  <debugvars>
[03:26:21.234]    // Pre-defined
[03:26:21.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.234]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.235]    __dp=0x00000000
[03:26:21.235]    __ap=0x00000000
[03:26:21.235]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.235]    __FlashAddr=0x00000000
[03:26:21.235]    __FlashLen=0x00000000
[03:26:21.235]    __FlashArg=0x00000000
[03:26:21.235]    __FlashOp=0x00000000
[03:26:21.235]    __Result=0x00000000
[03:26:21.235]  </debugvars>
[03:26:21.235]  
[03:26:21.236]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.236]    <block atomic="false" info="">
[03:26:21.236]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.236]        // -> [isSWJ <= 0x00000001]
[03:26:21.236]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.236]        // -> [hasDormant <= 0x00000000]
[03:26:21.236]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.236]        // -> [protType <= 0x00000002]
[03:26:21.236]    </block>
[03:26:21.236]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.237]      // if-block "protType == 1"
[03:26:21.237]        // =>  FALSE
[03:26:21.237]      // skip if-block "protType == 1"
[03:26:21.237]    </control>
[03:26:21.237]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.237]      // if-block "protType == 2"
[03:26:21.237]        // =>  TRUE
[03:26:21.237]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.237]        // if-block "isSWJ"
[03:26:21.238]          // =>  TRUE
[03:26:21.238]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.238]          // if-block "hasDormant"
[03:26:21.238]            // =>  FALSE
[03:26:21.238]          // skip if-block "hasDormant"
[03:26:21.238]        </control>
[03:26:21.238]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.238]          // if-block "!hasDormant"
[03:26:21.239]            // =>  TRUE
[03:26:21.239]          <block atomic="false" info="">
[03:26:21.239]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.242]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.248]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.252]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.252]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.252]          </block>
[03:26:21.252]          // end if-block "!hasDormant"
[03:26:21.252]        </control>
[03:26:21.252]        // end if-block "isSWJ"
[03:26:21.252]      </control>
[03:26:21.252]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.252]        // if-block "!isSWJ"
[03:26:21.252]          // =>  FALSE
[03:26:21.252]        // skip if-block "!isSWJ"
[03:26:21.252]      </control>
[03:26:21.252]      <block atomic="false" info="">
[03:26:21.252]        ReadDP(0x0);
[03:26:21.255]  
[03:26:21.255]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.255]  
[03:26:21.255]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.255]      </block>
[03:26:21.255]      // end if-block "protType == 2"
[03:26:21.255]    </control>
[03:26:21.255]  </sequence>
[03:26:21.255]  
[03:26:21.308]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.308]  
[03:26:21.308]  <debugvars>
[03:26:21.308]    // Pre-defined
[03:26:21.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.308]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.308]    __dp=0x00000000
[03:26:21.308]    __ap=0x00000000
[03:26:21.308]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.308]    __FlashAddr=0x00000000
[03:26:21.308]    __FlashLen=0x00000000
[03:26:21.308]    __FlashArg=0x00000000
[03:26:21.308]    __FlashOp=0x00000000
[03:26:21.308]    __Result=0x00000000
[03:26:21.308]  </debugvars>
[03:26:21.308]  
[03:26:21.308]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.308]    <block atomic="false" info="">
[03:26:21.308]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.308]        // -> [isSWJ <= 0x00000001]
[03:26:21.308]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.308]        // -> [hasDormant <= 0x00000000]
[03:26:21.308]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.308]        // -> [protType <= 0x00000002]
[03:26:21.308]    </block>
[03:26:21.308]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.308]      // if-block "protType == 1"
[03:26:21.308]        // =>  FALSE
[03:26:21.308]      // skip if-block "protType == 1"
[03:26:21.308]    </control>
[03:26:21.308]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.308]      // if-block "protType == 2"
[03:26:21.308]        // =>  TRUE
[03:26:21.308]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.308]        // if-block "isSWJ"
[03:26:21.308]          // =>  TRUE
[03:26:21.312]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.312]          // if-block "hasDormant"
[03:26:21.312]            // =>  FALSE
[03:26:21.312]          // skip if-block "hasDormant"
[03:26:21.312]        </control>
[03:26:21.312]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.312]          // if-block "!hasDormant"
[03:26:21.312]            // =>  TRUE
[03:26:21.312]          <block atomic="false" info="">
[03:26:21.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.312]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.312]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.316]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.321]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.321]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.321]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.321]          </block>
[03:26:21.321]          // end if-block "!hasDormant"
[03:26:21.321]        </control>
[03:26:21.321]        // end if-block "isSWJ"
[03:26:21.321]      </control>
[03:26:21.321]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.321]        // if-block "!isSWJ"
[03:26:21.321]          // =>  FALSE
[03:26:21.321]        // skip if-block "!isSWJ"
[03:26:21.324]      </control>
[03:26:21.324]      <block atomic="false" info="">
[03:26:21.324]        ReadDP(0x0);
[03:26:21.324]  
[03:26:21.324]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.324]  
[03:26:21.324]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.324]      </block>
[03:26:21.324]      // end if-block "protType == 2"
[03:26:21.324]    </control>
[03:26:21.324]  </sequence>
[03:26:21.324]  
[03:26:21.384]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.384]  
[03:26:21.384]  <debugvars>
[03:26:21.384]    // Pre-defined
[03:26:21.384]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.384]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.384]    __dp=0x00000000
[03:26:21.384]    __ap=0x00000000
[03:26:21.384]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.384]    __FlashAddr=0x00000000
[03:26:21.384]    __FlashLen=0x00000000
[03:26:21.384]    __FlashArg=0x00000000
[03:26:21.384]    __FlashOp=0x00000000
[03:26:21.384]    __Result=0x00000000
[03:26:21.384]  </debugvars>
[03:26:21.384]  
[03:26:21.384]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.384]    <block atomic="false" info="">
[03:26:21.384]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.384]        // -> [isSWJ <= 0x00000001]
[03:26:21.384]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.384]        // -> [hasDormant <= 0x00000000]
[03:26:21.384]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.384]        // -> [protType <= 0x00000002]
[03:26:21.384]    </block>
[03:26:21.384]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.384]      // if-block "protType == 1"
[03:26:21.388]        // =>  FALSE
[03:26:21.388]      // skip if-block "protType == 1"
[03:26:21.388]    </control>
[03:26:21.388]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.388]      // if-block "protType == 2"
[03:26:21.388]        // =>  TRUE
[03:26:21.388]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.388]        // if-block "isSWJ"
[03:26:21.388]          // =>  TRUE
[03:26:21.388]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.388]          // if-block "hasDormant"
[03:26:21.388]            // =>  FALSE
[03:26:21.388]          // skip if-block "hasDormant"
[03:26:21.388]        </control>
[03:26:21.388]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.388]          // if-block "!hasDormant"
[03:26:21.388]            // =>  TRUE
[03:26:21.388]          <block atomic="false" info="">
[03:26:21.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.392]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.396]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.396]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.399]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.399]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.399]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.399]          </block>
[03:26:21.401]          // end if-block "!hasDormant"
[03:26:21.401]        </control>
[03:26:21.401]        // end if-block "isSWJ"
[03:26:21.401]      </control>
[03:26:21.401]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.401]        // if-block "!isSWJ"
[03:26:21.401]          // =>  FALSE
[03:26:21.401]        // skip if-block "!isSWJ"
[03:26:21.401]      </control>
[03:26:21.401]      <block atomic="false" info="">
[03:26:21.401]        ReadDP(0x0);
[03:26:21.401]  
[03:26:21.401]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.401]  
[03:26:21.401]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.401]      </block>
[03:26:21.401]      // end if-block "protType == 2"
[03:26:21.401]    </control>
[03:26:21.401]  </sequence>
[03:26:21.401]  
[03:26:21.458]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.458]  
[03:26:21.458]  <debugvars>
[03:26:21.458]    // Pre-defined
[03:26:21.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.458]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.458]    __dp=0x00000000
[03:26:21.458]    __ap=0x00000000
[03:26:21.458]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.458]    __FlashAddr=0x00000000
[03:26:21.458]    __FlashLen=0x00000000
[03:26:21.458]    __FlashArg=0x00000000
[03:26:21.458]    __FlashOp=0x00000000
[03:26:21.458]    __Result=0x00000000
[03:26:21.458]  </debugvars>
[03:26:21.458]  
[03:26:21.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.458]    <block atomic="false" info="">
[03:26:21.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.458]        // -> [isSWJ <= 0x00000001]
[03:26:21.458]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.458]        // -> [hasDormant <= 0x00000000]
[03:26:21.458]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.458]        // -> [protType <= 0x00000002]
[03:26:21.458]    </block>
[03:26:21.458]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.458]      // if-block "protType == 1"
[03:26:21.458]        // =>  FALSE
[03:26:21.458]      // skip if-block "protType == 1"
[03:26:21.458]    </control>
[03:26:21.458]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.458]      // if-block "protType == 2"
[03:26:21.458]        // =>  TRUE
[03:26:21.458]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.458]        // if-block "isSWJ"
[03:26:21.462]          // =>  TRUE
[03:26:21.462]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.462]          // if-block "hasDormant"
[03:26:21.462]            // =>  FALSE
[03:26:21.462]          // skip if-block "hasDormant"
[03:26:21.462]        </control>
[03:26:21.462]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.462]          // if-block "!hasDormant"
[03:26:21.462]            // =>  TRUE
[03:26:21.462]          <block atomic="false" info="">
[03:26:21.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.466]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.474]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.474]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.478]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.478]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.486]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.486]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.486]          </block>
[03:26:21.486]          // end if-block "!hasDormant"
[03:26:21.486]        </control>
[03:26:21.486]        // end if-block "isSWJ"
[03:26:21.486]      </control>
[03:26:21.486]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.486]        // if-block "!isSWJ"
[03:26:21.486]          // =>  FALSE
[03:26:21.486]        // skip if-block "!isSWJ"
[03:26:21.486]      </control>
[03:26:21.486]      <block atomic="false" info="">
[03:26:21.486]        ReadDP(0x0);
[03:26:21.490]  
[03:26:21.490]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.490]  
[03:26:21.490]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.490]      </block>
[03:26:21.490]      // end if-block "protType == 2"
[03:26:21.490]    </control>
[03:26:21.490]  </sequence>
[03:26:21.490]  
[03:26:21.543]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.543]  
[03:26:21.543]  <debugvars>
[03:26:21.543]    // Pre-defined
[03:26:21.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.543]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.543]    __dp=0x00000000
[03:26:21.543]    __ap=0x00000000
[03:26:21.543]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.543]    __FlashAddr=0x00000000
[03:26:21.543]    __FlashLen=0x00000000
[03:26:21.543]    __FlashArg=0x00000000
[03:26:21.543]    __FlashOp=0x00000000
[03:26:21.543]    __Result=0x00000000
[03:26:21.543]  </debugvars>
[03:26:21.543]  
[03:26:21.543]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.543]    <block atomic="false" info="">
[03:26:21.543]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.543]        // -> [isSWJ <= 0x00000001]
[03:26:21.543]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.543]        // -> [hasDormant <= 0x00000000]
[03:26:21.543]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.543]        // -> [protType <= 0x00000002]
[03:26:21.543]    </block>
[03:26:21.543]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.543]      // if-block "protType == 1"
[03:26:21.543]        // =>  FALSE
[03:26:21.543]      // skip if-block "protType == 1"
[03:26:21.543]    </control>
[03:26:21.543]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.543]      // if-block "protType == 2"
[03:26:21.543]        // =>  TRUE
[03:26:21.543]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.543]        // if-block "isSWJ"
[03:26:21.543]          // =>  TRUE
[03:26:21.543]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.547]          // if-block "hasDormant"
[03:26:21.547]            // =>  FALSE
[03:26:21.547]          // skip if-block "hasDormant"
[03:26:21.547]        </control>
[03:26:21.547]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.547]          // if-block "!hasDormant"
[03:26:21.547]            // =>  TRUE
[03:26:21.547]          <block atomic="false" info="">
[03:26:21.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.551]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.555]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.560]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.560]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.560]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.564]          </block>
[03:26:21.564]          // end if-block "!hasDormant"
[03:26:21.564]        </control>
[03:26:21.564]        // end if-block "isSWJ"
[03:26:21.564]      </control>
[03:26:21.564]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.564]        // if-block "!isSWJ"
[03:26:21.564]          // =>  FALSE
[03:26:21.564]        // skip if-block "!isSWJ"
[03:26:21.564]      </control>
[03:26:21.564]      <block atomic="false" info="">
[03:26:21.564]        ReadDP(0x0);
[03:26:21.564]  
[03:26:21.564]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.564]  
[03:26:21.564]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.564]      </block>
[03:26:21.564]      // end if-block "protType == 2"
[03:26:21.564]    </control>
[03:26:21.564]  </sequence>
[03:26:21.564]  
[03:26:21.618]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.618]  
[03:26:21.618]  <debugvars>
[03:26:21.618]    // Pre-defined
[03:26:21.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.618]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.618]    __dp=0x00000000
[03:26:21.618]    __ap=0x00000000
[03:26:21.618]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.618]    __FlashAddr=0x00000000
[03:26:21.618]    __FlashLen=0x00000000
[03:26:21.618]    __FlashArg=0x00000000
[03:26:21.618]    __FlashOp=0x00000000
[03:26:21.618]    __Result=0x00000000
[03:26:21.618]  </debugvars>
[03:26:21.618]  
[03:26:21.618]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.618]    <block atomic="false" info="">
[03:26:21.618]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.618]        // -> [isSWJ <= 0x00000001]
[03:26:21.618]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.618]        // -> [hasDormant <= 0x00000000]
[03:26:21.618]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.618]        // -> [protType <= 0x00000002]
[03:26:21.618]    </block>
[03:26:21.621]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.621]      // if-block "protType == 1"
[03:26:21.621]        // =>  FALSE
[03:26:21.621]      // skip if-block "protType == 1"
[03:26:21.621]    </control>
[03:26:21.621]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.621]      // if-block "protType == 2"
[03:26:21.621]        // =>  TRUE
[03:26:21.621]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.621]        // if-block "isSWJ"
[03:26:21.621]          // =>  TRUE
[03:26:21.621]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.621]          // if-block "hasDormant"
[03:26:21.621]            // =>  FALSE
[03:26:21.621]          // skip if-block "hasDormant"
[03:26:21.621]        </control>
[03:26:21.621]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.621]          // if-block "!hasDormant"
[03:26:21.621]            // =>  TRUE
[03:26:21.621]          <block atomic="false" info="">
[03:26:21.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.625]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.625]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.625]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.631]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.633]          </block>
[03:26:21.633]          // end if-block "!hasDormant"
[03:26:21.633]        </control>
[03:26:21.633]        // end if-block "isSWJ"
[03:26:21.633]      </control>
[03:26:21.633]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.633]        // if-block "!isSWJ"
[03:26:21.633]          // =>  FALSE
[03:26:21.633]        // skip if-block "!isSWJ"
[03:26:21.633]      </control>
[03:26:21.633]      <block atomic="false" info="">
[03:26:21.633]        ReadDP(0x0);
[03:26:21.637]  
[03:26:21.637]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.637]  
[03:26:21.637]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.637]      </block>
[03:26:21.637]      // end if-block "protType == 2"
[03:26:21.637]    </control>
[03:26:21.637]  </sequence>
[03:26:21.637]  
[03:26:21.690]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.690]  
[03:26:21.690]  <debugvars>
[03:26:21.690]    // Pre-defined
[03:26:21.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.690]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.692]    __dp=0x00000000
[03:26:21.692]    __ap=0x00000000
[03:26:21.692]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.692]    __FlashAddr=0x00000000
[03:26:21.692]    __FlashLen=0x00000000
[03:26:21.692]    __FlashArg=0x00000000
[03:26:21.692]    __FlashOp=0x00000000
[03:26:21.692]    __Result=0x00000000
[03:26:21.692]  </debugvars>
[03:26:21.692]  
[03:26:21.692]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.692]    <block atomic="false" info="">
[03:26:21.692]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.692]        // -> [isSWJ <= 0x00000001]
[03:26:21.692]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.692]        // -> [hasDormant <= 0x00000000]
[03:26:21.692]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.692]        // -> [protType <= 0x00000002]
[03:26:21.692]    </block>
[03:26:21.692]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.692]      // if-block "protType == 1"
[03:26:21.692]        // =>  FALSE
[03:26:21.694]      // skip if-block "protType == 1"
[03:26:21.694]    </control>
[03:26:21.694]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.694]      // if-block "protType == 2"
[03:26:21.694]        // =>  TRUE
[03:26:21.694]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.694]        // if-block "isSWJ"
[03:26:21.694]          // =>  TRUE
[03:26:21.695]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.695]          // if-block "hasDormant"
[03:26:21.695]            // =>  FALSE
[03:26:21.695]          // skip if-block "hasDormant"
[03:26:21.695]        </control>
[03:26:21.695]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.695]          // if-block "!hasDormant"
[03:26:21.695]            // =>  TRUE
[03:26:21.695]          <block atomic="false" info="">
[03:26:21.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.698]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.702]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.706]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.706]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.710]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.710]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.710]          </block>
[03:26:21.710]          // end if-block "!hasDormant"
[03:26:21.710]        </control>
[03:26:21.710]        // end if-block "isSWJ"
[03:26:21.710]      </control>
[03:26:21.714]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.714]        // if-block "!isSWJ"
[03:26:21.714]          // =>  FALSE
[03:26:21.714]        // skip if-block "!isSWJ"
[03:26:21.714]      </control>
[03:26:21.714]      <block atomic="false" info="">
[03:26:21.714]        ReadDP(0x0);
[03:26:21.716]  
[03:26:21.716]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.716]  
[03:26:21.716]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.716]      </block>
[03:26:21.716]      // end if-block "protType == 2"
[03:26:21.716]    </control>
[03:26:21.716]  </sequence>
[03:26:21.716]  
[03:26:21.776]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.776]  
[03:26:21.776]  <debugvars>
[03:26:21.776]    // Pre-defined
[03:26:21.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.776]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.777]    __dp=0x00000000
[03:26:21.777]    __ap=0x00000000
[03:26:21.777]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.777]    __FlashAddr=0x00000000
[03:26:21.777]    __FlashLen=0x00000000
[03:26:21.777]    __FlashArg=0x00000000
[03:26:21.777]    __FlashOp=0x00000000
[03:26:21.777]    __Result=0x00000000
[03:26:21.777]  </debugvars>
[03:26:21.777]  
[03:26:21.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.777]    <block atomic="false" info="">
[03:26:21.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.777]        // -> [isSWJ <= 0x00000001]
[03:26:21.777]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.777]        // -> [hasDormant <= 0x00000000]
[03:26:21.777]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.777]        // -> [protType <= 0x00000002]
[03:26:21.777]    </block>
[03:26:21.777]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.777]      // if-block "protType == 1"
[03:26:21.777]        // =>  FALSE
[03:26:21.777]      // skip if-block "protType == 1"
[03:26:21.777]    </control>
[03:26:21.777]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.777]      // if-block "protType == 2"
[03:26:21.777]        // =>  TRUE
[03:26:21.777]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.780]        // if-block "isSWJ"
[03:26:21.780]          // =>  TRUE
[03:26:21.780]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.780]          // if-block "hasDormant"
[03:26:21.780]            // =>  FALSE
[03:26:21.780]          // skip if-block "hasDormant"
[03:26:21.780]        </control>
[03:26:21.780]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.780]          // if-block "!hasDormant"
[03:26:21.780]            // =>  TRUE
[03:26:21.780]          <block atomic="false" info="">
[03:26:21.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.780]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.784]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.788]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.793]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.793]          </block>
[03:26:21.793]          // end if-block "!hasDormant"
[03:26:21.795]        </control>
[03:26:21.795]        // end if-block "isSWJ"
[03:26:21.795]      </control>
[03:26:21.795]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.795]        // if-block "!isSWJ"
[03:26:21.795]          // =>  FALSE
[03:26:21.795]        // skip if-block "!isSWJ"
[03:26:21.795]      </control>
[03:26:21.795]      <block atomic="false" info="">
[03:26:21.795]        ReadDP(0x0);
[03:26:21.795]  
[03:26:21.795]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.795]  
[03:26:21.795]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.795]      </block>
[03:26:21.795]      // end if-block "protType == 2"
[03:26:21.795]    </control>
[03:26:21.795]  </sequence>
[03:26:21.795]  
[03:26:21.848]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.848]  
[03:26:21.850]  <debugvars>
[03:26:21.850]    // Pre-defined
[03:26:21.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.850]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.850]    __dp=0x00000000
[03:26:21.850]    __ap=0x00000000
[03:26:21.850]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.850]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.850]    __FlashAddr=0x00000000
[03:26:21.850]    __FlashLen=0x00000000
[03:26:21.850]    __FlashArg=0x00000000
[03:26:21.850]    __FlashOp=0x00000000
[03:26:21.850]    __Result=0x00000000
[03:26:21.850]  </debugvars>
[03:26:21.850]  
[03:26:21.850]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.850]    <block atomic="false" info="">
[03:26:21.850]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.850]        // -> [isSWJ <= 0x00000001]
[03:26:21.850]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.850]        // -> [hasDormant <= 0x00000000]
[03:26:21.850]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.850]        // -> [protType <= 0x00000002]
[03:26:21.850]    </block>
[03:26:21.850]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.850]      // if-block "protType == 1"
[03:26:21.853]        // =>  FALSE
[03:26:21.853]      // skip if-block "protType == 1"
[03:26:21.853]    </control>
[03:26:21.853]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.853]      // if-block "protType == 2"
[03:26:21.853]        // =>  TRUE
[03:26:21.853]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.853]        // if-block "isSWJ"
[03:26:21.853]          // =>  TRUE
[03:26:21.853]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.853]          // if-block "hasDormant"
[03:26:21.853]            // =>  FALSE
[03:26:21.853]          // skip if-block "hasDormant"
[03:26:21.853]        </control>
[03:26:21.853]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.853]          // if-block "!hasDormant"
[03:26:21.853]            // =>  TRUE
[03:26:21.853]          <block atomic="false" info="">
[03:26:21.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.861]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.865]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.873]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.873]          </block>
[03:26:21.873]          // end if-block "!hasDormant"
[03:26:21.873]        </control>
[03:26:21.873]        // end if-block "isSWJ"
[03:26:21.873]      </control>
[03:26:21.873]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.873]        // if-block "!isSWJ"
[03:26:21.873]          // =>  FALSE
[03:26:21.873]        // skip if-block "!isSWJ"
[03:26:21.873]      </control>
[03:26:21.873]      <block atomic="false" info="">
[03:26:21.873]        ReadDP(0x0);
[03:26:21.875]  
[03:26:21.875]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.875]  
[03:26:21.875]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.875]      </block>
[03:26:21.875]      // end if-block "protType == 2"
[03:26:21.875]    </control>
[03:26:21.878]  </sequence>
[03:26:21.878]  
[03:26:21.934]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:21.934]  
[03:26:21.934]  <debugvars>
[03:26:21.934]    // Pre-defined
[03:26:21.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:21.934]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:21.934]    __dp=0x00000000
[03:26:21.934]    __ap=0x00000000
[03:26:21.934]    __traceout=0x00000000      (Trace Disabled)
[03:26:21.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:21.934]    __FlashAddr=0x00000000
[03:26:21.934]    __FlashLen=0x00000000
[03:26:21.934]    __FlashArg=0x00000000
[03:26:21.934]    __FlashOp=0x00000000
[03:26:21.934]    __Result=0x00000000
[03:26:21.934]  </debugvars>
[03:26:21.934]  
[03:26:21.934]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:21.934]    <block atomic="false" info="">
[03:26:21.934]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:21.934]        // -> [isSWJ <= 0x00000001]
[03:26:21.934]      __var hasDormant = __protocol & 0x00020000;
[03:26:21.936]        // -> [hasDormant <= 0x00000000]
[03:26:21.936]      __var protType   = __protocol & 0x0000FFFF;
[03:26:21.936]        // -> [protType <= 0x00000002]
[03:26:21.936]    </block>
[03:26:21.936]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:21.936]      // if-block "protType == 1"
[03:26:21.936]        // =>  FALSE
[03:26:21.936]      // skip if-block "protType == 1"
[03:26:21.936]    </control>
[03:26:21.936]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:21.936]      // if-block "protType == 2"
[03:26:21.936]        // =>  TRUE
[03:26:21.936]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:21.936]        // if-block "isSWJ"
[03:26:21.936]          // =>  TRUE
[03:26:21.938]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:21.938]          // if-block "hasDormant"
[03:26:21.938]            // =>  FALSE
[03:26:21.938]          // skip if-block "hasDormant"
[03:26:21.938]        </control>
[03:26:21.938]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:21.938]          // if-block "!hasDormant"
[03:26:21.938]            // =>  TRUE
[03:26:21.938]          <block atomic="false" info="">
[03:26:21.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:21.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.938]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:21.942]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:21.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:21.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.942]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:21.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:21.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:21.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:21.946]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:21.950]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:21.950]          </block>
[03:26:21.950]          // end if-block "!hasDormant"
[03:26:21.950]        </control>
[03:26:21.950]        // end if-block "isSWJ"
[03:26:21.950]      </control>
[03:26:21.950]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:21.950]        // if-block "!isSWJ"
[03:26:21.950]          // =>  FALSE
[03:26:21.950]        // skip if-block "!isSWJ"
[03:26:21.950]      </control>
[03:26:21.950]      <block atomic="false" info="">
[03:26:21.950]        ReadDP(0x0);
[03:26:21.950]  
[03:26:21.950]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:21.950]  
[03:26:21.954]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:21.954]      </block>
[03:26:21.954]      // end if-block "protType == 2"
[03:26:21.954]    </control>
[03:26:21.954]  </sequence>
[03:26:21.954]  
[03:26:22.007]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.007]  
[03:26:22.007]  <debugvars>
[03:26:22.007]    // Pre-defined
[03:26:22.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.007]    __dp=0x00000000
[03:26:22.007]    __ap=0x00000000
[03:26:22.007]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.009]    __FlashAddr=0x00000000
[03:26:22.009]    __FlashLen=0x00000000
[03:26:22.009]    __FlashArg=0x00000000
[03:26:22.009]    __FlashOp=0x00000000
[03:26:22.009]    __Result=0x00000000
[03:26:22.009]  </debugvars>
[03:26:22.009]  
[03:26:22.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.009]    <block atomic="false" info="">
[03:26:22.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.009]        // -> [isSWJ <= 0x00000001]
[03:26:22.009]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.009]        // -> [hasDormant <= 0x00000000]
[03:26:22.009]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.009]        // -> [protType <= 0x00000002]
[03:26:22.009]    </block>
[03:26:22.009]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.009]      // if-block "protType == 1"
[03:26:22.011]        // =>  FALSE
[03:26:22.011]      // skip if-block "protType == 1"
[03:26:22.011]    </control>
[03:26:22.011]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.011]      // if-block "protType == 2"
[03:26:22.011]        // =>  TRUE
[03:26:22.011]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.011]        // if-block "isSWJ"
[03:26:22.011]          // =>  TRUE
[03:26:22.012]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.012]          // if-block "hasDormant"
[03:26:22.012]            // =>  FALSE
[03:26:22.012]          // skip if-block "hasDormant"
[03:26:22.012]        </control>
[03:26:22.012]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.012]          // if-block "!hasDormant"
[03:26:22.012]            // =>  TRUE
[03:26:22.012]          <block atomic="false" info="">
[03:26:22.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.013]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.018]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.021]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.023]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.023]          </block>
[03:26:22.023]          // end if-block "!hasDormant"
[03:26:22.023]        </control>
[03:26:22.023]        // end if-block "isSWJ"
[03:26:22.024]      </control>
[03:26:22.024]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.024]        // if-block "!isSWJ"
[03:26:22.024]          // =>  FALSE
[03:26:22.024]        // skip if-block "!isSWJ"
[03:26:22.024]      </control>
[03:26:22.024]      <block atomic="false" info="">
[03:26:22.024]        ReadDP(0x0);
[03:26:22.026]  
[03:26:22.026]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.026]  
[03:26:22.026]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.026]      </block>
[03:26:22.026]      // end if-block "protType == 2"
[03:26:22.026]    </control>
[03:26:22.026]  </sequence>
[03:26:22.026]  
[03:26:22.080]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.080]  
[03:26:22.080]  <debugvars>
[03:26:22.080]    // Pre-defined
[03:26:22.080]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.082]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.082]    __dp=0x00000000
[03:26:22.082]    __ap=0x00000000
[03:26:22.082]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.082]    __FlashAddr=0x00000000
[03:26:22.082]    __FlashLen=0x00000000
[03:26:22.082]    __FlashArg=0x00000000
[03:26:22.082]    __FlashOp=0x00000000
[03:26:22.082]    __Result=0x00000000
[03:26:22.083]  </debugvars>
[03:26:22.083]  
[03:26:22.083]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.083]    <block atomic="false" info="">
[03:26:22.083]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.083]        // -> [isSWJ <= 0x00000001]
[03:26:22.083]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.083]        // -> [hasDormant <= 0x00000000]
[03:26:22.083]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.085]        // -> [protType <= 0x00000002]
[03:26:22.085]    </block>
[03:26:22.085]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.085]      // if-block "protType == 1"
[03:26:22.085]        // =>  FALSE
[03:26:22.085]      // skip if-block "protType == 1"
[03:26:22.085]    </control>
[03:26:22.085]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.085]      // if-block "protType == 2"
[03:26:22.085]        // =>  TRUE
[03:26:22.086]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.086]        // if-block "isSWJ"
[03:26:22.086]          // =>  TRUE
[03:26:22.086]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.086]          // if-block "hasDormant"
[03:26:22.086]            // =>  FALSE
[03:26:22.086]          // skip if-block "hasDormant"
[03:26:22.086]        </control>
[03:26:22.086]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.086]          // if-block "!hasDormant"
[03:26:22.087]            // =>  TRUE
[03:26:22.087]          <block atomic="false" info="">
[03:26:22.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.088]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.093]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.097]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.101]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.101]          </block>
[03:26:22.101]          // end if-block "!hasDormant"
[03:26:22.101]        </control>
[03:26:22.101]        // end if-block "isSWJ"
[03:26:22.101]      </control>
[03:26:22.101]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.101]        // if-block "!isSWJ"
[03:26:22.101]          // =>  FALSE
[03:26:22.101]        // skip if-block "!isSWJ"
[03:26:22.101]      </control>
[03:26:22.101]      <block atomic="false" info="">
[03:26:22.101]        ReadDP(0x0);
[03:26:22.104]  
[03:26:22.104]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.104]  
[03:26:22.104]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.104]      </block>
[03:26:22.104]      // end if-block "protType == 2"
[03:26:22.104]    </control>
[03:26:22.104]  </sequence>
[03:26:22.104]  
[03:26:22.168]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.168]  
[03:26:22.168]  <debugvars>
[03:26:22.168]    // Pre-defined
[03:26:22.168]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.168]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.169]    __dp=0x00000000
[03:26:22.169]    __ap=0x00000000
[03:26:22.169]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.169]    __FlashAddr=0x00000000
[03:26:22.169]    __FlashLen=0x00000000
[03:26:22.169]    __FlashArg=0x00000000
[03:26:22.169]    __FlashOp=0x00000000
[03:26:22.169]    __Result=0x00000000
[03:26:22.169]  </debugvars>
[03:26:22.169]  
[03:26:22.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.169]    <block atomic="false" info="">
[03:26:22.171]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.171]        // -> [isSWJ <= 0x00000001]
[03:26:22.171]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.171]        // -> [hasDormant <= 0x00000000]
[03:26:22.171]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.171]        // -> [protType <= 0x00000002]
[03:26:22.171]    </block>
[03:26:22.171]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.171]      // if-block "protType == 1"
[03:26:22.172]        // =>  FALSE
[03:26:22.172]      // skip if-block "protType == 1"
[03:26:22.172]    </control>
[03:26:22.172]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.172]      // if-block "protType == 2"
[03:26:22.172]        // =>  TRUE
[03:26:22.172]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.172]        // if-block "isSWJ"
[03:26:22.172]          // =>  TRUE
[03:26:22.172]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.172]          // if-block "hasDormant"
[03:26:22.173]            // =>  FALSE
[03:26:22.173]          // skip if-block "hasDormant"
[03:26:22.173]        </control>
[03:26:22.173]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.173]          // if-block "!hasDormant"
[03:26:22.173]            // =>  TRUE
[03:26:22.173]          <block atomic="false" info="">
[03:26:22.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.176]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.186]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.195]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.195]          </block>
[03:26:22.195]          // end if-block "!hasDormant"
[03:26:22.195]        </control>
[03:26:22.195]        // end if-block "isSWJ"
[03:26:22.195]      </control>
[03:26:22.195]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.195]        // if-block "!isSWJ"
[03:26:22.195]          // =>  FALSE
[03:26:22.195]        // skip if-block "!isSWJ"
[03:26:22.195]      </control>
[03:26:22.197]      <block atomic="false" info="">
[03:26:22.197]        ReadDP(0x0);
[03:26:22.198]  
[03:26:22.198]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.198]  
[03:26:22.198]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.198]      </block>
[03:26:22.198]      // end if-block "protType == 2"
[03:26:22.198]    </control>
[03:26:22.199]  </sequence>
[03:26:22.199]  
[03:26:22.252]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.252]  
[03:26:22.252]  <debugvars>
[03:26:22.252]    // Pre-defined
[03:26:22.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.254]    __dp=0x00000000
[03:26:22.254]    __ap=0x00000000
[03:26:22.254]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.254]    __FlashAddr=0x00000000
[03:26:22.256]    __FlashLen=0x00000000
[03:26:22.256]    __FlashArg=0x00000000
[03:26:22.256]    __FlashOp=0x00000000
[03:26:22.256]    __Result=0x00000000
[03:26:22.256]  </debugvars>
[03:26:22.256]  
[03:26:22.256]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.256]    <block atomic="false" info="">
[03:26:22.256]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.256]        // -> [isSWJ <= 0x00000001]
[03:26:22.256]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.257]        // -> [hasDormant <= 0x00000000]
[03:26:22.257]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.257]        // -> [protType <= 0x00000002]
[03:26:22.257]    </block>
[03:26:22.257]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.257]      // if-block "protType == 1"
[03:26:22.257]        // =>  FALSE
[03:26:22.257]      // skip if-block "protType == 1"
[03:26:22.257]    </control>
[03:26:22.257]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.258]      // if-block "protType == 2"
[03:26:22.258]        // =>  TRUE
[03:26:22.258]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.258]        // if-block "isSWJ"
[03:26:22.258]          // =>  TRUE
[03:26:22.258]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.258]          // if-block "hasDormant"
[03:26:22.258]            // =>  FALSE
[03:26:22.258]          // skip if-block "hasDormant"
[03:26:22.259]        </control>
[03:26:22.259]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.259]          // if-block "!hasDormant"
[03:26:22.259]            // =>  TRUE
[03:26:22.259]          <block atomic="false" info="">
[03:26:22.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.261]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.262]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.268]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.277]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.279]          </block>
[03:26:22.279]          // end if-block "!hasDormant"
[03:26:22.279]        </control>
[03:26:22.279]        // end if-block "isSWJ"
[03:26:22.279]      </control>
[03:26:22.279]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.279]        // if-block "!isSWJ"
[03:26:22.279]          // =>  FALSE
[03:26:22.279]        // skip if-block "!isSWJ"
[03:26:22.281]      </control>
[03:26:22.281]      <block atomic="false" info="">
[03:26:22.282]        ReadDP(0x0);
[03:26:22.283]  
[03:26:22.283]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.283]  
[03:26:22.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.283]      </block>
[03:26:22.283]      // end if-block "protType == 2"
[03:26:22.283]    </control>
[03:26:22.283]  </sequence>
[03:26:22.283]  
[03:26:22.338]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.338]  
[03:26:22.338]  <debugvars>
[03:26:22.338]    // Pre-defined
[03:26:22.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.338]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.338]    __dp=0x00000000
[03:26:22.338]    __ap=0x00000000
[03:26:22.338]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.338]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.338]    __FlashAddr=0x00000000
[03:26:22.338]    __FlashLen=0x00000000
[03:26:22.338]    __FlashArg=0x00000000
[03:26:22.338]    __FlashOp=0x00000000
[03:26:22.338]    __Result=0x00000000
[03:26:22.338]  </debugvars>
[03:26:22.338]  
[03:26:22.338]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.338]    <block atomic="false" info="">
[03:26:22.338]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.338]        // -> [isSWJ <= 0x00000001]
[03:26:22.338]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.342]        // -> [hasDormant <= 0x00000000]
[03:26:22.342]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.342]        // -> [protType <= 0x00000002]
[03:26:22.342]    </block>
[03:26:22.342]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.342]      // if-block "protType == 1"
[03:26:22.343]        // =>  FALSE
[03:26:22.343]      // skip if-block "protType == 1"
[03:26:22.343]    </control>
[03:26:22.343]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.343]      // if-block "protType == 2"
[03:26:22.343]        // =>  TRUE
[03:26:22.343]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.343]        // if-block "isSWJ"
[03:26:22.343]          // =>  TRUE
[03:26:22.343]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.343]          // if-block "hasDormant"
[03:26:22.343]            // =>  FALSE
[03:26:22.343]          // skip if-block "hasDormant"
[03:26:22.343]        </control>
[03:26:22.344]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.344]          // if-block "!hasDormant"
[03:26:22.344]            // =>  TRUE
[03:26:22.344]          <block atomic="false" info="">
[03:26:22.344]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.344]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.356]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.365]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.375]          </block>
[03:26:22.375]          // end if-block "!hasDormant"
[03:26:22.375]        </control>
[03:26:22.375]        // end if-block "isSWJ"
[03:26:22.375]      </control>
[03:26:22.375]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.375]        // if-block "!isSWJ"
[03:26:22.375]          // =>  FALSE
[03:26:22.375]        // skip if-block "!isSWJ"
[03:26:22.375]      </control>
[03:26:22.375]      <block atomic="false" info="">
[03:26:22.375]        ReadDP(0x0);
[03:26:22.378]  
[03:26:22.378]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.378]  
[03:26:22.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.378]      </block>
[03:26:22.378]      // end if-block "protType == 2"
[03:26:22.378]    </control>
[03:26:22.378]  </sequence>
[03:26:22.378]  
[03:26:22.437]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.437]  
[03:26:22.437]  <debugvars>
[03:26:22.437]    // Pre-defined
[03:26:22.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.437]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.437]    __dp=0x00000000
[03:26:22.437]    __ap=0x00000000
[03:26:22.437]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.437]    __FlashAddr=0x00000000
[03:26:22.437]    __FlashLen=0x00000000
[03:26:22.437]    __FlashArg=0x00000000
[03:26:22.437]    __FlashOp=0x00000000
[03:26:22.437]    __Result=0x00000000
[03:26:22.437]  </debugvars>
[03:26:22.437]  
[03:26:22.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.437]    <block atomic="false" info="">
[03:26:22.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.437]        // -> [isSWJ <= 0x00000001]
[03:26:22.437]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.437]        // -> [hasDormant <= 0x00000000]
[03:26:22.437]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.437]        // -> [protType <= 0x00000002]
[03:26:22.437]    </block>
[03:26:22.437]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.437]      // if-block "protType == 1"
[03:26:22.441]        // =>  FALSE
[03:26:22.441]      // skip if-block "protType == 1"
[03:26:22.441]    </control>
[03:26:22.441]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.441]      // if-block "protType == 2"
[03:26:22.441]        // =>  TRUE
[03:26:22.441]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.441]        // if-block "isSWJ"
[03:26:22.441]          // =>  TRUE
[03:26:22.441]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.441]          // if-block "hasDormant"
[03:26:22.441]            // =>  FALSE
[03:26:22.441]          // skip if-block "hasDormant"
[03:26:22.441]        </control>
[03:26:22.441]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.441]          // if-block "!hasDormant"
[03:26:22.441]            // =>  TRUE
[03:26:22.441]          <block atomic="false" info="">
[03:26:22.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.441]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.445]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.451]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.451]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.451]          </block>
[03:26:22.451]          // end if-block "!hasDormant"
[03:26:22.451]        </control>
[03:26:22.451]        // end if-block "isSWJ"
[03:26:22.451]      </control>
[03:26:22.451]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.451]        // if-block "!isSWJ"
[03:26:22.451]          // =>  FALSE
[03:26:22.451]        // skip if-block "!isSWJ"
[03:26:22.453]      </control>
[03:26:22.453]      <block atomic="false" info="">
[03:26:22.453]        ReadDP(0x0);
[03:26:22.453]  
[03:26:22.453]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.453]  
[03:26:22.453]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.453]      </block>
[03:26:22.453]      // end if-block "protType == 2"
[03:26:22.453]    </control>
[03:26:22.453]  </sequence>
[03:26:22.453]  
[03:26:22.510]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.510]  
[03:26:22.510]  <debugvars>
[03:26:22.510]    // Pre-defined
[03:26:22.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.510]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.510]    __dp=0x00000000
[03:26:22.510]    __ap=0x00000000
[03:26:22.510]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.510]    __FlashAddr=0x00000000
[03:26:22.510]    __FlashLen=0x00000000
[03:26:22.510]    __FlashArg=0x00000000
[03:26:22.510]    __FlashOp=0x00000000
[03:26:22.510]    __Result=0x00000000
[03:26:22.510]  </debugvars>
[03:26:22.510]  
[03:26:22.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.510]    <block atomic="false" info="">
[03:26:22.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.510]        // -> [isSWJ <= 0x00000001]
[03:26:22.510]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.510]        // -> [hasDormant <= 0x00000000]
[03:26:22.510]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.510]        // -> [protType <= 0x00000002]
[03:26:22.510]    </block>
[03:26:22.510]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.510]      // if-block "protType == 1"
[03:26:22.510]        // =>  FALSE
[03:26:22.510]      // skip if-block "protType == 1"
[03:26:22.510]    </control>
[03:26:22.510]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.510]      // if-block "protType == 2"
[03:26:22.514]        // =>  TRUE
[03:26:22.514]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.514]        // if-block "isSWJ"
[03:26:22.514]          // =>  TRUE
[03:26:22.514]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.514]          // if-block "hasDormant"
[03:26:22.514]            // =>  FALSE
[03:26:22.514]          // skip if-block "hasDormant"
[03:26:22.514]        </control>
[03:26:22.514]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.514]          // if-block "!hasDormant"
[03:26:22.514]            // =>  TRUE
[03:26:22.514]          <block atomic="false" info="">
[03:26:22.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.522]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.522]          </block>
[03:26:22.522]          // end if-block "!hasDormant"
[03:26:22.522]        </control>
[03:26:22.522]        // end if-block "isSWJ"
[03:26:22.522]      </control>
[03:26:22.526]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.526]        // if-block "!isSWJ"
[03:26:22.526]          // =>  FALSE
[03:26:22.526]        // skip if-block "!isSWJ"
[03:26:22.526]      </control>
[03:26:22.526]      <block atomic="false" info="">
[03:26:22.526]        ReadDP(0x0);
[03:26:22.530]  
[03:26:22.530]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.530]  
[03:26:22.530]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.530]      </block>
[03:26:22.530]      // end if-block "protType == 2"
[03:26:22.530]    </control>
[03:26:22.530]  </sequence>
[03:26:22.530]  
[03:26:22.582]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.582]  
[03:26:22.582]  <debugvars>
[03:26:22.582]    // Pre-defined
[03:26:22.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.582]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.582]    __dp=0x00000000
[03:26:22.582]    __ap=0x00000000
[03:26:22.582]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.582]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.582]    __FlashAddr=0x00000000
[03:26:22.582]    __FlashLen=0x00000000
[03:26:22.582]    __FlashArg=0x00000000
[03:26:22.582]    __FlashOp=0x00000000
[03:26:22.582]    __Result=0x00000000
[03:26:22.582]  </debugvars>
[03:26:22.582]  
[03:26:22.582]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.582]    <block atomic="false" info="">
[03:26:22.582]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.582]        // -> [isSWJ <= 0x00000001]
[03:26:22.582]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.582]        // -> [hasDormant <= 0x00000000]
[03:26:22.582]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.582]        // -> [protType <= 0x00000002]
[03:26:22.582]    </block>
[03:26:22.582]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.582]      // if-block "protType == 1"
[03:26:22.582]        // =>  FALSE
[03:26:22.582]      // skip if-block "protType == 1"
[03:26:22.582]    </control>
[03:26:22.582]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.582]      // if-block "protType == 2"
[03:26:22.582]        // =>  TRUE
[03:26:22.586]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.586]        // if-block "isSWJ"
[03:26:22.586]          // =>  TRUE
[03:26:22.586]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.586]          // if-block "hasDormant"
[03:26:22.586]            // =>  FALSE
[03:26:22.586]          // skip if-block "hasDormant"
[03:26:22.586]        </control>
[03:26:22.586]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.586]          // if-block "!hasDormant"
[03:26:22.586]            // =>  TRUE
[03:26:22.586]          <block atomic="false" info="">
[03:26:22.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.590]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.594]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.598]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.602]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.602]          </block>
[03:26:22.602]          // end if-block "!hasDormant"
[03:26:22.602]        </control>
[03:26:22.602]        // end if-block "isSWJ"
[03:26:22.602]      </control>
[03:26:22.602]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.602]        // if-block "!isSWJ"
[03:26:22.602]          // =>  FALSE
[03:26:22.602]        // skip if-block "!isSWJ"
[03:26:22.602]      </control>
[03:26:22.602]      <block atomic="false" info="">
[03:26:22.602]        ReadDP(0x0);
[03:26:22.610]  
[03:26:22.610]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.610]  
[03:26:22.610]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.610]      </block>
[03:26:22.610]      // end if-block "protType == 2"
[03:26:22.610]    </control>
[03:26:22.610]  </sequence>
[03:26:22.610]  
[03:26:22.666]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.666]  
[03:26:22.666]  <debugvars>
[03:26:22.666]    // Pre-defined
[03:26:22.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.666]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.666]    __dp=0x00000000
[03:26:22.666]    __ap=0x00000000
[03:26:22.666]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.666]    __FlashAddr=0x00000000
[03:26:22.666]    __FlashLen=0x00000000
[03:26:22.666]    __FlashArg=0x00000000
[03:26:22.666]    __FlashOp=0x00000000
[03:26:22.666]    __Result=0x00000000
[03:26:22.666]  </debugvars>
[03:26:22.666]  
[03:26:22.666]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.666]    <block atomic="false" info="">
[03:26:22.666]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.666]        // -> [isSWJ <= 0x00000001]
[03:26:22.666]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.666]        // -> [hasDormant <= 0x00000000]
[03:26:22.666]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.666]        // -> [protType <= 0x00000002]
[03:26:22.666]    </block>
[03:26:22.666]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.666]      // if-block "protType == 1"
[03:26:22.666]        // =>  FALSE
[03:26:22.666]      // skip if-block "protType == 1"
[03:26:22.666]    </control>
[03:26:22.666]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.666]      // if-block "protType == 2"
[03:26:22.666]        // =>  TRUE
[03:26:22.666]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.670]        // if-block "isSWJ"
[03:26:22.670]          // =>  TRUE
[03:26:22.670]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.670]          // if-block "hasDormant"
[03:26:22.670]            // =>  FALSE
[03:26:22.670]          // skip if-block "hasDormant"
[03:26:22.670]        </control>
[03:26:22.670]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.670]          // if-block "!hasDormant"
[03:26:22.670]            // =>  TRUE
[03:26:22.670]          <block atomic="false" info="">
[03:26:22.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.682]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.682]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.686]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.690]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.690]          </block>
[03:26:22.690]          // end if-block "!hasDormant"
[03:26:22.690]        </control>
[03:26:22.690]        // end if-block "isSWJ"
[03:26:22.690]      </control>
[03:26:22.690]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.690]        // if-block "!isSWJ"
[03:26:22.690]          // =>  FALSE
[03:26:22.692]        // skip if-block "!isSWJ"
[03:26:22.692]      </control>
[03:26:22.692]      <block atomic="false" info="">
[03:26:22.692]        ReadDP(0x0);
[03:26:22.692]  
[03:26:22.692]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.692]  
[03:26:22.692]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.692]      </block>
[03:26:22.692]      // end if-block "protType == 2"
[03:26:22.692]    </control>
[03:26:22.692]  </sequence>
[03:26:22.692]  
[03:26:22.751]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.751]  
[03:26:22.751]  <debugvars>
[03:26:22.751]    // Pre-defined
[03:26:22.751]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.751]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.751]    __dp=0x00000000
[03:26:22.751]    __ap=0x00000000
[03:26:22.751]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.751]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.751]    __FlashAddr=0x00000000
[03:26:22.751]    __FlashLen=0x00000000
[03:26:22.751]    __FlashArg=0x00000000
[03:26:22.751]    __FlashOp=0x00000000
[03:26:22.751]    __Result=0x00000000
[03:26:22.751]  </debugvars>
[03:26:22.751]  
[03:26:22.751]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.751]    <block atomic="false" info="">
[03:26:22.751]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.751]        // -> [isSWJ <= 0x00000001]
[03:26:22.751]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.751]        // -> [hasDormant <= 0x00000000]
[03:26:22.751]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.751]        // -> [protType <= 0x00000002]
[03:26:22.751]    </block>
[03:26:22.751]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.751]      // if-block "protType == 1"
[03:26:22.751]        // =>  FALSE
[03:26:22.751]      // skip if-block "protType == 1"
[03:26:22.751]    </control>
[03:26:22.751]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.755]      // if-block "protType == 2"
[03:26:22.755]        // =>  TRUE
[03:26:22.755]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.755]        // if-block "isSWJ"
[03:26:22.755]          // =>  TRUE
[03:26:22.755]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.755]          // if-block "hasDormant"
[03:26:22.755]            // =>  FALSE
[03:26:22.755]          // skip if-block "hasDormant"
[03:26:22.755]        </control>
[03:26:22.755]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.755]          // if-block "!hasDormant"
[03:26:22.755]            // =>  TRUE
[03:26:22.755]          <block atomic="false" info="">
[03:26:22.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.755]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.759]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.763]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.763]          </block>
[03:26:22.767]          // end if-block "!hasDormant"
[03:26:22.767]        </control>
[03:26:22.767]        // end if-block "isSWJ"
[03:26:22.767]      </control>
[03:26:22.767]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.767]        // if-block "!isSWJ"
[03:26:22.767]          // =>  FALSE
[03:26:22.767]        // skip if-block "!isSWJ"
[03:26:22.767]      </control>
[03:26:22.767]      <block atomic="false" info="">
[03:26:22.767]        ReadDP(0x0);
[03:26:22.767]  
[03:26:22.767]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.767]  
[03:26:22.767]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.767]      </block>
[03:26:22.767]      // end if-block "protType == 2"
[03:26:22.767]    </control>
[03:26:22.767]  </sequence>
[03:26:22.767]  
[03:26:22.818]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.818]  
[03:26:22.818]  <debugvars>
[03:26:22.818]    // Pre-defined
[03:26:22.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.818]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.818]    __dp=0x00000000
[03:26:22.818]    __ap=0x00000000
[03:26:22.818]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.818]    __FlashAddr=0x00000000
[03:26:22.818]    __FlashLen=0x00000000
[03:26:22.818]    __FlashArg=0x00000000
[03:26:22.818]    __FlashOp=0x00000000
[03:26:22.818]    __Result=0x00000000
[03:26:22.818]  </debugvars>
[03:26:22.818]  
[03:26:22.818]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.818]    <block atomic="false" info="">
[03:26:22.818]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.818]        // -> [isSWJ <= 0x00000001]
[03:26:22.818]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.818]        // -> [hasDormant <= 0x00000000]
[03:26:22.818]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.818]        // -> [protType <= 0x00000002]
[03:26:22.818]    </block>
[03:26:22.818]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.818]      // if-block "protType == 1"
[03:26:22.818]        // =>  FALSE
[03:26:22.818]      // skip if-block "protType == 1"
[03:26:22.818]    </control>
[03:26:22.822]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.822]      // if-block "protType == 2"
[03:26:22.822]        // =>  TRUE
[03:26:22.822]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.822]        // if-block "isSWJ"
[03:26:22.822]          // =>  TRUE
[03:26:22.822]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.822]          // if-block "hasDormant"
[03:26:22.822]            // =>  FALSE
[03:26:22.822]          // skip if-block "hasDormant"
[03:26:22.822]        </control>
[03:26:22.822]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.822]          // if-block "!hasDormant"
[03:26:22.822]            // =>  TRUE
[03:26:22.822]          <block atomic="false" info="">
[03:26:22.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.826]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.826]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.830]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.830]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.830]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.830]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.830]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.830]          </block>
[03:26:22.830]          // end if-block "!hasDormant"
[03:26:22.834]        </control>
[03:26:22.834]        // end if-block "isSWJ"
[03:26:22.834]      </control>
[03:26:22.834]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.834]        // if-block "!isSWJ"
[03:26:22.834]          // =>  FALSE
[03:26:22.834]        // skip if-block "!isSWJ"
[03:26:22.834]      </control>
[03:26:22.834]      <block atomic="false" info="">
[03:26:22.834]        ReadDP(0x0);
[03:26:22.834]  
[03:26:22.834]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.834]  
[03:26:22.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.834]      </block>
[03:26:22.834]      // end if-block "protType == 2"
[03:26:22.834]    </control>
[03:26:22.834]  </sequence>
[03:26:22.834]  
[03:26:22.885]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.885]  
[03:26:22.885]  <debugvars>
[03:26:22.885]    // Pre-defined
[03:26:22.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.885]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.885]    __dp=0x00000000
[03:26:22.885]    __ap=0x00000000
[03:26:22.885]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.885]    __FlashAddr=0x00000000
[03:26:22.885]    __FlashLen=0x00000000
[03:26:22.885]    __FlashArg=0x00000000
[03:26:22.885]    __FlashOp=0x00000000
[03:26:22.885]    __Result=0x00000000
[03:26:22.885]  </debugvars>
[03:26:22.885]  
[03:26:22.885]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.885]    <block atomic="false" info="">
[03:26:22.885]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.885]        // -> [isSWJ <= 0x00000001]
[03:26:22.885]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.885]        // -> [hasDormant <= 0x00000000]
[03:26:22.885]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.885]        // -> [protType <= 0x00000002]
[03:26:22.885]    </block>
[03:26:22.885]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.885]      // if-block "protType == 1"
[03:26:22.885]        // =>  FALSE
[03:26:22.889]      // skip if-block "protType == 1"
[03:26:22.889]    </control>
[03:26:22.889]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.889]      // if-block "protType == 2"
[03:26:22.889]        // =>  TRUE
[03:26:22.889]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.889]        // if-block "isSWJ"
[03:26:22.889]          // =>  TRUE
[03:26:22.889]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.889]          // if-block "hasDormant"
[03:26:22.889]            // =>  FALSE
[03:26:22.889]          // skip if-block "hasDormant"
[03:26:22.889]        </control>
[03:26:22.889]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.889]          // if-block "!hasDormant"
[03:26:22.889]            // =>  TRUE
[03:26:22.889]          <block atomic="false" info="">
[03:26:22.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.893]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.897]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.901]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.901]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.901]          </block>
[03:26:22.901]          // end if-block "!hasDormant"
[03:26:22.901]        </control>
[03:26:22.901]        // end if-block "isSWJ"
[03:26:22.901]      </control>
[03:26:22.905]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.905]        // if-block "!isSWJ"
[03:26:22.905]          // =>  FALSE
[03:26:22.905]        // skip if-block "!isSWJ"
[03:26:22.905]      </control>
[03:26:22.905]      <block atomic="false" info="">
[03:26:22.905]        ReadDP(0x0);
[03:26:22.909]  
[03:26:22.909]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.909]  
[03:26:22.909]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.909]      </block>
[03:26:22.909]      // end if-block "protType == 2"
[03:26:22.909]    </control>
[03:26:22.909]  </sequence>
[03:26:22.909]  
[03:26:22.969]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:22.969]  
[03:26:22.969]  <debugvars>
[03:26:22.969]    // Pre-defined
[03:26:22.969]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:22.969]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:22.969]    __dp=0x00000000
[03:26:22.969]    __ap=0x00000000
[03:26:22.969]    __traceout=0x00000000      (Trace Disabled)
[03:26:22.969]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:22.969]    __FlashAddr=0x00000000
[03:26:22.969]    __FlashLen=0x00000000
[03:26:22.969]    __FlashArg=0x00000000
[03:26:22.969]    __FlashOp=0x00000000
[03:26:22.969]    __Result=0x00000000
[03:26:22.969]  </debugvars>
[03:26:22.969]  
[03:26:22.969]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:22.969]    <block atomic="false" info="">
[03:26:22.969]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:22.969]        // -> [isSWJ <= 0x00000001]
[03:26:22.969]      __var hasDormant = __protocol & 0x00020000;
[03:26:22.969]        // -> [hasDormant <= 0x00000000]
[03:26:22.969]      __var protType   = __protocol & 0x0000FFFF;
[03:26:22.969]        // -> [protType <= 0x00000002]
[03:26:22.969]    </block>
[03:26:22.969]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:22.969]      // if-block "protType == 1"
[03:26:22.969]        // =>  FALSE
[03:26:22.969]      // skip if-block "protType == 1"
[03:26:22.969]    </control>
[03:26:22.969]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:22.969]      // if-block "protType == 2"
[03:26:22.973]        // =>  TRUE
[03:26:22.973]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:22.973]        // if-block "isSWJ"
[03:26:22.973]          // =>  TRUE
[03:26:22.973]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:22.973]          // if-block "hasDormant"
[03:26:22.973]            // =>  FALSE
[03:26:22.973]          // skip if-block "hasDormant"
[03:26:22.973]        </control>
[03:26:22.973]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:22.973]          // if-block "!hasDormant"
[03:26:22.973]            // =>  TRUE
[03:26:22.973]          <block atomic="false" info="">
[03:26:22.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:22.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:22.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:22.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:22.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.981]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:22.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:22.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:22.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:22.993]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:22.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:22.994]          </block>
[03:26:22.994]          // end if-block "!hasDormant"
[03:26:22.994]        </control>
[03:26:22.994]        // end if-block "isSWJ"
[03:26:22.994]      </control>
[03:26:22.994]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:22.994]        // if-block "!isSWJ"
[03:26:22.994]          // =>  FALSE
[03:26:22.994]        // skip if-block "!isSWJ"
[03:26:22.994]      </control>
[03:26:22.994]      <block atomic="false" info="">
[03:26:22.994]        ReadDP(0x0);
[03:26:22.997]  
[03:26:22.997]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:22.997]  
[03:26:22.997]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:22.997]      </block>
[03:26:22.997]      // end if-block "protType == 2"
[03:26:22.997]    </control>
[03:26:22.997]  </sequence>
[03:26:22.997]  
[03:26:23.053]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.053]  
[03:26:23.053]  <debugvars>
[03:26:23.053]    // Pre-defined
[03:26:23.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.053]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.053]    __dp=0x00000000
[03:26:23.053]    __ap=0x00000000
[03:26:23.053]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.053]    __FlashAddr=0x00000000
[03:26:23.053]    __FlashLen=0x00000000
[03:26:23.053]    __FlashArg=0x00000000
[03:26:23.053]    __FlashOp=0x00000000
[03:26:23.053]    __Result=0x00000000
[03:26:23.053]  </debugvars>
[03:26:23.053]  
[03:26:23.053]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.053]    <block atomic="false" info="">
[03:26:23.053]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.053]        // -> [isSWJ <= 0x00000001]
[03:26:23.053]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.053]        // -> [hasDormant <= 0x00000000]
[03:26:23.053]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.053]        // -> [protType <= 0x00000002]
[03:26:23.053]    </block>
[03:26:23.053]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.053]      // if-block "protType == 1"
[03:26:23.057]        // =>  FALSE
[03:26:23.057]      // skip if-block "protType == 1"
[03:26:23.057]    </control>
[03:26:23.057]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.057]      // if-block "protType == 2"
[03:26:23.057]        // =>  TRUE
[03:26:23.057]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.057]        // if-block "isSWJ"
[03:26:23.057]          // =>  TRUE
[03:26:23.057]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.057]          // if-block "hasDormant"
[03:26:23.057]            // =>  FALSE
[03:26:23.057]          // skip if-block "hasDormant"
[03:26:23.057]        </control>
[03:26:23.057]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.057]          // if-block "!hasDormant"
[03:26:23.057]            // =>  TRUE
[03:26:23.057]          <block atomic="false" info="">
[03:26:23.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.057]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.057]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.061]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.061]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.065]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.069]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.069]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.069]          </block>
[03:26:23.069]          // end if-block "!hasDormant"
[03:26:23.069]        </control>
[03:26:23.069]        // end if-block "isSWJ"
[03:26:23.069]      </control>
[03:26:23.069]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.069]        // if-block "!isSWJ"
[03:26:23.069]          // =>  FALSE
[03:26:23.069]        // skip if-block "!isSWJ"
[03:26:23.069]      </control>
[03:26:23.069]      <block atomic="false" info="">
[03:26:23.069]        ReadDP(0x0);
[03:26:23.073]  
[03:26:23.073]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.073]  
[03:26:23.073]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.073]      </block>
[03:26:23.073]      // end if-block "protType == 2"
[03:26:23.073]    </control>
[03:26:23.073]  </sequence>
[03:26:23.073]  
[03:26:23.125]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.125]  
[03:26:23.125]  <debugvars>
[03:26:23.125]    // Pre-defined
[03:26:23.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.125]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.125]    __dp=0x00000000
[03:26:23.125]    __ap=0x00000000
[03:26:23.125]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.125]    __FlashAddr=0x00000000
[03:26:23.125]    __FlashLen=0x00000000
[03:26:23.125]    __FlashArg=0x00000000
[03:26:23.125]    __FlashOp=0x00000000
[03:26:23.125]    __Result=0x00000000
[03:26:23.125]  </debugvars>
[03:26:23.125]  
[03:26:23.125]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.125]    <block atomic="false" info="">
[03:26:23.125]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.125]        // -> [isSWJ <= 0x00000001]
[03:26:23.125]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.125]        // -> [hasDormant <= 0x00000000]
[03:26:23.125]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.125]        // -> [protType <= 0x00000002]
[03:26:23.125]    </block>
[03:26:23.125]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.125]      // if-block "protType == 1"
[03:26:23.125]        // =>  FALSE
[03:26:23.125]      // skip if-block "protType == 1"
[03:26:23.125]    </control>
[03:26:23.125]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.129]      // if-block "protType == 2"
[03:26:23.129]        // =>  TRUE
[03:26:23.129]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.129]        // if-block "isSWJ"
[03:26:23.129]          // =>  TRUE
[03:26:23.129]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.129]          // if-block "hasDormant"
[03:26:23.129]            // =>  FALSE
[03:26:23.129]          // skip if-block "hasDormant"
[03:26:23.129]        </control>
[03:26:23.129]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.129]          // if-block "!hasDormant"
[03:26:23.129]            // =>  TRUE
[03:26:23.129]          <block atomic="false" info="">
[03:26:23.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.129]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.145]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.145]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.145]          </block>
[03:26:23.145]          // end if-block "!hasDormant"
[03:26:23.145]        </control>
[03:26:23.145]        // end if-block "isSWJ"
[03:26:23.145]      </control>
[03:26:23.145]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.145]        // if-block "!isSWJ"
[03:26:23.145]          // =>  FALSE
[03:26:23.145]        // skip if-block "!isSWJ"
[03:26:23.145]      </control>
[03:26:23.145]      <block atomic="false" info="">
[03:26:23.145]        ReadDP(0x0);
[03:26:23.149]  
[03:26:23.149]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.149]  
[03:26:23.149]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.149]      </block>
[03:26:23.149]      // end if-block "protType == 2"
[03:26:23.149]    </control>
[03:26:23.149]  </sequence>
[03:26:23.149]  
[03:26:23.209]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.209]  
[03:26:23.209]  <debugvars>
[03:26:23.209]    // Pre-defined
[03:26:23.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.209]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.209]    __dp=0x00000000
[03:26:23.209]    __ap=0x00000000
[03:26:23.209]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.209]    __FlashAddr=0x00000000
[03:26:23.209]    __FlashLen=0x00000000
[03:26:23.209]    __FlashArg=0x00000000
[03:26:23.209]    __FlashOp=0x00000000
[03:26:23.209]    __Result=0x00000000
[03:26:23.209]  </debugvars>
[03:26:23.209]  
[03:26:23.209]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.209]    <block atomic="false" info="">
[03:26:23.209]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.209]        // -> [isSWJ <= 0x00000001]
[03:26:23.209]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.209]        // -> [hasDormant <= 0x00000000]
[03:26:23.209]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.209]        // -> [protType <= 0x00000002]
[03:26:23.209]    </block>
[03:26:23.209]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.209]      // if-block "protType == 1"
[03:26:23.209]        // =>  FALSE
[03:26:23.209]      // skip if-block "protType == 1"
[03:26:23.209]    </control>
[03:26:23.209]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.209]      // if-block "protType == 2"
[03:26:23.209]        // =>  TRUE
[03:26:23.209]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.213]        // if-block "isSWJ"
[03:26:23.213]          // =>  TRUE
[03:26:23.213]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.213]          // if-block "hasDormant"
[03:26:23.213]            // =>  FALSE
[03:26:23.213]          // skip if-block "hasDormant"
[03:26:23.213]        </control>
[03:26:23.213]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.213]          // if-block "!hasDormant"
[03:26:23.213]            // =>  TRUE
[03:26:23.213]          <block atomic="false" info="">
[03:26:23.213]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.225]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.229]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.233]          </block>
[03:26:23.233]          // end if-block "!hasDormant"
[03:26:23.233]        </control>
[03:26:23.233]        // end if-block "isSWJ"
[03:26:23.233]      </control>
[03:26:23.233]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.233]        // if-block "!isSWJ"
[03:26:23.233]          // =>  FALSE
[03:26:23.233]        // skip if-block "!isSWJ"
[03:26:23.233]      </control>
[03:26:23.233]      <block atomic="false" info="">
[03:26:23.233]        ReadDP(0x0);
[03:26:23.237]  
[03:26:23.237]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.237]  
[03:26:23.237]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.237]      </block>
[03:26:23.237]      // end if-block "protType == 2"
[03:26:23.237]    </control>
[03:26:23.237]  </sequence>
[03:26:23.237]  
[03:26:23.293]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.293]  
[03:26:23.293]  <debugvars>
[03:26:23.293]    // Pre-defined
[03:26:23.293]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.293]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.293]    __dp=0x00000000
[03:26:23.293]    __ap=0x00000000
[03:26:23.293]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.293]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.293]    __FlashAddr=0x00000000
[03:26:23.293]    __FlashLen=0x00000000
[03:26:23.293]    __FlashArg=0x00000000
[03:26:23.293]    __FlashOp=0x00000000
[03:26:23.293]    __Result=0x00000000
[03:26:23.293]  </debugvars>
[03:26:23.293]  
[03:26:23.293]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.293]    <block atomic="false" info="">
[03:26:23.293]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.293]        // -> [isSWJ <= 0x00000001]
[03:26:23.293]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.293]        // -> [hasDormant <= 0x00000000]
[03:26:23.293]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.293]        // -> [protType <= 0x00000002]
[03:26:23.293]    </block>
[03:26:23.293]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.293]      // if-block "protType == 1"
[03:26:23.293]        // =>  FALSE
[03:26:23.293]      // skip if-block "protType == 1"
[03:26:23.293]    </control>
[03:26:23.293]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.293]      // if-block "protType == 2"
[03:26:23.297]        // =>  TRUE
[03:26:23.297]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.297]        // if-block "isSWJ"
[03:26:23.297]          // =>  TRUE
[03:26:23.297]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.297]          // if-block "hasDormant"
[03:26:23.297]            // =>  FALSE
[03:26:23.297]          // skip if-block "hasDormant"
[03:26:23.297]        </control>
[03:26:23.297]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.297]          // if-block "!hasDormant"
[03:26:23.297]            // =>  TRUE
[03:26:23.297]          <block atomic="false" info="">
[03:26:23.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.297]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.305]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.309]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.309]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.309]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.309]          </block>
[03:26:23.309]          // end if-block "!hasDormant"
[03:26:23.309]        </control>
[03:26:23.309]        // end if-block "isSWJ"
[03:26:23.309]      </control>
[03:26:23.309]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.309]        // if-block "!isSWJ"
[03:26:23.309]          // =>  FALSE
[03:26:23.309]        // skip if-block "!isSWJ"
[03:26:23.309]      </control>
[03:26:23.309]      <block atomic="false" info="">
[03:26:23.309]        ReadDP(0x0);
[03:26:23.313]  
[03:26:23.313]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.313]  
[03:26:23.313]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.313]      </block>
[03:26:23.313]      // end if-block "protType == 2"
[03:26:23.313]    </control>
[03:26:23.313]  </sequence>
[03:26:23.313]  
[03:26:23.365]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.365]  
[03:26:23.365]  <debugvars>
[03:26:23.365]    // Pre-defined
[03:26:23.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.365]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.365]    __dp=0x00000000
[03:26:23.365]    __ap=0x00000000
[03:26:23.365]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.365]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.365]    __FlashAddr=0x00000000
[03:26:23.365]    __FlashLen=0x00000000
[03:26:23.365]    __FlashArg=0x00000000
[03:26:23.365]    __FlashOp=0x00000000
[03:26:23.365]    __Result=0x00000000
[03:26:23.365]  </debugvars>
[03:26:23.365]  
[03:26:23.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.365]    <block atomic="false" info="">
[03:26:23.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.365]        // -> [isSWJ <= 0x00000001]
[03:26:23.365]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.365]        // -> [hasDormant <= 0x00000000]
[03:26:23.365]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.369]        // -> [protType <= 0x00000002]
[03:26:23.369]    </block>
[03:26:23.369]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.369]      // if-block "protType == 1"
[03:26:23.369]        // =>  FALSE
[03:26:23.369]      // skip if-block "protType == 1"
[03:26:23.369]    </control>
[03:26:23.369]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.369]      // if-block "protType == 2"
[03:26:23.369]        // =>  TRUE
[03:26:23.369]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.369]        // if-block "isSWJ"
[03:26:23.369]          // =>  TRUE
[03:26:23.369]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.369]          // if-block "hasDormant"
[03:26:23.369]            // =>  FALSE
[03:26:23.369]          // skip if-block "hasDormant"
[03:26:23.369]        </control>
[03:26:23.369]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.369]          // if-block "!hasDormant"
[03:26:23.369]            // =>  TRUE
[03:26:23.369]          <block atomic="false" info="">
[03:26:23.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.373]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.377]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.377]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.377]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.377]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.381]          </block>
[03:26:23.381]          // end if-block "!hasDormant"
[03:26:23.381]        </control>
[03:26:23.381]        // end if-block "isSWJ"
[03:26:23.381]      </control>
[03:26:23.381]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.381]        // if-block "!isSWJ"
[03:26:23.381]          // =>  FALSE
[03:26:23.381]        // skip if-block "!isSWJ"
[03:26:23.381]      </control>
[03:26:23.381]      <block atomic="false" info="">
[03:26:23.381]        ReadDP(0x0);
[03:26:23.385]  
[03:26:23.385]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.385]  
[03:26:23.385]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.385]      </block>
[03:26:23.385]      // end if-block "protType == 2"
[03:26:23.385]    </control>
[03:26:23.385]  </sequence>
[03:26:23.385]  
[03:26:23.438]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.438]  
[03:26:23.438]  <debugvars>
[03:26:23.438]    // Pre-defined
[03:26:23.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.438]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.438]    __dp=0x00000000
[03:26:23.438]    __ap=0x00000000
[03:26:23.438]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.438]    __FlashAddr=0x00000000
[03:26:23.438]    __FlashLen=0x00000000
[03:26:23.438]    __FlashArg=0x00000000
[03:26:23.438]    __FlashOp=0x00000000
[03:26:23.438]    __Result=0x00000000
[03:26:23.438]  </debugvars>
[03:26:23.438]  
[03:26:23.438]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.438]    <block atomic="false" info="">
[03:26:23.438]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.438]        // -> [isSWJ <= 0x00000001]
[03:26:23.438]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.438]        // -> [hasDormant <= 0x00000000]
[03:26:23.438]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.438]        // -> [protType <= 0x00000002]
[03:26:23.438]    </block>
[03:26:23.438]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.438]      // if-block "protType == 1"
[03:26:23.438]        // =>  FALSE
[03:26:23.438]      // skip if-block "protType == 1"
[03:26:23.438]    </control>
[03:26:23.442]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.442]      // if-block "protType == 2"
[03:26:23.442]        // =>  TRUE
[03:26:23.442]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.442]        // if-block "isSWJ"
[03:26:23.442]          // =>  TRUE
[03:26:23.442]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.442]          // if-block "hasDormant"
[03:26:23.442]            // =>  FALSE
[03:26:23.442]          // skip if-block "hasDormant"
[03:26:23.442]        </control>
[03:26:23.442]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.442]          // if-block "!hasDormant"
[03:26:23.442]            // =>  TRUE
[03:26:23.442]          <block atomic="false" info="">
[03:26:23.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.446]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.450]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.454]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.454]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.454]          </block>
[03:26:23.454]          // end if-block "!hasDormant"
[03:26:23.454]        </control>
[03:26:23.454]        // end if-block "isSWJ"
[03:26:23.454]      </control>
[03:26:23.454]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.454]        // if-block "!isSWJ"
[03:26:23.454]          // =>  FALSE
[03:26:23.454]        // skip if-block "!isSWJ"
[03:26:23.454]      </control>
[03:26:23.454]      <block atomic="false" info="">
[03:26:23.454]        ReadDP(0x0);
[03:26:23.458]  
[03:26:23.458]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.458]  
[03:26:23.458]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.458]      </block>
[03:26:23.458]      // end if-block "protType == 2"
[03:26:23.458]    </control>
[03:26:23.458]  </sequence>
[03:26:23.458]  
[03:26:23.510]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.510]  
[03:26:23.510]  <debugvars>
[03:26:23.510]    // Pre-defined
[03:26:23.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.510]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.510]    __dp=0x00000000
[03:26:23.510]    __ap=0x00000000
[03:26:23.510]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.510]    __FlashAddr=0x00000000
[03:26:23.510]    __FlashLen=0x00000000
[03:26:23.510]    __FlashArg=0x00000000
[03:26:23.510]    __FlashOp=0x00000000
[03:26:23.510]    __Result=0x00000000
[03:26:23.510]  </debugvars>
[03:26:23.510]  
[03:26:23.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.510]    <block atomic="false" info="">
[03:26:23.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.510]        // -> [isSWJ <= 0x00000001]
[03:26:23.510]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.510]        // -> [hasDormant <= 0x00000000]
[03:26:23.510]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.510]        // -> [protType <= 0x00000002]
[03:26:23.510]    </block>
[03:26:23.510]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.510]      // if-block "protType == 1"
[03:26:23.510]        // =>  FALSE
[03:26:23.510]      // skip if-block "protType == 1"
[03:26:23.510]    </control>
[03:26:23.510]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.510]      // if-block "protType == 2"
[03:26:23.510]        // =>  TRUE
[03:26:23.510]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.510]        // if-block "isSWJ"
[03:26:23.510]          // =>  TRUE
[03:26:23.514]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.514]          // if-block "hasDormant"
[03:26:23.514]            // =>  FALSE
[03:26:23.514]          // skip if-block "hasDormant"
[03:26:23.514]        </control>
[03:26:23.514]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.514]          // if-block "!hasDormant"
[03:26:23.514]            // =>  TRUE
[03:26:23.514]          <block atomic="false" info="">
[03:26:23.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.522]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.522]          </block>
[03:26:23.526]          // end if-block "!hasDormant"
[03:26:23.526]        </control>
[03:26:23.526]        // end if-block "isSWJ"
[03:26:23.526]      </control>
[03:26:23.526]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.526]        // if-block "!isSWJ"
[03:26:23.526]          // =>  FALSE
[03:26:23.526]        // skip if-block "!isSWJ"
[03:26:23.526]      </control>
[03:26:23.526]      <block atomic="false" info="">
[03:26:23.526]        ReadDP(0x0);
[03:26:23.526]  
[03:26:23.526]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.526]  
[03:26:23.526]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.526]      </block>
[03:26:23.526]      // end if-block "protType == 2"
[03:26:23.526]    </control>
[03:26:23.526]  </sequence>
[03:26:23.526]  
[03:26:23.582]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.582]  
[03:26:23.582]  <debugvars>
[03:26:23.582]    // Pre-defined
[03:26:23.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.582]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.582]    __dp=0x00000000
[03:26:23.582]    __ap=0x00000000
[03:26:23.582]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.582]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.582]    __FlashAddr=0x00000000
[03:26:23.582]    __FlashLen=0x00000000
[03:26:23.582]    __FlashArg=0x00000000
[03:26:23.582]    __FlashOp=0x00000000
[03:26:23.582]    __Result=0x00000000
[03:26:23.582]  </debugvars>
[03:26:23.582]  
[03:26:23.582]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.582]    <block atomic="false" info="">
[03:26:23.582]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.582]        // -> [isSWJ <= 0x00000001]
[03:26:23.582]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.582]        // -> [hasDormant <= 0x00000000]
[03:26:23.582]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.582]        // -> [protType <= 0x00000002]
[03:26:23.582]    </block>
[03:26:23.582]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.582]      // if-block "protType == 1"
[03:26:23.586]        // =>  FALSE
[03:26:23.586]      // skip if-block "protType == 1"
[03:26:23.586]    </control>
[03:26:23.586]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.586]      // if-block "protType == 2"
[03:26:23.586]        // =>  TRUE
[03:26:23.586]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.586]        // if-block "isSWJ"
[03:26:23.586]          // =>  TRUE
[03:26:23.586]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.586]          // if-block "hasDormant"
[03:26:23.586]            // =>  FALSE
[03:26:23.586]          // skip if-block "hasDormant"
[03:26:23.586]        </control>
[03:26:23.586]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.586]          // if-block "!hasDormant"
[03:26:23.586]            // =>  TRUE
[03:26:23.586]          <block atomic="false" info="">
[03:26:23.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.586]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.590]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.594]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.602]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.602]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.602]          </block>
[03:26:23.602]          // end if-block "!hasDormant"
[03:26:23.602]        </control>
[03:26:23.602]        // end if-block "isSWJ"
[03:26:23.602]      </control>
[03:26:23.602]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.602]        // if-block "!isSWJ"
[03:26:23.602]          // =>  FALSE
[03:26:23.602]        // skip if-block "!isSWJ"
[03:26:23.602]      </control>
[03:26:23.602]      <block atomic="false" info="">
[03:26:23.602]        ReadDP(0x0);
[03:26:23.602]  
[03:26:23.602]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.602]  
[03:26:23.606]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.606]      </block>
[03:26:23.606]      // end if-block "protType == 2"
[03:26:23.606]    </control>
[03:26:23.606]  </sequence>
[03:26:23.606]  
[03:26:23.666]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.666]  
[03:26:23.666]  <debugvars>
[03:26:23.666]    // Pre-defined
[03:26:23.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.666]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.666]    __dp=0x00000000
[03:26:23.666]    __ap=0x00000000
[03:26:23.666]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.666]    __FlashAddr=0x00000000
[03:26:23.666]    __FlashLen=0x00000000
[03:26:23.666]    __FlashArg=0x00000000
[03:26:23.666]    __FlashOp=0x00000000
[03:26:23.666]    __Result=0x00000000
[03:26:23.666]  </debugvars>
[03:26:23.666]  
[03:26:23.666]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.666]    <block atomic="false" info="">
[03:26:23.666]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.666]        // -> [isSWJ <= 0x00000001]
[03:26:23.666]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.666]        // -> [hasDormant <= 0x00000000]
[03:26:23.666]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.666]        // -> [protType <= 0x00000002]
[03:26:23.666]    </block>
[03:26:23.666]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.666]      // if-block "protType == 1"
[03:26:23.666]        // =>  FALSE
[03:26:23.670]      // skip if-block "protType == 1"
[03:26:23.670]    </control>
[03:26:23.670]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.670]      // if-block "protType == 2"
[03:26:23.670]        // =>  TRUE
[03:26:23.670]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.670]        // if-block "isSWJ"
[03:26:23.670]          // =>  TRUE
[03:26:23.670]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.670]          // if-block "hasDormant"
[03:26:23.670]            // =>  FALSE
[03:26:23.670]          // skip if-block "hasDormant"
[03:26:23.670]        </control>
[03:26:23.670]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.670]          // if-block "!hasDormant"
[03:26:23.670]            // =>  TRUE
[03:26:23.670]          <block atomic="false" info="">
[03:26:23.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.674]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.678]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.678]          </block>
[03:26:23.678]          // end if-block "!hasDormant"
[03:26:23.678]        </control>
[03:26:23.678]        // end if-block "isSWJ"
[03:26:23.682]      </control>
[03:26:23.682]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.682]        // if-block "!isSWJ"
[03:26:23.682]          // =>  FALSE
[03:26:23.682]        // skip if-block "!isSWJ"
[03:26:23.682]      </control>
[03:26:23.682]      <block atomic="false" info="">
[03:26:23.682]        ReadDP(0x0);
[03:26:23.682]  
[03:26:23.682]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.682]  
[03:26:23.682]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.682]      </block>
[03:26:23.682]      // end if-block "protType == 2"
[03:26:23.682]    </control>
[03:26:23.682]  </sequence>
[03:26:23.682]  
[03:26:23.738]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.738]  
[03:26:23.738]  <debugvars>
[03:26:23.738]    // Pre-defined
[03:26:23.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.738]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.738]    __dp=0x00000000
[03:26:23.738]    __ap=0x00000000
[03:26:23.738]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.738]    __FlashAddr=0x00000000
[03:26:23.738]    __FlashLen=0x00000000
[03:26:23.738]    __FlashArg=0x00000000
[03:26:23.738]    __FlashOp=0x00000000
[03:26:23.738]    __Result=0x00000000
[03:26:23.738]  </debugvars>
[03:26:23.738]  
[03:26:23.738]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.738]    <block atomic="false" info="">
[03:26:23.738]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.738]        // -> [isSWJ <= 0x00000001]
[03:26:23.738]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.738]        // -> [hasDormant <= 0x00000000]
[03:26:23.738]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.738]        // -> [protType <= 0x00000002]
[03:26:23.738]    </block>
[03:26:23.738]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.738]      // if-block "protType == 1"
[03:26:23.738]        // =>  FALSE
[03:26:23.738]      // skip if-block "protType == 1"
[03:26:23.742]    </control>
[03:26:23.742]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.742]      // if-block "protType == 2"
[03:26:23.742]        // =>  TRUE
[03:26:23.742]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.742]        // if-block "isSWJ"
[03:26:23.742]          // =>  TRUE
[03:26:23.742]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.742]          // if-block "hasDormant"
[03:26:23.742]            // =>  FALSE
[03:26:23.742]          // skip if-block "hasDormant"
[03:26:23.742]        </control>
[03:26:23.742]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.742]          // if-block "!hasDormant"
[03:26:23.742]            // =>  TRUE
[03:26:23.742]          <block atomic="false" info="">
[03:26:23.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.742]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.746]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.750]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.750]          </block>
[03:26:23.750]          // end if-block "!hasDormant"
[03:26:23.750]        </control>
[03:26:23.750]        // end if-block "isSWJ"
[03:26:23.750]      </control>
[03:26:23.750]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.750]        // if-block "!isSWJ"
[03:26:23.750]          // =>  FALSE
[03:26:23.750]        // skip if-block "!isSWJ"
[03:26:23.750]      </control>
[03:26:23.750]      <block atomic="false" info="">
[03:26:23.750]        ReadDP(0x0);
[03:26:23.754]  
[03:26:23.754]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.754]  
[03:26:23.754]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.754]      </block>
[03:26:23.754]      // end if-block "protType == 2"
[03:26:23.754]    </control>
[03:26:23.754]  </sequence>
[03:26:23.754]  
[03:26:23.810]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.810]  
[03:26:23.810]  <debugvars>
[03:26:23.810]    // Pre-defined
[03:26:23.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.810]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.810]    __dp=0x00000000
[03:26:23.810]    __ap=0x00000000
[03:26:23.810]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.810]    __FlashAddr=0x00000000
[03:26:23.810]    __FlashLen=0x00000000
[03:26:23.810]    __FlashArg=0x00000000
[03:26:23.810]    __FlashOp=0x00000000
[03:26:23.810]    __Result=0x00000000
[03:26:23.810]  </debugvars>
[03:26:23.810]  
[03:26:23.810]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.810]    <block atomic="false" info="">
[03:26:23.810]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.810]        // -> [isSWJ <= 0x00000001]
[03:26:23.810]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.810]        // -> [hasDormant <= 0x00000000]
[03:26:23.810]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.810]        // -> [protType <= 0x00000002]
[03:26:23.810]    </block>
[03:26:23.810]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.810]      // if-block "protType == 1"
[03:26:23.810]        // =>  FALSE
[03:26:23.810]      // skip if-block "protType == 1"
[03:26:23.810]    </control>
[03:26:23.810]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.810]      // if-block "protType == 2"
[03:26:23.810]        // =>  TRUE
[03:26:23.814]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.814]        // if-block "isSWJ"
[03:26:23.814]          // =>  TRUE
[03:26:23.814]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.814]          // if-block "hasDormant"
[03:26:23.814]            // =>  FALSE
[03:26:23.814]          // skip if-block "hasDormant"
[03:26:23.814]        </control>
[03:26:23.814]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.814]          // if-block "!hasDormant"
[03:26:23.814]            // =>  TRUE
[03:26:23.814]          <block atomic="false" info="">
[03:26:23.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.822]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.822]          </block>
[03:26:23.822]          // end if-block "!hasDormant"
[03:26:23.822]        </control>
[03:26:23.822]        // end if-block "isSWJ"
[03:26:23.822]      </control>
[03:26:23.822]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.822]        // if-block "!isSWJ"
[03:26:23.822]          // =>  FALSE
[03:26:23.822]        // skip if-block "!isSWJ"
[03:26:23.822]      </control>
[03:26:23.822]      <block atomic="false" info="">
[03:26:23.822]        ReadDP(0x0);
[03:26:23.826]  
[03:26:23.826]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.826]  
[03:26:23.826]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.826]      </block>
[03:26:23.826]      // end if-block "protType == 2"
[03:26:23.826]    </control>
[03:26:23.826]  </sequence>
[03:26:23.826]  
[03:26:23.883]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.883]  
[03:26:23.883]  <debugvars>
[03:26:23.883]    // Pre-defined
[03:26:23.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.883]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.883]    __dp=0x00000000
[03:26:23.883]    __ap=0x00000000
[03:26:23.883]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.884]    __FlashAddr=0x00000000
[03:26:23.884]    __FlashLen=0x00000000
[03:26:23.884]    __FlashArg=0x00000000
[03:26:23.884]    __FlashOp=0x00000000
[03:26:23.885]    __Result=0x00000000
[03:26:23.885]  </debugvars>
[03:26:23.885]  
[03:26:23.885]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.885]    <block atomic="false" info="">
[03:26:23.885]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.885]        // -> [isSWJ <= 0x00000001]
[03:26:23.885]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.885]        // -> [hasDormant <= 0x00000000]
[03:26:23.885]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.885]        // -> [protType <= 0x00000002]
[03:26:23.885]    </block>
[03:26:23.885]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.885]      // if-block "protType == 1"
[03:26:23.885]        // =>  FALSE
[03:26:23.885]      // skip if-block "protType == 1"
[03:26:23.885]    </control>
[03:26:23.885]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.885]      // if-block "protType == 2"
[03:26:23.885]        // =>  TRUE
[03:26:23.885]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.885]        // if-block "isSWJ"
[03:26:23.885]          // =>  TRUE
[03:26:23.885]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.885]          // if-block "hasDormant"
[03:26:23.887]            // =>  FALSE
[03:26:23.887]          // skip if-block "hasDormant"
[03:26:23.887]        </control>
[03:26:23.887]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.887]          // if-block "!hasDormant"
[03:26:23.887]            // =>  TRUE
[03:26:23.887]          <block atomic="false" info="">
[03:26:23.887]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.887]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.887]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.895]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.895]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.895]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.903]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.903]          </block>
[03:26:23.903]          // end if-block "!hasDormant"
[03:26:23.903]        </control>
[03:26:23.907]        // end if-block "isSWJ"
[03:26:23.907]      </control>
[03:26:23.907]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.907]        // if-block "!isSWJ"
[03:26:23.907]          // =>  FALSE
[03:26:23.907]        // skip if-block "!isSWJ"
[03:26:23.907]      </control>
[03:26:23.907]      <block atomic="false" info="">
[03:26:23.907]        ReadDP(0x0);
[03:26:23.907]  
[03:26:23.907]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.907]  
[03:26:23.907]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.907]      </block>
[03:26:23.907]      // end if-block "protType == 2"
[03:26:23.907]    </control>
[03:26:23.907]  </sequence>
[03:26:23.907]  
[03:26:23.968]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:23.968]  
[03:26:23.968]  <debugvars>
[03:26:23.968]    // Pre-defined
[03:26:23.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:23.968]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:23.968]    __dp=0x00000000
[03:26:23.968]    __ap=0x00000000
[03:26:23.968]    __traceout=0x00000000      (Trace Disabled)
[03:26:23.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:23.968]    __FlashAddr=0x00000000
[03:26:23.968]    __FlashLen=0x00000000
[03:26:23.968]    __FlashArg=0x00000000
[03:26:23.968]    __FlashOp=0x00000000
[03:26:23.968]    __Result=0x00000000
[03:26:23.968]  </debugvars>
[03:26:23.968]  
[03:26:23.968]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:23.968]    <block atomic="false" info="">
[03:26:23.968]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:23.968]        // -> [isSWJ <= 0x00000001]
[03:26:23.968]      __var hasDormant = __protocol & 0x00020000;
[03:26:23.968]        // -> [hasDormant <= 0x00000000]
[03:26:23.968]      __var protType   = __protocol & 0x0000FFFF;
[03:26:23.968]        // -> [protType <= 0x00000002]
[03:26:23.968]    </block>
[03:26:23.968]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:23.968]      // if-block "protType == 1"
[03:26:23.968]        // =>  FALSE
[03:26:23.968]      // skip if-block "protType == 1"
[03:26:23.968]    </control>
[03:26:23.972]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:23.972]      // if-block "protType == 2"
[03:26:23.972]        // =>  TRUE
[03:26:23.972]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:23.972]        // if-block "isSWJ"
[03:26:23.972]          // =>  TRUE
[03:26:23.972]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:23.972]          // if-block "hasDormant"
[03:26:23.972]            // =>  FALSE
[03:26:23.972]          // skip if-block "hasDormant"
[03:26:23.972]        </control>
[03:26:23.972]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:23.972]          // if-block "!hasDormant"
[03:26:23.972]            // =>  TRUE
[03:26:23.972]          <block atomic="false" info="">
[03:26:23.972]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:23.972]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.972]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:23.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:23.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:23.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.976]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:23.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:23.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:23.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:23.984]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:23.984]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:23.984]          </block>
[03:26:23.984]          // end if-block "!hasDormant"
[03:26:23.984]        </control>
[03:26:23.984]        // end if-block "isSWJ"
[03:26:23.984]      </control>
[03:26:23.984]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:23.984]        // if-block "!isSWJ"
[03:26:23.984]          // =>  FALSE
[03:26:23.984]        // skip if-block "!isSWJ"
[03:26:23.988]      </control>
[03:26:23.988]      <block atomic="false" info="">
[03:26:23.988]        ReadDP(0x0);
[03:26:23.988]  
[03:26:23.988]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:23.988]  
[03:26:23.988]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:23.988]      </block>
[03:26:23.988]      // end if-block "protType == 2"
[03:26:23.988]    </control>
[03:26:23.988]  </sequence>
[03:26:23.988]  
[03:26:24.040]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.040]  
[03:26:24.040]  <debugvars>
[03:26:24.040]    // Pre-defined
[03:26:24.040]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.040]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.041]    __dp=0x00000000
[03:26:24.042]    __ap=0x00000000
[03:26:24.042]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.042]    __FlashAddr=0x00000000
[03:26:24.042]    __FlashLen=0x00000000
[03:26:24.042]    __FlashArg=0x00000000
[03:26:24.042]    __FlashOp=0x00000000
[03:26:24.042]    __Result=0x00000000
[03:26:24.042]  </debugvars>
[03:26:24.042]  
[03:26:24.042]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.043]    <block atomic="false" info="">
[03:26:24.043]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.043]        // -> [isSWJ <= 0x00000001]
[03:26:24.043]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.043]        // -> [hasDormant <= 0x00000000]
[03:26:24.043]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.043]        // -> [protType <= 0x00000002]
[03:26:24.043]    </block>
[03:26:24.043]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.043]      // if-block "protType == 1"
[03:26:24.043]        // =>  FALSE
[03:26:24.043]      // skip if-block "protType == 1"
[03:26:24.044]    </control>
[03:26:24.044]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.044]      // if-block "protType == 2"
[03:26:24.044]        // =>  TRUE
[03:26:24.044]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.044]        // if-block "isSWJ"
[03:26:24.044]          // =>  TRUE
[03:26:24.044]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.044]          // if-block "hasDormant"
[03:26:24.045]            // =>  FALSE
[03:26:24.045]          // skip if-block "hasDormant"
[03:26:24.045]        </control>
[03:26:24.045]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.045]          // if-block "!hasDormant"
[03:26:24.045]            // =>  TRUE
[03:26:24.045]          <block atomic="false" info="">
[03:26:24.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.047]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.048]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.048]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.050]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.057]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.057]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.065]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.067]          </block>
[03:26:24.067]          // end if-block "!hasDormant"
[03:26:24.067]        </control>
[03:26:24.067]        // end if-block "isSWJ"
[03:26:24.067]      </control>
[03:26:24.067]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.067]        // if-block "!isSWJ"
[03:26:24.067]          // =>  FALSE
[03:26:24.067]        // skip if-block "!isSWJ"
[03:26:24.067]      </control>
[03:26:24.067]      <block atomic="false" info="">
[03:26:24.067]        ReadDP(0x0);
[03:26:24.069]  
[03:26:24.069]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.069]  
[03:26:24.069]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.069]      </block>
[03:26:24.069]      // end if-block "protType == 2"
[03:26:24.069]    </control>
[03:26:24.069]  </sequence>
[03:26:24.069]  
[03:26:24.128]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.128]  
[03:26:24.128]  <debugvars>
[03:26:24.128]    // Pre-defined
[03:26:24.128]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.128]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.128]    __dp=0x00000000
[03:26:24.128]    __ap=0x00000000
[03:26:24.128]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.128]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.128]    __FlashAddr=0x00000000
[03:26:24.128]    __FlashLen=0x00000000
[03:26:24.128]    __FlashArg=0x00000000
[03:26:24.128]    __FlashOp=0x00000000
[03:26:24.128]    __Result=0x00000000
[03:26:24.128]  </debugvars>
[03:26:24.128]  
[03:26:24.128]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.130]    <block atomic="false" info="">
[03:26:24.130]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.130]        // -> [isSWJ <= 0x00000001]
[03:26:24.130]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.130]        // -> [hasDormant <= 0x00000000]
[03:26:24.130]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.130]        // -> [protType <= 0x00000002]
[03:26:24.130]    </block>
[03:26:24.130]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.130]      // if-block "protType == 1"
[03:26:24.130]        // =>  FALSE
[03:26:24.130]      // skip if-block "protType == 1"
[03:26:24.130]    </control>
[03:26:24.130]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.130]      // if-block "protType == 2"
[03:26:24.130]        // =>  TRUE
[03:26:24.130]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.130]        // if-block "isSWJ"
[03:26:24.130]          // =>  TRUE
[03:26:24.130]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.130]          // if-block "hasDormant"
[03:26:24.132]            // =>  FALSE
[03:26:24.132]          // skip if-block "hasDormant"
[03:26:24.132]        </control>
[03:26:24.132]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.132]          // if-block "!hasDormant"
[03:26:24.132]            // =>  TRUE
[03:26:24.132]          <block atomic="false" info="">
[03:26:24.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.133]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.144]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.144]          </block>
[03:26:24.144]          // end if-block "!hasDormant"
[03:26:24.144]        </control>
[03:26:24.144]        // end if-block "isSWJ"
[03:26:24.144]      </control>
[03:26:24.144]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.144]        // if-block "!isSWJ"
[03:26:24.144]          // =>  FALSE
[03:26:24.144]        // skip if-block "!isSWJ"
[03:26:24.144]      </control>
[03:26:24.144]      <block atomic="false" info="">
[03:26:24.144]        ReadDP(0x0);
[03:26:24.144]  
[03:26:24.144]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.144]  
[03:26:24.144]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.148]      </block>
[03:26:24.148]      // end if-block "protType == 2"
[03:26:24.148]    </control>
[03:26:24.148]  </sequence>
[03:26:24.148]  
[03:26:24.202]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.202]  
[03:26:24.202]  <debugvars>
[03:26:24.202]    // Pre-defined
[03:26:24.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.202]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.202]    __dp=0x00000000
[03:26:24.202]    __ap=0x00000000
[03:26:24.202]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.203]    __FlashAddr=0x00000000
[03:26:24.203]    __FlashLen=0x00000000
[03:26:24.203]    __FlashArg=0x00000000
[03:26:24.203]    __FlashOp=0x00000000
[03:26:24.203]    __Result=0x00000000
[03:26:24.203]  </debugvars>
[03:26:24.203]  
[03:26:24.203]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.203]    <block atomic="false" info="">
[03:26:24.203]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.203]        // -> [isSWJ <= 0x00000001]
[03:26:24.203]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.203]        // -> [hasDormant <= 0x00000000]
[03:26:24.203]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.203]        // -> [protType <= 0x00000002]
[03:26:24.203]    </block>
[03:26:24.203]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.203]      // if-block "protType == 1"
[03:26:24.203]        // =>  FALSE
[03:26:24.203]      // skip if-block "protType == 1"
[03:26:24.205]    </control>
[03:26:24.205]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.205]      // if-block "protType == 2"
[03:26:24.205]        // =>  TRUE
[03:26:24.205]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.205]        // if-block "isSWJ"
[03:26:24.205]          // =>  TRUE
[03:26:24.205]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.205]          // if-block "hasDormant"
[03:26:24.205]            // =>  FALSE
[03:26:24.205]          // skip if-block "hasDormant"
[03:26:24.206]        </control>
[03:26:24.206]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.206]          // if-block "!hasDormant"
[03:26:24.206]            // =>  TRUE
[03:26:24.206]          <block atomic="false" info="">
[03:26:24.206]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.211]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.219]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.219]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.219]          </block>
[03:26:24.219]          // end if-block "!hasDormant"
[03:26:24.219]        </control>
[03:26:24.219]        // end if-block "isSWJ"
[03:26:24.219]      </control>
[03:26:24.219]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.219]        // if-block "!isSWJ"
[03:26:24.219]          // =>  FALSE
[03:26:24.219]        // skip if-block "!isSWJ"
[03:26:24.219]      </control>
[03:26:24.219]      <block atomic="false" info="">
[03:26:24.219]        ReadDP(0x0);
[03:26:24.223]  
[03:26:24.223]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.223]  
[03:26:24.223]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.223]      </block>
[03:26:24.223]      // end if-block "protType == 2"
[03:26:24.223]    </control>
[03:26:24.223]  </sequence>
[03:26:24.223]  
[03:26:24.276]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.276]  
[03:26:24.278]  <debugvars>
[03:26:24.278]    // Pre-defined
[03:26:24.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.278]    __dp=0x00000000
[03:26:24.278]    __ap=0x00000000
[03:26:24.278]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.278]    __FlashAddr=0x00000000
[03:26:24.278]    __FlashLen=0x00000000
[03:26:24.278]    __FlashArg=0x00000000
[03:26:24.278]    __FlashOp=0x00000000
[03:26:24.278]    __Result=0x00000000
[03:26:24.278]  </debugvars>
[03:26:24.278]  
[03:26:24.278]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.278]    <block atomic="false" info="">
[03:26:24.278]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.278]        // -> [isSWJ <= 0x00000001]
[03:26:24.280]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.280]        // -> [hasDormant <= 0x00000000]
[03:26:24.280]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.280]        // -> [protType <= 0x00000002]
[03:26:24.280]    </block>
[03:26:24.280]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.280]      // if-block "protType == 1"
[03:26:24.280]        // =>  FALSE
[03:26:24.280]      // skip if-block "protType == 1"
[03:26:24.280]    </control>
[03:26:24.280]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.280]      // if-block "protType == 2"
[03:26:24.280]        // =>  TRUE
[03:26:24.280]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.280]        // if-block "isSWJ"
[03:26:24.280]          // =>  TRUE
[03:26:24.280]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.280]          // if-block "hasDormant"
[03:26:24.280]            // =>  FALSE
[03:26:24.280]          // skip if-block "hasDormant"
[03:26:24.280]        </control>
[03:26:24.280]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.280]          // if-block "!hasDormant"
[03:26:24.280]            // =>  TRUE
[03:26:24.280]          <block atomic="false" info="">
[03:26:24.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.284]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.288]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.288]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.288]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.288]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.292]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.292]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.292]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.292]          </block>
[03:26:24.296]          // end if-block "!hasDormant"
[03:26:24.296]        </control>
[03:26:24.296]        // end if-block "isSWJ"
[03:26:24.296]      </control>
[03:26:24.296]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.296]        // if-block "!isSWJ"
[03:26:24.296]          // =>  FALSE
[03:26:24.296]        // skip if-block "!isSWJ"
[03:26:24.296]      </control>
[03:26:24.296]      <block atomic="false" info="">
[03:26:24.296]        ReadDP(0x0);
[03:26:24.296]  
[03:26:24.296]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.296]  
[03:26:24.296]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.296]      </block>
[03:26:24.296]      // end if-block "protType == 2"
[03:26:24.296]    </control>
[03:26:24.296]  </sequence>
[03:26:24.296]  
[03:26:24.348]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.348]  
[03:26:24.348]  <debugvars>
[03:26:24.348]    // Pre-defined
[03:26:24.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.348]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.348]    __dp=0x00000000
[03:26:24.348]    __ap=0x00000000
[03:26:24.348]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.348]    __FlashAddr=0x00000000
[03:26:24.348]    __FlashLen=0x00000000
[03:26:24.348]    __FlashArg=0x00000000
[03:26:24.348]    __FlashOp=0x00000000
[03:26:24.348]    __Result=0x00000000
[03:26:24.348]  </debugvars>
[03:26:24.348]  
[03:26:24.348]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.348]    <block atomic="false" info="">
[03:26:24.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.348]        // -> [isSWJ <= 0x00000001]
[03:26:24.348]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.348]        // -> [hasDormant <= 0x00000000]
[03:26:24.348]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.348]        // -> [protType <= 0x00000002]
[03:26:24.348]    </block>
[03:26:24.348]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.352]      // if-block "protType == 1"
[03:26:24.352]        // =>  FALSE
[03:26:24.352]      // skip if-block "protType == 1"
[03:26:24.352]    </control>
[03:26:24.352]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.352]      // if-block "protType == 2"
[03:26:24.352]        // =>  TRUE
[03:26:24.352]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.352]        // if-block "isSWJ"
[03:26:24.352]          // =>  TRUE
[03:26:24.352]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.352]          // if-block "hasDormant"
[03:26:24.352]            // =>  FALSE
[03:26:24.352]          // skip if-block "hasDormant"
[03:26:24.352]        </control>
[03:26:24.352]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.352]          // if-block "!hasDormant"
[03:26:24.352]            // =>  TRUE
[03:26:24.352]          <block atomic="false" info="">
[03:26:24.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.356]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.356]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.356]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.360]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.368]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.368]          </block>
[03:26:24.368]          // end if-block "!hasDormant"
[03:26:24.372]        </control>
[03:26:24.372]        // end if-block "isSWJ"
[03:26:24.372]      </control>
[03:26:24.372]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.372]        // if-block "!isSWJ"
[03:26:24.372]          // =>  FALSE
[03:26:24.372]        // skip if-block "!isSWJ"
[03:26:24.372]      </control>
[03:26:24.372]      <block atomic="false" info="">
[03:26:24.372]        ReadDP(0x0);
[03:26:24.372]  
[03:26:24.372]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.372]  
[03:26:24.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.372]      </block>
[03:26:24.372]      // end if-block "protType == 2"
[03:26:24.372]    </control>
[03:26:24.372]  </sequence>
[03:26:24.372]  
[03:26:24.433]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.433]  
[03:26:24.433]  <debugvars>
[03:26:24.433]    // Pre-defined
[03:26:24.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.433]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.433]    __dp=0x00000000
[03:26:24.434]    __ap=0x00000000
[03:26:24.434]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.434]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.434]    __FlashAddr=0x00000000
[03:26:24.434]    __FlashLen=0x00000000
[03:26:24.434]    __FlashArg=0x00000000
[03:26:24.434]    __FlashOp=0x00000000
[03:26:24.434]    __Result=0x00000000
[03:26:24.434]  </debugvars>
[03:26:24.434]  
[03:26:24.434]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.434]    <block atomic="false" info="">
[03:26:24.434]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.434]        // -> [isSWJ <= 0x00000001]
[03:26:24.434]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.434]        // -> [hasDormant <= 0x00000000]
[03:26:24.434]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.434]        // -> [protType <= 0x00000002]
[03:26:24.434]    </block>
[03:26:24.434]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.434]      // if-block "protType == 1"
[03:26:24.434]        // =>  FALSE
[03:26:24.437]      // skip if-block "protType == 1"
[03:26:24.437]    </control>
[03:26:24.437]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.437]      // if-block "protType == 2"
[03:26:24.437]        // =>  TRUE
[03:26:24.437]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.437]        // if-block "isSWJ"
[03:26:24.437]          // =>  TRUE
[03:26:24.437]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.437]          // if-block "hasDormant"
[03:26:24.437]            // =>  FALSE
[03:26:24.437]          // skip if-block "hasDormant"
[03:26:24.437]        </control>
[03:26:24.437]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.437]          // if-block "!hasDormant"
[03:26:24.437]            // =>  TRUE
[03:26:24.437]          <block atomic="false" info="">
[03:26:24.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.437]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.445]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.453]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.457]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.457]          </block>
[03:26:24.457]          // end if-block "!hasDormant"
[03:26:24.457]        </control>
[03:26:24.457]        // end if-block "isSWJ"
[03:26:24.457]      </control>
[03:26:24.457]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.457]        // if-block "!isSWJ"
[03:26:24.457]          // =>  FALSE
[03:26:24.457]        // skip if-block "!isSWJ"
[03:26:24.457]      </control>
[03:26:24.457]      <block atomic="false" info="">
[03:26:24.457]        ReadDP(0x0);
[03:26:24.457]  
[03:26:24.457]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.457]  
[03:26:24.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.457]      </block>
[03:26:24.457]      // end if-block "protType == 2"
[03:26:24.461]    </control>
[03:26:24.461]  </sequence>
[03:26:24.461]  
[03:26:24.517]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.517]  
[03:26:24.517]  <debugvars>
[03:26:24.517]    // Pre-defined
[03:26:24.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.517]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.517]    __dp=0x00000000
[03:26:24.517]    __ap=0x00000000
[03:26:24.517]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.517]    __FlashAddr=0x00000000
[03:26:24.517]    __FlashLen=0x00000000
[03:26:24.517]    __FlashArg=0x00000000
[03:26:24.517]    __FlashOp=0x00000000
[03:26:24.517]    __Result=0x00000000
[03:26:24.517]  </debugvars>
[03:26:24.517]  
[03:26:24.517]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.517]    <block atomic="false" info="">
[03:26:24.517]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.517]        // -> [isSWJ <= 0x00000001]
[03:26:24.517]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.517]        // -> [hasDormant <= 0x00000000]
[03:26:24.517]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.517]        // -> [protType <= 0x00000002]
[03:26:24.517]    </block>
[03:26:24.517]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.517]      // if-block "protType == 1"
[03:26:24.517]        // =>  FALSE
[03:26:24.517]      // skip if-block "protType == 1"
[03:26:24.517]    </control>
[03:26:24.517]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.517]      // if-block "protType == 2"
[03:26:24.517]        // =>  TRUE
[03:26:24.521]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.521]        // if-block "isSWJ"
[03:26:24.521]          // =>  TRUE
[03:26:24.521]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.521]          // if-block "hasDormant"
[03:26:24.521]            // =>  FALSE
[03:26:24.521]          // skip if-block "hasDormant"
[03:26:24.521]        </control>
[03:26:24.521]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.521]          // if-block "!hasDormant"
[03:26:24.521]            // =>  TRUE
[03:26:24.521]          <block atomic="false" info="">
[03:26:24.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.521]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.521]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.525]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.525]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.525]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.529]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.533]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.533]          </block>
[03:26:24.533]          // end if-block "!hasDormant"
[03:26:24.533]        </control>
[03:26:24.533]        // end if-block "isSWJ"
[03:26:24.533]      </control>
[03:26:24.533]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.533]        // if-block "!isSWJ"
[03:26:24.533]          // =>  FALSE
[03:26:24.533]        // skip if-block "!isSWJ"
[03:26:24.533]      </control>
[03:26:24.533]      <block atomic="false" info="">
[03:26:24.533]        ReadDP(0x0);
[03:26:24.537]  
[03:26:24.537]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.537]  
[03:26:24.537]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.537]      </block>
[03:26:24.537]      // end if-block "protType == 2"
[03:26:24.537]    </control>
[03:26:24.537]  </sequence>
[03:26:24.537]  
[03:26:24.589]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.589]  
[03:26:24.589]  <debugvars>
[03:26:24.589]    // Pre-defined
[03:26:24.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.589]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.589]    __dp=0x00000000
[03:26:24.589]    __ap=0x00000000
[03:26:24.589]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.589]    __FlashAddr=0x00000000
[03:26:24.589]    __FlashLen=0x00000000
[03:26:24.589]    __FlashArg=0x00000000
[03:26:24.589]    __FlashOp=0x00000000
[03:26:24.589]    __Result=0x00000000
[03:26:24.589]  </debugvars>
[03:26:24.589]  
[03:26:24.589]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.589]    <block atomic="false" info="">
[03:26:24.589]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.589]        // -> [isSWJ <= 0x00000001]
[03:26:24.589]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.589]        // -> [hasDormant <= 0x00000000]
[03:26:24.589]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.589]        // -> [protType <= 0x00000002]
[03:26:24.589]    </block>
[03:26:24.589]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.589]      // if-block "protType == 1"
[03:26:24.589]        // =>  FALSE
[03:26:24.593]      // skip if-block "protType == 1"
[03:26:24.593]    </control>
[03:26:24.593]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.593]      // if-block "protType == 2"
[03:26:24.593]        // =>  TRUE
[03:26:24.593]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.593]        // if-block "isSWJ"
[03:26:24.593]          // =>  TRUE
[03:26:24.593]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.593]          // if-block "hasDormant"
[03:26:24.593]            // =>  FALSE
[03:26:24.593]          // skip if-block "hasDormant"
[03:26:24.593]        </control>
[03:26:24.593]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.593]          // if-block "!hasDormant"
[03:26:24.593]            // =>  TRUE
[03:26:24.593]          <block atomic="false" info="">
[03:26:24.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.593]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.597]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.601]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.601]          </block>
[03:26:24.601]          // end if-block "!hasDormant"
[03:26:24.601]        </control>
[03:26:24.601]        // end if-block "isSWJ"
[03:26:24.601]      </control>
[03:26:24.601]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.601]        // if-block "!isSWJ"
[03:26:24.605]          // =>  FALSE
[03:26:24.605]        // skip if-block "!isSWJ"
[03:26:24.605]      </control>
[03:26:24.605]      <block atomic="false" info="">
[03:26:24.605]        ReadDP(0x0);
[03:26:24.605]  
[03:26:24.605]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.605]  
[03:26:24.605]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.605]      </block>
[03:26:24.605]      // end if-block "protType == 2"
[03:26:24.605]    </control>
[03:26:24.605]  </sequence>
[03:26:24.605]  
[03:26:24.662]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.662]  
[03:26:24.662]  <debugvars>
[03:26:24.662]    // Pre-defined
[03:26:24.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.662]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.662]    __dp=0x00000000
[03:26:24.662]    __ap=0x00000000
[03:26:24.662]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.662]    __FlashAddr=0x00000000
[03:26:24.662]    __FlashLen=0x00000000
[03:26:24.662]    __FlashArg=0x00000000
[03:26:24.662]    __FlashOp=0x00000000
[03:26:24.662]    __Result=0x00000000
[03:26:24.662]  </debugvars>
[03:26:24.662]  
[03:26:24.662]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.662]    <block atomic="false" info="">
[03:26:24.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.662]        // -> [isSWJ <= 0x00000001]
[03:26:24.662]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.662]        // -> [hasDormant <= 0x00000000]
[03:26:24.662]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.662]        // -> [protType <= 0x00000002]
[03:26:24.662]    </block>
[03:26:24.662]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.662]      // if-block "protType == 1"
[03:26:24.662]        // =>  FALSE
[03:26:24.662]      // skip if-block "protType == 1"
[03:26:24.662]    </control>
[03:26:24.662]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.662]      // if-block "protType == 2"
[03:26:24.662]        // =>  TRUE
[03:26:24.662]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.662]        // if-block "isSWJ"
[03:26:24.666]          // =>  TRUE
[03:26:24.666]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.666]          // if-block "hasDormant"
[03:26:24.666]            // =>  FALSE
[03:26:24.666]          // skip if-block "hasDormant"
[03:26:24.666]        </control>
[03:26:24.666]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.666]          // if-block "!hasDormant"
[03:26:24.666]            // =>  TRUE
[03:26:24.666]          <block atomic="false" info="">
[03:26:24.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.670]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.670]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.670]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.678]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.678]          </block>
[03:26:24.678]          // end if-block "!hasDormant"
[03:26:24.678]        </control>
[03:26:24.678]        // end if-block "isSWJ"
[03:26:24.678]      </control>
[03:26:24.678]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.678]        // if-block "!isSWJ"
[03:26:24.678]          // =>  FALSE
[03:26:24.678]        // skip if-block "!isSWJ"
[03:26:24.678]      </control>
[03:26:24.678]      <block atomic="false" info="">
[03:26:24.678]        ReadDP(0x0);
[03:26:24.682]  
[03:26:24.682]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.682]  
[03:26:24.682]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.682]      </block>
[03:26:24.682]      // end if-block "protType == 2"
[03:26:24.682]    </control>
[03:26:24.682]  </sequence>
[03:26:24.682]  
[03:26:24.734]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.734]  
[03:26:24.734]  <debugvars>
[03:26:24.734]    // Pre-defined
[03:26:24.734]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.734]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.734]    __dp=0x00000000
[03:26:24.734]    __ap=0x00000000
[03:26:24.734]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.734]    __FlashAddr=0x00000000
[03:26:24.734]    __FlashLen=0x00000000
[03:26:24.734]    __FlashArg=0x00000000
[03:26:24.734]    __FlashOp=0x00000000
[03:26:24.734]    __Result=0x00000000
[03:26:24.734]  </debugvars>
[03:26:24.734]  
[03:26:24.734]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.734]    <block atomic="false" info="">
[03:26:24.734]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.734]        // -> [isSWJ <= 0x00000001]
[03:26:24.734]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.734]        // -> [hasDormant <= 0x00000000]
[03:26:24.734]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.734]        // -> [protType <= 0x00000002]
[03:26:24.734]    </block>
[03:26:24.734]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.734]      // if-block "protType == 1"
[03:26:24.734]        // =>  FALSE
[03:26:24.734]      // skip if-block "protType == 1"
[03:26:24.734]    </control>
[03:26:24.734]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.734]      // if-block "protType == 2"
[03:26:24.738]        // =>  TRUE
[03:26:24.738]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.738]        // if-block "isSWJ"
[03:26:24.738]          // =>  TRUE
[03:26:24.738]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.738]          // if-block "hasDormant"
[03:26:24.738]            // =>  FALSE
[03:26:24.738]          // skip if-block "hasDormant"
[03:26:24.738]        </control>
[03:26:24.738]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.738]          // if-block "!hasDormant"
[03:26:24.738]            // =>  TRUE
[03:26:24.738]          <block atomic="false" info="">
[03:26:24.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.738]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.742]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.746]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.750]          </block>
[03:26:24.750]          // end if-block "!hasDormant"
[03:26:24.750]        </control>
[03:26:24.750]        // end if-block "isSWJ"
[03:26:24.750]      </control>
[03:26:24.750]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.750]        // if-block "!isSWJ"
[03:26:24.750]          // =>  FALSE
[03:26:24.754]        // skip if-block "!isSWJ"
[03:26:24.754]      </control>
[03:26:24.754]      <block atomic="false" info="">
[03:26:24.754]        ReadDP(0x0);
[03:26:24.754]  
[03:26:24.754]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.754]  
[03:26:24.754]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.758]      </block>
[03:26:24.758]      // end if-block "protType == 2"
[03:26:24.758]    </control>
[03:26:24.758]  </sequence>
[03:26:24.758]  
[03:26:24.818]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.818]  
[03:26:24.818]  <debugvars>
[03:26:24.818]    // Pre-defined
[03:26:24.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.818]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.818]    __dp=0x00000000
[03:26:24.818]    __ap=0x00000000
[03:26:24.818]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.818]    __FlashAddr=0x00000000
[03:26:24.818]    __FlashLen=0x00000000
[03:26:24.818]    __FlashArg=0x00000000
[03:26:24.818]    __FlashOp=0x00000000
[03:26:24.818]    __Result=0x00000000
[03:26:24.818]  </debugvars>
[03:26:24.818]  
[03:26:24.818]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.818]    <block atomic="false" info="">
[03:26:24.818]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.818]        // -> [isSWJ <= 0x00000001]
[03:26:24.818]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.818]        // -> [hasDormant <= 0x00000000]
[03:26:24.818]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.818]        // -> [protType <= 0x00000002]
[03:26:24.818]    </block>
[03:26:24.818]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.818]      // if-block "protType == 1"
[03:26:24.822]        // =>  FALSE
[03:26:24.822]      // skip if-block "protType == 1"
[03:26:24.822]    </control>
[03:26:24.822]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.822]      // if-block "protType == 2"
[03:26:24.822]        // =>  TRUE
[03:26:24.822]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.822]        // if-block "isSWJ"
[03:26:24.822]          // =>  TRUE
[03:26:24.822]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.822]          // if-block "hasDormant"
[03:26:24.822]            // =>  FALSE
[03:26:24.822]          // skip if-block "hasDormant"
[03:26:24.822]        </control>
[03:26:24.822]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.822]          // if-block "!hasDormant"
[03:26:24.822]            // =>  TRUE
[03:26:24.822]          <block atomic="false" info="">
[03:26:24.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.822]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.830]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.830]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.834]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.834]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.834]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.838]          </block>
[03:26:24.838]          // end if-block "!hasDormant"
[03:26:24.838]        </control>
[03:26:24.838]        // end if-block "isSWJ"
[03:26:24.838]      </control>
[03:26:24.838]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.838]        // if-block "!isSWJ"
[03:26:24.838]          // =>  FALSE
[03:26:24.838]        // skip if-block "!isSWJ"
[03:26:24.838]      </control>
[03:26:24.838]      <block atomic="false" info="">
[03:26:24.838]        ReadDP(0x0);
[03:26:24.838]  
[03:26:24.838]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.838]  
[03:26:24.838]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.842]      </block>
[03:26:24.842]      // end if-block "protType == 2"
[03:26:24.842]    </control>
[03:26:24.842]  </sequence>
[03:26:24.842]  
[03:26:24.902]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.902]  
[03:26:24.902]  <debugvars>
[03:26:24.902]    // Pre-defined
[03:26:24.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.902]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.902]    __dp=0x00000000
[03:26:24.902]    __ap=0x00000000
[03:26:24.902]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.902]    __FlashAddr=0x00000000
[03:26:24.902]    __FlashLen=0x00000000
[03:26:24.902]    __FlashArg=0x00000000
[03:26:24.902]    __FlashOp=0x00000000
[03:26:24.902]    __Result=0x00000000
[03:26:24.902]  </debugvars>
[03:26:24.902]  
[03:26:24.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.902]    <block atomic="false" info="">
[03:26:24.902]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.902]        // -> [isSWJ <= 0x00000001]
[03:26:24.902]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.902]        // -> [hasDormant <= 0x00000000]
[03:26:24.902]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.902]        // -> [protType <= 0x00000002]
[03:26:24.902]    </block>
[03:26:24.902]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.902]      // if-block "protType == 1"
[03:26:24.906]        // =>  FALSE
[03:26:24.906]      // skip if-block "protType == 1"
[03:26:24.906]    </control>
[03:26:24.906]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.906]      // if-block "protType == 2"
[03:26:24.906]        // =>  TRUE
[03:26:24.906]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.906]        // if-block "isSWJ"
[03:26:24.906]          // =>  TRUE
[03:26:24.906]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.906]          // if-block "hasDormant"
[03:26:24.906]            // =>  FALSE
[03:26:24.906]          // skip if-block "hasDormant"
[03:26:24.906]        </control>
[03:26:24.906]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.906]          // if-block "!hasDormant"
[03:26:24.906]            // =>  TRUE
[03:26:24.906]          <block atomic="false" info="">
[03:26:24.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.910]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:24.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:24.930]          </block>
[03:26:24.930]          // end if-block "!hasDormant"
[03:26:24.930]        </control>
[03:26:24.930]        // end if-block "isSWJ"
[03:26:24.930]      </control>
[03:26:24.930]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:24.930]        // if-block "!isSWJ"
[03:26:24.930]          // =>  FALSE
[03:26:24.930]        // skip if-block "!isSWJ"
[03:26:24.930]      </control>
[03:26:24.930]      <block atomic="false" info="">
[03:26:24.930]        ReadDP(0x0);
[03:26:24.930]  
[03:26:24.930]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:24.930]  
[03:26:24.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:24.934]      </block>
[03:26:24.934]      // end if-block "protType == 2"
[03:26:24.934]    </control>
[03:26:24.934]  </sequence>
[03:26:24.934]  
[03:26:24.986]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:24.986]  
[03:26:24.986]  <debugvars>
[03:26:24.986]    // Pre-defined
[03:26:24.986]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:24.986]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:24.986]    __dp=0x00000000
[03:26:24.986]    __ap=0x00000000
[03:26:24.986]    __traceout=0x00000000      (Trace Disabled)
[03:26:24.986]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:24.986]    __FlashAddr=0x00000000
[03:26:24.986]    __FlashLen=0x00000000
[03:26:24.986]    __FlashArg=0x00000000
[03:26:24.986]    __FlashOp=0x00000000
[03:26:24.986]    __Result=0x00000000
[03:26:24.986]  </debugvars>
[03:26:24.986]  
[03:26:24.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:24.986]    <block atomic="false" info="">
[03:26:24.986]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:24.986]        // -> [isSWJ <= 0x00000001]
[03:26:24.986]      __var hasDormant = __protocol & 0x00020000;
[03:26:24.986]        // -> [hasDormant <= 0x00000000]
[03:26:24.986]      __var protType   = __protocol & 0x0000FFFF;
[03:26:24.986]        // -> [protType <= 0x00000002]
[03:26:24.986]    </block>
[03:26:24.986]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:24.986]      // if-block "protType == 1"
[03:26:24.986]        // =>  FALSE
[03:26:24.986]      // skip if-block "protType == 1"
[03:26:24.990]    </control>
[03:26:24.990]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:24.990]      // if-block "protType == 2"
[03:26:24.990]        // =>  TRUE
[03:26:24.990]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:24.990]        // if-block "isSWJ"
[03:26:24.990]          // =>  TRUE
[03:26:24.990]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:24.990]          // if-block "hasDormant"
[03:26:24.990]            // =>  FALSE
[03:26:24.990]          // skip if-block "hasDormant"
[03:26:24.990]        </control>
[03:26:24.990]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:24.990]          // if-block "!hasDormant"
[03:26:24.990]            // =>  TRUE
[03:26:24.990]          <block atomic="false" info="">
[03:26:24.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:24.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.990]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:24.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:24.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:24.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.994]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:24.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:24.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:24.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:24.998]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.002]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.002]          </block>
[03:26:25.002]          // end if-block "!hasDormant"
[03:26:25.002]        </control>
[03:26:25.002]        // end if-block "isSWJ"
[03:26:25.002]      </control>
[03:26:25.002]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.002]        // if-block "!isSWJ"
[03:26:25.002]          // =>  FALSE
[03:26:25.002]        // skip if-block "!isSWJ"
[03:26:25.002]      </control>
[03:26:25.002]      <block atomic="false" info="">
[03:26:25.002]        ReadDP(0x0);
[03:26:25.010]  
[03:26:25.010]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.010]  
[03:26:25.010]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.010]      </block>
[03:26:25.010]      // end if-block "protType == 2"
[03:26:25.010]    </control>
[03:26:25.010]  </sequence>
[03:26:25.010]  
[03:26:25.070]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.070]  
[03:26:25.070]  <debugvars>
[03:26:25.070]    // Pre-defined
[03:26:25.070]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.070]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.070]    __dp=0x00000000
[03:26:25.070]    __ap=0x00000000
[03:26:25.070]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.070]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.070]    __FlashAddr=0x00000000
[03:26:25.070]    __FlashLen=0x00000000
[03:26:25.070]    __FlashArg=0x00000000
[03:26:25.070]    __FlashOp=0x00000000
[03:26:25.070]    __Result=0x00000000
[03:26:25.070]  </debugvars>
[03:26:25.070]  
[03:26:25.070]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.070]    <block atomic="false" info="">
[03:26:25.070]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.070]        // -> [isSWJ <= 0x00000001]
[03:26:25.070]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.070]        // -> [hasDormant <= 0x00000000]
[03:26:25.070]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.070]        // -> [protType <= 0x00000002]
[03:26:25.073]    </block>
[03:26:25.073]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.073]      // if-block "protType == 1"
[03:26:25.073]        // =>  FALSE
[03:26:25.074]      // skip if-block "protType == 1"
[03:26:25.074]    </control>
[03:26:25.074]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.074]      // if-block "protType == 2"
[03:26:25.074]        // =>  TRUE
[03:26:25.074]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.074]        // if-block "isSWJ"
[03:26:25.074]          // =>  TRUE
[03:26:25.074]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.074]          // if-block "hasDormant"
[03:26:25.075]            // =>  FALSE
[03:26:25.075]          // skip if-block "hasDormant"
[03:26:25.075]        </control>
[03:26:25.075]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.075]          // if-block "!hasDormant"
[03:26:25.075]            // =>  TRUE
[03:26:25.075]          <block atomic="false" info="">
[03:26:25.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.075]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.081]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.085]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.085]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.086]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.086]          </block>
[03:26:25.086]          // end if-block "!hasDormant"
[03:26:25.086]        </control>
[03:26:25.086]        // end if-block "isSWJ"
[03:26:25.086]      </control>
[03:26:25.087]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.087]        // if-block "!isSWJ"
[03:26:25.087]          // =>  FALSE
[03:26:25.087]        // skip if-block "!isSWJ"
[03:26:25.087]      </control>
[03:26:25.087]      <block atomic="false" info="">
[03:26:25.087]        ReadDP(0x0);
[03:26:25.090]  
[03:26:25.090]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.090]  
[03:26:25.090]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.090]      </block>
[03:26:25.090]      // end if-block "protType == 2"
[03:26:25.090]    </control>
[03:26:25.090]  </sequence>
[03:26:25.091]  
[03:26:25.149]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.149]  
[03:26:25.149]  <debugvars>
[03:26:25.149]    // Pre-defined
[03:26:25.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.149]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.149]    __dp=0x00000000
[03:26:25.149]    __ap=0x00000000
[03:26:25.150]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.150]    __FlashAddr=0x00000000
[03:26:25.150]    __FlashLen=0x00000000
[03:26:25.150]    __FlashArg=0x00000000
[03:26:25.151]    __FlashOp=0x00000000
[03:26:25.151]    __Result=0x00000000
[03:26:25.151]  </debugvars>
[03:26:25.151]  
[03:26:25.151]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.151]    <block atomic="false" info="">
[03:26:25.151]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.151]        // -> [isSWJ <= 0x00000001]
[03:26:25.151]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.151]        // -> [hasDormant <= 0x00000000]
[03:26:25.151]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.151]        // -> [protType <= 0x00000002]
[03:26:25.151]    </block>
[03:26:25.151]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.151]      // if-block "protType == 1"
[03:26:25.151]        // =>  FALSE
[03:26:25.151]      // skip if-block "protType == 1"
[03:26:25.151]    </control>
[03:26:25.151]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.151]      // if-block "protType == 2"
[03:26:25.153]        // =>  TRUE
[03:26:25.153]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.153]        // if-block "isSWJ"
[03:26:25.153]          // =>  TRUE
[03:26:25.153]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.153]          // if-block "hasDormant"
[03:26:25.153]            // =>  FALSE
[03:26:25.153]          // skip if-block "hasDormant"
[03:26:25.153]        </control>
[03:26:25.153]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.153]          // if-block "!hasDormant"
[03:26:25.153]            // =>  TRUE
[03:26:25.153]          <block atomic="false" info="">
[03:26:25.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.153]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.157]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.161]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.161]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.165]          </block>
[03:26:25.165]          // end if-block "!hasDormant"
[03:26:25.165]        </control>
[03:26:25.165]        // end if-block "isSWJ"
[03:26:25.165]      </control>
[03:26:25.165]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.165]        // if-block "!isSWJ"
[03:26:25.165]          // =>  FALSE
[03:26:25.165]        // skip if-block "!isSWJ"
[03:26:25.165]      </control>
[03:26:25.165]      <block atomic="false" info="">
[03:26:25.165]        ReadDP(0x0);
[03:26:25.165]  
[03:26:25.165]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.165]  
[03:26:25.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.169]      </block>
[03:26:25.169]      // end if-block "protType == 2"
[03:26:25.169]    </control>
[03:26:25.169]  </sequence>
[03:26:25.169]  
[03:26:25.221]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.221]  
[03:26:25.221]  <debugvars>
[03:26:25.221]    // Pre-defined
[03:26:25.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.221]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.221]    __dp=0x00000000
[03:26:25.221]    __ap=0x00000000
[03:26:25.221]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.221]    __FlashAddr=0x00000000
[03:26:25.221]    __FlashLen=0x00000000
[03:26:25.221]    __FlashArg=0x00000000
[03:26:25.221]    __FlashOp=0x00000000
[03:26:25.221]    __Result=0x00000000
[03:26:25.221]  </debugvars>
[03:26:25.221]  
[03:26:25.221]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.221]    <block atomic="false" info="">
[03:26:25.221]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.221]        // -> [isSWJ <= 0x00000001]
[03:26:25.221]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.221]        // -> [hasDormant <= 0x00000000]
[03:26:25.221]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.225]        // -> [protType <= 0x00000002]
[03:26:25.225]    </block>
[03:26:25.225]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.225]      // if-block "protType == 1"
[03:26:25.225]        // =>  FALSE
[03:26:25.225]      // skip if-block "protType == 1"
[03:26:25.225]    </control>
[03:26:25.225]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.225]      // if-block "protType == 2"
[03:26:25.225]        // =>  TRUE
[03:26:25.225]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.225]        // if-block "isSWJ"
[03:26:25.225]          // =>  TRUE
[03:26:25.225]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.225]          // if-block "hasDormant"
[03:26:25.225]            // =>  FALSE
[03:26:25.225]          // skip if-block "hasDormant"
[03:26:25.225]        </control>
[03:26:25.225]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.225]          // if-block "!hasDormant"
[03:26:25.225]            // =>  TRUE
[03:26:25.225]          <block atomic="false" info="">
[03:26:25.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.229]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.229]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.237]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.237]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.241]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.241]          </block>
[03:26:25.241]          // end if-block "!hasDormant"
[03:26:25.241]        </control>
[03:26:25.241]        // end if-block "isSWJ"
[03:26:25.241]      </control>
[03:26:25.241]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.241]        // if-block "!isSWJ"
[03:26:25.241]          // =>  FALSE
[03:26:25.241]        // skip if-block "!isSWJ"
[03:26:25.241]      </control>
[03:26:25.241]      <block atomic="false" info="">
[03:26:25.241]        ReadDP(0x0);
[03:26:25.245]  
[03:26:25.245]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.245]  
[03:26:25.245]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.245]      </block>
[03:26:25.245]      // end if-block "protType == 2"
[03:26:25.245]    </control>
[03:26:25.245]  </sequence>
[03:26:25.245]  
[03:26:25.305]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.305]  
[03:26:25.305]  <debugvars>
[03:26:25.305]    // Pre-defined
[03:26:25.305]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.305]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.305]    __dp=0x00000000
[03:26:25.305]    __ap=0x00000000
[03:26:25.305]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.305]    __FlashAddr=0x00000000
[03:26:25.305]    __FlashLen=0x00000000
[03:26:25.305]    __FlashArg=0x00000000
[03:26:25.305]    __FlashOp=0x00000000
[03:26:25.305]    __Result=0x00000000
[03:26:25.305]  </debugvars>
[03:26:25.305]  
[03:26:25.305]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.305]    <block atomic="false" info="">
[03:26:25.305]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.305]        // -> [isSWJ <= 0x00000001]
[03:26:25.305]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.305]        // -> [hasDormant <= 0x00000000]
[03:26:25.305]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.305]        // -> [protType <= 0x00000002]
[03:26:25.305]    </block>
[03:26:25.305]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.305]      // if-block "protType == 1"
[03:26:25.305]        // =>  FALSE
[03:26:25.305]      // skip if-block "protType == 1"
[03:26:25.305]    </control>
[03:26:25.305]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.305]      // if-block "protType == 2"
[03:26:25.305]        // =>  TRUE
[03:26:25.305]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.309]        // if-block "isSWJ"
[03:26:25.309]          // =>  TRUE
[03:26:25.309]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.309]          // if-block "hasDormant"
[03:26:25.309]            // =>  FALSE
[03:26:25.309]          // skip if-block "hasDormant"
[03:26:25.309]        </control>
[03:26:25.309]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.309]          // if-block "!hasDormant"
[03:26:25.309]            // =>  TRUE
[03:26:25.310]          <block atomic="false" info="">
[03:26:25.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.311]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.313]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.322]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.323]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.323]          </block>
[03:26:25.323]          // end if-block "!hasDormant"
[03:26:25.323]        </control>
[03:26:25.323]        // end if-block "isSWJ"
[03:26:25.323]      </control>
[03:26:25.323]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.324]        // if-block "!isSWJ"
[03:26:25.324]          // =>  FALSE
[03:26:25.324]        // skip if-block "!isSWJ"
[03:26:25.324]      </control>
[03:26:25.324]      <block atomic="false" info="">
[03:26:25.324]        ReadDP(0x0);
[03:26:25.338]  
[03:26:25.338]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.338]  
[03:26:25.338]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.338]      </block>
[03:26:25.338]      // end if-block "protType == 2"
[03:26:25.338]    </control>
[03:26:25.338]  </sequence>
[03:26:25.338]  
[03:26:25.390]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.390]  
[03:26:25.390]  <debugvars>
[03:26:25.390]    // Pre-defined
[03:26:25.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.390]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.390]    __dp=0x00000000
[03:26:25.390]    __ap=0x00000000
[03:26:25.390]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.390]    __FlashAddr=0x00000000
[03:26:25.390]    __FlashLen=0x00000000
[03:26:25.390]    __FlashArg=0x00000000
[03:26:25.390]    __FlashOp=0x00000000
[03:26:25.390]    __Result=0x00000000
[03:26:25.390]  </debugvars>
[03:26:25.390]  
[03:26:25.390]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.390]    <block atomic="false" info="">
[03:26:25.390]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.390]        // -> [isSWJ <= 0x00000001]
[03:26:25.390]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.390]        // -> [hasDormant <= 0x00000000]
[03:26:25.390]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.390]        // -> [protType <= 0x00000002]
[03:26:25.390]    </block>
[03:26:25.390]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.390]      // if-block "protType == 1"
[03:26:25.390]        // =>  FALSE
[03:26:25.390]      // skip if-block "protType == 1"
[03:26:25.390]    </control>
[03:26:25.390]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.390]      // if-block "protType == 2"
[03:26:25.390]        // =>  TRUE
[03:26:25.394]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.394]        // if-block "isSWJ"
[03:26:25.394]          // =>  TRUE
[03:26:25.394]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.394]          // if-block "hasDormant"
[03:26:25.394]            // =>  FALSE
[03:26:25.394]          // skip if-block "hasDormant"
[03:26:25.394]        </control>
[03:26:25.394]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.394]          // if-block "!hasDormant"
[03:26:25.394]            // =>  TRUE
[03:26:25.394]          <block atomic="false" info="">
[03:26:25.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.394]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.398]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.398]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.398]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.406]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.410]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.410]          </block>
[03:26:25.410]          // end if-block "!hasDormant"
[03:26:25.410]        </control>
[03:26:25.410]        // end if-block "isSWJ"
[03:26:25.410]      </control>
[03:26:25.410]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.410]        // if-block "!isSWJ"
[03:26:25.410]          // =>  FALSE
[03:26:25.410]        // skip if-block "!isSWJ"
[03:26:25.410]      </control>
[03:26:25.410]      <block atomic="false" info="">
[03:26:25.410]        ReadDP(0x0);
[03:26:25.414]  
[03:26:25.414]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.414]  
[03:26:25.414]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.414]      </block>
[03:26:25.414]      // end if-block "protType == 2"
[03:26:25.414]    </control>
[03:26:25.414]  </sequence>
[03:26:25.414]  
[03:26:25.474]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.474]  
[03:26:25.474]  <debugvars>
[03:26:25.474]    // Pre-defined
[03:26:25.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.474]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.474]    __dp=0x00000000
[03:26:25.474]    __ap=0x00000000
[03:26:25.474]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.474]    __FlashAddr=0x00000000
[03:26:25.474]    __FlashLen=0x00000000
[03:26:25.474]    __FlashArg=0x00000000
[03:26:25.474]    __FlashOp=0x00000000
[03:26:25.474]    __Result=0x00000000
[03:26:25.474]  </debugvars>
[03:26:25.474]  
[03:26:25.474]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.474]    <block atomic="false" info="">
[03:26:25.474]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.474]        // -> [isSWJ <= 0x00000001]
[03:26:25.474]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.474]        // -> [hasDormant <= 0x00000000]
[03:26:25.474]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.474]        // -> [protType <= 0x00000002]
[03:26:25.474]    </block>
[03:26:25.474]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.474]      // if-block "protType == 1"
[03:26:25.474]        // =>  FALSE
[03:26:25.474]      // skip if-block "protType == 1"
[03:26:25.474]    </control>
[03:26:25.478]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.478]      // if-block "protType == 2"
[03:26:25.478]        // =>  TRUE
[03:26:25.478]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.478]        // if-block "isSWJ"
[03:26:25.478]          // =>  TRUE
[03:26:25.478]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.478]          // if-block "hasDormant"
[03:26:25.478]            // =>  FALSE
[03:26:25.478]          // skip if-block "hasDormant"
[03:26:25.478]        </control>
[03:26:25.478]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.478]          // if-block "!hasDormant"
[03:26:25.478]            // =>  TRUE
[03:26:25.478]          <block atomic="false" info="">
[03:26:25.478]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.478]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.486]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.490]          </block>
[03:26:25.490]          // end if-block "!hasDormant"
[03:26:25.494]        </control>
[03:26:25.494]        // end if-block "isSWJ"
[03:26:25.494]      </control>
[03:26:25.494]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.494]        // if-block "!isSWJ"
[03:26:25.494]          // =>  FALSE
[03:26:25.494]        // skip if-block "!isSWJ"
[03:26:25.494]      </control>
[03:26:25.494]      <block atomic="false" info="">
[03:26:25.494]        ReadDP(0x0);
[03:26:25.494]  
[03:26:25.494]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.494]  
[03:26:25.494]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.494]      </block>
[03:26:25.494]      // end if-block "protType == 2"
[03:26:25.494]    </control>
[03:26:25.498]  </sequence>
[03:26:25.498]  
[03:26:25.558]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.558]  
[03:26:25.558]  <debugvars>
[03:26:25.558]    // Pre-defined
[03:26:25.558]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.558]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.558]    __dp=0x00000000
[03:26:25.558]    __ap=0x00000000
[03:26:25.558]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.558]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.558]    __FlashAddr=0x00000000
[03:26:25.558]    __FlashLen=0x00000000
[03:26:25.558]    __FlashArg=0x00000000
[03:26:25.558]    __FlashOp=0x00000000
[03:26:25.558]    __Result=0x00000000
[03:26:25.558]  </debugvars>
[03:26:25.558]  
[03:26:25.558]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.558]    <block atomic="false" info="">
[03:26:25.558]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.558]        // -> [isSWJ <= 0x00000001]
[03:26:25.558]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.558]        // -> [hasDormant <= 0x00000000]
[03:26:25.558]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.558]        // -> [protType <= 0x00000002]
[03:26:25.558]    </block>
[03:26:25.558]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.558]      // if-block "protType == 1"
[03:26:25.558]        // =>  FALSE
[03:26:25.558]      // skip if-block "protType == 1"
[03:26:25.558]    </control>
[03:26:25.558]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.558]      // if-block "protType == 2"
[03:26:25.562]        // =>  TRUE
[03:26:25.562]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.562]        // if-block "isSWJ"
[03:26:25.562]          // =>  TRUE
[03:26:25.562]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.562]          // if-block "hasDormant"
[03:26:25.562]            // =>  FALSE
[03:26:25.562]          // skip if-block "hasDormant"
[03:26:25.562]        </control>
[03:26:25.562]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.562]          // if-block "!hasDormant"
[03:26:25.562]            // =>  TRUE
[03:26:25.562]          <block atomic="false" info="">
[03:26:25.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.562]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.566]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.575]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.575]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.575]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.575]          </block>
[03:26:25.575]          // end if-block "!hasDormant"
[03:26:25.575]        </control>
[03:26:25.575]        // end if-block "isSWJ"
[03:26:25.575]      </control>
[03:26:25.575]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.575]        // if-block "!isSWJ"
[03:26:25.579]          // =>  FALSE
[03:26:25.579]        // skip if-block "!isSWJ"
[03:26:25.579]      </control>
[03:26:25.579]      <block atomic="false" info="">
[03:26:25.579]        ReadDP(0x0);
[03:26:25.579]  
[03:26:25.579]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.579]  
[03:26:25.579]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.579]      </block>
[03:26:25.579]      // end if-block "protType == 2"
[03:26:25.583]    </control>
[03:26:25.583]  </sequence>
[03:26:25.583]  
[03:26:25.643]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.643]  
[03:26:25.643]  <debugvars>
[03:26:25.643]    // Pre-defined
[03:26:25.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.643]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.643]    __dp=0x00000000
[03:26:25.643]    __ap=0x00000000
[03:26:25.643]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.643]    __FlashAddr=0x00000000
[03:26:25.643]    __FlashLen=0x00000000
[03:26:25.643]    __FlashArg=0x00000000
[03:26:25.646]    __FlashOp=0x00000000
[03:26:25.646]    __Result=0x00000000
[03:26:25.646]  </debugvars>
[03:26:25.646]  
[03:26:25.646]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.646]    <block atomic="false" info="">
[03:26:25.646]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.646]        // -> [isSWJ <= 0x00000001]
[03:26:25.646]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.646]        // -> [hasDormant <= 0x00000000]
[03:26:25.646]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.646]        // -> [protType <= 0x00000002]
[03:26:25.646]    </block>
[03:26:25.646]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.646]      // if-block "protType == 1"
[03:26:25.647]        // =>  FALSE
[03:26:25.647]      // skip if-block "protType == 1"
[03:26:25.647]    </control>
[03:26:25.647]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.647]      // if-block "protType == 2"
[03:26:25.647]        // =>  TRUE
[03:26:25.647]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.647]        // if-block "isSWJ"
[03:26:25.647]          // =>  TRUE
[03:26:25.647]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.647]          // if-block "hasDormant"
[03:26:25.647]            // =>  FALSE
[03:26:25.647]          // skip if-block "hasDormant"
[03:26:25.647]        </control>
[03:26:25.647]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.647]          // if-block "!hasDormant"
[03:26:25.647]            // =>  TRUE
[03:26:25.647]          <block atomic="false" info="">
[03:26:25.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.651]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.651]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.659]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.659]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.663]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.663]          </block>
[03:26:25.663]          // end if-block "!hasDormant"
[03:26:25.663]        </control>
[03:26:25.663]        // end if-block "isSWJ"
[03:26:25.663]      </control>
[03:26:25.663]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.663]        // if-block "!isSWJ"
[03:26:25.663]          // =>  FALSE
[03:26:25.663]        // skip if-block "!isSWJ"
[03:26:25.663]      </control>
[03:26:25.667]      <block atomic="false" info="">
[03:26:25.667]        ReadDP(0x0);
[03:26:25.670]  
[03:26:25.670]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.670]  
[03:26:25.670]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.670]      </block>
[03:26:25.671]      // end if-block "protType == 2"
[03:26:25.671]    </control>
[03:26:25.671]  </sequence>
[03:26:25.671]  
[03:26:25.729]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.729]  
[03:26:25.729]  <debugvars>
[03:26:25.729]    // Pre-defined
[03:26:25.729]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.729]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.729]    __dp=0x00000000
[03:26:25.729]    __ap=0x00000000
[03:26:25.729]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.729]    __FlashAddr=0x00000000
[03:26:25.729]    __FlashLen=0x00000000
[03:26:25.729]    __FlashArg=0x00000000
[03:26:25.729]    __FlashOp=0x00000000
[03:26:25.729]    __Result=0x00000000
[03:26:25.729]  </debugvars>
[03:26:25.729]  
[03:26:25.729]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.729]    <block atomic="false" info="">
[03:26:25.729]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.729]        // -> [isSWJ <= 0x00000001]
[03:26:25.729]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.729]        // -> [hasDormant <= 0x00000000]
[03:26:25.729]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.729]        // -> [protType <= 0x00000002]
[03:26:25.729]    </block>
[03:26:25.732]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.732]      // if-block "protType == 1"
[03:26:25.732]        // =>  FALSE
[03:26:25.732]      // skip if-block "protType == 1"
[03:26:25.732]    </control>
[03:26:25.732]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.732]      // if-block "protType == 2"
[03:26:25.732]        // =>  TRUE
[03:26:25.732]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.732]        // if-block "isSWJ"
[03:26:25.732]          // =>  TRUE
[03:26:25.732]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.732]          // if-block "hasDormant"
[03:26:25.732]            // =>  FALSE
[03:26:25.732]          // skip if-block "hasDormant"
[03:26:25.732]        </control>
[03:26:25.732]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.732]          // if-block "!hasDormant"
[03:26:25.732]            // =>  TRUE
[03:26:25.732]          <block atomic="false" info="">
[03:26:25.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.736]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.737]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.737]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.737]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.741]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.749]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.749]          </block>
[03:26:25.749]          // end if-block "!hasDormant"
[03:26:25.749]        </control>
[03:26:25.749]        // end if-block "isSWJ"
[03:26:25.749]      </control>
[03:26:25.749]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.749]        // if-block "!isSWJ"
[03:26:25.749]          // =>  FALSE
[03:26:25.749]        // skip if-block "!isSWJ"
[03:26:25.749]      </control>
[03:26:25.749]      <block atomic="false" info="">
[03:26:25.749]        ReadDP(0x0);
[03:26:25.749]  
[03:26:25.749]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.749]  
[03:26:25.749]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.753]      </block>
[03:26:25.753]      // end if-block "protType == 2"
[03:26:25.753]    </control>
[03:26:25.753]  </sequence>
[03:26:25.753]  
[03:26:25.814]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.814]  
[03:26:25.814]  <debugvars>
[03:26:25.814]    // Pre-defined
[03:26:25.814]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.814]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.814]    __dp=0x00000000
[03:26:25.814]    __ap=0x00000000
[03:26:25.814]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.814]    __FlashAddr=0x00000000
[03:26:25.814]    __FlashLen=0x00000000
[03:26:25.814]    __FlashArg=0x00000000
[03:26:25.814]    __FlashOp=0x00000000
[03:26:25.814]    __Result=0x00000000
[03:26:25.814]  </debugvars>
[03:26:25.814]  
[03:26:25.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.814]    <block atomic="false" info="">
[03:26:25.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.814]        // -> [isSWJ <= 0x00000001]
[03:26:25.814]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.814]        // -> [hasDormant <= 0x00000000]
[03:26:25.814]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.814]        // -> [protType <= 0x00000002]
[03:26:25.814]    </block>
[03:26:25.814]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.814]      // if-block "protType == 1"
[03:26:25.814]        // =>  FALSE
[03:26:25.814]      // skip if-block "protType == 1"
[03:26:25.814]    </control>
[03:26:25.814]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.814]      // if-block "protType == 2"
[03:26:25.818]        // =>  TRUE
[03:26:25.818]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.818]        // if-block "isSWJ"
[03:26:25.818]          // =>  TRUE
[03:26:25.818]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.818]          // if-block "hasDormant"
[03:26:25.818]            // =>  FALSE
[03:26:25.818]          // skip if-block "hasDormant"
[03:26:25.818]        </control>
[03:26:25.819]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.819]          // if-block "!hasDormant"
[03:26:25.819]            // =>  TRUE
[03:26:25.819]          <block atomic="false" info="">
[03:26:25.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.819]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.824]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.832]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.832]          </block>
[03:26:25.832]          // end if-block "!hasDormant"
[03:26:25.832]        </control>
[03:26:25.832]        // end if-block "isSWJ"
[03:26:25.832]      </control>
[03:26:25.832]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.832]        // if-block "!isSWJ"
[03:26:25.832]          // =>  FALSE
[03:26:25.832]        // skip if-block "!isSWJ"
[03:26:25.832]      </control>
[03:26:25.832]      <block atomic="false" info="">
[03:26:25.832]        ReadDP(0x0);
[03:26:25.835]  
[03:26:25.835]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.835]  
[03:26:25.835]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.835]      </block>
[03:26:25.835]      // end if-block "protType == 2"
[03:26:25.835]    </control>
[03:26:25.835]  </sequence>
[03:26:25.835]  
[03:26:25.887]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.887]  
[03:26:25.887]  <debugvars>
[03:26:25.887]    // Pre-defined
[03:26:25.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.887]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.887]    __dp=0x00000000
[03:26:25.887]    __ap=0x00000000
[03:26:25.887]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.887]    __FlashAddr=0x00000000
[03:26:25.887]    __FlashLen=0x00000000
[03:26:25.887]    __FlashArg=0x00000000
[03:26:25.887]    __FlashOp=0x00000000
[03:26:25.887]    __Result=0x00000000
[03:26:25.887]  </debugvars>
[03:26:25.887]  
[03:26:25.887]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.887]    <block atomic="false" info="">
[03:26:25.889]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.889]        // -> [isSWJ <= 0x00000001]
[03:26:25.889]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.889]        // -> [hasDormant <= 0x00000000]
[03:26:25.889]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.889]        // -> [protType <= 0x00000002]
[03:26:25.889]    </block>
[03:26:25.889]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.889]      // if-block "protType == 1"
[03:26:25.889]        // =>  FALSE
[03:26:25.890]      // skip if-block "protType == 1"
[03:26:25.890]    </control>
[03:26:25.890]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.890]      // if-block "protType == 2"
[03:26:25.890]        // =>  TRUE
[03:26:25.890]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.890]        // if-block "isSWJ"
[03:26:25.890]          // =>  TRUE
[03:26:25.890]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.890]          // if-block "hasDormant"
[03:26:25.891]            // =>  FALSE
[03:26:25.891]          // skip if-block "hasDormant"
[03:26:25.891]        </control>
[03:26:25.891]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.891]          // if-block "!hasDormant"
[03:26:25.891]            // =>  TRUE
[03:26:25.891]          <block atomic="false" info="">
[03:26:25.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.895]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.902]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.904]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.908]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.911]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.912]          </block>
[03:26:25.912]          // end if-block "!hasDormant"
[03:26:25.912]        </control>
[03:26:25.912]        // end if-block "isSWJ"
[03:26:25.912]      </control>
[03:26:25.912]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.912]        // if-block "!isSWJ"
[03:26:25.912]          // =>  FALSE
[03:26:25.912]        // skip if-block "!isSWJ"
[03:26:25.912]      </control>
[03:26:25.912]      <block atomic="false" info="">
[03:26:25.912]        ReadDP(0x0);
[03:26:25.916]  
[03:26:25.916]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.916]  
[03:26:25.916]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.916]      </block>
[03:26:25.916]      // end if-block "protType == 2"
[03:26:25.916]    </control>
[03:26:25.916]  </sequence>
[03:26:25.916]  
[03:26:25.973]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:25.973]  
[03:26:25.973]  <debugvars>
[03:26:25.973]    // Pre-defined
[03:26:25.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:25.975]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:25.975]    __dp=0x00000000
[03:26:25.975]    __ap=0x00000000
[03:26:25.975]    __traceout=0x00000000      (Trace Disabled)
[03:26:25.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:25.975]    __FlashAddr=0x00000000
[03:26:25.975]    __FlashLen=0x00000000
[03:26:25.975]    __FlashArg=0x00000000
[03:26:25.975]    __FlashOp=0x00000000
[03:26:25.975]    __Result=0x00000000
[03:26:25.975]  </debugvars>
[03:26:25.975]  
[03:26:25.976]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:25.976]    <block atomic="false" info="">
[03:26:25.976]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:25.976]        // -> [isSWJ <= 0x00000001]
[03:26:25.976]      __var hasDormant = __protocol & 0x00020000;
[03:26:25.976]        // -> [hasDormant <= 0x00000000]
[03:26:25.976]      __var protType   = __protocol & 0x0000FFFF;
[03:26:25.976]        // -> [protType <= 0x00000002]
[03:26:25.976]    </block>
[03:26:25.976]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:25.976]      // if-block "protType == 1"
[03:26:25.978]        // =>  FALSE
[03:26:25.978]      // skip if-block "protType == 1"
[03:26:25.978]    </control>
[03:26:25.978]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:25.978]      // if-block "protType == 2"
[03:26:25.978]        // =>  TRUE
[03:26:25.978]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:25.978]        // if-block "isSWJ"
[03:26:25.978]          // =>  TRUE
[03:26:25.978]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:25.978]          // if-block "hasDormant"
[03:26:25.978]            // =>  FALSE
[03:26:25.978]          // skip if-block "hasDormant"
[03:26:25.978]        </control>
[03:26:25.978]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:25.978]          // if-block "!hasDormant"
[03:26:25.980]            // =>  TRUE
[03:26:25.980]          <block atomic="false" info="">
[03:26:25.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:25.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.981]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:25.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:25.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:25.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.987]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:25.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:25.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:25.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:25.991]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:25.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:25.993]          </block>
[03:26:25.993]          // end if-block "!hasDormant"
[03:26:25.993]        </control>
[03:26:25.993]        // end if-block "isSWJ"
[03:26:25.993]      </control>
[03:26:25.993]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:25.993]        // if-block "!isSWJ"
[03:26:25.993]          // =>  FALSE
[03:26:25.993]        // skip if-block "!isSWJ"
[03:26:25.995]      </control>
[03:26:25.995]      <block atomic="false" info="">
[03:26:25.995]        ReadDP(0x0);
[03:26:25.996]  
[03:26:25.996]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:25.996]  
[03:26:25.996]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:25.996]      </block>
[03:26:25.996]      // end if-block "protType == 2"
[03:26:25.996]    </control>
[03:26:25.996]  </sequence>
[03:26:25.996]  
[03:26:26.047]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.047]  
[03:26:26.047]  <debugvars>
[03:26:26.047]    // Pre-defined
[03:26:26.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.047]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.047]    __dp=0x00000000
[03:26:26.047]    __ap=0x00000000
[03:26:26.047]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.047]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.047]    __FlashAddr=0x00000000
[03:26:26.047]    __FlashLen=0x00000000
[03:26:26.047]    __FlashArg=0x00000000
[03:26:26.047]    __FlashOp=0x00000000
[03:26:26.047]    __Result=0x00000000
[03:26:26.047]  </debugvars>
[03:26:26.047]  
[03:26:26.047]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.047]    <block atomic="false" info="">
[03:26:26.047]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.047]        // -> [isSWJ <= 0x00000001]
[03:26:26.047]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.047]        // -> [hasDormant <= 0x00000000]
[03:26:26.047]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.047]        // -> [protType <= 0x00000002]
[03:26:26.047]    </block>
[03:26:26.047]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.047]      // if-block "protType == 1"
[03:26:26.047]        // =>  FALSE
[03:26:26.047]      // skip if-block "protType == 1"
[03:26:26.047]    </control>
[03:26:26.047]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.047]      // if-block "protType == 2"
[03:26:26.047]        // =>  TRUE
[03:26:26.047]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.051]        // if-block "isSWJ"
[03:26:26.051]          // =>  TRUE
[03:26:26.051]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.051]          // if-block "hasDormant"
[03:26:26.051]            // =>  FALSE
[03:26:26.051]          // skip if-block "hasDormant"
[03:26:26.051]        </control>
[03:26:26.051]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.051]          // if-block "!hasDormant"
[03:26:26.051]            // =>  TRUE
[03:26:26.051]          <block atomic="false" info="">
[03:26:26.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.059]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.059]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.067]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.069]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.071]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.071]          </block>
[03:26:26.071]          // end if-block "!hasDormant"
[03:26:26.071]        </control>
[03:26:26.071]        // end if-block "isSWJ"
[03:26:26.071]      </control>
[03:26:26.071]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.071]        // if-block "!isSWJ"
[03:26:26.071]          // =>  FALSE
[03:26:26.071]        // skip if-block "!isSWJ"
[03:26:26.071]      </control>
[03:26:26.071]      <block atomic="false" info="">
[03:26:26.071]        ReadDP(0x0);
[03:26:26.071]  
[03:26:26.071]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.071]  
[03:26:26.071]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.075]      </block>
[03:26:26.075]      // end if-block "protType == 2"
[03:26:26.075]    </control>
[03:26:26.075]  </sequence>
[03:26:26.075]  
[03:26:26.132]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.132]  
[03:26:26.132]  <debugvars>
[03:26:26.132]    // Pre-defined
[03:26:26.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.132]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.132]    __dp=0x00000000
[03:26:26.132]    __ap=0x00000000
[03:26:26.132]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.132]    __FlashAddr=0x00000000
[03:26:26.132]    __FlashLen=0x00000000
[03:26:26.132]    __FlashArg=0x00000000
[03:26:26.132]    __FlashOp=0x00000000
[03:26:26.132]    __Result=0x00000000
[03:26:26.132]  </debugvars>
[03:26:26.132]  
[03:26:26.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.132]    <block atomic="false" info="">
[03:26:26.132]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.132]        // -> [isSWJ <= 0x00000001]
[03:26:26.132]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.132]        // -> [hasDormant <= 0x00000000]
[03:26:26.132]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.132]        // -> [protType <= 0x00000002]
[03:26:26.136]    </block>
[03:26:26.136]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.136]      // if-block "protType == 1"
[03:26:26.136]        // =>  FALSE
[03:26:26.136]      // skip if-block "protType == 1"
[03:26:26.136]    </control>
[03:26:26.136]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.136]      // if-block "protType == 2"
[03:26:26.136]        // =>  TRUE
[03:26:26.136]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.136]        // if-block "isSWJ"
[03:26:26.136]          // =>  TRUE
[03:26:26.136]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.136]          // if-block "hasDormant"
[03:26:26.136]            // =>  FALSE
[03:26:26.136]          // skip if-block "hasDormant"
[03:26:26.136]        </control>
[03:26:26.136]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.136]          // if-block "!hasDormant"
[03:26:26.136]            // =>  TRUE
[03:26:26.136]          <block atomic="false" info="">
[03:26:26.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.140]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.148]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.148]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.148]          </block>
[03:26:26.148]          // end if-block "!hasDormant"
[03:26:26.148]        </control>
[03:26:26.148]        // end if-block "isSWJ"
[03:26:26.148]      </control>
[03:26:26.148]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.148]        // if-block "!isSWJ"
[03:26:26.148]          // =>  FALSE
[03:26:26.148]        // skip if-block "!isSWJ"
[03:26:26.148]      </control>
[03:26:26.148]      <block atomic="false" info="">
[03:26:26.148]        ReadDP(0x0);
[03:26:26.156]  
[03:26:26.156]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.156]  
[03:26:26.156]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.156]      </block>
[03:26:26.156]      // end if-block "protType == 2"
[03:26:26.156]    </control>
[03:26:26.156]  </sequence>
[03:26:26.156]  
[03:26:26.216]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.216]  
[03:26:26.216]  <debugvars>
[03:26:26.216]    // Pre-defined
[03:26:26.216]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.216]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.216]    __dp=0x00000000
[03:26:26.216]    __ap=0x00000000
[03:26:26.216]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.216]    __FlashAddr=0x00000000
[03:26:26.216]    __FlashLen=0x00000000
[03:26:26.216]    __FlashArg=0x00000000
[03:26:26.216]    __FlashOp=0x00000000
[03:26:26.216]    __Result=0x00000000
[03:26:26.216]  </debugvars>
[03:26:26.216]  
[03:26:26.216]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.216]    <block atomic="false" info="">
[03:26:26.216]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.216]        // -> [isSWJ <= 0x00000001]
[03:26:26.216]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.216]        // -> [hasDormant <= 0x00000000]
[03:26:26.216]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.216]        // -> [protType <= 0x00000002]
[03:26:26.216]    </block>
[03:26:26.216]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.216]      // if-block "protType == 1"
[03:26:26.216]        // =>  FALSE
[03:26:26.216]      // skip if-block "protType == 1"
[03:26:26.216]    </control>
[03:26:26.216]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.216]      // if-block "protType == 2"
[03:26:26.216]        // =>  TRUE
[03:26:26.216]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.220]        // if-block "isSWJ"
[03:26:26.220]          // =>  TRUE
[03:26:26.220]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.220]          // if-block "hasDormant"
[03:26:26.220]            // =>  FALSE
[03:26:26.220]          // skip if-block "hasDormant"
[03:26:26.220]        </control>
[03:26:26.220]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.220]          // if-block "!hasDormant"
[03:26:26.220]            // =>  TRUE
[03:26:26.220]          <block atomic="false" info="">
[03:26:26.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.220]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.224]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.232]          </block>
[03:26:26.232]          // end if-block "!hasDormant"
[03:26:26.232]        </control>
[03:26:26.232]        // end if-block "isSWJ"
[03:26:26.232]      </control>
[03:26:26.232]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.236]        // if-block "!isSWJ"
[03:26:26.236]          // =>  FALSE
[03:26:26.236]        // skip if-block "!isSWJ"
[03:26:26.236]      </control>
[03:26:26.236]      <block atomic="false" info="">
[03:26:26.236]        ReadDP(0x0);
[03:26:26.236]  
[03:26:26.236]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.236]  
[03:26:26.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.236]      </block>
[03:26:26.236]      // end if-block "protType == 2"
[03:26:26.236]    </control>
[03:26:26.236]  </sequence>
[03:26:26.236]  
[03:26:26.288]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.288]  
[03:26:26.288]  <debugvars>
[03:26:26.288]    // Pre-defined
[03:26:26.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.288]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.288]    __dp=0x00000000
[03:26:26.288]    __ap=0x00000000
[03:26:26.288]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.291]    __FlashAddr=0x00000000
[03:26:26.291]    __FlashLen=0x00000000
[03:26:26.291]    __FlashArg=0x00000000
[03:26:26.291]    __FlashOp=0x00000000
[03:26:26.291]    __Result=0x00000000
[03:26:26.292]  </debugvars>
[03:26:26.292]  
[03:26:26.292]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.292]    <block atomic="false" info="">
[03:26:26.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.292]        // -> [isSWJ <= 0x00000001]
[03:26:26.292]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.292]        // -> [hasDormant <= 0x00000000]
[03:26:26.292]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.292]        // -> [protType <= 0x00000002]
[03:26:26.292]    </block>
[03:26:26.293]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.293]      // if-block "protType == 1"
[03:26:26.293]        // =>  FALSE
[03:26:26.293]      // skip if-block "protType == 1"
[03:26:26.293]    </control>
[03:26:26.293]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.293]      // if-block "protType == 2"
[03:26:26.293]        // =>  TRUE
[03:26:26.293]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.293]        // if-block "isSWJ"
[03:26:26.293]          // =>  TRUE
[03:26:26.293]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.293]          // if-block "hasDormant"
[03:26:26.293]            // =>  FALSE
[03:26:26.293]          // skip if-block "hasDormant"
[03:26:26.293]        </control>
[03:26:26.293]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.293]          // if-block "!hasDormant"
[03:26:26.293]            // =>  TRUE
[03:26:26.293]          <block atomic="false" info="">
[03:26:26.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.297]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.301]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.305]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.305]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.305]          </block>
[03:26:26.305]          // end if-block "!hasDormant"
[03:26:26.305]        </control>
[03:26:26.305]        // end if-block "isSWJ"
[03:26:26.305]      </control>
[03:26:26.305]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.305]        // if-block "!isSWJ"
[03:26:26.305]          // =>  FALSE
[03:26:26.305]        // skip if-block "!isSWJ"
[03:26:26.305]      </control>
[03:26:26.305]      <block atomic="false" info="">
[03:26:26.305]        ReadDP(0x0);
[03:26:26.309]  
[03:26:26.309]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.309]  
[03:26:26.309]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.309]      </block>
[03:26:26.309]      // end if-block "protType == 2"
[03:26:26.309]    </control>
[03:26:26.309]  </sequence>
[03:26:26.309]  
[03:26:26.361]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.361]  
[03:26:26.361]  <debugvars>
[03:26:26.361]    // Pre-defined
[03:26:26.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.361]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.361]    __dp=0x00000000
[03:26:26.361]    __ap=0x00000000
[03:26:26.361]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.361]    __FlashAddr=0x00000000
[03:26:26.361]    __FlashLen=0x00000000
[03:26:26.361]    __FlashArg=0x00000000
[03:26:26.361]    __FlashOp=0x00000000
[03:26:26.361]    __Result=0x00000000
[03:26:26.361]  </debugvars>
[03:26:26.361]  
[03:26:26.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.361]    <block atomic="false" info="">
[03:26:26.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.361]        // -> [isSWJ <= 0x00000001]
[03:26:26.361]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.361]        // -> [hasDormant <= 0x00000000]
[03:26:26.361]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.361]        // -> [protType <= 0x00000002]
[03:26:26.361]    </block>
[03:26:26.365]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.365]      // if-block "protType == 1"
[03:26:26.365]        // =>  FALSE
[03:26:26.365]      // skip if-block "protType == 1"
[03:26:26.365]    </control>
[03:26:26.365]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.365]      // if-block "protType == 2"
[03:26:26.365]        // =>  TRUE
[03:26:26.365]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.365]        // if-block "isSWJ"
[03:26:26.365]          // =>  TRUE
[03:26:26.365]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.365]          // if-block "hasDormant"
[03:26:26.365]            // =>  FALSE
[03:26:26.365]          // skip if-block "hasDormant"
[03:26:26.365]        </control>
[03:26:26.365]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.365]          // if-block "!hasDormant"
[03:26:26.365]            // =>  TRUE
[03:26:26.365]          <block atomic="false" info="">
[03:26:26.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.369]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.373]          </block>
[03:26:26.377]          // end if-block "!hasDormant"
[03:26:26.377]        </control>
[03:26:26.377]        // end if-block "isSWJ"
[03:26:26.377]      </control>
[03:26:26.377]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.377]        // if-block "!isSWJ"
[03:26:26.377]          // =>  FALSE
[03:26:26.377]        // skip if-block "!isSWJ"
[03:26:26.377]      </control>
[03:26:26.377]      <block atomic="false" info="">
[03:26:26.377]        ReadDP(0x0);
[03:26:26.377]  
[03:26:26.377]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.377]  
[03:26:26.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.377]      </block>
[03:26:26.377]      // end if-block "protType == 2"
[03:26:26.377]    </control>
[03:26:26.377]  </sequence>
[03:26:26.377]  
[03:26:26.435]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.435]  
[03:26:26.435]  <debugvars>
[03:26:26.435]    // Pre-defined
[03:26:26.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.435]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.435]    __dp=0x00000000
[03:26:26.435]    __ap=0x00000000
[03:26:26.435]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.435]    __FlashAddr=0x00000000
[03:26:26.435]    __FlashLen=0x00000000
[03:26:26.435]    __FlashArg=0x00000000
[03:26:26.435]    __FlashOp=0x00000000
[03:26:26.435]    __Result=0x00000000
[03:26:26.435]  </debugvars>
[03:26:26.435]  
[03:26:26.435]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.435]    <block atomic="false" info="">
[03:26:26.435]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.438]        // -> [isSWJ <= 0x00000001]
[03:26:26.438]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.438]        // -> [hasDormant <= 0x00000000]
[03:26:26.438]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.438]        // -> [protType <= 0x00000002]
[03:26:26.438]    </block>
[03:26:26.438]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.438]      // if-block "protType == 1"
[03:26:26.438]        // =>  FALSE
[03:26:26.438]      // skip if-block "protType == 1"
[03:26:26.438]    </control>
[03:26:26.438]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.438]      // if-block "protType == 2"
[03:26:26.438]        // =>  TRUE
[03:26:26.438]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.438]        // if-block "isSWJ"
[03:26:26.438]          // =>  TRUE
[03:26:26.438]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.438]          // if-block "hasDormant"
[03:26:26.438]            // =>  FALSE
[03:26:26.438]          // skip if-block "hasDormant"
[03:26:26.438]        </control>
[03:26:26.438]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.438]          // if-block "!hasDormant"
[03:26:26.438]            // =>  TRUE
[03:26:26.438]          <block atomic="false" info="">
[03:26:26.438]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.442]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.442]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.450]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.450]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.450]          </block>
[03:26:26.450]          // end if-block "!hasDormant"
[03:26:26.450]        </control>
[03:26:26.450]        // end if-block "isSWJ"
[03:26:26.450]      </control>
[03:26:26.450]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.450]        // if-block "!isSWJ"
[03:26:26.450]          // =>  FALSE
[03:26:26.450]        // skip if-block "!isSWJ"
[03:26:26.450]      </control>
[03:26:26.450]      <block atomic="false" info="">
[03:26:26.450]        ReadDP(0x0);
[03:26:26.454]  
[03:26:26.454]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.454]  
[03:26:26.454]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.454]      </block>
[03:26:26.454]      // end if-block "protType == 2"
[03:26:26.454]    </control>
[03:26:26.454]  </sequence>
[03:26:26.454]  
[03:26:26.508]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.508]  
[03:26:26.508]  <debugvars>
[03:26:26.508]    // Pre-defined
[03:26:26.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.509]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.509]    __dp=0x00000000
[03:26:26.509]    __ap=0x00000000
[03:26:26.509]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.509]    __FlashAddr=0x00000000
[03:26:26.509]    __FlashLen=0x00000000
[03:26:26.509]    __FlashArg=0x00000000
[03:26:26.509]    __FlashOp=0x00000000
[03:26:26.509]    __Result=0x00000000
[03:26:26.509]  </debugvars>
[03:26:26.509]  
[03:26:26.509]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.509]    <block atomic="false" info="">
[03:26:26.509]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.509]        // -> [isSWJ <= 0x00000001]
[03:26:26.509]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.509]        // -> [hasDormant <= 0x00000000]
[03:26:26.509]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.509]        // -> [protType <= 0x00000002]
[03:26:26.509]    </block>
[03:26:26.511]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.511]      // if-block "protType == 1"
[03:26:26.511]        // =>  FALSE
[03:26:26.511]      // skip if-block "protType == 1"
[03:26:26.511]    </control>
[03:26:26.511]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.512]      // if-block "protType == 2"
[03:26:26.512]        // =>  TRUE
[03:26:26.512]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.512]        // if-block "isSWJ"
[03:26:26.512]          // =>  TRUE
[03:26:26.513]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.513]          // if-block "hasDormant"
[03:26:26.513]            // =>  FALSE
[03:26:26.513]          // skip if-block "hasDormant"
[03:26:26.513]        </control>
[03:26:26.513]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.513]          // if-block "!hasDormant"
[03:26:26.513]            // =>  TRUE
[03:26:26.513]          <block atomic="false" info="">
[03:26:26.513]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.520]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.520]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.521]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.523]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.525]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.525]          </block>
[03:26:26.525]          // end if-block "!hasDormant"
[03:26:26.525]        </control>
[03:26:26.525]        // end if-block "isSWJ"
[03:26:26.525]      </control>
[03:26:26.525]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.525]        // if-block "!isSWJ"
[03:26:26.525]          // =>  FALSE
[03:26:26.525]        // skip if-block "!isSWJ"
[03:26:26.525]      </control>
[03:26:26.525]      <block atomic="false" info="">
[03:26:26.525]        ReadDP(0x0);
[03:26:26.528]  
[03:26:26.528]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.528]  
[03:26:26.528]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.528]      </block>
[03:26:26.528]      // end if-block "protType == 2"
[03:26:26.528]    </control>
[03:26:26.528]  </sequence>
[03:26:26.528]  
[03:26:26.588]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.588]  
[03:26:26.588]  <debugvars>
[03:26:26.588]    // Pre-defined
[03:26:26.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.589]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.589]    __dp=0x00000000
[03:26:26.589]    __ap=0x00000000
[03:26:26.589]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.589]    __FlashAddr=0x00000000
[03:26:26.589]    __FlashLen=0x00000000
[03:26:26.589]    __FlashArg=0x00000000
[03:26:26.590]    __FlashOp=0x00000000
[03:26:26.590]    __Result=0x00000000
[03:26:26.590]  </debugvars>
[03:26:26.590]  
[03:26:26.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.590]    <block atomic="false" info="">
[03:26:26.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.590]        // -> [isSWJ <= 0x00000001]
[03:26:26.590]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.590]        // -> [hasDormant <= 0x00000000]
[03:26:26.590]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.591]        // -> [protType <= 0x00000002]
[03:26:26.591]    </block>
[03:26:26.591]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.591]      // if-block "protType == 1"
[03:26:26.591]        // =>  FALSE
[03:26:26.591]      // skip if-block "protType == 1"
[03:26:26.591]    </control>
[03:26:26.591]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.591]      // if-block "protType == 2"
[03:26:26.591]        // =>  TRUE
[03:26:26.591]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.591]        // if-block "isSWJ"
[03:26:26.591]          // =>  TRUE
[03:26:26.591]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.591]          // if-block "hasDormant"
[03:26:26.591]            // =>  FALSE
[03:26:26.591]          // skip if-block "hasDormant"
[03:26:26.591]        </control>
[03:26:26.591]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.591]          // if-block "!hasDormant"
[03:26:26.591]            // =>  TRUE
[03:26:26.591]          <block atomic="false" info="">
[03:26:26.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.595]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.595]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.595]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.608]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.612]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.612]          </block>
[03:26:26.612]          // end if-block "!hasDormant"
[03:26:26.612]        </control>
[03:26:26.612]        // end if-block "isSWJ"
[03:26:26.612]      </control>
[03:26:26.612]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.612]        // if-block "!isSWJ"
[03:26:26.612]          // =>  FALSE
[03:26:26.612]        // skip if-block "!isSWJ"
[03:26:26.612]      </control>
[03:26:26.612]      <block atomic="false" info="">
[03:26:26.612]        ReadDP(0x0);
[03:26:26.616]  
[03:26:26.616]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.616]  
[03:26:26.616]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.616]      </block>
[03:26:26.616]      // end if-block "protType == 2"
[03:26:26.616]    </control>
[03:26:26.620]  </sequence>
[03:26:26.620]  
[03:26:26.674]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.674]  
[03:26:26.674]  <debugvars>
[03:26:26.674]    // Pre-defined
[03:26:26.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.674]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.674]    __dp=0x00000000
[03:26:26.674]    __ap=0x00000000
[03:26:26.674]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.674]    __FlashAddr=0x00000000
[03:26:26.674]    __FlashLen=0x00000000
[03:26:26.674]    __FlashArg=0x00000000
[03:26:26.674]    __FlashOp=0x00000000
[03:26:26.674]    __Result=0x00000000
[03:26:26.674]  </debugvars>
[03:26:26.674]  
[03:26:26.674]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.674]    <block atomic="false" info="">
[03:26:26.674]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.674]        // -> [isSWJ <= 0x00000001]
[03:26:26.674]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.674]        // -> [hasDormant <= 0x00000000]
[03:26:26.674]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.674]        // -> [protType <= 0x00000002]
[03:26:26.674]    </block>
[03:26:26.678]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.678]      // if-block "protType == 1"
[03:26:26.678]        // =>  FALSE
[03:26:26.678]      // skip if-block "protType == 1"
[03:26:26.678]    </control>
[03:26:26.678]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.678]      // if-block "protType == 2"
[03:26:26.678]        // =>  TRUE
[03:26:26.678]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.678]        // if-block "isSWJ"
[03:26:26.678]          // =>  TRUE
[03:26:26.678]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.678]          // if-block "hasDormant"
[03:26:26.678]            // =>  FALSE
[03:26:26.680]          // skip if-block "hasDormant"
[03:26:26.680]        </control>
[03:26:26.680]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.680]          // if-block "!hasDormant"
[03:26:26.680]            // =>  TRUE
[03:26:26.680]          <block atomic="false" info="">
[03:26:26.680]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.682]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.682]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.686]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.698]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.698]          </block>
[03:26:26.698]          // end if-block "!hasDormant"
[03:26:26.698]        </control>
[03:26:26.698]        // end if-block "isSWJ"
[03:26:26.698]      </control>
[03:26:26.698]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.698]        // if-block "!isSWJ"
[03:26:26.698]          // =>  FALSE
[03:26:26.698]        // skip if-block "!isSWJ"
[03:26:26.698]      </control>
[03:26:26.702]      <block atomic="false" info="">
[03:26:26.702]        ReadDP(0x0);
[03:26:26.706]  
[03:26:26.706]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.706]  
[03:26:26.706]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.706]      </block>
[03:26:26.706]      // end if-block "protType == 2"
[03:26:26.706]    </control>
[03:26:26.706]  </sequence>
[03:26:26.706]  
[03:26:26.759]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.759]  
[03:26:26.759]  <debugvars>
[03:26:26.759]    // Pre-defined
[03:26:26.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.759]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.759]    __dp=0x00000000
[03:26:26.759]    __ap=0x00000000
[03:26:26.759]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.759]    __FlashAddr=0x00000000
[03:26:26.759]    __FlashLen=0x00000000
[03:26:26.761]    __FlashArg=0x00000000
[03:26:26.761]    __FlashOp=0x00000000
[03:26:26.761]    __Result=0x00000000
[03:26:26.761]  </debugvars>
[03:26:26.761]  
[03:26:26.761]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.761]    <block atomic="false" info="">
[03:26:26.761]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.761]        // -> [isSWJ <= 0x00000001]
[03:26:26.761]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.761]        // -> [hasDormant <= 0x00000000]
[03:26:26.761]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.761]        // -> [protType <= 0x00000002]
[03:26:26.761]    </block>
[03:26:26.761]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.761]      // if-block "protType == 1"
[03:26:26.761]        // =>  FALSE
[03:26:26.761]      // skip if-block "protType == 1"
[03:26:26.763]    </control>
[03:26:26.763]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.763]      // if-block "protType == 2"
[03:26:26.763]        // =>  TRUE
[03:26:26.763]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.763]        // if-block "isSWJ"
[03:26:26.763]          // =>  TRUE
[03:26:26.763]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.763]          // if-block "hasDormant"
[03:26:26.763]            // =>  FALSE
[03:26:26.763]          // skip if-block "hasDormant"
[03:26:26.763]        </control>
[03:26:26.763]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.763]          // if-block "!hasDormant"
[03:26:26.763]            // =>  TRUE
[03:26:26.763]          <block atomic="false" info="">
[03:26:26.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.763]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.772]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.776]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.776]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.776]          </block>
[03:26:26.776]          // end if-block "!hasDormant"
[03:26:26.776]        </control>
[03:26:26.776]        // end if-block "isSWJ"
[03:26:26.776]      </control>
[03:26:26.776]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.776]        // if-block "!isSWJ"
[03:26:26.776]          // =>  FALSE
[03:26:26.776]        // skip if-block "!isSWJ"
[03:26:26.776]      </control>
[03:26:26.776]      <block atomic="false" info="">
[03:26:26.776]        ReadDP(0x0);
[03:26:26.780]  
[03:26:26.780]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.780]  
[03:26:26.780]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.780]      </block>
[03:26:26.780]      // end if-block "protType == 2"
[03:26:26.780]    </control>
[03:26:26.780]  </sequence>
[03:26:26.780]  
[03:26:26.833]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.833]  
[03:26:26.833]  <debugvars>
[03:26:26.834]    // Pre-defined
[03:26:26.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.834]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.834]    __dp=0x00000000
[03:26:26.834]    __ap=0x00000000
[03:26:26.834]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.834]    __FlashAddr=0x00000000
[03:26:26.834]    __FlashLen=0x00000000
[03:26:26.834]    __FlashArg=0x00000000
[03:26:26.834]    __FlashOp=0x00000000
[03:26:26.834]    __Result=0x00000000
[03:26:26.834]  </debugvars>
[03:26:26.834]  
[03:26:26.834]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.834]    <block atomic="false" info="">
[03:26:26.834]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.834]        // -> [isSWJ <= 0x00000001]
[03:26:26.834]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.834]        // -> [hasDormant <= 0x00000000]
[03:26:26.834]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.834]        // -> [protType <= 0x00000002]
[03:26:26.834]    </block>
[03:26:26.837]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.837]      // if-block "protType == 1"
[03:26:26.837]        // =>  FALSE
[03:26:26.837]      // skip if-block "protType == 1"
[03:26:26.837]    </control>
[03:26:26.837]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.837]      // if-block "protType == 2"
[03:26:26.837]        // =>  TRUE
[03:26:26.837]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.837]        // if-block "isSWJ"
[03:26:26.837]          // =>  TRUE
[03:26:26.837]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.837]          // if-block "hasDormant"
[03:26:26.837]            // =>  FALSE
[03:26:26.837]          // skip if-block "hasDormant"
[03:26:26.837]        </control>
[03:26:26.837]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.837]          // if-block "!hasDormant"
[03:26:26.837]            // =>  TRUE
[03:26:26.837]          <block atomic="false" info="">
[03:26:26.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.841]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.845]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.848]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.848]          </block>
[03:26:26.848]          // end if-block "!hasDormant"
[03:26:26.849]        </control>
[03:26:26.849]        // end if-block "isSWJ"
[03:26:26.849]      </control>
[03:26:26.849]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.849]        // if-block "!isSWJ"
[03:26:26.849]          // =>  FALSE
[03:26:26.849]        // skip if-block "!isSWJ"
[03:26:26.849]      </control>
[03:26:26.849]      <block atomic="false" info="">
[03:26:26.849]        ReadDP(0x0);
[03:26:26.852]  
[03:26:26.852]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.852]  
[03:26:26.852]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.852]      </block>
[03:26:26.852]      // end if-block "protType == 2"
[03:26:26.852]    </control>
[03:26:26.852]  </sequence>
[03:26:26.852]  
[03:26:26.906]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.906]  
[03:26:26.906]  <debugvars>
[03:26:26.906]    // Pre-defined
[03:26:26.906]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.906]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.906]    __dp=0x00000000
[03:26:26.906]    __ap=0x00000000
[03:26:26.906]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.906]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.906]    __FlashAddr=0x00000000
[03:26:26.906]    __FlashLen=0x00000000
[03:26:26.906]    __FlashArg=0x00000000
[03:26:26.907]    __FlashOp=0x00000000
[03:26:26.907]    __Result=0x00000000
[03:26:26.907]  </debugvars>
[03:26:26.907]  
[03:26:26.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.907]    <block atomic="false" info="">
[03:26:26.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.907]        // -> [isSWJ <= 0x00000001]
[03:26:26.907]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.907]        // -> [hasDormant <= 0x00000000]
[03:26:26.907]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.907]        // -> [protType <= 0x00000002]
[03:26:26.907]    </block>
[03:26:26.907]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.907]      // if-block "protType == 1"
[03:26:26.907]        // =>  FALSE
[03:26:26.907]      // skip if-block "protType == 1"
[03:26:26.907]    </control>
[03:26:26.907]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.910]      // if-block "protType == 2"
[03:26:26.910]        // =>  TRUE
[03:26:26.910]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.910]        // if-block "isSWJ"
[03:26:26.910]          // =>  TRUE
[03:26:26.910]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.910]          // if-block "hasDormant"
[03:26:26.910]            // =>  FALSE
[03:26:26.910]          // skip if-block "hasDormant"
[03:26:26.910]        </control>
[03:26:26.911]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.911]          // if-block "!hasDormant"
[03:26:26.911]            // =>  TRUE
[03:26:26.911]          <block atomic="false" info="">
[03:26:26.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.914]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.914]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:26.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:26.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:26.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:26.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:26.926]          </block>
[03:26:26.926]          // end if-block "!hasDormant"
[03:26:26.926]        </control>
[03:26:26.926]        // end if-block "isSWJ"
[03:26:26.926]      </control>
[03:26:26.926]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:26.926]        // if-block "!isSWJ"
[03:26:26.926]          // =>  FALSE
[03:26:26.926]        // skip if-block "!isSWJ"
[03:26:26.930]      </control>
[03:26:26.930]      <block atomic="false" info="">
[03:26:26.930]        ReadDP(0x0);
[03:26:26.930]  
[03:26:26.930]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:26.930]  
[03:26:26.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:26.930]      </block>
[03:26:26.930]      // end if-block "protType == 2"
[03:26:26.930]    </control>
[03:26:26.930]  </sequence>
[03:26:26.930]  
[03:26:26.991]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:26.991]  
[03:26:26.991]  <debugvars>
[03:26:26.991]    // Pre-defined
[03:26:26.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:26.991]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:26.991]    __dp=0x00000000
[03:26:26.991]    __ap=0x00000000
[03:26:26.991]    __traceout=0x00000000      (Trace Disabled)
[03:26:26.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:26.991]    __FlashAddr=0x00000000
[03:26:26.991]    __FlashLen=0x00000000
[03:26:26.991]    __FlashArg=0x00000000
[03:26:26.991]    __FlashOp=0x00000000
[03:26:26.991]    __Result=0x00000000
[03:26:26.991]  </debugvars>
[03:26:26.991]  
[03:26:26.991]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:26.991]    <block atomic="false" info="">
[03:26:26.991]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:26.991]        // -> [isSWJ <= 0x00000001]
[03:26:26.991]      __var hasDormant = __protocol & 0x00020000;
[03:26:26.991]        // -> [hasDormant <= 0x00000000]
[03:26:26.991]      __var protType   = __protocol & 0x0000FFFF;
[03:26:26.991]        // -> [protType <= 0x00000002]
[03:26:26.991]    </block>
[03:26:26.991]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:26.991]      // if-block "protType == 1"
[03:26:26.991]        // =>  FALSE
[03:26:26.991]      // skip if-block "protType == 1"
[03:26:26.991]    </control>
[03:26:26.991]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:26.991]      // if-block "protType == 2"
[03:26:26.995]        // =>  TRUE
[03:26:26.995]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:26.995]        // if-block "isSWJ"
[03:26:26.995]          // =>  TRUE
[03:26:26.995]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:26.995]          // if-block "hasDormant"
[03:26:26.995]            // =>  FALSE
[03:26:26.995]          // skip if-block "hasDormant"
[03:26:26.995]        </control>
[03:26:26.995]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:26.995]          // if-block "!hasDormant"
[03:26:26.995]            // =>  TRUE
[03:26:26.995]          <block atomic="false" info="">
[03:26:26.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:26.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:26.999]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:26.999]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:26.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:26.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.003]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.008]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.008]          </block>
[03:26:27.008]          // end if-block "!hasDormant"
[03:26:27.008]        </control>
[03:26:27.008]        // end if-block "isSWJ"
[03:26:27.008]      </control>
[03:26:27.008]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.012]        // if-block "!isSWJ"
[03:26:27.012]          // =>  FALSE
[03:26:27.012]        // skip if-block "!isSWJ"
[03:26:27.012]      </control>
[03:26:27.012]      <block atomic="false" info="">
[03:26:27.012]        ReadDP(0x0);
[03:26:27.016]  
[03:26:27.016]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.016]  
[03:26:27.016]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.016]      </block>
[03:26:27.016]      // end if-block "protType == 2"
[03:26:27.016]    </control>
[03:26:27.016]  </sequence>
[03:26:27.016]  
[03:26:27.076]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.076]  
[03:26:27.076]  <debugvars>
[03:26:27.076]    // Pre-defined
[03:26:27.076]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.076]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.076]    __dp=0x00000000
[03:26:27.076]    __ap=0x00000000
[03:26:27.076]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.076]    __FlashAddr=0x00000000
[03:26:27.076]    __FlashLen=0x00000000
[03:26:27.076]    __FlashArg=0x00000000
[03:26:27.076]    __FlashOp=0x00000000
[03:26:27.076]    __Result=0x00000000
[03:26:27.076]  </debugvars>
[03:26:27.076]  
[03:26:27.076]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.076]    <block atomic="false" info="">
[03:26:27.076]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.076]        // -> [isSWJ <= 0x00000001]
[03:26:27.076]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.076]        // -> [hasDormant <= 0x00000000]
[03:26:27.076]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.076]        // -> [protType <= 0x00000002]
[03:26:27.076]    </block>
[03:26:27.076]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.076]      // if-block "protType == 1"
[03:26:27.076]        // =>  FALSE
[03:26:27.076]      // skip if-block "protType == 1"
[03:26:27.076]    </control>
[03:26:27.076]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.076]      // if-block "protType == 2"
[03:26:27.076]        // =>  TRUE
[03:26:27.076]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.076]        // if-block "isSWJ"
[03:26:27.080]          // =>  TRUE
[03:26:27.080]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.080]          // if-block "hasDormant"
[03:26:27.080]            // =>  FALSE
[03:26:27.080]          // skip if-block "hasDormant"
[03:26:27.080]        </control>
[03:26:27.080]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.080]          // if-block "!hasDormant"
[03:26:27.080]            // =>  TRUE
[03:26:27.080]          <block atomic="false" info="">
[03:26:27.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.080]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.088]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.092]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.092]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.092]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.092]          </block>
[03:26:27.096]          // end if-block "!hasDormant"
[03:26:27.096]        </control>
[03:26:27.096]        // end if-block "isSWJ"
[03:26:27.096]      </control>
[03:26:27.096]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.096]        // if-block "!isSWJ"
[03:26:27.096]          // =>  FALSE
[03:26:27.096]        // skip if-block "!isSWJ"
[03:26:27.096]      </control>
[03:26:27.096]      <block atomic="false" info="">
[03:26:27.096]        ReadDP(0x0);
[03:26:27.096]  
[03:26:27.096]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.096]  
[03:26:27.096]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.096]      </block>
[03:26:27.096]      // end if-block "protType == 2"
[03:26:27.096]    </control>
[03:26:27.096]  </sequence>
[03:26:27.096]  
[03:26:27.148]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.148]  
[03:26:27.148]  <debugvars>
[03:26:27.148]    // Pre-defined
[03:26:27.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.148]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.148]    __dp=0x00000000
[03:26:27.148]    __ap=0x00000000
[03:26:27.148]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.148]    __FlashAddr=0x00000000
[03:26:27.148]    __FlashLen=0x00000000
[03:26:27.148]    __FlashArg=0x00000000
[03:26:27.148]    __FlashOp=0x00000000
[03:26:27.148]    __Result=0x00000000
[03:26:27.148]  </debugvars>
[03:26:27.148]  
[03:26:27.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.148]    <block atomic="false" info="">
[03:26:27.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.148]        // -> [isSWJ <= 0x00000001]
[03:26:27.148]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.148]        // -> [hasDormant <= 0x00000000]
[03:26:27.148]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.148]        // -> [protType <= 0x00000002]
[03:26:27.148]    </block>
[03:26:27.148]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.148]      // if-block "protType == 1"
[03:26:27.152]        // =>  FALSE
[03:26:27.152]      // skip if-block "protType == 1"
[03:26:27.152]    </control>
[03:26:27.152]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.152]      // if-block "protType == 2"
[03:26:27.152]        // =>  TRUE
[03:26:27.152]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.152]        // if-block "isSWJ"
[03:26:27.152]          // =>  TRUE
[03:26:27.152]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.152]          // if-block "hasDormant"
[03:26:27.152]            // =>  FALSE
[03:26:27.152]          // skip if-block "hasDormant"
[03:26:27.152]        </control>
[03:26:27.152]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.152]          // if-block "!hasDormant"
[03:26:27.152]            // =>  TRUE
[03:26:27.152]          <block atomic="false" info="">
[03:26:27.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.156]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.156]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.160]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.160]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.160]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.160]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.164]          </block>
[03:26:27.164]          // end if-block "!hasDormant"
[03:26:27.164]        </control>
[03:26:27.164]        // end if-block "isSWJ"
[03:26:27.164]      </control>
[03:26:27.164]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.164]        // if-block "!isSWJ"
[03:26:27.164]          // =>  FALSE
[03:26:27.164]        // skip if-block "!isSWJ"
[03:26:27.164]      </control>
[03:26:27.164]      <block atomic="false" info="">
[03:26:27.164]        ReadDP(0x0);
[03:26:27.164]  
[03:26:27.164]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.164]  
[03:26:27.164]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.164]      </block>
[03:26:27.164]      // end if-block "protType == 2"
[03:26:27.164]    </control>
[03:26:27.164]  </sequence>
[03:26:27.164]  
[03:26:27.220]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.220]  
[03:26:27.220]  <debugvars>
[03:26:27.220]    // Pre-defined
[03:26:27.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.220]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.220]    __dp=0x00000000
[03:26:27.220]    __ap=0x00000000
[03:26:27.220]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.220]    __FlashAddr=0x00000000
[03:26:27.220]    __FlashLen=0x00000000
[03:26:27.220]    __FlashArg=0x00000000
[03:26:27.220]    __FlashOp=0x00000000
[03:26:27.220]    __Result=0x00000000
[03:26:27.220]  </debugvars>
[03:26:27.220]  
[03:26:27.220]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.220]    <block atomic="false" info="">
[03:26:27.220]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.220]        // -> [isSWJ <= 0x00000001]
[03:26:27.220]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.220]        // -> [hasDormant <= 0x00000000]
[03:26:27.220]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.220]        // -> [protType <= 0x00000002]
[03:26:27.220]    </block>
[03:26:27.220]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.220]      // if-block "protType == 1"
[03:26:27.220]        // =>  FALSE
[03:26:27.220]      // skip if-block "protType == 1"
[03:26:27.220]    </control>
[03:26:27.220]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.220]      // if-block "protType == 2"
[03:26:27.220]        // =>  TRUE
[03:26:27.224]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.224]        // if-block "isSWJ"
[03:26:27.224]          // =>  TRUE
[03:26:27.224]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.224]          // if-block "hasDormant"
[03:26:27.224]            // =>  FALSE
[03:26:27.224]          // skip if-block "hasDormant"
[03:26:27.224]        </control>
[03:26:27.224]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.224]          // if-block "!hasDormant"
[03:26:27.224]            // =>  TRUE
[03:26:27.224]          <block atomic="false" info="">
[03:26:27.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.224]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.232]          </block>
[03:26:27.232]          // end if-block "!hasDormant"
[03:26:27.232]        </control>
[03:26:27.232]        // end if-block "isSWJ"
[03:26:27.232]      </control>
[03:26:27.232]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.232]        // if-block "!isSWJ"
[03:26:27.232]          // =>  FALSE
[03:26:27.232]        // skip if-block "!isSWJ"
[03:26:27.232]      </control>
[03:26:27.232]      <block atomic="false" info="">
[03:26:27.236]        ReadDP(0x0);
[03:26:27.236]  
[03:26:27.236]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.236]  
[03:26:27.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.236]      </block>
[03:26:27.236]      // end if-block "protType == 2"
[03:26:27.236]    </control>
[03:26:27.236]  </sequence>
[03:26:27.236]  
[03:26:27.292]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.292]  
[03:26:27.292]  <debugvars>
[03:26:27.292]    // Pre-defined
[03:26:27.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.292]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.292]    __dp=0x00000000
[03:26:27.292]    __ap=0x00000000
[03:26:27.292]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.292]    __FlashAddr=0x00000000
[03:26:27.292]    __FlashLen=0x00000000
[03:26:27.292]    __FlashArg=0x00000000
[03:26:27.292]    __FlashOp=0x00000000
[03:26:27.292]    __Result=0x00000000
[03:26:27.292]  </debugvars>
[03:26:27.292]  
[03:26:27.292]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.292]    <block atomic="false" info="">
[03:26:27.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.292]        // -> [isSWJ <= 0x00000001]
[03:26:27.292]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.292]        // -> [hasDormant <= 0x00000000]
[03:26:27.292]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.292]        // -> [protType <= 0x00000002]
[03:26:27.292]    </block>
[03:26:27.292]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.292]      // if-block "protType == 1"
[03:26:27.292]        // =>  FALSE
[03:26:27.292]      // skip if-block "protType == 1"
[03:26:27.292]    </control>
[03:26:27.292]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.292]      // if-block "protType == 2"
[03:26:27.292]        // =>  TRUE
[03:26:27.292]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.292]        // if-block "isSWJ"
[03:26:27.296]          // =>  TRUE
[03:26:27.296]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.296]          // if-block "hasDormant"
[03:26:27.296]            // =>  FALSE
[03:26:27.296]          // skip if-block "hasDormant"
[03:26:27.296]        </control>
[03:26:27.296]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.296]          // if-block "!hasDormant"
[03:26:27.296]            // =>  TRUE
[03:26:27.296]          <block atomic="false" info="">
[03:26:27.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.296]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.300]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.300]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.308]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.312]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.312]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.316]          </block>
[03:26:27.316]          // end if-block "!hasDormant"
[03:26:27.316]        </control>
[03:26:27.316]        // end if-block "isSWJ"
[03:26:27.316]      </control>
[03:26:27.316]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.316]        // if-block "!isSWJ"
[03:26:27.316]          // =>  FALSE
[03:26:27.316]        // skip if-block "!isSWJ"
[03:26:27.316]      </control>
[03:26:27.316]      <block atomic="false" info="">
[03:26:27.316]        ReadDP(0x0);
[03:26:27.316]  
[03:26:27.316]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.316]  
[03:26:27.316]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.316]      </block>
[03:26:27.316]      // end if-block "protType == 2"
[03:26:27.316]    </control>
[03:26:27.316]  </sequence>
[03:26:27.316]  
[03:26:27.372]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.372]  
[03:26:27.372]  <debugvars>
[03:26:27.372]    // Pre-defined
[03:26:27.372]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.372]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.372]    __dp=0x00000000
[03:26:27.372]    __ap=0x00000000
[03:26:27.372]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.372]    __FlashAddr=0x00000000
[03:26:27.372]    __FlashLen=0x00000000
[03:26:27.372]    __FlashArg=0x00000000
[03:26:27.372]    __FlashOp=0x00000000
[03:26:27.372]    __Result=0x00000000
[03:26:27.372]  </debugvars>
[03:26:27.372]  
[03:26:27.372]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.372]    <block atomic="false" info="">
[03:26:27.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.372]        // -> [isSWJ <= 0x00000001]
[03:26:27.372]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.372]        // -> [hasDormant <= 0x00000000]
[03:26:27.372]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.372]        // -> [protType <= 0x00000002]
[03:26:27.372]    </block>
[03:26:27.372]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.372]      // if-block "protType == 1"
[03:26:27.372]        // =>  FALSE
[03:26:27.372]      // skip if-block "protType == 1"
[03:26:27.372]    </control>
[03:26:27.372]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.372]      // if-block "protType == 2"
[03:26:27.372]        // =>  TRUE
[03:26:27.372]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.372]        // if-block "isSWJ"
[03:26:27.376]          // =>  TRUE
[03:26:27.376]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.376]          // if-block "hasDormant"
[03:26:27.376]            // =>  FALSE
[03:26:27.376]          // skip if-block "hasDormant"
[03:26:27.376]        </control>
[03:26:27.376]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.376]          // if-block "!hasDormant"
[03:26:27.376]            // =>  TRUE
[03:26:27.376]          <block atomic="false" info="">
[03:26:27.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.376]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.396]          </block>
[03:26:27.396]          // end if-block "!hasDormant"
[03:26:27.396]        </control>
[03:26:27.396]        // end if-block "isSWJ"
[03:26:27.396]      </control>
[03:26:27.396]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.396]        // if-block "!isSWJ"
[03:26:27.396]          // =>  FALSE
[03:26:27.396]        // skip if-block "!isSWJ"
[03:26:27.396]      </control>
[03:26:27.396]      <block atomic="false" info="">
[03:26:27.396]        ReadDP(0x0);
[03:26:27.396]  
[03:26:27.396]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.396]  
[03:26:27.396]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.396]      </block>
[03:26:27.396]      // end if-block "protType == 2"
[03:26:27.396]    </control>
[03:26:27.396]  </sequence>
[03:26:27.396]  
[03:26:27.456]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.456]  
[03:26:27.456]  <debugvars>
[03:26:27.456]    // Pre-defined
[03:26:27.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.456]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.456]    __dp=0x00000000
[03:26:27.456]    __ap=0x00000000
[03:26:27.456]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.456]    __FlashAddr=0x00000000
[03:26:27.456]    __FlashLen=0x00000000
[03:26:27.456]    __FlashArg=0x00000000
[03:26:27.456]    __FlashOp=0x00000000
[03:26:27.456]    __Result=0x00000000
[03:26:27.456]  </debugvars>
[03:26:27.456]  
[03:26:27.456]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.456]    <block atomic="false" info="">
[03:26:27.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.456]        // -> [isSWJ <= 0x00000001]
[03:26:27.456]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.456]        // -> [hasDormant <= 0x00000000]
[03:26:27.456]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.460]        // -> [protType <= 0x00000002]
[03:26:27.460]    </block>
[03:26:27.460]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.460]      // if-block "protType == 1"
[03:26:27.460]        // =>  FALSE
[03:26:27.460]      // skip if-block "protType == 1"
[03:26:27.460]    </control>
[03:26:27.460]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.460]      // if-block "protType == 2"
[03:26:27.460]        // =>  TRUE
[03:26:27.460]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.460]        // if-block "isSWJ"
[03:26:27.460]          // =>  TRUE
[03:26:27.460]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.460]          // if-block "hasDormant"
[03:26:27.460]            // =>  FALSE
[03:26:27.460]          // skip if-block "hasDormant"
[03:26:27.460]        </control>
[03:26:27.460]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.460]          // if-block "!hasDormant"
[03:26:27.460]            // =>  TRUE
[03:26:27.460]          <block atomic="false" info="">
[03:26:27.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.460]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.464]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.464]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.471]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.471]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.471]          </block>
[03:26:27.473]          // end if-block "!hasDormant"
[03:26:27.473]        </control>
[03:26:27.473]        // end if-block "isSWJ"
[03:26:27.473]      </control>
[03:26:27.473]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.473]        // if-block "!isSWJ"
[03:26:27.473]          // =>  FALSE
[03:26:27.473]        // skip if-block "!isSWJ"
[03:26:27.473]      </control>
[03:26:27.473]      <block atomic="false" info="">
[03:26:27.473]        ReadDP(0x0);
[03:26:27.476]  
[03:26:27.476]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.476]  
[03:26:27.476]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.476]      </block>
[03:26:27.476]      // end if-block "protType == 2"
[03:26:27.476]    </control>
[03:26:27.476]  </sequence>
[03:26:27.477]  
[03:26:27.529]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.529]  
[03:26:27.529]  <debugvars>
[03:26:27.529]    // Pre-defined
[03:26:27.529]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.529]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.529]    __dp=0x00000000
[03:26:27.529]    __ap=0x00000000
[03:26:27.529]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.529]    __FlashAddr=0x00000000
[03:26:27.529]    __FlashLen=0x00000000
[03:26:27.529]    __FlashArg=0x00000000
[03:26:27.529]    __FlashOp=0x00000000
[03:26:27.529]    __Result=0x00000000
[03:26:27.529]  </debugvars>
[03:26:27.529]  
[03:26:27.529]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.529]    <block atomic="false" info="">
[03:26:27.529]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.529]        // -> [isSWJ <= 0x00000001]
[03:26:27.529]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.529]        // -> [hasDormant <= 0x00000000]
[03:26:27.529]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.533]        // -> [protType <= 0x00000002]
[03:26:27.533]    </block>
[03:26:27.533]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.533]      // if-block "protType == 1"
[03:26:27.533]        // =>  FALSE
[03:26:27.533]      // skip if-block "protType == 1"
[03:26:27.533]    </control>
[03:26:27.533]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.533]      // if-block "protType == 2"
[03:26:27.533]        // =>  TRUE
[03:26:27.533]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.533]        // if-block "isSWJ"
[03:26:27.533]          // =>  TRUE
[03:26:27.533]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.533]          // if-block "hasDormant"
[03:26:27.533]            // =>  FALSE
[03:26:27.533]          // skip if-block "hasDormant"
[03:26:27.533]        </control>
[03:26:27.533]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.533]          // if-block "!hasDormant"
[03:26:27.533]            // =>  TRUE
[03:26:27.533]          <block atomic="false" info="">
[03:26:27.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.537]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.541]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.549]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.549]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.549]          </block>
[03:26:27.549]          // end if-block "!hasDormant"
[03:26:27.549]        </control>
[03:26:27.553]        // end if-block "isSWJ"
[03:26:27.553]      </control>
[03:26:27.553]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.553]        // if-block "!isSWJ"
[03:26:27.553]          // =>  FALSE
[03:26:27.553]        // skip if-block "!isSWJ"
[03:26:27.553]      </control>
[03:26:27.553]      <block atomic="false" info="">
[03:26:27.553]        ReadDP(0x0);
[03:26:27.553]  
[03:26:27.553]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.553]  
[03:26:27.553]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.553]      </block>
[03:26:27.553]      // end if-block "protType == 2"
[03:26:27.553]    </control>
[03:26:27.553]  </sequence>
[03:26:27.553]  
[03:26:27.613]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.613]  
[03:26:27.613]  <debugvars>
[03:26:27.613]    // Pre-defined
[03:26:27.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.613]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.613]    __dp=0x00000000
[03:26:27.613]    __ap=0x00000000
[03:26:27.613]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.613]    __FlashAddr=0x00000000
[03:26:27.613]    __FlashLen=0x00000000
[03:26:27.613]    __FlashArg=0x00000000
[03:26:27.613]    __FlashOp=0x00000000
[03:26:27.613]    __Result=0x00000000
[03:26:27.613]  </debugvars>
[03:26:27.613]  
[03:26:27.613]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.613]    <block atomic="false" info="">
[03:26:27.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.613]        // -> [isSWJ <= 0x00000001]
[03:26:27.613]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.613]        // -> [hasDormant <= 0x00000000]
[03:26:27.613]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.613]        // -> [protType <= 0x00000002]
[03:26:27.613]    </block>
[03:26:27.613]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.613]      // if-block "protType == 1"
[03:26:27.613]        // =>  FALSE
[03:26:27.613]      // skip if-block "protType == 1"
[03:26:27.613]    </control>
[03:26:27.613]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.613]      // if-block "protType == 2"
[03:26:27.613]        // =>  TRUE
[03:26:27.613]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.613]        // if-block "isSWJ"
[03:26:27.617]          // =>  TRUE
[03:26:27.617]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.617]          // if-block "hasDormant"
[03:26:27.617]            // =>  FALSE
[03:26:27.617]          // skip if-block "hasDormant"
[03:26:27.617]        </control>
[03:26:27.617]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.617]          // if-block "!hasDormant"
[03:26:27.617]            // =>  TRUE
[03:26:27.617]          <block atomic="false" info="">
[03:26:27.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.621]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.621]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.625]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.629]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.633]          </block>
[03:26:27.633]          // end if-block "!hasDormant"
[03:26:27.633]        </control>
[03:26:27.633]        // end if-block "isSWJ"
[03:26:27.633]      </control>
[03:26:27.633]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.633]        // if-block "!isSWJ"
[03:26:27.633]          // =>  FALSE
[03:26:27.633]        // skip if-block "!isSWJ"
[03:26:27.633]      </control>
[03:26:27.633]      <block atomic="false" info="">
[03:26:27.633]        ReadDP(0x0);
[03:26:27.633]  
[03:26:27.633]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.633]  
[03:26:27.633]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.633]      </block>
[03:26:27.633]      // end if-block "protType == 2"
[03:26:27.633]    </control>
[03:26:27.637]  </sequence>
[03:26:27.637]  
[03:26:27.697]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.697]  
[03:26:27.697]  <debugvars>
[03:26:27.697]    // Pre-defined
[03:26:27.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.697]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.697]    __dp=0x00000000
[03:26:27.697]    __ap=0x00000000
[03:26:27.697]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.697]    __FlashAddr=0x00000000
[03:26:27.697]    __FlashLen=0x00000000
[03:26:27.697]    __FlashArg=0x00000000
[03:26:27.697]    __FlashOp=0x00000000
[03:26:27.697]    __Result=0x00000000
[03:26:27.697]  </debugvars>
[03:26:27.697]  
[03:26:27.697]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.697]    <block atomic="false" info="">
[03:26:27.697]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.697]        // -> [isSWJ <= 0x00000001]
[03:26:27.697]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.697]        // -> [hasDormant <= 0x00000000]
[03:26:27.697]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.697]        // -> [protType <= 0x00000002]
[03:26:27.697]    </block>
[03:26:27.697]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.697]      // if-block "protType == 1"
[03:26:27.697]        // =>  FALSE
[03:26:27.697]      // skip if-block "protType == 1"
[03:26:27.697]    </control>
[03:26:27.697]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.697]      // if-block "protType == 2"
[03:26:27.701]        // =>  TRUE
[03:26:27.701]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.701]        // if-block "isSWJ"
[03:26:27.701]          // =>  TRUE
[03:26:27.701]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.701]          // if-block "hasDormant"
[03:26:27.701]            // =>  FALSE
[03:26:27.701]          // skip if-block "hasDormant"
[03:26:27.701]        </control>
[03:26:27.701]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.701]          // if-block "!hasDormant"
[03:26:27.701]            // =>  TRUE
[03:26:27.701]          <block atomic="false" info="">
[03:26:27.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.701]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.705]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.705]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.705]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.705]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.710]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.710]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.713]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.713]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.717]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.717]          </block>
[03:26:27.717]          // end if-block "!hasDormant"
[03:26:27.717]        </control>
[03:26:27.717]        // end if-block "isSWJ"
[03:26:27.717]      </control>
[03:26:27.717]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.717]        // if-block "!isSWJ"
[03:26:27.717]          // =>  FALSE
[03:26:27.717]        // skip if-block "!isSWJ"
[03:26:27.717]      </control>
[03:26:27.717]      <block atomic="false" info="">
[03:26:27.717]        ReadDP(0x0);
[03:26:27.717]  
[03:26:27.717]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.717]  
[03:26:27.717]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.717]      </block>
[03:26:27.717]      // end if-block "protType == 2"
[03:26:27.717]    </control>
[03:26:27.717]  </sequence>
[03:26:27.717]  
[03:26:27.769]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.769]  
[03:26:27.769]  <debugvars>
[03:26:27.769]    // Pre-defined
[03:26:27.769]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.769]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.769]    __dp=0x00000000
[03:26:27.769]    __ap=0x00000000
[03:26:27.769]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.769]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.769]    __FlashAddr=0x00000000
[03:26:27.769]    __FlashLen=0x00000000
[03:26:27.769]    __FlashArg=0x00000000
[03:26:27.769]    __FlashOp=0x00000000
[03:26:27.769]    __Result=0x00000000
[03:26:27.769]  </debugvars>
[03:26:27.769]  
[03:26:27.769]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.769]    <block atomic="false" info="">
[03:26:27.769]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.769]        // -> [isSWJ <= 0x00000001]
[03:26:27.769]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.769]        // -> [hasDormant <= 0x00000000]
[03:26:27.769]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.769]        // -> [protType <= 0x00000002]
[03:26:27.769]    </block>
[03:26:27.769]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.769]      // if-block "protType == 1"
[03:26:27.769]        // =>  FALSE
[03:26:27.769]      // skip if-block "protType == 1"
[03:26:27.769]    </control>
[03:26:27.769]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.769]      // if-block "protType == 2"
[03:26:27.769]        // =>  TRUE
[03:26:27.769]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.773]        // if-block "isSWJ"
[03:26:27.773]          // =>  TRUE
[03:26:27.773]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.773]          // if-block "hasDormant"
[03:26:27.773]            // =>  FALSE
[03:26:27.773]          // skip if-block "hasDormant"
[03:26:27.773]        </control>
[03:26:27.773]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.773]          // if-block "!hasDormant"
[03:26:27.773]            // =>  TRUE
[03:26:27.773]          <block atomic="false" info="">
[03:26:27.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.773]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.777]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.781]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.781]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.781]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.785]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.785]          </block>
[03:26:27.785]          // end if-block "!hasDormant"
[03:26:27.785]        </control>
[03:26:27.785]        // end if-block "isSWJ"
[03:26:27.785]      </control>
[03:26:27.785]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.785]        // if-block "!isSWJ"
[03:26:27.785]          // =>  FALSE
[03:26:27.785]        // skip if-block "!isSWJ"
[03:26:27.785]      </control>
[03:26:27.785]      <block atomic="false" info="">
[03:26:27.785]        ReadDP(0x0);
[03:26:27.785]  
[03:26:27.785]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.785]  
[03:26:27.785]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.785]      </block>
[03:26:27.785]      // end if-block "protType == 2"
[03:26:27.785]    </control>
[03:26:27.785]  </sequence>
[03:26:27.785]  
[03:26:27.841]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.841]  
[03:26:27.841]  <debugvars>
[03:26:27.841]    // Pre-defined
[03:26:27.841]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.841]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.841]    __dp=0x00000000
[03:26:27.841]    __ap=0x00000000
[03:26:27.841]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.841]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.841]    __FlashAddr=0x00000000
[03:26:27.841]    __FlashLen=0x00000000
[03:26:27.841]    __FlashArg=0x00000000
[03:26:27.841]    __FlashOp=0x00000000
[03:26:27.841]    __Result=0x00000000
[03:26:27.841]  </debugvars>
[03:26:27.841]  
[03:26:27.841]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.841]    <block atomic="false" info="">
[03:26:27.841]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.841]        // -> [isSWJ <= 0x00000001]
[03:26:27.841]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.841]        // -> [hasDormant <= 0x00000000]
[03:26:27.841]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.841]        // -> [protType <= 0x00000002]
[03:26:27.841]    </block>
[03:26:27.841]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.841]      // if-block "protType == 1"
[03:26:27.841]        // =>  FALSE
[03:26:27.841]      // skip if-block "protType == 1"
[03:26:27.841]    </control>
[03:26:27.841]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.845]      // if-block "protType == 2"
[03:26:27.845]        // =>  TRUE
[03:26:27.845]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.845]        // if-block "isSWJ"
[03:26:27.845]          // =>  TRUE
[03:26:27.845]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.845]          // if-block "hasDormant"
[03:26:27.845]            // =>  FALSE
[03:26:27.845]          // skip if-block "hasDormant"
[03:26:27.845]        </control>
[03:26:27.845]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.845]          // if-block "!hasDormant"
[03:26:27.845]            // =>  TRUE
[03:26:27.845]          <block atomic="false" info="">
[03:26:27.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.845]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.853]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.853]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.857]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.857]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.857]          </block>
[03:26:27.857]          // end if-block "!hasDormant"
[03:26:27.857]        </control>
[03:26:27.857]        // end if-block "isSWJ"
[03:26:27.857]      </control>
[03:26:27.857]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.857]        // if-block "!isSWJ"
[03:26:27.857]          // =>  FALSE
[03:26:27.857]        // skip if-block "!isSWJ"
[03:26:27.857]      </control>
[03:26:27.857]      <block atomic="false" info="">
[03:26:27.857]        ReadDP(0x0);
[03:26:27.861]  
[03:26:27.861]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.861]  
[03:26:27.861]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.861]      </block>
[03:26:27.861]      // end if-block "protType == 2"
[03:26:27.861]    </control>
[03:26:27.861]  </sequence>
[03:26:27.861]  
[03:26:27.913]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.913]  
[03:26:27.913]  <debugvars>
[03:26:27.913]    // Pre-defined
[03:26:27.913]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.913]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.913]    __dp=0x00000000
[03:26:27.913]    __ap=0x00000000
[03:26:27.913]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.913]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.913]    __FlashAddr=0x00000000
[03:26:27.913]    __FlashLen=0x00000000
[03:26:27.913]    __FlashArg=0x00000000
[03:26:27.913]    __FlashOp=0x00000000
[03:26:27.913]    __Result=0x00000000
[03:26:27.913]  </debugvars>
[03:26:27.913]  
[03:26:27.913]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.913]    <block atomic="false" info="">
[03:26:27.913]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.913]        // -> [isSWJ <= 0x00000001]
[03:26:27.913]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.913]        // -> [hasDormant <= 0x00000000]
[03:26:27.913]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.913]        // -> [protType <= 0x00000002]
[03:26:27.913]    </block>
[03:26:27.913]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.913]      // if-block "protType == 1"
[03:26:27.913]        // =>  FALSE
[03:26:27.913]      // skip if-block "protType == 1"
[03:26:27.913]    </control>
[03:26:27.913]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.913]      // if-block "protType == 2"
[03:26:27.913]        // =>  TRUE
[03:26:27.913]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.913]        // if-block "isSWJ"
[03:26:27.917]          // =>  TRUE
[03:26:27.917]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.917]          // if-block "hasDormant"
[03:26:27.917]            // =>  FALSE
[03:26:27.917]          // skip if-block "hasDormant"
[03:26:27.917]        </control>
[03:26:27.917]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.917]          // if-block "!hasDormant"
[03:26:27.917]            // =>  TRUE
[03:26:27.917]          <block atomic="false" info="">
[03:26:27.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.917]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.921]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.921]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.921]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:27.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.925]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:27.929]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:27.929]          </block>
[03:26:27.929]          // end if-block "!hasDormant"
[03:26:27.929]        </control>
[03:26:27.929]        // end if-block "isSWJ"
[03:26:27.929]      </control>
[03:26:27.929]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:27.929]        // if-block "!isSWJ"
[03:26:27.929]          // =>  FALSE
[03:26:27.929]        // skip if-block "!isSWJ"
[03:26:27.929]      </control>
[03:26:27.929]      <block atomic="false" info="">
[03:26:27.929]        ReadDP(0x0);
[03:26:27.933]  
[03:26:27.933]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:27.933]  
[03:26:27.933]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:27.933]      </block>
[03:26:27.933]      // end if-block "protType == 2"
[03:26:27.933]    </control>
[03:26:27.933]  </sequence>
[03:26:27.933]  
[03:26:27.985]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:27.985]  
[03:26:27.985]  <debugvars>
[03:26:27.985]    // Pre-defined
[03:26:27.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:27.985]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:27.985]    __dp=0x00000000
[03:26:27.985]    __ap=0x00000000
[03:26:27.985]    __traceout=0x00000000      (Trace Disabled)
[03:26:27.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:27.985]    __FlashAddr=0x00000000
[03:26:27.985]    __FlashLen=0x00000000
[03:26:27.985]    __FlashArg=0x00000000
[03:26:27.985]    __FlashOp=0x00000000
[03:26:27.985]    __Result=0x00000000
[03:26:27.985]  </debugvars>
[03:26:27.985]  
[03:26:27.985]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:27.985]    <block atomic="false" info="">
[03:26:27.985]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:27.985]        // -> [isSWJ <= 0x00000001]
[03:26:27.985]      __var hasDormant = __protocol & 0x00020000;
[03:26:27.985]        // -> [hasDormant <= 0x00000000]
[03:26:27.985]      __var protType   = __protocol & 0x0000FFFF;
[03:26:27.985]        // -> [protType <= 0x00000002]
[03:26:27.985]    </block>
[03:26:27.985]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:27.989]      // if-block "protType == 1"
[03:26:27.989]        // =>  FALSE
[03:26:27.989]      // skip if-block "protType == 1"
[03:26:27.989]    </control>
[03:26:27.989]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:27.989]      // if-block "protType == 2"
[03:26:27.989]        // =>  TRUE
[03:26:27.989]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:27.989]        // if-block "isSWJ"
[03:26:27.989]          // =>  TRUE
[03:26:27.989]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:27.989]          // if-block "hasDormant"
[03:26:27.989]            // =>  FALSE
[03:26:27.989]          // skip if-block "hasDormant"
[03:26:27.989]        </control>
[03:26:27.989]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:27.989]          // if-block "!hasDormant"
[03:26:27.989]            // =>  TRUE
[03:26:27.989]          <block atomic="false" info="">
[03:26:27.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:27.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:27.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:27.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:27.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:27.993]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:27.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:27.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.001]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.005]          </block>
[03:26:28.005]          // end if-block "!hasDormant"
[03:26:28.005]        </control>
[03:26:28.005]        // end if-block "isSWJ"
[03:26:28.005]      </control>
[03:26:28.005]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.005]        // if-block "!isSWJ"
[03:26:28.005]          // =>  FALSE
[03:26:28.005]        // skip if-block "!isSWJ"
[03:26:28.005]      </control>
[03:26:28.005]      <block atomic="false" info="">
[03:26:28.005]        ReadDP(0x0);
[03:26:28.009]  
[03:26:28.009]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.009]  
[03:26:28.010]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.010]      </block>
[03:26:28.010]      // end if-block "protType == 2"
[03:26:28.010]    </control>
[03:26:28.010]  </sequence>
[03:26:28.010]  
[03:26:28.069]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.069]  
[03:26:28.069]  <debugvars>
[03:26:28.069]    // Pre-defined
[03:26:28.069]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.069]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.069]    __dp=0x00000000
[03:26:28.069]    __ap=0x00000000
[03:26:28.069]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.069]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.069]    __FlashAddr=0x00000000
[03:26:28.069]    __FlashLen=0x00000000
[03:26:28.069]    __FlashArg=0x00000000
[03:26:28.069]    __FlashOp=0x00000000
[03:26:28.069]    __Result=0x00000000
[03:26:28.069]  </debugvars>
[03:26:28.069]  
[03:26:28.069]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.069]    <block atomic="false" info="">
[03:26:28.069]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.069]        // -> [isSWJ <= 0x00000001]
[03:26:28.069]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.069]        // -> [hasDormant <= 0x00000000]
[03:26:28.069]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.069]        // -> [protType <= 0x00000002]
[03:26:28.069]    </block>
[03:26:28.069]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.069]      // if-block "protType == 1"
[03:26:28.069]        // =>  FALSE
[03:26:28.069]      // skip if-block "protType == 1"
[03:26:28.069]    </control>
[03:26:28.073]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.073]      // if-block "protType == 2"
[03:26:28.073]        // =>  TRUE
[03:26:28.073]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.073]        // if-block "isSWJ"
[03:26:28.073]          // =>  TRUE
[03:26:28.073]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.073]          // if-block "hasDormant"
[03:26:28.073]            // =>  FALSE
[03:26:28.073]          // skip if-block "hasDormant"
[03:26:28.073]        </control>
[03:26:28.073]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.073]          // if-block "!hasDormant"
[03:26:28.073]            // =>  TRUE
[03:26:28.073]          <block atomic="false" info="">
[03:26:28.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.073]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.077]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.081]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.081]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.081]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.085]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.085]          </block>
[03:26:28.085]          // end if-block "!hasDormant"
[03:26:28.085]        </control>
[03:26:28.085]        // end if-block "isSWJ"
[03:26:28.085]      </control>
[03:26:28.085]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.085]        // if-block "!isSWJ"
[03:26:28.085]          // =>  FALSE
[03:26:28.085]        // skip if-block "!isSWJ"
[03:26:28.085]      </control>
[03:26:28.085]      <block atomic="false" info="">
[03:26:28.085]        ReadDP(0x0);
[03:26:28.089]  
[03:26:28.089]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.089]  
[03:26:28.089]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.089]      </block>
[03:26:28.089]      // end if-block "protType == 2"
[03:26:28.089]    </control>
[03:26:28.089]  </sequence>
[03:26:28.089]  
[03:26:28.141]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.141]  
[03:26:28.141]  <debugvars>
[03:26:28.141]    // Pre-defined
[03:26:28.141]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.141]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.141]    __dp=0x00000000
[03:26:28.141]    __ap=0x00000000
[03:26:28.141]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.141]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.141]    __FlashAddr=0x00000000
[03:26:28.141]    __FlashLen=0x00000000
[03:26:28.141]    __FlashArg=0x00000000
[03:26:28.141]    __FlashOp=0x00000000
[03:26:28.141]    __Result=0x00000000
[03:26:28.141]  </debugvars>
[03:26:28.141]  
[03:26:28.141]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.141]    <block atomic="false" info="">
[03:26:28.141]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.141]        // -> [isSWJ <= 0x00000001]
[03:26:28.141]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.141]        // -> [hasDormant <= 0x00000000]
[03:26:28.141]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.141]        // -> [protType <= 0x00000002]
[03:26:28.141]    </block>
[03:26:28.141]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.141]      // if-block "protType == 1"
[03:26:28.141]        // =>  FALSE
[03:26:28.141]      // skip if-block "protType == 1"
[03:26:28.141]    </control>
[03:26:28.141]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.141]      // if-block "protType == 2"
[03:26:28.141]        // =>  TRUE
[03:26:28.141]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.145]        // if-block "isSWJ"
[03:26:28.145]          // =>  TRUE
[03:26:28.145]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.145]          // if-block "hasDormant"
[03:26:28.145]            // =>  FALSE
[03:26:28.145]          // skip if-block "hasDormant"
[03:26:28.145]        </control>
[03:26:28.145]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.145]          // if-block "!hasDormant"
[03:26:28.145]            // =>  TRUE
[03:26:28.145]          <block atomic="false" info="">
[03:26:28.145]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.145]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.149]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.149]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.149]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.153]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.153]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.153]          </block>
[03:26:28.153]          // end if-block "!hasDormant"
[03:26:28.153]        </control>
[03:26:28.153]        // end if-block "isSWJ"
[03:26:28.153]      </control>
[03:26:28.153]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.153]        // if-block "!isSWJ"
[03:26:28.153]          // =>  FALSE
[03:26:28.153]        // skip if-block "!isSWJ"
[03:26:28.153]      </control>
[03:26:28.153]      <block atomic="false" info="">
[03:26:28.153]        ReadDP(0x0);
[03:26:28.157]  
[03:26:28.157]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.157]  
[03:26:28.157]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.157]      </block>
[03:26:28.157]      // end if-block "protType == 2"
[03:26:28.157]    </control>
[03:26:28.157]  </sequence>
[03:26:28.157]  
[03:26:28.213]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.213]  
[03:26:28.213]  <debugvars>
[03:26:28.213]    // Pre-defined
[03:26:28.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.213]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.213]    __dp=0x00000000
[03:26:28.213]    __ap=0x00000000
[03:26:28.213]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.213]    __FlashAddr=0x00000000
[03:26:28.213]    __FlashLen=0x00000000
[03:26:28.213]    __FlashArg=0x00000000
[03:26:28.213]    __FlashOp=0x00000000
[03:26:28.213]    __Result=0x00000000
[03:26:28.213]  </debugvars>
[03:26:28.213]  
[03:26:28.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.213]    <block atomic="false" info="">
[03:26:28.213]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.213]        // -> [isSWJ <= 0x00000001]
[03:26:28.213]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.213]        // -> [hasDormant <= 0x00000000]
[03:26:28.213]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.213]        // -> [protType <= 0x00000002]
[03:26:28.217]    </block>
[03:26:28.217]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.217]      // if-block "protType == 1"
[03:26:28.217]        // =>  FALSE
[03:26:28.217]      // skip if-block "protType == 1"
[03:26:28.217]    </control>
[03:26:28.217]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.217]      // if-block "protType == 2"
[03:26:28.217]        // =>  TRUE
[03:26:28.217]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.217]        // if-block "isSWJ"
[03:26:28.217]          // =>  TRUE
[03:26:28.217]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.217]          // if-block "hasDormant"
[03:26:28.217]            // =>  FALSE
[03:26:28.217]          // skip if-block "hasDormant"
[03:26:28.217]        </control>
[03:26:28.217]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.217]          // if-block "!hasDormant"
[03:26:28.217]            // =>  TRUE
[03:26:28.217]          <block atomic="false" info="">
[03:26:28.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.221]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.225]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.229]          </block>
[03:26:28.229]          // end if-block "!hasDormant"
[03:26:28.229]        </control>
[03:26:28.229]        // end if-block "isSWJ"
[03:26:28.229]      </control>
[03:26:28.229]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.229]        // if-block "!isSWJ"
[03:26:28.229]          // =>  FALSE
[03:26:28.229]        // skip if-block "!isSWJ"
[03:26:28.229]      </control>
[03:26:28.229]      <block atomic="false" info="">
[03:26:28.229]        ReadDP(0x0);
[03:26:28.241]  
[03:26:28.241]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.241]  
[03:26:28.241]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.245]      </block>
[03:26:28.245]      // end if-block "protType == 2"
[03:26:28.245]    </control>
[03:26:28.245]  </sequence>
[03:26:28.245]  
[03:26:28.299]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.299]  
[03:26:28.299]  <debugvars>
[03:26:28.299]    // Pre-defined
[03:26:28.299]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.299]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.299]    __dp=0x00000000
[03:26:28.299]    __ap=0x00000000
[03:26:28.299]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.299]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.299]    __FlashAddr=0x00000000
[03:26:28.299]    __FlashLen=0x00000000
[03:26:28.299]    __FlashArg=0x00000000
[03:26:28.299]    __FlashOp=0x00000000
[03:26:28.299]    __Result=0x00000000
[03:26:28.299]  </debugvars>
[03:26:28.299]  
[03:26:28.299]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.299]    <block atomic="false" info="">
[03:26:28.299]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.299]        // -> [isSWJ <= 0x00000001]
[03:26:28.299]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.299]        // -> [hasDormant <= 0x00000000]
[03:26:28.299]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.299]        // -> [protType <= 0x00000002]
[03:26:28.299]    </block>
[03:26:28.299]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.299]      // if-block "protType == 1"
[03:26:28.299]        // =>  FALSE
[03:26:28.299]      // skip if-block "protType == 1"
[03:26:28.299]    </control>
[03:26:28.299]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.303]      // if-block "protType == 2"
[03:26:28.303]        // =>  TRUE
[03:26:28.303]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.303]        // if-block "isSWJ"
[03:26:28.303]          // =>  TRUE
[03:26:28.303]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.303]          // if-block "hasDormant"
[03:26:28.303]            // =>  FALSE
[03:26:28.303]          // skip if-block "hasDormant"
[03:26:28.303]        </control>
[03:26:28.303]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.303]          // if-block "!hasDormant"
[03:26:28.303]            // =>  TRUE
[03:26:28.303]          <block atomic="false" info="">
[03:26:28.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.311]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.315]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.319]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.319]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.319]          </block>
[03:26:28.319]          // end if-block "!hasDormant"
[03:26:28.319]        </control>
[03:26:28.319]        // end if-block "isSWJ"
[03:26:28.319]      </control>
[03:26:28.319]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.319]        // if-block "!isSWJ"
[03:26:28.323]          // =>  FALSE
[03:26:28.323]        // skip if-block "!isSWJ"
[03:26:28.323]      </control>
[03:26:28.323]      <block atomic="false" info="">
[03:26:28.323]        ReadDP(0x0);
[03:26:28.331]  
[03:26:28.331]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.331]  
[03:26:28.331]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.331]      </block>
[03:26:28.331]      // end if-block "protType == 2"
[03:26:28.331]    </control>
[03:26:28.331]  </sequence>
[03:26:28.331]  
[03:26:28.383]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.383]  
[03:26:28.383]  <debugvars>
[03:26:28.383]    // Pre-defined
[03:26:28.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.383]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.383]    __dp=0x00000000
[03:26:28.383]    __ap=0x00000000
[03:26:28.383]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.383]    __FlashAddr=0x00000000
[03:26:28.383]    __FlashLen=0x00000000
[03:26:28.383]    __FlashArg=0x00000000
[03:26:28.383]    __FlashOp=0x00000000
[03:26:28.383]    __Result=0x00000000
[03:26:28.383]  </debugvars>
[03:26:28.383]  
[03:26:28.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.383]    <block atomic="false" info="">
[03:26:28.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.383]        // -> [isSWJ <= 0x00000001]
[03:26:28.383]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.383]        // -> [hasDormant <= 0x00000000]
[03:26:28.383]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.387]        // -> [protType <= 0x00000002]
[03:26:28.387]    </block>
[03:26:28.387]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.387]      // if-block "protType == 1"
[03:26:28.387]        // =>  FALSE
[03:26:28.387]      // skip if-block "protType == 1"
[03:26:28.387]    </control>
[03:26:28.387]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.387]      // if-block "protType == 2"
[03:26:28.387]        // =>  TRUE
[03:26:28.387]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.387]        // if-block "isSWJ"
[03:26:28.387]          // =>  TRUE
[03:26:28.387]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.387]          // if-block "hasDormant"
[03:26:28.387]            // =>  FALSE
[03:26:28.387]          // skip if-block "hasDormant"
[03:26:28.387]        </control>
[03:26:28.387]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.387]          // if-block "!hasDormant"
[03:26:28.387]            // =>  TRUE
[03:26:28.387]          <block atomic="false" info="">
[03:26:28.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.391]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.395]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.399]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.399]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.399]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.399]          </block>
[03:26:28.399]          // end if-block "!hasDormant"
[03:26:28.399]        </control>
[03:26:28.403]        // end if-block "isSWJ"
[03:26:28.403]      </control>
[03:26:28.403]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.403]        // if-block "!isSWJ"
[03:26:28.403]          // =>  FALSE
[03:26:28.403]        // skip if-block "!isSWJ"
[03:26:28.403]      </control>
[03:26:28.403]      <block atomic="false" info="">
[03:26:28.403]        ReadDP(0x0);
[03:26:28.419]  
[03:26:28.419]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.419]  
[03:26:28.420]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.420]      </block>
[03:26:28.420]      // end if-block "protType == 2"
[03:26:28.420]    </control>
[03:26:28.420]  </sequence>
[03:26:28.421]  
[03:26:28.481]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.481]  
[03:26:28.481]  <debugvars>
[03:26:28.481]    // Pre-defined
[03:26:28.481]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.481]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.481]    __dp=0x00000000
[03:26:28.481]    __ap=0x00000000
[03:26:28.481]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.481]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.481]    __FlashAddr=0x00000000
[03:26:28.481]    __FlashLen=0x00000000
[03:26:28.481]    __FlashArg=0x00000000
[03:26:28.481]    __FlashOp=0x00000000
[03:26:28.481]    __Result=0x00000000
[03:26:28.481]  </debugvars>
[03:26:28.481]  
[03:26:28.481]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.481]    <block atomic="false" info="">
[03:26:28.481]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.481]        // -> [isSWJ <= 0x00000001]
[03:26:28.481]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.481]        // -> [hasDormant <= 0x00000000]
[03:26:28.481]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.481]        // -> [protType <= 0x00000002]
[03:26:28.481]    </block>
[03:26:28.481]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.481]      // if-block "protType == 1"
[03:26:28.481]        // =>  FALSE
[03:26:28.481]      // skip if-block "protType == 1"
[03:26:28.481]    </control>
[03:26:28.481]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.481]      // if-block "protType == 2"
[03:26:28.485]        // =>  TRUE
[03:26:28.485]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.485]        // if-block "isSWJ"
[03:26:28.485]          // =>  TRUE
[03:26:28.485]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.485]          // if-block "hasDormant"
[03:26:28.485]            // =>  FALSE
[03:26:28.485]          // skip if-block "hasDormant"
[03:26:28.485]        </control>
[03:26:28.485]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.485]          // if-block "!hasDormant"
[03:26:28.485]            // =>  TRUE
[03:26:28.485]          <block atomic="false" info="">
[03:26:28.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.485]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.493]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.493]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.497]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.497]          </block>
[03:26:28.497]          // end if-block "!hasDormant"
[03:26:28.497]        </control>
[03:26:28.497]        // end if-block "isSWJ"
[03:26:28.497]      </control>
[03:26:28.497]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.497]        // if-block "!isSWJ"
[03:26:28.497]          // =>  FALSE
[03:26:28.497]        // skip if-block "!isSWJ"
[03:26:28.497]      </control>
[03:26:28.497]      <block atomic="false" info="">
[03:26:28.501]        ReadDP(0x0);
[03:26:28.501]  
[03:26:28.501]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.501]  
[03:26:28.501]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.501]      </block>
[03:26:28.501]      // end if-block "protType == 2"
[03:26:28.501]    </control>
[03:26:28.501]  </sequence>
[03:26:28.501]  
[03:26:28.553]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.553]  
[03:26:28.553]  <debugvars>
[03:26:28.553]    // Pre-defined
[03:26:28.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.554]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.554]    __dp=0x00000000
[03:26:28.554]    __ap=0x00000000
[03:26:28.554]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.554]    __FlashAddr=0x00000000
[03:26:28.554]    __FlashLen=0x00000000
[03:26:28.554]    __FlashArg=0x00000000
[03:26:28.554]    __FlashOp=0x00000000
[03:26:28.554]    __Result=0x00000000
[03:26:28.554]  </debugvars>
[03:26:28.554]  
[03:26:28.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.554]    <block atomic="false" info="">
[03:26:28.555]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.555]        // -> [isSWJ <= 0x00000001]
[03:26:28.555]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.555]        // -> [hasDormant <= 0x00000000]
[03:26:28.555]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.556]        // -> [protType <= 0x00000002]
[03:26:28.556]    </block>
[03:26:28.556]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.556]      // if-block "protType == 1"
[03:26:28.556]        // =>  FALSE
[03:26:28.556]      // skip if-block "protType == 1"
[03:26:28.556]    </control>
[03:26:28.556]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.556]      // if-block "protType == 2"
[03:26:28.557]        // =>  TRUE
[03:26:28.557]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.557]        // if-block "isSWJ"
[03:26:28.557]          // =>  TRUE
[03:26:28.557]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.557]          // if-block "hasDormant"
[03:26:28.557]            // =>  FALSE
[03:26:28.557]          // skip if-block "hasDormant"
[03:26:28.557]        </control>
[03:26:28.557]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.557]          // if-block "!hasDormant"
[03:26:28.557]            // =>  TRUE
[03:26:28.557]          <block atomic="false" info="">
[03:26:28.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.560]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.565]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.567]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.575]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.575]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.577]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.577]          </block>
[03:26:28.577]          // end if-block "!hasDormant"
[03:26:28.577]        </control>
[03:26:28.577]        // end if-block "isSWJ"
[03:26:28.577]      </control>
[03:26:28.577]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.577]        // if-block "!isSWJ"
[03:26:28.577]          // =>  FALSE
[03:26:28.577]        // skip if-block "!isSWJ"
[03:26:28.577]      </control>
[03:26:28.577]      <block atomic="false" info="">
[03:26:28.580]        ReadDP(0x0);
[03:26:28.580]  
[03:26:28.580]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.580]  
[03:26:28.580]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.580]      </block>
[03:26:28.580]      // end if-block "protType == 2"
[03:26:28.580]    </control>
[03:26:28.582]  </sequence>
[03:26:28.582]  
[03:26:28.638]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.638]  
[03:26:28.638]  <debugvars>
[03:26:28.638]    // Pre-defined
[03:26:28.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.638]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.638]    __dp=0x00000000
[03:26:28.638]    __ap=0x00000000
[03:26:28.638]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.638]    __FlashAddr=0x00000000
[03:26:28.638]    __FlashLen=0x00000000
[03:26:28.638]    __FlashArg=0x00000000
[03:26:28.638]    __FlashOp=0x00000000
[03:26:28.638]    __Result=0x00000000
[03:26:28.638]  </debugvars>
[03:26:28.638]  
[03:26:28.638]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.638]    <block atomic="false" info="">
[03:26:28.638]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.638]        // -> [isSWJ <= 0x00000001]
[03:26:28.638]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.638]        // -> [hasDormant <= 0x00000000]
[03:26:28.638]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.638]        // -> [protType <= 0x00000002]
[03:26:28.638]    </block>
[03:26:28.638]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.638]      // if-block "protType == 1"
[03:26:28.638]        // =>  FALSE
[03:26:28.638]      // skip if-block "protType == 1"
[03:26:28.642]    </control>
[03:26:28.642]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.642]      // if-block "protType == 2"
[03:26:28.642]        // =>  TRUE
[03:26:28.642]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.642]        // if-block "isSWJ"
[03:26:28.642]          // =>  TRUE
[03:26:28.642]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.642]          // if-block "hasDormant"
[03:26:28.642]            // =>  FALSE
[03:26:28.642]          // skip if-block "hasDormant"
[03:26:28.642]        </control>
[03:26:28.642]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.642]          // if-block "!hasDormant"
[03:26:28.642]            // =>  TRUE
[03:26:28.642]          <block atomic="false" info="">
[03:26:28.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.646]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.650]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.654]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.658]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.658]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.658]          </block>
[03:26:28.658]          // end if-block "!hasDormant"
[03:26:28.658]        </control>
[03:26:28.658]        // end if-block "isSWJ"
[03:26:28.658]      </control>
[03:26:28.658]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.658]        // if-block "!isSWJ"
[03:26:28.658]          // =>  FALSE
[03:26:28.658]        // skip if-block "!isSWJ"
[03:26:28.658]      </control>
[03:26:28.658]      <block atomic="false" info="">
[03:26:28.658]        ReadDP(0x0);
[03:26:28.662]  
[03:26:28.662]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.662]  
[03:26:28.662]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.662]      </block>
[03:26:28.662]      // end if-block "protType == 2"
[03:26:28.662]    </control>
[03:26:28.662]  </sequence>
[03:26:28.662]  
[03:26:28.722]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.722]  
[03:26:28.722]  <debugvars>
[03:26:28.722]    // Pre-defined
[03:26:28.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.722]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.722]    __dp=0x00000000
[03:26:28.722]    __ap=0x00000000
[03:26:28.722]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.722]    __FlashAddr=0x00000000
[03:26:28.722]    __FlashLen=0x00000000
[03:26:28.722]    __FlashArg=0x00000000
[03:26:28.722]    __FlashOp=0x00000000
[03:26:28.722]    __Result=0x00000000
[03:26:28.722]  </debugvars>
[03:26:28.722]  
[03:26:28.722]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.722]    <block atomic="false" info="">
[03:26:28.725]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.725]        // -> [isSWJ <= 0x00000001]
[03:26:28.726]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.726]        // -> [hasDormant <= 0x00000000]
[03:26:28.726]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.726]        // -> [protType <= 0x00000002]
[03:26:28.726]    </block>
[03:26:28.726]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.726]      // if-block "protType == 1"
[03:26:28.726]        // =>  FALSE
[03:26:28.726]      // skip if-block "protType == 1"
[03:26:28.726]    </control>
[03:26:28.726]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.726]      // if-block "protType == 2"
[03:26:28.726]        // =>  TRUE
[03:26:28.726]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.726]        // if-block "isSWJ"
[03:26:28.726]          // =>  TRUE
[03:26:28.726]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.726]          // if-block "hasDormant"
[03:26:28.726]            // =>  FALSE
[03:26:28.726]          // skip if-block "hasDormant"
[03:26:28.726]        </control>
[03:26:28.726]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.726]          // if-block "!hasDormant"
[03:26:28.726]            // =>  TRUE
[03:26:28.726]          <block atomic="false" info="">
[03:26:28.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.730]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.730]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.730]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.730]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.730]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.734]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.738]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.738]          </block>
[03:26:28.738]          // end if-block "!hasDormant"
[03:26:28.738]        </control>
[03:26:28.738]        // end if-block "isSWJ"
[03:26:28.738]      </control>
[03:26:28.738]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.738]        // if-block "!isSWJ"
[03:26:28.738]          // =>  FALSE
[03:26:28.738]        // skip if-block "!isSWJ"
[03:26:28.738]      </control>
[03:26:28.738]      <block atomic="false" info="">
[03:26:28.738]        ReadDP(0x0);
[03:26:28.738]  
[03:26:28.738]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.738]  
[03:26:28.738]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.738]      </block>
[03:26:28.738]      // end if-block "protType == 2"
[03:26:28.738]    </control>
[03:26:28.738]  </sequence>
[03:26:28.742]  
[03:26:28.801]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.801]  
[03:26:28.801]  <debugvars>
[03:26:28.801]    // Pre-defined
[03:26:28.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.801]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.801]    __dp=0x00000000
[03:26:28.801]    __ap=0x00000000
[03:26:28.801]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.801]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.801]    __FlashAddr=0x00000000
[03:26:28.801]    __FlashLen=0x00000000
[03:26:28.801]    __FlashArg=0x00000000
[03:26:28.801]    __FlashOp=0x00000000
[03:26:28.801]    __Result=0x00000000
[03:26:28.801]  </debugvars>
[03:26:28.801]  
[03:26:28.801]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.801]    <block atomic="false" info="">
[03:26:28.801]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.801]        // -> [isSWJ <= 0x00000001]
[03:26:28.801]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.801]        // -> [hasDormant <= 0x00000000]
[03:26:28.801]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.801]        // -> [protType <= 0x00000002]
[03:26:28.801]    </block>
[03:26:28.801]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.801]      // if-block "protType == 1"
[03:26:28.801]        // =>  FALSE
[03:26:28.801]      // skip if-block "protType == 1"
[03:26:28.801]    </control>
[03:26:28.801]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.801]      // if-block "protType == 2"
[03:26:28.801]        // =>  TRUE
[03:26:28.801]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.801]        // if-block "isSWJ"
[03:26:28.801]          // =>  TRUE
[03:26:28.801]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.806]          // if-block "hasDormant"
[03:26:28.806]            // =>  FALSE
[03:26:28.806]          // skip if-block "hasDormant"
[03:26:28.806]        </control>
[03:26:28.806]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.806]          // if-block "!hasDormant"
[03:26:28.806]            // =>  TRUE
[03:26:28.806]          <block atomic="false" info="">
[03:26:28.806]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.806]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.806]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.810]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.810]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.810]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.814]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.816]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.816]          </block>
[03:26:28.816]          // end if-block "!hasDormant"
[03:26:28.816]        </control>
[03:26:28.816]        // end if-block "isSWJ"
[03:26:28.816]      </control>
[03:26:28.816]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.816]        // if-block "!isSWJ"
[03:26:28.816]          // =>  FALSE
[03:26:28.816]        // skip if-block "!isSWJ"
[03:26:28.816]      </control>
[03:26:28.816]      <block atomic="false" info="">
[03:26:28.816]        ReadDP(0x0);
[03:26:28.822]  
[03:26:28.822]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.822]  
[03:26:28.822]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.822]      </block>
[03:26:28.822]      // end if-block "protType == 2"
[03:26:28.822]    </control>
[03:26:28.822]  </sequence>
[03:26:28.822]  
[03:26:28.875]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.875]  
[03:26:28.875]  <debugvars>
[03:26:28.875]    // Pre-defined
[03:26:28.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.875]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.875]    __dp=0x00000000
[03:26:28.875]    __ap=0x00000000
[03:26:28.875]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.875]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.875]    __FlashAddr=0x00000000
[03:26:28.875]    __FlashLen=0x00000000
[03:26:28.875]    __FlashArg=0x00000000
[03:26:28.875]    __FlashOp=0x00000000
[03:26:28.875]    __Result=0x00000000
[03:26:28.875]  </debugvars>
[03:26:28.875]  
[03:26:28.875]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.875]    <block atomic="false" info="">
[03:26:28.875]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.875]        // -> [isSWJ <= 0x00000001]
[03:26:28.875]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.875]        // -> [hasDormant <= 0x00000000]
[03:26:28.875]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.875]        // -> [protType <= 0x00000002]
[03:26:28.875]    </block>
[03:26:28.875]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.875]      // if-block "protType == 1"
[03:26:28.875]        // =>  FALSE
[03:26:28.875]      // skip if-block "protType == 1"
[03:26:28.875]    </control>
[03:26:28.875]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.875]      // if-block "protType == 2"
[03:26:28.875]        // =>  TRUE
[03:26:28.879]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.879]        // if-block "isSWJ"
[03:26:28.879]          // =>  TRUE
[03:26:28.879]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.879]          // if-block "hasDormant"
[03:26:28.879]            // =>  FALSE
[03:26:28.879]          // skip if-block "hasDormant"
[03:26:28.879]        </control>
[03:26:28.879]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.879]          // if-block "!hasDormant"
[03:26:28.879]            // =>  TRUE
[03:26:28.879]          <block atomic="false" info="">
[03:26:28.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.879]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.887]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.887]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.891]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.891]          </block>
[03:26:28.891]          // end if-block "!hasDormant"
[03:26:28.891]        </control>
[03:26:28.891]        // end if-block "isSWJ"
[03:26:28.891]      </control>
[03:26:28.891]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.891]        // if-block "!isSWJ"
[03:26:28.891]          // =>  FALSE
[03:26:28.891]        // skip if-block "!isSWJ"
[03:26:28.891]      </control>
[03:26:28.891]      <block atomic="false" info="">
[03:26:28.891]        ReadDP(0x0);
[03:26:28.891]  
[03:26:28.891]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.891]  
[03:26:28.891]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.891]      </block>
[03:26:28.891]      // end if-block "protType == 2"
[03:26:28.891]    </control>
[03:26:28.891]  </sequence>
[03:26:28.891]  
[03:26:28.949]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:28.949]  
[03:26:28.949]  <debugvars>
[03:26:28.949]    // Pre-defined
[03:26:28.949]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:28.949]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:28.949]    __dp=0x00000000
[03:26:28.949]    __ap=0x00000000
[03:26:28.949]    __traceout=0x00000000      (Trace Disabled)
[03:26:28.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:28.949]    __FlashAddr=0x00000000
[03:26:28.951]    __FlashLen=0x00000000
[03:26:28.951]    __FlashArg=0x00000000
[03:26:28.951]    __FlashOp=0x00000000
[03:26:28.951]    __Result=0x00000000
[03:26:28.951]  </debugvars>
[03:26:28.951]  
[03:26:28.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:28.951]    <block atomic="false" info="">
[03:26:28.951]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:28.951]        // -> [isSWJ <= 0x00000001]
[03:26:28.951]      __var hasDormant = __protocol & 0x00020000;
[03:26:28.951]        // -> [hasDormant <= 0x00000000]
[03:26:28.951]      __var protType   = __protocol & 0x0000FFFF;
[03:26:28.951]        // -> [protType <= 0x00000002]
[03:26:28.951]    </block>
[03:26:28.951]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:28.951]      // if-block "protType == 1"
[03:26:28.951]        // =>  FALSE
[03:26:28.953]      // skip if-block "protType == 1"
[03:26:28.953]    </control>
[03:26:28.953]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:28.953]      // if-block "protType == 2"
[03:26:28.953]        // =>  TRUE
[03:26:28.953]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:28.953]        // if-block "isSWJ"
[03:26:28.953]          // =>  TRUE
[03:26:28.954]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:28.954]          // if-block "hasDormant"
[03:26:28.954]            // =>  FALSE
[03:26:28.954]          // skip if-block "hasDormant"
[03:26:28.954]        </control>
[03:26:28.954]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:28.954]          // if-block "!hasDormant"
[03:26:28.954]            // =>  TRUE
[03:26:28.954]          <block atomic="false" info="">
[03:26:28.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:28.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.961]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:28.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:28.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:28.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.965]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:28.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:28.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:28.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:28.969]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:28.969]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:28.969]          </block>
[03:26:28.969]          // end if-block "!hasDormant"
[03:26:28.969]        </control>
[03:26:28.969]        // end if-block "isSWJ"
[03:26:28.969]      </control>
[03:26:28.973]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:28.973]        // if-block "!isSWJ"
[03:26:28.973]          // =>  FALSE
[03:26:28.973]        // skip if-block "!isSWJ"
[03:26:28.973]      </control>
[03:26:28.973]      <block atomic="false" info="">
[03:26:28.973]        ReadDP(0x0);
[03:26:28.973]  
[03:26:28.973]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:28.973]  
[03:26:28.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:28.973]      </block>
[03:26:28.973]      // end if-block "protType == 2"
[03:26:28.973]    </control>
[03:26:28.973]  </sequence>
[03:26:28.973]  
[03:26:29.035]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.035]  
[03:26:29.035]  <debugvars>
[03:26:29.035]    // Pre-defined
[03:26:29.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.035]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.035]    __dp=0x00000000
[03:26:29.035]    __ap=0x00000000
[03:26:29.035]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.036]    __FlashAddr=0x00000000
[03:26:29.036]    __FlashLen=0x00000000
[03:26:29.036]    __FlashArg=0x00000000
[03:26:29.036]    __FlashOp=0x00000000
[03:26:29.036]    __Result=0x00000000
[03:26:29.036]  </debugvars>
[03:26:29.036]  
[03:26:29.036]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.036]    <block atomic="false" info="">
[03:26:29.036]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.036]        // -> [isSWJ <= 0x00000001]
[03:26:29.036]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.036]        // -> [hasDormant <= 0x00000000]
[03:26:29.036]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.036]        // -> [protType <= 0x00000002]
[03:26:29.036]    </block>
[03:26:29.036]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.036]      // if-block "protType == 1"
[03:26:29.036]        // =>  FALSE
[03:26:29.036]      // skip if-block "protType == 1"
[03:26:29.036]    </control>
[03:26:29.036]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.036]      // if-block "protType == 2"
[03:26:29.038]        // =>  TRUE
[03:26:29.038]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.038]        // if-block "isSWJ"
[03:26:29.038]          // =>  TRUE
[03:26:29.038]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.038]          // if-block "hasDormant"
[03:26:29.038]            // =>  FALSE
[03:26:29.038]          // skip if-block "hasDormant"
[03:26:29.038]        </control>
[03:26:29.038]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.038]          // if-block "!hasDormant"
[03:26:29.038]            // =>  TRUE
[03:26:29.038]          <block atomic="false" info="">
[03:26:29.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.040]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.040]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.042]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.042]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.042]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.042]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.042]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.046]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.046]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.046]          </block>
[03:26:29.046]          // end if-block "!hasDormant"
[03:26:29.046]        </control>
[03:26:29.050]        // end if-block "isSWJ"
[03:26:29.050]      </control>
[03:26:29.050]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.050]        // if-block "!isSWJ"
[03:26:29.050]          // =>  FALSE
[03:26:29.050]        // skip if-block "!isSWJ"
[03:26:29.050]      </control>
[03:26:29.050]      <block atomic="false" info="">
[03:26:29.050]        ReadDP(0x0);
[03:26:29.050]  
[03:26:29.050]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.050]  
[03:26:29.050]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.050]      </block>
[03:26:29.050]      // end if-block "protType == 2"
[03:26:29.054]    </control>
[03:26:29.054]  </sequence>
[03:26:29.054]  
[03:26:29.107]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.107]  
[03:26:29.107]  <debugvars>
[03:26:29.107]    // Pre-defined
[03:26:29.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.107]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.107]    __dp=0x00000000
[03:26:29.107]    __ap=0x00000000
[03:26:29.107]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.107]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.107]    __FlashAddr=0x00000000
[03:26:29.107]    __FlashLen=0x00000000
[03:26:29.107]    __FlashArg=0x00000000
[03:26:29.107]    __FlashOp=0x00000000
[03:26:29.107]    __Result=0x00000000
[03:26:29.107]  </debugvars>
[03:26:29.107]  
[03:26:29.107]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.107]    <block atomic="false" info="">
[03:26:29.107]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.107]        // -> [isSWJ <= 0x00000001]
[03:26:29.107]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.107]        // -> [hasDormant <= 0x00000000]
[03:26:29.107]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.107]        // -> [protType <= 0x00000002]
[03:26:29.107]    </block>
[03:26:29.107]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.107]      // if-block "protType == 1"
[03:26:29.111]        // =>  FALSE
[03:26:29.111]      // skip if-block "protType == 1"
[03:26:29.111]    </control>
[03:26:29.111]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.111]      // if-block "protType == 2"
[03:26:29.111]        // =>  TRUE
[03:26:29.111]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.111]        // if-block "isSWJ"
[03:26:29.111]          // =>  TRUE
[03:26:29.111]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.111]          // if-block "hasDormant"
[03:26:29.111]            // =>  FALSE
[03:26:29.111]          // skip if-block "hasDormant"
[03:26:29.111]        </control>
[03:26:29.111]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.111]          // if-block "!hasDormant"
[03:26:29.111]            // =>  TRUE
[03:26:29.111]          <block atomic="false" info="">
[03:26:29.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.111]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.124]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.124]          </block>
[03:26:29.124]          // end if-block "!hasDormant"
[03:26:29.124]        </control>
[03:26:29.124]        // end if-block "isSWJ"
[03:26:29.124]      </control>
[03:26:29.124]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.125]        // if-block "!isSWJ"
[03:26:29.125]          // =>  FALSE
[03:26:29.125]        // skip if-block "!isSWJ"
[03:26:29.125]      </control>
[03:26:29.125]      <block atomic="false" info="">
[03:26:29.125]        ReadDP(0x0);
[03:26:29.128]  
[03:26:29.128]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.128]  
[03:26:29.128]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.128]      </block>
[03:26:29.128]      // end if-block "protType == 2"
[03:26:29.128]    </control>
[03:26:29.128]  </sequence>
[03:26:29.128]  
[03:26:29.181]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.181]  
[03:26:29.181]  <debugvars>
[03:26:29.182]    // Pre-defined
[03:26:29.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.182]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.182]    __dp=0x00000000
[03:26:29.182]    __ap=0x00000000
[03:26:29.182]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.182]    __FlashAddr=0x00000000
[03:26:29.182]    __FlashLen=0x00000000
[03:26:29.182]    __FlashArg=0x00000000
[03:26:29.182]    __FlashOp=0x00000000
[03:26:29.182]    __Result=0x00000000
[03:26:29.182]  </debugvars>
[03:26:29.182]  
[03:26:29.182]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.182]    <block atomic="false" info="">
[03:26:29.182]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.182]        // -> [isSWJ <= 0x00000001]
[03:26:29.182]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.182]        // -> [hasDormant <= 0x00000000]
[03:26:29.182]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.182]        // -> [protType <= 0x00000002]
[03:26:29.182]    </block>
[03:26:29.182]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.185]      // if-block "protType == 1"
[03:26:29.185]        // =>  FALSE
[03:26:29.185]      // skip if-block "protType == 1"
[03:26:29.185]    </control>
[03:26:29.185]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.185]      // if-block "protType == 2"
[03:26:29.185]        // =>  TRUE
[03:26:29.185]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.185]        // if-block "isSWJ"
[03:26:29.185]          // =>  TRUE
[03:26:29.185]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.185]          // if-block "hasDormant"
[03:26:29.185]            // =>  FALSE
[03:26:29.185]          // skip if-block "hasDormant"
[03:26:29.185]        </control>
[03:26:29.185]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.185]          // if-block "!hasDormant"
[03:26:29.185]            // =>  TRUE
[03:26:29.185]          <block atomic="false" info="">
[03:26:29.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.185]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.189]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.193]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.197]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.197]          </block>
[03:26:29.197]          // end if-block "!hasDormant"
[03:26:29.197]        </control>
[03:26:29.197]        // end if-block "isSWJ"
[03:26:29.197]      </control>
[03:26:29.197]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.197]        // if-block "!isSWJ"
[03:26:29.197]          // =>  FALSE
[03:26:29.197]        // skip if-block "!isSWJ"
[03:26:29.197]      </control>
[03:26:29.197]      <block atomic="false" info="">
[03:26:29.197]        ReadDP(0x0);
[03:26:29.201]  
[03:26:29.201]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.201]  
[03:26:29.201]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.201]      </block>
[03:26:29.201]      // end if-block "protType == 2"
[03:26:29.201]    </control>
[03:26:29.201]  </sequence>
[03:26:29.201]  
[03:26:29.255]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.255]  
[03:26:29.255]  <debugvars>
[03:26:29.255]    // Pre-defined
[03:26:29.255]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.255]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.255]    __dp=0x00000000
[03:26:29.255]    __ap=0x00000000
[03:26:29.256]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.256]    __FlashAddr=0x00000000
[03:26:29.256]    __FlashLen=0x00000000
[03:26:29.256]    __FlashArg=0x00000000
[03:26:29.256]    __FlashOp=0x00000000
[03:26:29.256]    __Result=0x00000000
[03:26:29.256]  </debugvars>
[03:26:29.256]  
[03:26:29.256]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.256]    <block atomic="false" info="">
[03:26:29.256]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.256]        // -> [isSWJ <= 0x00000001]
[03:26:29.256]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.256]        // -> [hasDormant <= 0x00000000]
[03:26:29.256]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.256]        // -> [protType <= 0x00000002]
[03:26:29.256]    </block>
[03:26:29.256]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.256]      // if-block "protType == 1"
[03:26:29.256]        // =>  FALSE
[03:26:29.256]      // skip if-block "protType == 1"
[03:26:29.256]    </control>
[03:26:29.256]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.256]      // if-block "protType == 2"
[03:26:29.256]        // =>  TRUE
[03:26:29.256]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.256]        // if-block "isSWJ"
[03:26:29.256]          // =>  TRUE
[03:26:29.256]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.259]          // if-block "hasDormant"
[03:26:29.259]            // =>  FALSE
[03:26:29.259]          // skip if-block "hasDormant"
[03:26:29.259]        </control>
[03:26:29.259]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.259]          // if-block "!hasDormant"
[03:26:29.259]            // =>  TRUE
[03:26:29.259]          <block atomic="false" info="">
[03:26:29.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.259]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.263]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.263]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.267]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.271]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.271]          </block>
[03:26:29.271]          // end if-block "!hasDormant"
[03:26:29.271]        </control>
[03:26:29.271]        // end if-block "isSWJ"
[03:26:29.271]      </control>
[03:26:29.271]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.271]        // if-block "!isSWJ"
[03:26:29.271]          // =>  FALSE
[03:26:29.271]        // skip if-block "!isSWJ"
[03:26:29.271]      </control>
[03:26:29.271]      <block atomic="false" info="">
[03:26:29.271]        ReadDP(0x0);
[03:26:29.271]  
[03:26:29.271]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.271]  
[03:26:29.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.271]      </block>
[03:26:29.271]      // end if-block "protType == 2"
[03:26:29.271]    </control>
[03:26:29.271]  </sequence>
[03:26:29.271]  
[03:26:29.328]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.328]  
[03:26:29.328]  <debugvars>
[03:26:29.328]    // Pre-defined
[03:26:29.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.328]    __dp=0x00000000
[03:26:29.328]    __ap=0x00000000
[03:26:29.328]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.328]    __FlashAddr=0x00000000
[03:26:29.328]    __FlashLen=0x00000000
[03:26:29.328]    __FlashArg=0x00000000
[03:26:29.328]    __FlashOp=0x00000000
[03:26:29.328]    __Result=0x00000000
[03:26:29.328]  </debugvars>
[03:26:29.328]  
[03:26:29.328]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.328]    <block atomic="false" info="">
[03:26:29.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.328]        // -> [isSWJ <= 0x00000001]
[03:26:29.328]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.328]        // -> [hasDormant <= 0x00000000]
[03:26:29.328]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.331]        // -> [protType <= 0x00000002]
[03:26:29.331]    </block>
[03:26:29.331]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.331]      // if-block "protType == 1"
[03:26:29.331]        // =>  FALSE
[03:26:29.331]      // skip if-block "protType == 1"
[03:26:29.331]    </control>
[03:26:29.331]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.331]      // if-block "protType == 2"
[03:26:29.331]        // =>  TRUE
[03:26:29.331]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.331]        // if-block "isSWJ"
[03:26:29.331]          // =>  TRUE
[03:26:29.332]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.332]          // if-block "hasDormant"
[03:26:29.332]            // =>  FALSE
[03:26:29.332]          // skip if-block "hasDormant"
[03:26:29.332]        </control>
[03:26:29.332]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.332]          // if-block "!hasDormant"
[03:26:29.332]            // =>  TRUE
[03:26:29.332]          <block atomic="false" info="">
[03:26:29.332]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.344]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.348]          </block>
[03:26:29.348]          // end if-block "!hasDormant"
[03:26:29.348]        </control>
[03:26:29.348]        // end if-block "isSWJ"
[03:26:29.348]      </control>
[03:26:29.348]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.348]        // if-block "!isSWJ"
[03:26:29.348]          // =>  FALSE
[03:26:29.348]        // skip if-block "!isSWJ"
[03:26:29.348]      </control>
[03:26:29.348]      <block atomic="false" info="">
[03:26:29.348]        ReadDP(0x0);
[03:26:29.351]  
[03:26:29.351]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.351]  
[03:26:29.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.351]      </block>
[03:26:29.351]      // end if-block "protType == 2"
[03:26:29.351]    </control>
[03:26:29.351]  </sequence>
[03:26:29.352]  
[03:26:29.414]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.414]  
[03:26:29.414]  <debugvars>
[03:26:29.414]    // Pre-defined
[03:26:29.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.414]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.414]    __dp=0x00000000
[03:26:29.414]    __ap=0x00000000
[03:26:29.414]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.414]    __FlashAddr=0x00000000
[03:26:29.414]    __FlashLen=0x00000000
[03:26:29.414]    __FlashArg=0x00000000
[03:26:29.414]    __FlashOp=0x00000000
[03:26:29.414]    __Result=0x00000000
[03:26:29.414]  </debugvars>
[03:26:29.414]  
[03:26:29.414]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.416]    <block atomic="false" info="">
[03:26:29.416]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.416]        // -> [isSWJ <= 0x00000001]
[03:26:29.416]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.416]        // -> [hasDormant <= 0x00000000]
[03:26:29.416]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.416]        // -> [protType <= 0x00000002]
[03:26:29.416]    </block>
[03:26:29.416]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.416]      // if-block "protType == 1"
[03:26:29.416]        // =>  FALSE
[03:26:29.416]      // skip if-block "protType == 1"
[03:26:29.416]    </control>
[03:26:29.416]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.418]      // if-block "protType == 2"
[03:26:29.418]        // =>  TRUE
[03:26:29.418]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.418]        // if-block "isSWJ"
[03:26:29.418]          // =>  TRUE
[03:26:29.418]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.418]          // if-block "hasDormant"
[03:26:29.418]            // =>  FALSE
[03:26:29.418]          // skip if-block "hasDormant"
[03:26:29.418]        </control>
[03:26:29.418]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.418]          // if-block "!hasDormant"
[03:26:29.418]            // =>  TRUE
[03:26:29.418]          <block atomic="false" info="">
[03:26:29.418]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.418]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.422]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.427]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.427]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.427]          </block>
[03:26:29.427]          // end if-block "!hasDormant"
[03:26:29.430]        </control>
[03:26:29.430]        // end if-block "isSWJ"
[03:26:29.430]      </control>
[03:26:29.430]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.430]        // if-block "!isSWJ"
[03:26:29.430]          // =>  FALSE
[03:26:29.430]        // skip if-block "!isSWJ"
[03:26:29.430]      </control>
[03:26:29.430]      <block atomic="false" info="">
[03:26:29.430]        ReadDP(0x0);
[03:26:29.430]  
[03:26:29.430]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.430]  
[03:26:29.430]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.430]      </block>
[03:26:29.434]      // end if-block "protType == 2"
[03:26:29.434]    </control>
[03:26:29.434]  </sequence>
[03:26:29.434]  
[03:26:29.487]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.487]  
[03:26:29.488]  <debugvars>
[03:26:29.488]    // Pre-defined
[03:26:29.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.488]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.488]    __dp=0x00000000
[03:26:29.488]    __ap=0x00000000
[03:26:29.488]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.488]    __FlashAddr=0x00000000
[03:26:29.488]    __FlashLen=0x00000000
[03:26:29.488]    __FlashArg=0x00000000
[03:26:29.488]    __FlashOp=0x00000000
[03:26:29.488]    __Result=0x00000000
[03:26:29.488]  </debugvars>
[03:26:29.488]  
[03:26:29.488]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.488]    <block atomic="false" info="">
[03:26:29.488]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.488]        // -> [isSWJ <= 0x00000001]
[03:26:29.488]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.488]        // -> [hasDormant <= 0x00000000]
[03:26:29.488]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.491]        // -> [protType <= 0x00000002]
[03:26:29.491]    </block>
[03:26:29.491]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.491]      // if-block "protType == 1"
[03:26:29.491]        // =>  FALSE
[03:26:29.491]      // skip if-block "protType == 1"
[03:26:29.491]    </control>
[03:26:29.491]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.491]      // if-block "protType == 2"
[03:26:29.491]        // =>  TRUE
[03:26:29.491]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.492]        // if-block "isSWJ"
[03:26:29.492]          // =>  TRUE
[03:26:29.492]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.492]          // if-block "hasDormant"
[03:26:29.492]            // =>  FALSE
[03:26:29.493]          // skip if-block "hasDormant"
[03:26:29.493]        </control>
[03:26:29.493]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.493]          // if-block "!hasDormant"
[03:26:29.493]            // =>  TRUE
[03:26:29.493]          <block atomic="false" info="">
[03:26:29.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.493]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.499]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.504]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.505]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.505]          </block>
[03:26:29.505]          // end if-block "!hasDormant"
[03:26:29.505]        </control>
[03:26:29.505]        // end if-block "isSWJ"
[03:26:29.505]      </control>
[03:26:29.505]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.505]        // if-block "!isSWJ"
[03:26:29.505]          // =>  FALSE
[03:26:29.505]        // skip if-block "!isSWJ"
[03:26:29.505]      </control>
[03:26:29.505]      <block atomic="false" info="">
[03:26:29.505]        ReadDP(0x0);
[03:26:29.505]  
[03:26:29.505]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.505]  
[03:26:29.505]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.505]      </block>
[03:26:29.505]      // end if-block "protType == 2"
[03:26:29.508]    </control>
[03:26:29.508]  </sequence>
[03:26:29.508]  
[03:26:29.565]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.565]  
[03:26:29.565]  <debugvars>
[03:26:29.565]    // Pre-defined
[03:26:29.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.565]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.565]    __dp=0x00000000
[03:26:29.566]    __ap=0x00000000
[03:26:29.566]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.566]    __FlashAddr=0x00000000
[03:26:29.566]    __FlashLen=0x00000000
[03:26:29.566]    __FlashArg=0x00000000
[03:26:29.566]    __FlashOp=0x00000000
[03:26:29.566]    __Result=0x00000000
[03:26:29.566]  </debugvars>
[03:26:29.567]  
[03:26:29.567]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.567]    <block atomic="false" info="">
[03:26:29.567]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.567]        // -> [isSWJ <= 0x00000001]
[03:26:29.567]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.567]        // -> [hasDormant <= 0x00000000]
[03:26:29.567]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.567]        // -> [protType <= 0x00000002]
[03:26:29.568]    </block>
[03:26:29.568]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.568]      // if-block "protType == 1"
[03:26:29.568]        // =>  FALSE
[03:26:29.568]      // skip if-block "protType == 1"
[03:26:29.568]    </control>
[03:26:29.568]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.568]      // if-block "protType == 2"
[03:26:29.568]        // =>  TRUE
[03:26:29.569]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.569]        // if-block "isSWJ"
[03:26:29.569]          // =>  TRUE
[03:26:29.569]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.569]          // if-block "hasDormant"
[03:26:29.569]            // =>  FALSE
[03:26:29.569]          // skip if-block "hasDormant"
[03:26:29.569]        </control>
[03:26:29.570]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.570]          // if-block "!hasDormant"
[03:26:29.570]            // =>  TRUE
[03:26:29.570]          <block atomic="false" info="">
[03:26:29.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.572]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.574]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.576]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.576]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.579]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.579]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.581]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.582]          </block>
[03:26:29.582]          // end if-block "!hasDormant"
[03:26:29.582]        </control>
[03:26:29.583]        // end if-block "isSWJ"
[03:26:29.583]      </control>
[03:26:29.583]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.583]        // if-block "!isSWJ"
[03:26:29.583]          // =>  FALSE
[03:26:29.583]        // skip if-block "!isSWJ"
[03:26:29.583]      </control>
[03:26:29.583]      <block atomic="false" info="">
[03:26:29.583]        ReadDP(0x0);
[03:26:29.584]  
[03:26:29.584]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.584]  
[03:26:29.585]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.585]      </block>
[03:26:29.585]      // end if-block "protType == 2"
[03:26:29.585]    </control>
[03:26:29.585]  </sequence>
[03:26:29.585]  
[03:26:29.643]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.643]  
[03:26:29.643]  <debugvars>
[03:26:29.643]    // Pre-defined
[03:26:29.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.643]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.643]    __dp=0x00000000
[03:26:29.643]    __ap=0x00000000
[03:26:29.643]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.643]    __FlashAddr=0x00000000
[03:26:29.643]    __FlashLen=0x00000000
[03:26:29.643]    __FlashArg=0x00000000
[03:26:29.643]    __FlashOp=0x00000000
[03:26:29.643]    __Result=0x00000000
[03:26:29.643]  </debugvars>
[03:26:29.643]  
[03:26:29.643]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.643]    <block atomic="false" info="">
[03:26:29.643]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.643]        // -> [isSWJ <= 0x00000001]
[03:26:29.646]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.646]        // -> [hasDormant <= 0x00000000]
[03:26:29.646]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.646]        // -> [protType <= 0x00000002]
[03:26:29.646]    </block>
[03:26:29.646]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.646]      // if-block "protType == 1"
[03:26:29.646]        // =>  FALSE
[03:26:29.646]      // skip if-block "protType == 1"
[03:26:29.646]    </control>
[03:26:29.646]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.646]      // if-block "protType == 2"
[03:26:29.646]        // =>  TRUE
[03:26:29.646]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.646]        // if-block "isSWJ"
[03:26:29.646]          // =>  TRUE
[03:26:29.646]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.646]          // if-block "hasDormant"
[03:26:29.646]            // =>  FALSE
[03:26:29.646]          // skip if-block "hasDormant"
[03:26:29.646]        </control>
[03:26:29.646]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.646]          // if-block "!hasDormant"
[03:26:29.646]            // =>  TRUE
[03:26:29.646]          <block atomic="false" info="">
[03:26:29.646]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.652]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.652]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.654]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.658]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.658]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.658]          </block>
[03:26:29.662]          // end if-block "!hasDormant"
[03:26:29.662]        </control>
[03:26:29.662]        // end if-block "isSWJ"
[03:26:29.662]      </control>
[03:26:29.662]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.662]        // if-block "!isSWJ"
[03:26:29.662]          // =>  FALSE
[03:26:29.662]        // skip if-block "!isSWJ"
[03:26:29.662]      </control>
[03:26:29.662]      <block atomic="false" info="">
[03:26:29.662]        ReadDP(0x0);
[03:26:29.662]  
[03:26:29.662]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.662]  
[03:26:29.662]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.662]      </block>
[03:26:29.662]      // end if-block "protType == 2"
[03:26:29.666]    </control>
[03:26:29.666]  </sequence>
[03:26:29.666]  
[03:26:29.728]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.728]  
[03:26:29.729]  <debugvars>
[03:26:29.730]    // Pre-defined
[03:26:29.730]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.730]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.730]    __dp=0x00000000
[03:26:29.730]    __ap=0x00000000
[03:26:29.730]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.730]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.730]    __FlashAddr=0x00000000
[03:26:29.730]    __FlashLen=0x00000000
[03:26:29.730]    __FlashArg=0x00000000
[03:26:29.730]    __FlashOp=0x00000000
[03:26:29.730]    __Result=0x00000000
[03:26:29.730]  </debugvars>
[03:26:29.730]  
[03:26:29.730]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.730]    <block atomic="false" info="">
[03:26:29.730]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.730]        // -> [isSWJ <= 0x00000001]
[03:26:29.730]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.732]        // -> [hasDormant <= 0x00000000]
[03:26:29.732]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.732]        // -> [protType <= 0x00000002]
[03:26:29.732]    </block>
[03:26:29.732]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.732]      // if-block "protType == 1"
[03:26:29.732]        // =>  FALSE
[03:26:29.732]      // skip if-block "protType == 1"
[03:26:29.732]    </control>
[03:26:29.732]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.732]      // if-block "protType == 2"
[03:26:29.732]        // =>  TRUE
[03:26:29.732]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.732]        // if-block "isSWJ"
[03:26:29.732]          // =>  TRUE
[03:26:29.732]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.732]          // if-block "hasDormant"
[03:26:29.732]            // =>  FALSE
[03:26:29.732]          // skip if-block "hasDormant"
[03:26:29.732]        </control>
[03:26:29.732]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.732]          // if-block "!hasDormant"
[03:26:29.732]            // =>  TRUE
[03:26:29.732]          <block atomic="false" info="">
[03:26:29.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.736]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.740]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.744]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.744]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.748]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.748]          </block>
[03:26:29.748]          // end if-block "!hasDormant"
[03:26:29.748]        </control>
[03:26:29.748]        // end if-block "isSWJ"
[03:26:29.748]      </control>
[03:26:29.748]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.748]        // if-block "!isSWJ"
[03:26:29.748]          // =>  FALSE
[03:26:29.748]        // skip if-block "!isSWJ"
[03:26:29.748]      </control>
[03:26:29.748]      <block atomic="false" info="">
[03:26:29.748]        ReadDP(0x0);
[03:26:29.752]  
[03:26:29.752]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.752]  
[03:26:29.752]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.752]      </block>
[03:26:29.752]      // end if-block "protType == 2"
[03:26:29.752]    </control>
[03:26:29.752]  </sequence>
[03:26:29.752]  
[03:26:29.804]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.804]  
[03:26:29.804]  <debugvars>
[03:26:29.804]    // Pre-defined
[03:26:29.804]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.804]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.804]    __dp=0x00000000
[03:26:29.804]    __ap=0x00000000
[03:26:29.804]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.804]    __FlashAddr=0x00000000
[03:26:29.804]    __FlashLen=0x00000000
[03:26:29.804]    __FlashArg=0x00000000
[03:26:29.804]    __FlashOp=0x00000000
[03:26:29.804]    __Result=0x00000000
[03:26:29.804]  </debugvars>
[03:26:29.804]  
[03:26:29.804]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.804]    <block atomic="false" info="">
[03:26:29.804]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.804]        // -> [isSWJ <= 0x00000001]
[03:26:29.804]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.804]        // -> [hasDormant <= 0x00000000]
[03:26:29.804]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.804]        // -> [protType <= 0x00000002]
[03:26:29.804]    </block>
[03:26:29.804]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.808]      // if-block "protType == 1"
[03:26:29.808]        // =>  FALSE
[03:26:29.808]      // skip if-block "protType == 1"
[03:26:29.808]    </control>
[03:26:29.808]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.808]      // if-block "protType == 2"
[03:26:29.808]        // =>  TRUE
[03:26:29.808]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.809]        // if-block "isSWJ"
[03:26:29.809]          // =>  TRUE
[03:26:29.809]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.809]          // if-block "hasDormant"
[03:26:29.809]            // =>  FALSE
[03:26:29.809]          // skip if-block "hasDormant"
[03:26:29.809]        </control>
[03:26:29.809]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.809]          // if-block "!hasDormant"
[03:26:29.809]            // =>  TRUE
[03:26:29.809]          <block atomic="false" info="">
[03:26:29.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.809]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.809]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.812]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.812]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.816]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.818]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.818]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.818]          </block>
[03:26:29.818]          // end if-block "!hasDormant"
[03:26:29.818]        </control>
[03:26:29.818]        // end if-block "isSWJ"
[03:26:29.820]      </control>
[03:26:29.820]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.820]        // if-block "!isSWJ"
[03:26:29.820]          // =>  FALSE
[03:26:29.820]        // skip if-block "!isSWJ"
[03:26:29.820]      </control>
[03:26:29.820]      <block atomic="false" info="">
[03:26:29.820]        ReadDP(0x0);
[03:26:29.820]  
[03:26:29.820]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.820]  
[03:26:29.820]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.820]      </block>
[03:26:29.820]      // end if-block "protType == 2"
[03:26:29.820]    </control>
[03:26:29.820]  </sequence>
[03:26:29.820]  
[03:26:29.876]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.876]  
[03:26:29.876]  <debugvars>
[03:26:29.876]    // Pre-defined
[03:26:29.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.876]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.876]    __dp=0x00000000
[03:26:29.876]    __ap=0x00000000
[03:26:29.876]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.876]    __FlashAddr=0x00000000
[03:26:29.876]    __FlashLen=0x00000000
[03:26:29.876]    __FlashArg=0x00000000
[03:26:29.876]    __FlashOp=0x00000000
[03:26:29.876]    __Result=0x00000000
[03:26:29.876]  </debugvars>
[03:26:29.876]  
[03:26:29.876]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.876]    <block atomic="false" info="">
[03:26:29.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.876]        // -> [isSWJ <= 0x00000001]
[03:26:29.876]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.876]        // -> [hasDormant <= 0x00000000]
[03:26:29.876]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.876]        // -> [protType <= 0x00000002]
[03:26:29.876]    </block>
[03:26:29.876]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.876]      // if-block "protType == 1"
[03:26:29.876]        // =>  FALSE
[03:26:29.876]      // skip if-block "protType == 1"
[03:26:29.876]    </control>
[03:26:29.876]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.876]      // if-block "protType == 2"
[03:26:29.876]        // =>  TRUE
[03:26:29.876]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.880]        // if-block "isSWJ"
[03:26:29.880]          // =>  TRUE
[03:26:29.880]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.880]          // if-block "hasDormant"
[03:26:29.880]            // =>  FALSE
[03:26:29.880]          // skip if-block "hasDormant"
[03:26:29.880]        </control>
[03:26:29.880]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.880]          // if-block "!hasDormant"
[03:26:29.880]            // =>  TRUE
[03:26:29.880]          <block atomic="false" info="">
[03:26:29.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.880]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.884]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.892]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.892]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.894]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.896]          </block>
[03:26:29.896]          // end if-block "!hasDormant"
[03:26:29.896]        </control>
[03:26:29.896]        // end if-block "isSWJ"
[03:26:29.896]      </control>
[03:26:29.896]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.896]        // if-block "!isSWJ"
[03:26:29.896]          // =>  FALSE
[03:26:29.896]        // skip if-block "!isSWJ"
[03:26:29.896]      </control>
[03:26:29.896]      <block atomic="false" info="">
[03:26:29.896]        ReadDP(0x0);
[03:26:29.900]  
[03:26:29.900]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.900]  
[03:26:29.900]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.900]      </block>
[03:26:29.900]      // end if-block "protType == 2"
[03:26:29.900]    </control>
[03:26:29.900]  </sequence>
[03:26:29.900]  
[03:26:29.961]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:29.961]  
[03:26:29.961]  <debugvars>
[03:26:29.961]    // Pre-defined
[03:26:29.961]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:29.961]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:29.961]    __dp=0x00000000
[03:26:29.961]    __ap=0x00000000
[03:26:29.961]    __traceout=0x00000000      (Trace Disabled)
[03:26:29.961]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:29.961]    __FlashAddr=0x00000000
[03:26:29.961]    __FlashLen=0x00000000
[03:26:29.961]    __FlashArg=0x00000000
[03:26:29.961]    __FlashOp=0x00000000
[03:26:29.961]    __Result=0x00000000
[03:26:29.961]  </debugvars>
[03:26:29.961]  
[03:26:29.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:29.961]    <block atomic="false" info="">
[03:26:29.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:29.961]        // -> [isSWJ <= 0x00000001]
[03:26:29.961]      __var hasDormant = __protocol & 0x00020000;
[03:26:29.961]        // -> [hasDormant <= 0x00000000]
[03:26:29.961]      __var protType   = __protocol & 0x0000FFFF;
[03:26:29.961]        // -> [protType <= 0x00000002]
[03:26:29.961]    </block>
[03:26:29.961]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:29.961]      // if-block "protType == 1"
[03:26:29.961]        // =>  FALSE
[03:26:29.961]      // skip if-block "protType == 1"
[03:26:29.961]    </control>
[03:26:29.961]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:29.961]      // if-block "protType == 2"
[03:26:29.961]        // =>  TRUE
[03:26:29.965]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:29.965]        // if-block "isSWJ"
[03:26:29.965]          // =>  TRUE
[03:26:29.965]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:29.965]          // if-block "hasDormant"
[03:26:29.965]            // =>  FALSE
[03:26:29.965]          // skip if-block "hasDormant"
[03:26:29.965]        </control>
[03:26:29.965]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:29.965]          // if-block "!hasDormant"
[03:26:29.965]            // =>  TRUE
[03:26:29.965]          <block atomic="false" info="">
[03:26:29.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:29.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.969]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:29.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:29.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:29.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.973]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:29.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:29.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:29.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:29.977]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:29.977]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:29.977]          </block>
[03:26:29.977]          // end if-block "!hasDormant"
[03:26:29.977]        </control>
[03:26:29.977]        // end if-block "isSWJ"
[03:26:29.977]      </control>
[03:26:29.977]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:29.977]        // if-block "!isSWJ"
[03:26:29.977]          // =>  FALSE
[03:26:29.981]        // skip if-block "!isSWJ"
[03:26:29.981]      </control>
[03:26:29.981]      <block atomic="false" info="">
[03:26:29.981]        ReadDP(0x0);
[03:26:29.985]  
[03:26:29.985]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:29.985]  
[03:26:29.985]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:29.985]      </block>
[03:26:29.985]      // end if-block "protType == 2"
[03:26:29.985]    </control>
[03:26:29.985]  </sequence>
[03:26:29.985]  
[03:26:30.045]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.045]  
[03:26:30.045]  <debugvars>
[03:26:30.045]    // Pre-defined
[03:26:30.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.045]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.045]    __dp=0x00000000
[03:26:30.045]    __ap=0x00000000
[03:26:30.045]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.045]    __FlashAddr=0x00000000
[03:26:30.045]    __FlashLen=0x00000000
[03:26:30.045]    __FlashArg=0x00000000
[03:26:30.045]    __FlashOp=0x00000000
[03:26:30.045]    __Result=0x00000000
[03:26:30.045]  </debugvars>
[03:26:30.045]  
[03:26:30.045]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.045]    <block atomic="false" info="">
[03:26:30.045]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.045]        // -> [isSWJ <= 0x00000001]
[03:26:30.045]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.045]        // -> [hasDormant <= 0x00000000]
[03:26:30.045]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.045]        // -> [protType <= 0x00000002]
[03:26:30.045]    </block>
[03:26:30.045]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.045]      // if-block "protType == 1"
[03:26:30.049]        // =>  FALSE
[03:26:30.049]      // skip if-block "protType == 1"
[03:26:30.049]    </control>
[03:26:30.049]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.049]      // if-block "protType == 2"
[03:26:30.049]        // =>  TRUE
[03:26:30.049]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.049]        // if-block "isSWJ"
[03:26:30.049]          // =>  TRUE
[03:26:30.049]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.049]          // if-block "hasDormant"
[03:26:30.049]            // =>  FALSE
[03:26:30.049]          // skip if-block "hasDormant"
[03:26:30.049]        </control>
[03:26:30.049]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.049]          // if-block "!hasDormant"
[03:26:30.049]            // =>  TRUE
[03:26:30.049]          <block atomic="false" info="">
[03:26:30.049]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.053]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.053]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.057]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.057]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.057]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.057]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.057]          </block>
[03:26:30.061]          // end if-block "!hasDormant"
[03:26:30.061]        </control>
[03:26:30.061]        // end if-block "isSWJ"
[03:26:30.061]      </control>
[03:26:30.061]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.061]        // if-block "!isSWJ"
[03:26:30.061]          // =>  FALSE
[03:26:30.061]        // skip if-block "!isSWJ"
[03:26:30.061]      </control>
[03:26:30.061]      <block atomic="false" info="">
[03:26:30.061]        ReadDP(0x0);
[03:26:30.061]  
[03:26:30.061]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.061]  
[03:26:30.061]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.061]      </block>
[03:26:30.061]      // end if-block "protType == 2"
[03:26:30.061]    </control>
[03:26:30.061]  </sequence>
[03:26:30.065]  
[03:26:30.117]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.117]  
[03:26:30.117]  <debugvars>
[03:26:30.117]    // Pre-defined
[03:26:30.117]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.117]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.117]    __dp=0x00000000
[03:26:30.117]    __ap=0x00000000
[03:26:30.117]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.117]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.117]    __FlashAddr=0x00000000
[03:26:30.117]    __FlashLen=0x00000000
[03:26:30.117]    __FlashArg=0x00000000
[03:26:30.117]    __FlashOp=0x00000000
[03:26:30.117]    __Result=0x00000000
[03:26:30.117]  </debugvars>
[03:26:30.117]  
[03:26:30.117]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.117]    <block atomic="false" info="">
[03:26:30.117]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.117]        // -> [isSWJ <= 0x00000001]
[03:26:30.117]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.117]        // -> [hasDormant <= 0x00000000]
[03:26:30.117]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.117]        // -> [protType <= 0x00000002]
[03:26:30.117]    </block>
[03:26:30.121]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.121]      // if-block "protType == 1"
[03:26:30.121]        // =>  FALSE
[03:26:30.121]      // skip if-block "protType == 1"
[03:26:30.121]    </control>
[03:26:30.121]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.121]      // if-block "protType == 2"
[03:26:30.121]        // =>  TRUE
[03:26:30.121]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.121]        // if-block "isSWJ"
[03:26:30.121]          // =>  TRUE
[03:26:30.121]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.121]          // if-block "hasDormant"
[03:26:30.121]            // =>  FALSE
[03:26:30.121]          // skip if-block "hasDormant"
[03:26:30.121]        </control>
[03:26:30.121]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.121]          // if-block "!hasDormant"
[03:26:30.121]            // =>  TRUE
[03:26:30.121]          <block atomic="false" info="">
[03:26:30.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.125]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.125]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.129]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.129]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.133]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.133]          </block>
[03:26:30.133]          // end if-block "!hasDormant"
[03:26:30.133]        </control>
[03:26:30.133]        // end if-block "isSWJ"
[03:26:30.133]      </control>
[03:26:30.133]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.133]        // if-block "!isSWJ"
[03:26:30.133]          // =>  FALSE
[03:26:30.133]        // skip if-block "!isSWJ"
[03:26:30.133]      </control>
[03:26:30.133]      <block atomic="false" info="">
[03:26:30.133]        ReadDP(0x0);
[03:26:30.137]  
[03:26:30.137]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.137]  
[03:26:30.141]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.141]      </block>
[03:26:30.141]      // end if-block "protType == 2"
[03:26:30.141]    </control>
[03:26:30.141]  </sequence>
[03:26:30.141]  
[03:26:30.202]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.202]  
[03:26:30.202]  <debugvars>
[03:26:30.202]    // Pre-defined
[03:26:30.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.202]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.202]    __dp=0x00000000
[03:26:30.202]    __ap=0x00000000
[03:26:30.202]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.202]    __FlashAddr=0x00000000
[03:26:30.202]    __FlashLen=0x00000000
[03:26:30.202]    __FlashArg=0x00000000
[03:26:30.202]    __FlashOp=0x00000000
[03:26:30.202]    __Result=0x00000000
[03:26:30.204]  </debugvars>
[03:26:30.204]  
[03:26:30.204]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.204]    <block atomic="false" info="">
[03:26:30.204]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.204]        // -> [isSWJ <= 0x00000001]
[03:26:30.204]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.204]        // -> [hasDormant <= 0x00000000]
[03:26:30.205]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.205]        // -> [protType <= 0x00000002]
[03:26:30.205]    </block>
[03:26:30.205]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.205]      // if-block "protType == 1"
[03:26:30.205]        // =>  FALSE
[03:26:30.205]      // skip if-block "protType == 1"
[03:26:30.205]    </control>
[03:26:30.205]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.205]      // if-block "protType == 2"
[03:26:30.206]        // =>  TRUE
[03:26:30.206]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.206]        // if-block "isSWJ"
[03:26:30.206]          // =>  TRUE
[03:26:30.206]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.206]          // if-block "hasDormant"
[03:26:30.206]            // =>  FALSE
[03:26:30.206]          // skip if-block "hasDormant"
[03:26:30.206]        </control>
[03:26:30.206]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.206]          // if-block "!hasDormant"
[03:26:30.206]            // =>  TRUE
[03:26:30.206]          <block atomic="false" info="">
[03:26:30.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.209]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.209]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.211]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.216]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.216]          </block>
[03:26:30.216]          // end if-block "!hasDormant"
[03:26:30.216]        </control>
[03:26:30.216]        // end if-block "isSWJ"
[03:26:30.216]      </control>
[03:26:30.216]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.216]        // if-block "!isSWJ"
[03:26:30.216]          // =>  FALSE
[03:26:30.216]        // skip if-block "!isSWJ"
[03:26:30.216]      </control>
[03:26:30.216]      <block atomic="false" info="">
[03:26:30.216]        ReadDP(0x0);
[03:26:30.219]  
[03:26:30.219]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.219]  
[03:26:30.219]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.219]      </block>
[03:26:30.219]      // end if-block "protType == 2"
[03:26:30.219]    </control>
[03:26:30.219]  </sequence>
[03:26:30.219]  
[03:26:30.275]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.275]  
[03:26:30.275]  <debugvars>
[03:26:30.275]    // Pre-defined
[03:26:30.275]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.275]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.275]    __dp=0x00000000
[03:26:30.275]    __ap=0x00000000
[03:26:30.275]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.275]    __FlashAddr=0x00000000
[03:26:30.275]    __FlashLen=0x00000000
[03:26:30.275]    __FlashArg=0x00000000
[03:26:30.275]    __FlashOp=0x00000000
[03:26:30.275]    __Result=0x00000000
[03:26:30.275]  </debugvars>
[03:26:30.275]  
[03:26:30.275]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.275]    <block atomic="false" info="">
[03:26:30.275]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.275]        // -> [isSWJ <= 0x00000001]
[03:26:30.275]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.275]        // -> [hasDormant <= 0x00000000]
[03:26:30.275]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.275]        // -> [protType <= 0x00000002]
[03:26:30.275]    </block>
[03:26:30.275]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.275]      // if-block "protType == 1"
[03:26:30.275]        // =>  FALSE
[03:26:30.275]      // skip if-block "protType == 1"
[03:26:30.275]    </control>
[03:26:30.275]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.275]      // if-block "protType == 2"
[03:26:30.275]        // =>  TRUE
[03:26:30.275]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.275]        // if-block "isSWJ"
[03:26:30.275]          // =>  TRUE
[03:26:30.275]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.275]          // if-block "hasDormant"
[03:26:30.279]            // =>  FALSE
[03:26:30.279]          // skip if-block "hasDormant"
[03:26:30.279]        </control>
[03:26:30.279]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.279]          // if-block "!hasDormant"
[03:26:30.279]            // =>  TRUE
[03:26:30.279]          <block atomic="false" info="">
[03:26:30.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.279]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.283]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.291]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.291]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.291]          </block>
[03:26:30.291]          // end if-block "!hasDormant"
[03:26:30.291]        </control>
[03:26:30.291]        // end if-block "isSWJ"
[03:26:30.291]      </control>
[03:26:30.291]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.291]        // if-block "!isSWJ"
[03:26:30.291]          // =>  FALSE
[03:26:30.295]        // skip if-block "!isSWJ"
[03:26:30.295]      </control>
[03:26:30.295]      <block atomic="false" info="">
[03:26:30.295]        ReadDP(0x0);
[03:26:30.301]  
[03:26:30.301]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.301]  
[03:26:30.301]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.301]      </block>
[03:26:30.301]      // end if-block "protType == 2"
[03:26:30.301]    </control>
[03:26:30.301]  </sequence>
[03:26:30.301]  
[03:26:30.360]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.360]  
[03:26:30.360]  <debugvars>
[03:26:30.360]    // Pre-defined
[03:26:30.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.360]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.360]    __dp=0x00000000
[03:26:30.360]    __ap=0x00000000
[03:26:30.360]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.360]    __FlashAddr=0x00000000
[03:26:30.360]    __FlashLen=0x00000000
[03:26:30.360]    __FlashArg=0x00000000
[03:26:30.360]    __FlashOp=0x00000000
[03:26:30.360]    __Result=0x00000000
[03:26:30.360]  </debugvars>
[03:26:30.360]  
[03:26:30.360]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.360]    <block atomic="false" info="">
[03:26:30.360]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.360]        // -> [isSWJ <= 0x00000001]
[03:26:30.360]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.360]        // -> [hasDormant <= 0x00000000]
[03:26:30.360]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.360]        // -> [protType <= 0x00000002]
[03:26:30.360]    </block>
[03:26:30.360]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.360]      // if-block "protType == 1"
[03:26:30.360]        // =>  FALSE
[03:26:30.360]      // skip if-block "protType == 1"
[03:26:30.360]    </control>
[03:26:30.360]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.360]      // if-block "protType == 2"
[03:26:30.360]        // =>  TRUE
[03:26:30.364]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.364]        // if-block "isSWJ"
[03:26:30.364]          // =>  TRUE
[03:26:30.364]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.364]          // if-block "hasDormant"
[03:26:30.364]            // =>  FALSE
[03:26:30.364]          // skip if-block "hasDormant"
[03:26:30.364]        </control>
[03:26:30.364]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.364]          // if-block "!hasDormant"
[03:26:30.364]            // =>  TRUE
[03:26:30.364]          <block atomic="false" info="">
[03:26:30.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.368]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.372]          </block>
[03:26:30.376]          // end if-block "!hasDormant"
[03:26:30.376]        </control>
[03:26:30.376]        // end if-block "isSWJ"
[03:26:30.376]      </control>
[03:26:30.376]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.376]        // if-block "!isSWJ"
[03:26:30.376]          // =>  FALSE
[03:26:30.376]        // skip if-block "!isSWJ"
[03:26:30.376]      </control>
[03:26:30.376]      <block atomic="false" info="">
[03:26:30.376]        ReadDP(0x0);
[03:26:30.376]  
[03:26:30.376]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.376]  
[03:26:30.376]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.376]      </block>
[03:26:30.376]      // end if-block "protType == 2"
[03:26:30.376]    </control>
[03:26:30.376]  </sequence>
[03:26:30.376]  
[03:26:30.434]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.434]  
[03:26:30.434]  <debugvars>
[03:26:30.434]    // Pre-defined
[03:26:30.434]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.434]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.434]    __dp=0x00000000
[03:26:30.434]    __ap=0x00000000
[03:26:30.434]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.435]    __FlashAddr=0x00000000
[03:26:30.435]    __FlashLen=0x00000000
[03:26:30.435]    __FlashArg=0x00000000
[03:26:30.435]    __FlashOp=0x00000000
[03:26:30.435]    __Result=0x00000000
[03:26:30.435]  </debugvars>
[03:26:30.435]  
[03:26:30.435]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.435]    <block atomic="false" info="">
[03:26:30.435]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.435]        // -> [isSWJ <= 0x00000001]
[03:26:30.435]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.435]        // -> [hasDormant <= 0x00000000]
[03:26:30.435]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.435]        // -> [protType <= 0x00000002]
[03:26:30.435]    </block>
[03:26:30.435]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.435]      // if-block "protType == 1"
[03:26:30.435]        // =>  FALSE
[03:26:30.437]      // skip if-block "protType == 1"
[03:26:30.437]    </control>
[03:26:30.437]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.437]      // if-block "protType == 2"
[03:26:30.437]        // =>  TRUE
[03:26:30.437]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.437]        // if-block "isSWJ"
[03:26:30.437]          // =>  TRUE
[03:26:30.437]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.437]          // if-block "hasDormant"
[03:26:30.437]            // =>  FALSE
[03:26:30.437]          // skip if-block "hasDormant"
[03:26:30.437]        </control>
[03:26:30.437]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.437]          // if-block "!hasDormant"
[03:26:30.437]            // =>  TRUE
[03:26:30.437]          <block atomic="false" info="">
[03:26:30.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.437]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.441]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.450]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.450]          </block>
[03:26:30.450]          // end if-block "!hasDormant"
[03:26:30.450]        </control>
[03:26:30.450]        // end if-block "isSWJ"
[03:26:30.450]      </control>
[03:26:30.450]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.450]        // if-block "!isSWJ"
[03:26:30.450]          // =>  FALSE
[03:26:30.450]        // skip if-block "!isSWJ"
[03:26:30.450]      </control>
[03:26:30.450]      <block atomic="false" info="">
[03:26:30.450]        ReadDP(0x0);
[03:26:30.450]  
[03:26:30.450]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.450]  
[03:26:30.450]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.450]      </block>
[03:26:30.450]      // end if-block "protType == 2"
[03:26:30.450]    </control>
[03:26:30.450]  </sequence>
[03:26:30.454]  
[03:26:30.506]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.506]  
[03:26:30.506]  <debugvars>
[03:26:30.506]    // Pre-defined
[03:26:30.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.506]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.506]    __dp=0x00000000
[03:26:30.506]    __ap=0x00000000
[03:26:30.506]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.506]    __FlashAddr=0x00000000
[03:26:30.506]    __FlashLen=0x00000000
[03:26:30.506]    __FlashArg=0x00000000
[03:26:30.506]    __FlashOp=0x00000000
[03:26:30.506]    __Result=0x00000000
[03:26:30.506]  </debugvars>
[03:26:30.506]  
[03:26:30.506]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.506]    <block atomic="false" info="">
[03:26:30.506]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.506]        // -> [isSWJ <= 0x00000001]
[03:26:30.506]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.506]        // -> [hasDormant <= 0x00000000]
[03:26:30.506]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.506]        // -> [protType <= 0x00000002]
[03:26:30.506]    </block>
[03:26:30.506]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.506]      // if-block "protType == 1"
[03:26:30.510]        // =>  FALSE
[03:26:30.510]      // skip if-block "protType == 1"
[03:26:30.510]    </control>
[03:26:30.510]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.510]      // if-block "protType == 2"
[03:26:30.510]        // =>  TRUE
[03:26:30.510]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.510]        // if-block "isSWJ"
[03:26:30.510]          // =>  TRUE
[03:26:30.510]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.510]          // if-block "hasDormant"
[03:26:30.510]            // =>  FALSE
[03:26:30.510]          // skip if-block "hasDormant"
[03:26:30.510]        </control>
[03:26:30.510]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.510]          // if-block "!hasDormant"
[03:26:30.510]            // =>  TRUE
[03:26:30.510]          <block atomic="false" info="">
[03:26:30.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.514]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.518]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.522]          </block>
[03:26:30.522]          // end if-block "!hasDormant"
[03:26:30.522]        </control>
[03:26:30.522]        // end if-block "isSWJ"
[03:26:30.522]      </control>
[03:26:30.522]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.522]        // if-block "!isSWJ"
[03:26:30.522]          // =>  FALSE
[03:26:30.522]        // skip if-block "!isSWJ"
[03:26:30.522]      </control>
[03:26:30.522]      <block atomic="false" info="">
[03:26:30.522]        ReadDP(0x0);
[03:26:30.526]  
[03:26:30.526]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.526]  
[03:26:30.526]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.526]      </block>
[03:26:30.526]      // end if-block "protType == 2"
[03:26:30.526]    </control>
[03:26:30.526]  </sequence>
[03:26:30.526]  
[03:26:30.578]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.578]  
[03:26:30.578]  <debugvars>
[03:26:30.578]    // Pre-defined
[03:26:30.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.578]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.578]    __dp=0x00000000
[03:26:30.578]    __ap=0x00000000
[03:26:30.578]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.578]    __FlashAddr=0x00000000
[03:26:30.578]    __FlashLen=0x00000000
[03:26:30.578]    __FlashArg=0x00000000
[03:26:30.578]    __FlashOp=0x00000000
[03:26:30.578]    __Result=0x00000000
[03:26:30.578]  </debugvars>
[03:26:30.578]  
[03:26:30.578]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.578]    <block atomic="false" info="">
[03:26:30.578]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.578]        // -> [isSWJ <= 0x00000001]
[03:26:30.578]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.578]        // -> [hasDormant <= 0x00000000]
[03:26:30.578]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.578]        // -> [protType <= 0x00000002]
[03:26:30.578]    </block>
[03:26:30.578]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.578]      // if-block "protType == 1"
[03:26:30.578]        // =>  FALSE
[03:26:30.578]      // skip if-block "protType == 1"
[03:26:30.578]    </control>
[03:26:30.578]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.578]      // if-block "protType == 2"
[03:26:30.578]        // =>  TRUE
[03:26:30.578]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.582]        // if-block "isSWJ"
[03:26:30.582]          // =>  TRUE
[03:26:30.582]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.582]          // if-block "hasDormant"
[03:26:30.582]            // =>  FALSE
[03:26:30.582]          // skip if-block "hasDormant"
[03:26:30.582]        </control>
[03:26:30.582]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.582]          // if-block "!hasDormant"
[03:26:30.582]            // =>  TRUE
[03:26:30.582]          <block atomic="false" info="">
[03:26:30.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.590]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.590]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.590]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.594]          </block>
[03:26:30.594]          // end if-block "!hasDormant"
[03:26:30.594]        </control>
[03:26:30.594]        // end if-block "isSWJ"
[03:26:30.594]      </control>
[03:26:30.594]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.594]        // if-block "!isSWJ"
[03:26:30.594]          // =>  FALSE
[03:26:30.594]        // skip if-block "!isSWJ"
[03:26:30.594]      </control>
[03:26:30.594]      <block atomic="false" info="">
[03:26:30.594]        ReadDP(0x0);
[03:26:30.598]  
[03:26:30.598]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.598]  
[03:26:30.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.598]      </block>
[03:26:30.598]      // end if-block "protType == 2"
[03:26:30.598]    </control>
[03:26:30.598]  </sequence>
[03:26:30.598]  
[03:26:30.650]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.650]  
[03:26:30.650]  <debugvars>
[03:26:30.650]    // Pre-defined
[03:26:30.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.650]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.650]    __dp=0x00000000
[03:26:30.650]    __ap=0x00000000
[03:26:30.650]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.650]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.650]    __FlashAddr=0x00000000
[03:26:30.650]    __FlashLen=0x00000000
[03:26:30.650]    __FlashArg=0x00000000
[03:26:30.650]    __FlashOp=0x00000000
[03:26:30.650]    __Result=0x00000000
[03:26:30.650]  </debugvars>
[03:26:30.650]  
[03:26:30.650]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.650]    <block atomic="false" info="">
[03:26:30.650]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.650]        // -> [isSWJ <= 0x00000001]
[03:26:30.650]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.650]        // -> [hasDormant <= 0x00000000]
[03:26:30.650]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.650]        // -> [protType <= 0x00000002]
[03:26:30.650]    </block>
[03:26:30.650]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.650]      // if-block "protType == 1"
[03:26:30.650]        // =>  FALSE
[03:26:30.650]      // skip if-block "protType == 1"
[03:26:30.650]    </control>
[03:26:30.650]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.650]      // if-block "protType == 2"
[03:26:30.650]        // =>  TRUE
[03:26:30.654]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.654]        // if-block "isSWJ"
[03:26:30.654]          // =>  TRUE
[03:26:30.654]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.654]          // if-block "hasDormant"
[03:26:30.654]            // =>  FALSE
[03:26:30.654]          // skip if-block "hasDormant"
[03:26:30.654]        </control>
[03:26:30.654]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.654]          // if-block "!hasDormant"
[03:26:30.654]            // =>  TRUE
[03:26:30.654]          <block atomic="false" info="">
[03:26:30.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.654]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.666]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.670]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.670]          </block>
[03:26:30.670]          // end if-block "!hasDormant"
[03:26:30.670]        </control>
[03:26:30.670]        // end if-block "isSWJ"
[03:26:30.670]      </control>
[03:26:30.670]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.670]        // if-block "!isSWJ"
[03:26:30.670]          // =>  FALSE
[03:26:30.670]        // skip if-block "!isSWJ"
[03:26:30.670]      </control>
[03:26:30.670]      <block atomic="false" info="">
[03:26:30.670]        ReadDP(0x0);
[03:26:30.670]  
[03:26:30.670]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.670]  
[03:26:30.674]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.674]      </block>
[03:26:30.674]      // end if-block "protType == 2"
[03:26:30.674]    </control>
[03:26:30.674]  </sequence>
[03:26:30.674]  
[03:26:30.734]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.734]  
[03:26:30.734]  <debugvars>
[03:26:30.734]    // Pre-defined
[03:26:30.734]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.734]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.734]    __dp=0x00000000
[03:26:30.734]    __ap=0x00000000
[03:26:30.734]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.734]    __FlashAddr=0x00000000
[03:26:30.734]    __FlashLen=0x00000000
[03:26:30.734]    __FlashArg=0x00000000
[03:26:30.734]    __FlashOp=0x00000000
[03:26:30.734]    __Result=0x00000000
[03:26:30.734]  </debugvars>
[03:26:30.734]  
[03:26:30.734]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.734]    <block atomic="false" info="">
[03:26:30.734]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.734]        // -> [isSWJ <= 0x00000001]
[03:26:30.734]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.734]        // -> [hasDormant <= 0x00000000]
[03:26:30.734]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.734]        // -> [protType <= 0x00000002]
[03:26:30.734]    </block>
[03:26:30.734]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.734]      // if-block "protType == 1"
[03:26:30.738]        // =>  FALSE
[03:26:30.738]      // skip if-block "protType == 1"
[03:26:30.738]    </control>
[03:26:30.738]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.738]      // if-block "protType == 2"
[03:26:30.738]        // =>  TRUE
[03:26:30.738]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.738]        // if-block "isSWJ"
[03:26:30.738]          // =>  TRUE
[03:26:30.738]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.738]          // if-block "hasDormant"
[03:26:30.738]            // =>  FALSE
[03:26:30.738]          // skip if-block "hasDormant"
[03:26:30.738]        </control>
[03:26:30.738]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.738]          // if-block "!hasDormant"
[03:26:30.738]            // =>  TRUE
[03:26:30.738]          <block atomic="false" info="">
[03:26:30.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.742]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.742]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.746]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.746]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.750]          </block>
[03:26:30.750]          // end if-block "!hasDormant"
[03:26:30.750]        </control>
[03:26:30.750]        // end if-block "isSWJ"
[03:26:30.750]      </control>
[03:26:30.750]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.750]        // if-block "!isSWJ"
[03:26:30.750]          // =>  FALSE
[03:26:30.750]        // skip if-block "!isSWJ"
[03:26:30.750]      </control>
[03:26:30.750]      <block atomic="false" info="">
[03:26:30.750]        ReadDP(0x0);
[03:26:30.750]  
[03:26:30.750]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.750]  
[03:26:30.750]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.750]      </block>
[03:26:30.750]      // end if-block "protType == 2"
[03:26:30.750]    </control>
[03:26:30.750]  </sequence>
[03:26:30.750]  
[03:26:30.806]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.806]  
[03:26:30.806]  <debugvars>
[03:26:30.806]    // Pre-defined
[03:26:30.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.806]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.806]    __dp=0x00000000
[03:26:30.806]    __ap=0x00000000
[03:26:30.806]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.806]    __FlashAddr=0x00000000
[03:26:30.806]    __FlashLen=0x00000000
[03:26:30.806]    __FlashArg=0x00000000
[03:26:30.806]    __FlashOp=0x00000000
[03:26:30.806]    __Result=0x00000000
[03:26:30.806]  </debugvars>
[03:26:30.806]  
[03:26:30.806]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.806]    <block atomic="false" info="">
[03:26:30.806]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.806]        // -> [isSWJ <= 0x00000001]
[03:26:30.806]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.806]        // -> [hasDormant <= 0x00000000]
[03:26:30.806]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.810]        // -> [protType <= 0x00000002]
[03:26:30.810]    </block>
[03:26:30.810]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.810]      // if-block "protType == 1"
[03:26:30.810]        // =>  FALSE
[03:26:30.810]      // skip if-block "protType == 1"
[03:26:30.810]    </control>
[03:26:30.810]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.810]      // if-block "protType == 2"
[03:26:30.810]        // =>  TRUE
[03:26:30.810]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.810]        // if-block "isSWJ"
[03:26:30.810]          // =>  TRUE
[03:26:30.810]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.810]          // if-block "hasDormant"
[03:26:30.810]            // =>  FALSE
[03:26:30.810]          // skip if-block "hasDormant"
[03:26:30.810]        </control>
[03:26:30.810]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.810]          // if-block "!hasDormant"
[03:26:30.810]            // =>  TRUE
[03:26:30.810]          <block atomic="false" info="">
[03:26:30.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.814]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.818]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.818]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.818]          </block>
[03:26:30.822]          // end if-block "!hasDormant"
[03:26:30.822]        </control>
[03:26:30.822]        // end if-block "isSWJ"
[03:26:30.822]      </control>
[03:26:30.822]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.822]        // if-block "!isSWJ"
[03:26:30.822]          // =>  FALSE
[03:26:30.822]        // skip if-block "!isSWJ"
[03:26:30.822]      </control>
[03:26:30.822]      <block atomic="false" info="">
[03:26:30.822]        ReadDP(0x0);
[03:26:30.822]  
[03:26:30.822]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.822]  
[03:26:30.822]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.822]      </block>
[03:26:30.822]      // end if-block "protType == 2"
[03:26:30.822]    </control>
[03:26:30.822]  </sequence>
[03:26:30.822]  
[03:26:30.878]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.878]  
[03:26:30.878]  <debugvars>
[03:26:30.878]    // Pre-defined
[03:26:30.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.878]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.878]    __dp=0x00000000
[03:26:30.878]    __ap=0x00000000
[03:26:30.878]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.878]    __FlashAddr=0x00000000
[03:26:30.878]    __FlashLen=0x00000000
[03:26:30.878]    __FlashArg=0x00000000
[03:26:30.878]    __FlashOp=0x00000000
[03:26:30.878]    __Result=0x00000000
[03:26:30.878]  </debugvars>
[03:26:30.878]  
[03:26:30.878]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.878]    <block atomic="false" info="">
[03:26:30.878]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.878]        // -> [isSWJ <= 0x00000001]
[03:26:30.878]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.878]        // -> [hasDormant <= 0x00000000]
[03:26:30.878]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.878]        // -> [protType <= 0x00000002]
[03:26:30.882]    </block>
[03:26:30.882]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.882]      // if-block "protType == 1"
[03:26:30.882]        // =>  FALSE
[03:26:30.882]      // skip if-block "protType == 1"
[03:26:30.882]    </control>
[03:26:30.882]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.882]      // if-block "protType == 2"
[03:26:30.882]        // =>  TRUE
[03:26:30.882]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.882]        // if-block "isSWJ"
[03:26:30.882]          // =>  TRUE
[03:26:30.882]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.882]          // if-block "hasDormant"
[03:26:30.882]            // =>  FALSE
[03:26:30.882]          // skip if-block "hasDormant"
[03:26:30.882]        </control>
[03:26:30.882]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.882]          // if-block "!hasDormant"
[03:26:30.882]            // =>  TRUE
[03:26:30.882]          <block atomic="false" info="">
[03:26:30.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.886]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.890]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.890]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.890]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.890]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.890]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.894]          </block>
[03:26:30.894]          // end if-block "!hasDormant"
[03:26:30.894]        </control>
[03:26:30.894]        // end if-block "isSWJ"
[03:26:30.894]      </control>
[03:26:30.894]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.894]        // if-block "!isSWJ"
[03:26:30.894]          // =>  FALSE
[03:26:30.894]        // skip if-block "!isSWJ"
[03:26:30.894]      </control>
[03:26:30.894]      <block atomic="false" info="">
[03:26:30.894]        ReadDP(0x0);
[03:26:30.898]  
[03:26:30.898]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.898]  
[03:26:30.898]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.898]      </block>
[03:26:30.898]      // end if-block "protType == 2"
[03:26:30.898]    </control>
[03:26:30.898]  </sequence>
[03:26:30.898]  
[03:26:30.951]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:30.951]  
[03:26:30.951]  <debugvars>
[03:26:30.951]    // Pre-defined
[03:26:30.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:30.951]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:30.951]    __dp=0x00000000
[03:26:30.951]    __ap=0x00000000
[03:26:30.951]    __traceout=0x00000000      (Trace Disabled)
[03:26:30.951]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:30.951]    __FlashAddr=0x00000000
[03:26:30.951]    __FlashLen=0x00000000
[03:26:30.951]    __FlashArg=0x00000000
[03:26:30.951]    __FlashOp=0x00000000
[03:26:30.951]    __Result=0x00000000
[03:26:30.951]  </debugvars>
[03:26:30.951]  
[03:26:30.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:30.951]    <block atomic="false" info="">
[03:26:30.951]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:30.951]        // -> [isSWJ <= 0x00000001]
[03:26:30.951]      __var hasDormant = __protocol & 0x00020000;
[03:26:30.951]        // -> [hasDormant <= 0x00000000]
[03:26:30.951]      __var protType   = __protocol & 0x0000FFFF;
[03:26:30.951]        // -> [protType <= 0x00000002]
[03:26:30.951]    </block>
[03:26:30.951]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:30.951]      // if-block "protType == 1"
[03:26:30.951]        // =>  FALSE
[03:26:30.951]      // skip if-block "protType == 1"
[03:26:30.951]    </control>
[03:26:30.951]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:30.951]      // if-block "protType == 2"
[03:26:30.951]        // =>  TRUE
[03:26:30.955]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:30.955]        // if-block "isSWJ"
[03:26:30.955]          // =>  TRUE
[03:26:30.955]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:30.955]          // if-block "hasDormant"
[03:26:30.955]            // =>  FALSE
[03:26:30.955]          // skip if-block "hasDormant"
[03:26:30.955]        </control>
[03:26:30.955]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:30.955]          // if-block "!hasDormant"
[03:26:30.955]            // =>  TRUE
[03:26:30.955]          <block atomic="false" info="">
[03:26:30.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:30.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.955]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:30.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:30.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:30.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.963]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:30.963]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:30.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:30.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:30.967]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:30.971]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:30.971]          </block>
[03:26:30.971]          // end if-block "!hasDormant"
[03:26:30.971]        </control>
[03:26:30.971]        // end if-block "isSWJ"
[03:26:30.971]      </control>
[03:26:30.971]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:30.971]        // if-block "!isSWJ"
[03:26:30.971]          // =>  FALSE
[03:26:30.971]        // skip if-block "!isSWJ"
[03:26:30.971]      </control>
[03:26:30.971]      <block atomic="false" info="">
[03:26:30.971]        ReadDP(0x0);
[03:26:30.975]  
[03:26:30.975]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:30.975]  
[03:26:30.975]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:30.975]      </block>
[03:26:30.975]      // end if-block "protType == 2"
[03:26:30.975]    </control>
[03:26:30.975]  </sequence>
[03:26:30.975]  
[03:26:31.035]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.035]  
[03:26:31.035]  <debugvars>
[03:26:31.035]    // Pre-defined
[03:26:31.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.035]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.035]    __dp=0x00000000
[03:26:31.035]    __ap=0x00000000
[03:26:31.035]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.035]    __FlashAddr=0x00000000
[03:26:31.035]    __FlashLen=0x00000000
[03:26:31.035]    __FlashArg=0x00000000
[03:26:31.035]    __FlashOp=0x00000000
[03:26:31.035]    __Result=0x00000000
[03:26:31.035]  </debugvars>
[03:26:31.035]  
[03:26:31.035]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.035]    <block atomic="false" info="">
[03:26:31.035]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.035]        // -> [isSWJ <= 0x00000001]
[03:26:31.035]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.035]        // -> [hasDormant <= 0x00000000]
[03:26:31.035]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.035]        // -> [protType <= 0x00000002]
[03:26:31.035]    </block>
[03:26:31.035]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.035]      // if-block "protType == 1"
[03:26:31.035]        // =>  FALSE
[03:26:31.035]      // skip if-block "protType == 1"
[03:26:31.035]    </control>
[03:26:31.035]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.035]      // if-block "protType == 2"
[03:26:31.039]        // =>  TRUE
[03:26:31.039]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.039]        // if-block "isSWJ"
[03:26:31.039]          // =>  TRUE
[03:26:31.039]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.039]          // if-block "hasDormant"
[03:26:31.039]            // =>  FALSE
[03:26:31.039]          // skip if-block "hasDormant"
[03:26:31.039]        </control>
[03:26:31.039]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.039]          // if-block "!hasDormant"
[03:26:31.039]            // =>  TRUE
[03:26:31.039]          <block atomic="false" info="">
[03:26:31.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.039]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.043]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.043]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.043]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.047]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.047]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.047]          </block>
[03:26:31.047]          // end if-block "!hasDormant"
[03:26:31.051]        </control>
[03:26:31.051]        // end if-block "isSWJ"
[03:26:31.051]      </control>
[03:26:31.051]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.051]        // if-block "!isSWJ"
[03:26:31.051]          // =>  FALSE
[03:26:31.051]        // skip if-block "!isSWJ"
[03:26:31.051]      </control>
[03:26:31.051]      <block atomic="false" info="">
[03:26:31.051]        ReadDP(0x0);
[03:26:31.051]  
[03:26:31.051]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.051]  
[03:26:31.051]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.051]      </block>
[03:26:31.051]      // end if-block "protType == 2"
[03:26:31.051]    </control>
[03:26:31.051]  </sequence>
[03:26:31.051]  
[03:26:31.107]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.107]  
[03:26:31.107]  <debugvars>
[03:26:31.107]    // Pre-defined
[03:26:31.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.107]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.107]    __dp=0x00000000
[03:26:31.107]    __ap=0x00000000
[03:26:31.107]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.107]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.107]    __FlashAddr=0x00000000
[03:26:31.107]    __FlashLen=0x00000000
[03:26:31.107]    __FlashArg=0x00000000
[03:26:31.107]    __FlashOp=0x00000000
[03:26:31.107]    __Result=0x00000000
[03:26:31.107]  </debugvars>
[03:26:31.107]  
[03:26:31.107]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.107]    <block atomic="false" info="">
[03:26:31.107]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.107]        // -> [isSWJ <= 0x00000001]
[03:26:31.107]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.107]        // -> [hasDormant <= 0x00000000]
[03:26:31.107]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.107]        // -> [protType <= 0x00000002]
[03:26:31.107]    </block>
[03:26:31.107]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.107]      // if-block "protType == 1"
[03:26:31.107]        // =>  FALSE
[03:26:31.107]      // skip if-block "protType == 1"
[03:26:31.107]    </control>
[03:26:31.107]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.111]      // if-block "protType == 2"
[03:26:31.111]        // =>  TRUE
[03:26:31.111]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.111]        // if-block "isSWJ"
[03:26:31.111]          // =>  TRUE
[03:26:31.111]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.111]          // if-block "hasDormant"
[03:26:31.111]            // =>  FALSE
[03:26:31.111]          // skip if-block "hasDormant"
[03:26:31.111]        </control>
[03:26:31.111]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.111]          // if-block "!hasDormant"
[03:26:31.111]            // =>  TRUE
[03:26:31.111]          <block atomic="false" info="">
[03:26:31.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.111]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.119]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.119]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.119]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.119]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.119]          </block>
[03:26:31.123]          // end if-block "!hasDormant"
[03:26:31.123]        </control>
[03:26:31.123]        // end if-block "isSWJ"
[03:26:31.123]      </control>
[03:26:31.123]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.123]        // if-block "!isSWJ"
[03:26:31.123]          // =>  FALSE
[03:26:31.123]        // skip if-block "!isSWJ"
[03:26:31.123]      </control>
[03:26:31.123]      <block atomic="false" info="">
[03:26:31.123]        ReadDP(0x0);
[03:26:31.123]  
[03:26:31.123]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.123]  
[03:26:31.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.123]      </block>
[03:26:31.123]      // end if-block "protType == 2"
[03:26:31.123]    </control>
[03:26:31.123]  </sequence>
[03:26:31.123]  
[03:26:31.179]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.179]  
[03:26:31.179]  <debugvars>
[03:26:31.179]    // Pre-defined
[03:26:31.179]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.179]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.179]    __dp=0x00000000
[03:26:31.179]    __ap=0x00000000
[03:26:31.179]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.179]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.179]    __FlashAddr=0x00000000
[03:26:31.179]    __FlashLen=0x00000000
[03:26:31.179]    __FlashArg=0x00000000
[03:26:31.179]    __FlashOp=0x00000000
[03:26:31.179]    __Result=0x00000000
[03:26:31.179]  </debugvars>
[03:26:31.179]  
[03:26:31.179]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.179]    <block atomic="false" info="">
[03:26:31.179]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.179]        // -> [isSWJ <= 0x00000001]
[03:26:31.183]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.183]        // -> [hasDormant <= 0x00000000]
[03:26:31.183]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.183]        // -> [protType <= 0x00000002]
[03:26:31.183]    </block>
[03:26:31.183]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.183]      // if-block "protType == 1"
[03:26:31.183]        // =>  FALSE
[03:26:31.183]      // skip if-block "protType == 1"
[03:26:31.183]    </control>
[03:26:31.183]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.183]      // if-block "protType == 2"
[03:26:31.183]        // =>  TRUE
[03:26:31.183]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.183]        // if-block "isSWJ"
[03:26:31.183]          // =>  TRUE
[03:26:31.183]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.183]          // if-block "hasDormant"
[03:26:31.183]            // =>  FALSE
[03:26:31.183]          // skip if-block "hasDormant"
[03:26:31.183]        </control>
[03:26:31.183]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.183]          // if-block "!hasDormant"
[03:26:31.183]            // =>  TRUE
[03:26:31.183]          <block atomic="false" info="">
[03:26:31.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.187]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.193]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.193]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.195]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.195]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.195]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.199]          </block>
[03:26:31.199]          // end if-block "!hasDormant"
[03:26:31.199]        </control>
[03:26:31.199]        // end if-block "isSWJ"
[03:26:31.199]      </control>
[03:26:31.199]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.199]        // if-block "!isSWJ"
[03:26:31.199]          // =>  FALSE
[03:26:31.199]        // skip if-block "!isSWJ"
[03:26:31.199]      </control>
[03:26:31.199]      <block atomic="false" info="">
[03:26:31.199]        ReadDP(0x0);
[03:26:31.199]  
[03:26:31.199]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.199]  
[03:26:31.199]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.199]      </block>
[03:26:31.199]      // end if-block "protType == 2"
[03:26:31.199]    </control>
[03:26:31.199]  </sequence>
[03:26:31.199]  
[03:26:31.265]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.265]  
[03:26:31.265]  <debugvars>
[03:26:31.265]    // Pre-defined
[03:26:31.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.265]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.265]    __dp=0x00000000
[03:26:31.265]    __ap=0x00000000
[03:26:31.265]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.265]    __FlashAddr=0x00000000
[03:26:31.265]    __FlashLen=0x00000000
[03:26:31.265]    __FlashArg=0x00000000
[03:26:31.265]    __FlashOp=0x00000000
[03:26:31.265]    __Result=0x00000000
[03:26:31.265]  </debugvars>
[03:26:31.265]  
[03:26:31.265]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.265]    <block atomic="false" info="">
[03:26:31.265]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.265]        // -> [isSWJ <= 0x00000001]
[03:26:31.265]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.265]        // -> [hasDormant <= 0x00000000]
[03:26:31.265]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.265]        // -> [protType <= 0x00000002]
[03:26:31.265]    </block>
[03:26:31.265]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.265]      // if-block "protType == 1"
[03:26:31.265]        // =>  FALSE
[03:26:31.265]      // skip if-block "protType == 1"
[03:26:31.265]    </control>
[03:26:31.265]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.265]      // if-block "protType == 2"
[03:26:31.269]        // =>  TRUE
[03:26:31.269]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.269]        // if-block "isSWJ"
[03:26:31.269]          // =>  TRUE
[03:26:31.269]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.269]          // if-block "hasDormant"
[03:26:31.269]            // =>  FALSE
[03:26:31.269]          // skip if-block "hasDormant"
[03:26:31.269]        </control>
[03:26:31.269]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.269]          // if-block "!hasDormant"
[03:26:31.269]            // =>  TRUE
[03:26:31.269]          <block atomic="false" info="">
[03:26:31.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.279]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.281]          </block>
[03:26:31.281]          // end if-block "!hasDormant"
[03:26:31.285]        </control>
[03:26:31.285]        // end if-block "isSWJ"
[03:26:31.285]      </control>
[03:26:31.285]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.285]        // if-block "!isSWJ"
[03:26:31.285]          // =>  FALSE
[03:26:31.285]        // skip if-block "!isSWJ"
[03:26:31.286]      </control>
[03:26:31.286]      <block atomic="false" info="">
[03:26:31.286]        ReadDP(0x0);
[03:26:31.291]  
[03:26:31.291]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.291]  
[03:26:31.291]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.291]      </block>
[03:26:31.291]      // end if-block "protType == 2"
[03:26:31.291]    </control>
[03:26:31.291]  </sequence>
[03:26:31.291]  
[03:26:31.352]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.352]  
[03:26:31.352]  <debugvars>
[03:26:31.352]    // Pre-defined
[03:26:31.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.352]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.352]    __dp=0x00000000
[03:26:31.352]    __ap=0x00000000
[03:26:31.352]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.353]    __FlashAddr=0x00000000
[03:26:31.353]    __FlashLen=0x00000000
[03:26:31.353]    __FlashArg=0x00000000
[03:26:31.353]    __FlashOp=0x00000000
[03:26:31.353]    __Result=0x00000000
[03:26:31.353]  </debugvars>
[03:26:31.353]  
[03:26:31.353]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.353]    <block atomic="false" info="">
[03:26:31.353]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.353]        // -> [isSWJ <= 0x00000001]
[03:26:31.353]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.353]        // -> [hasDormant <= 0x00000000]
[03:26:31.353]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.353]        // -> [protType <= 0x00000002]
[03:26:31.353]    </block>
[03:26:31.353]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.353]      // if-block "protType == 1"
[03:26:31.355]        // =>  FALSE
[03:26:31.355]      // skip if-block "protType == 1"
[03:26:31.355]    </control>
[03:26:31.355]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.355]      // if-block "protType == 2"
[03:26:31.355]        // =>  TRUE
[03:26:31.355]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.355]        // if-block "isSWJ"
[03:26:31.355]          // =>  TRUE
[03:26:31.355]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.355]          // if-block "hasDormant"
[03:26:31.355]            // =>  FALSE
[03:26:31.355]          // skip if-block "hasDormant"
[03:26:31.355]        </control>
[03:26:31.355]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.355]          // if-block "!hasDormant"
[03:26:31.355]            // =>  TRUE
[03:26:31.355]          <block atomic="false" info="">
[03:26:31.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.355]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.363]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.367]          </block>
[03:26:31.367]          // end if-block "!hasDormant"
[03:26:31.367]        </control>
[03:26:31.367]        // end if-block "isSWJ"
[03:26:31.367]      </control>
[03:26:31.367]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.367]        // if-block "!isSWJ"
[03:26:31.367]          // =>  FALSE
[03:26:31.367]        // skip if-block "!isSWJ"
[03:26:31.367]      </control>
[03:26:31.367]      <block atomic="false" info="">
[03:26:31.367]        ReadDP(0x0);
[03:26:31.371]  
[03:26:31.371]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.371]  
[03:26:31.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.371]      </block>
[03:26:31.371]      // end if-block "protType == 2"
[03:26:31.371]    </control>
[03:26:31.371]  </sequence>
[03:26:31.371]  
[03:26:31.424]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.424]  
[03:26:31.424]  <debugvars>
[03:26:31.424]    // Pre-defined
[03:26:31.424]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.424]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.424]    __dp=0x00000000
[03:26:31.424]    __ap=0x00000000
[03:26:31.424]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.424]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.424]    __FlashAddr=0x00000000
[03:26:31.424]    __FlashLen=0x00000000
[03:26:31.424]    __FlashArg=0x00000000
[03:26:31.424]    __FlashOp=0x00000000
[03:26:31.424]    __Result=0x00000000
[03:26:31.424]  </debugvars>
[03:26:31.424]  
[03:26:31.424]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.424]    <block atomic="false" info="">
[03:26:31.424]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.424]        // -> [isSWJ <= 0x00000001]
[03:26:31.424]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.424]        // -> [hasDormant <= 0x00000000]
[03:26:31.424]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.424]        // -> [protType <= 0x00000002]
[03:26:31.424]    </block>
[03:26:31.424]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.424]      // if-block "protType == 1"
[03:26:31.424]        // =>  FALSE
[03:26:31.428]      // skip if-block "protType == 1"
[03:26:31.428]    </control>
[03:26:31.428]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.428]      // if-block "protType == 2"
[03:26:31.428]        // =>  TRUE
[03:26:31.429]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.429]        // if-block "isSWJ"
[03:26:31.429]          // =>  TRUE
[03:26:31.429]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.429]          // if-block "hasDormant"
[03:26:31.429]            // =>  FALSE
[03:26:31.429]          // skip if-block "hasDormant"
[03:26:31.429]        </control>
[03:26:31.429]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.429]          // if-block "!hasDormant"
[03:26:31.429]            // =>  TRUE
[03:26:31.429]          <block atomic="false" info="">
[03:26:31.429]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.431]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.431]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.431]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.431]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.431]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.431]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.435]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.439]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.439]          </block>
[03:26:31.439]          // end if-block "!hasDormant"
[03:26:31.439]        </control>
[03:26:31.439]        // end if-block "isSWJ"
[03:26:31.440]      </control>
[03:26:31.440]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.440]        // if-block "!isSWJ"
[03:26:31.440]          // =>  FALSE
[03:26:31.440]        // skip if-block "!isSWJ"
[03:26:31.440]      </control>
[03:26:31.440]      <block atomic="false" info="">
[03:26:31.440]        ReadDP(0x0);
[03:26:31.442]  
[03:26:31.442]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.442]  
[03:26:31.442]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.442]      </block>
[03:26:31.442]      // end if-block "protType == 2"
[03:26:31.442]    </control>
[03:26:31.442]  </sequence>
[03:26:31.442]  
[03:26:31.498]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.498]  
[03:26:31.498]  <debugvars>
[03:26:31.498]    // Pre-defined
[03:26:31.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.498]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.498]    __dp=0x00000000
[03:26:31.498]    __ap=0x00000000
[03:26:31.498]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.498]    __FlashAddr=0x00000000
[03:26:31.498]    __FlashLen=0x00000000
[03:26:31.498]    __FlashArg=0x00000000
[03:26:31.498]    __FlashOp=0x00000000
[03:26:31.498]    __Result=0x00000000
[03:26:31.498]  </debugvars>
[03:26:31.498]  
[03:26:31.498]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.498]    <block atomic="false" info="">
[03:26:31.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.500]        // -> [isSWJ <= 0x00000001]
[03:26:31.500]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.500]        // -> [hasDormant <= 0x00000000]
[03:26:31.500]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.500]        // -> [protType <= 0x00000002]
[03:26:31.500]    </block>
[03:26:31.500]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.501]      // if-block "protType == 1"
[03:26:31.501]        // =>  FALSE
[03:26:31.501]      // skip if-block "protType == 1"
[03:26:31.501]    </control>
[03:26:31.501]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.501]      // if-block "protType == 2"
[03:26:31.501]        // =>  TRUE
[03:26:31.501]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.501]        // if-block "isSWJ"
[03:26:31.501]          // =>  TRUE
[03:26:31.502]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.502]          // if-block "hasDormant"
[03:26:31.502]            // =>  FALSE
[03:26:31.502]          // skip if-block "hasDormant"
[03:26:31.502]        </control>
[03:26:31.502]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.502]          // if-block "!hasDormant"
[03:26:31.502]            // =>  TRUE
[03:26:31.502]          <block atomic="false" info="">
[03:26:31.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.504]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.507]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.507]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.508]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.511]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.515]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.515]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.519]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.519]          </block>
[03:26:31.519]          // end if-block "!hasDormant"
[03:26:31.519]        </control>
[03:26:31.519]        // end if-block "isSWJ"
[03:26:31.519]      </control>
[03:26:31.519]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.519]        // if-block "!isSWJ"
[03:26:31.519]          // =>  FALSE
[03:26:31.522]        // skip if-block "!isSWJ"
[03:26:31.522]      </control>
[03:26:31.522]      <block atomic="false" info="">
[03:26:31.522]        ReadDP(0x0);
[03:26:31.523]  
[03:26:31.523]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.523]  
[03:26:31.523]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.523]      </block>
[03:26:31.523]      // end if-block "protType == 2"
[03:26:31.523]    </control>
[03:26:31.523]  </sequence>
[03:26:31.523]  
[03:26:31.585]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.585]  
[03:26:31.585]  <debugvars>
[03:26:31.585]    // Pre-defined
[03:26:31.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.585]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.585]    __dp=0x00000000
[03:26:31.585]    __ap=0x00000000
[03:26:31.585]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.585]    __FlashAddr=0x00000000
[03:26:31.585]    __FlashLen=0x00000000
[03:26:31.585]    __FlashArg=0x00000000
[03:26:31.585]    __FlashOp=0x00000000
[03:26:31.585]    __Result=0x00000000
[03:26:31.585]  </debugvars>
[03:26:31.585]  
[03:26:31.587]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.587]    <block atomic="false" info="">
[03:26:31.587]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.587]        // -> [isSWJ <= 0x00000001]
[03:26:31.587]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.587]        // -> [hasDormant <= 0x00000000]
[03:26:31.587]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.587]        // -> [protType <= 0x00000002]
[03:26:31.587]    </block>
[03:26:31.587]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.587]      // if-block "protType == 1"
[03:26:31.587]        // =>  FALSE
[03:26:31.588]      // skip if-block "protType == 1"
[03:26:31.588]    </control>
[03:26:31.588]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.588]      // if-block "protType == 2"
[03:26:31.588]        // =>  TRUE
[03:26:31.588]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.588]        // if-block "isSWJ"
[03:26:31.588]          // =>  TRUE
[03:26:31.588]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.588]          // if-block "hasDormant"
[03:26:31.589]            // =>  FALSE
[03:26:31.589]          // skip if-block "hasDormant"
[03:26:31.590]        </control>
[03:26:31.590]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.590]          // if-block "!hasDormant"
[03:26:31.590]            // =>  TRUE
[03:26:31.590]          <block atomic="false" info="">
[03:26:31.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.593]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.598]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.599]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.601]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.601]          </block>
[03:26:31.601]          // end if-block "!hasDormant"
[03:26:31.601]        </control>
[03:26:31.601]        // end if-block "isSWJ"
[03:26:31.601]      </control>
[03:26:31.601]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.601]        // if-block "!isSWJ"
[03:26:31.601]          // =>  FALSE
[03:26:31.604]        // skip if-block "!isSWJ"
[03:26:31.604]      </control>
[03:26:31.604]      <block atomic="false" info="">
[03:26:31.604]        ReadDP(0x0);
[03:26:31.604]  
[03:26:31.604]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.604]  
[03:26:31.606]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.606]      </block>
[03:26:31.606]      // end if-block "protType == 2"
[03:26:31.606]    </control>
[03:26:31.606]  </sequence>
[03:26:31.606]  
[03:26:31.659]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.659]  
[03:26:31.659]  <debugvars>
[03:26:31.659]    // Pre-defined
[03:26:31.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.659]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.659]    __dp=0x00000000
[03:26:31.659]    __ap=0x00000000
[03:26:31.659]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.659]    __FlashAddr=0x00000000
[03:26:31.659]    __FlashLen=0x00000000
[03:26:31.661]    __FlashArg=0x00000000
[03:26:31.661]    __FlashOp=0x00000000
[03:26:31.661]    __Result=0x00000000
[03:26:31.661]  </debugvars>
[03:26:31.661]  
[03:26:31.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.661]    <block atomic="false" info="">
[03:26:31.661]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.661]        // -> [isSWJ <= 0x00000001]
[03:26:31.661]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.661]        // -> [hasDormant <= 0x00000000]
[03:26:31.661]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.661]        // -> [protType <= 0x00000002]
[03:26:31.661]    </block>
[03:26:31.661]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.661]      // if-block "protType == 1"
[03:26:31.663]        // =>  FALSE
[03:26:31.663]      // skip if-block "protType == 1"
[03:26:31.663]    </control>
[03:26:31.663]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.663]      // if-block "protType == 2"
[03:26:31.663]        // =>  TRUE
[03:26:31.663]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.663]        // if-block "isSWJ"
[03:26:31.664]          // =>  TRUE
[03:26:31.664]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.664]          // if-block "hasDormant"
[03:26:31.664]            // =>  FALSE
[03:26:31.664]          // skip if-block "hasDormant"
[03:26:31.664]        </control>
[03:26:31.664]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.664]          // if-block "!hasDormant"
[03:26:31.664]            // =>  TRUE
[03:26:31.664]          <block atomic="false" info="">
[03:26:31.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.664]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.667]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.671]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.671]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.675]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.675]          </block>
[03:26:31.675]          // end if-block "!hasDormant"
[03:26:31.675]        </control>
[03:26:31.675]        // end if-block "isSWJ"
[03:26:31.675]      </control>
[03:26:31.675]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.675]        // if-block "!isSWJ"
[03:26:31.675]          // =>  FALSE
[03:26:31.675]        // skip if-block "!isSWJ"
[03:26:31.675]      </control>
[03:26:31.675]      <block atomic="false" info="">
[03:26:31.675]        ReadDP(0x0);
[03:26:31.686]  
[03:26:31.686]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.686]  
[03:26:31.688]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.688]      </block>
[03:26:31.688]      // end if-block "protType == 2"
[03:26:31.688]    </control>
[03:26:31.688]  </sequence>
[03:26:31.688]  
[03:26:31.745]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.745]  
[03:26:31.745]  <debugvars>
[03:26:31.745]    // Pre-defined
[03:26:31.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.745]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.745]    __dp=0x00000000
[03:26:31.745]    __ap=0x00000000
[03:26:31.745]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.745]    __FlashAddr=0x00000000
[03:26:31.745]    __FlashLen=0x00000000
[03:26:31.745]    __FlashArg=0x00000000
[03:26:31.745]    __FlashOp=0x00000000
[03:26:31.745]    __Result=0x00000000
[03:26:31.745]  </debugvars>
[03:26:31.745]  
[03:26:31.745]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.745]    <block atomic="false" info="">
[03:26:31.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.745]        // -> [isSWJ <= 0x00000001]
[03:26:31.745]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.745]        // -> [hasDormant <= 0x00000000]
[03:26:31.745]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.745]        // -> [protType <= 0x00000002]
[03:26:31.745]    </block>
[03:26:31.745]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.745]      // if-block "protType == 1"
[03:26:31.745]        // =>  FALSE
[03:26:31.749]      // skip if-block "protType == 1"
[03:26:31.749]    </control>
[03:26:31.749]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.749]      // if-block "protType == 2"
[03:26:31.749]        // =>  TRUE
[03:26:31.749]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.749]        // if-block "isSWJ"
[03:26:31.749]          // =>  TRUE
[03:26:31.749]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.749]          // if-block "hasDormant"
[03:26:31.749]            // =>  FALSE
[03:26:31.751]          // skip if-block "hasDormant"
[03:26:31.751]        </control>
[03:26:31.751]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.751]          // if-block "!hasDormant"
[03:26:31.751]            // =>  TRUE
[03:26:31.751]          <block atomic="false" info="">
[03:26:31.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.753]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.756]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.758]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.762]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.763]          </block>
[03:26:31.763]          // end if-block "!hasDormant"
[03:26:31.763]        </control>
[03:26:31.763]        // end if-block "isSWJ"
[03:26:31.763]      </control>
[03:26:31.763]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.763]        // if-block "!isSWJ"
[03:26:31.763]          // =>  FALSE
[03:26:31.763]        // skip if-block "!isSWJ"
[03:26:31.763]      </control>
[03:26:31.763]      <block atomic="false" info="">
[03:26:31.763]        ReadDP(0x0);
[03:26:31.767]  
[03:26:31.767]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.767]  
[03:26:31.767]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.767]      </block>
[03:26:31.767]      // end if-block "protType == 2"
[03:26:31.767]    </control>
[03:26:31.767]  </sequence>
[03:26:31.767]  
[03:26:31.828]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.828]  
[03:26:31.828]  <debugvars>
[03:26:31.828]    // Pre-defined
[03:26:31.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.828]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.828]    __dp=0x00000000
[03:26:31.828]    __ap=0x00000000
[03:26:31.828]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.828]    __FlashAddr=0x00000000
[03:26:31.828]    __FlashLen=0x00000000
[03:26:31.828]    __FlashArg=0x00000000
[03:26:31.828]    __FlashOp=0x00000000
[03:26:31.828]    __Result=0x00000000
[03:26:31.828]  </debugvars>
[03:26:31.831]  
[03:26:31.831]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.831]    <block atomic="false" info="">
[03:26:31.831]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.831]        // -> [isSWJ <= 0x00000001]
[03:26:31.831]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.831]        // -> [hasDormant <= 0x00000000]
[03:26:31.831]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.831]        // -> [protType <= 0x00000002]
[03:26:31.831]    </block>
[03:26:31.831]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.831]      // if-block "protType == 1"
[03:26:31.831]        // =>  FALSE
[03:26:31.832]      // skip if-block "protType == 1"
[03:26:31.833]    </control>
[03:26:31.833]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.833]      // if-block "protType == 2"
[03:26:31.833]        // =>  TRUE
[03:26:31.833]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.833]        // if-block "isSWJ"
[03:26:31.833]          // =>  TRUE
[03:26:31.833]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.833]          // if-block "hasDormant"
[03:26:31.833]            // =>  FALSE
[03:26:31.833]          // skip if-block "hasDormant"
[03:26:31.833]        </control>
[03:26:31.833]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.833]          // if-block "!hasDormant"
[03:26:31.833]            // =>  TRUE
[03:26:31.833]          <block atomic="false" info="">
[03:26:31.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.836]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.837]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.837]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.844]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.844]          </block>
[03:26:31.844]          // end if-block "!hasDormant"
[03:26:31.844]        </control>
[03:26:31.844]        // end if-block "isSWJ"
[03:26:31.844]      </control>
[03:26:31.844]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.844]        // if-block "!isSWJ"
[03:26:31.844]          // =>  FALSE
[03:26:31.844]        // skip if-block "!isSWJ"
[03:26:31.844]      </control>
[03:26:31.844]      <block atomic="false" info="">
[03:26:31.844]        ReadDP(0x0);
[03:26:31.844]  
[03:26:31.844]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.844]  
[03:26:31.844]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.844]      </block>
[03:26:31.844]      // end if-block "protType == 2"
[03:26:31.844]    </control>
[03:26:31.844]  </sequence>
[03:26:31.848]  
[03:26:31.902]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.902]  
[03:26:31.902]  <debugvars>
[03:26:31.902]    // Pre-defined
[03:26:31.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.902]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.902]    __dp=0x00000000
[03:26:31.902]    __ap=0x00000000
[03:26:31.902]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.902]    __FlashAddr=0x00000000
[03:26:31.902]    __FlashLen=0x00000000
[03:26:31.902]    __FlashArg=0x00000000
[03:26:31.902]    __FlashOp=0x00000000
[03:26:31.902]    __Result=0x00000000
[03:26:31.902]  </debugvars>
[03:26:31.902]  
[03:26:31.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.902]    <block atomic="false" info="">
[03:26:31.902]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.902]        // -> [isSWJ <= 0x00000001]
[03:26:31.902]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.902]        // -> [hasDormant <= 0x00000000]
[03:26:31.902]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.905]        // -> [protType <= 0x00000002]
[03:26:31.905]    </block>
[03:26:31.905]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.905]      // if-block "protType == 1"
[03:26:31.905]        // =>  FALSE
[03:26:31.905]      // skip if-block "protType == 1"
[03:26:31.905]    </control>
[03:26:31.905]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.905]      // if-block "protType == 2"
[03:26:31.905]        // =>  TRUE
[03:26:31.905]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.906]        // if-block "isSWJ"
[03:26:31.906]          // =>  TRUE
[03:26:31.906]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.906]          // if-block "hasDormant"
[03:26:31.906]            // =>  FALSE
[03:26:31.906]          // skip if-block "hasDormant"
[03:26:31.906]        </control>
[03:26:31.906]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.906]          // if-block "!hasDormant"
[03:26:31.907]            // =>  TRUE
[03:26:31.907]          <block atomic="false" info="">
[03:26:31.907]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:31.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:31.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:31.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.918]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:31.923]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:31.923]          </block>
[03:26:31.923]          // end if-block "!hasDormant"
[03:26:31.923]        </control>
[03:26:31.923]        // end if-block "isSWJ"
[03:26:31.923]      </control>
[03:26:31.923]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:31.923]        // if-block "!isSWJ"
[03:26:31.923]          // =>  FALSE
[03:26:31.923]        // skip if-block "!isSWJ"
[03:26:31.923]      </control>
[03:26:31.923]      <block atomic="false" info="">
[03:26:31.923]        ReadDP(0x0);
[03:26:31.923]  
[03:26:31.923]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:31.923]  
[03:26:31.923]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:31.923]      </block>
[03:26:31.923]      // end if-block "protType == 2"
[03:26:31.923]    </control>
[03:26:31.923]  </sequence>
[03:26:31.923]  
[03:26:31.987]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:31.987]  
[03:26:31.987]  <debugvars>
[03:26:31.987]    // Pre-defined
[03:26:31.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:31.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:31.989]    __dp=0x00000000
[03:26:31.989]    __ap=0x00000000
[03:26:31.989]    __traceout=0x00000000      (Trace Disabled)
[03:26:31.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:31.989]    __FlashAddr=0x00000000
[03:26:31.989]    __FlashLen=0x00000000
[03:26:31.989]    __FlashArg=0x00000000
[03:26:31.989]    __FlashOp=0x00000000
[03:26:31.989]    __Result=0x00000000
[03:26:31.989]  </debugvars>
[03:26:31.989]  
[03:26:31.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:31.990]    <block atomic="false" info="">
[03:26:31.990]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:31.990]        // -> [isSWJ <= 0x00000001]
[03:26:31.990]      __var hasDormant = __protocol & 0x00020000;
[03:26:31.990]        // -> [hasDormant <= 0x00000000]
[03:26:31.990]      __var protType   = __protocol & 0x0000FFFF;
[03:26:31.990]        // -> [protType <= 0x00000002]
[03:26:31.990]    </block>
[03:26:31.990]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:31.990]      // if-block "protType == 1"
[03:26:31.992]        // =>  FALSE
[03:26:31.992]      // skip if-block "protType == 1"
[03:26:31.992]    </control>
[03:26:31.992]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:31.992]      // if-block "protType == 2"
[03:26:31.992]        // =>  TRUE
[03:26:31.992]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:31.992]        // if-block "isSWJ"
[03:26:31.993]          // =>  TRUE
[03:26:31.993]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:31.993]          // if-block "hasDormant"
[03:26:31.993]            // =>  FALSE
[03:26:31.993]          // skip if-block "hasDormant"
[03:26:31.993]        </control>
[03:26:31.993]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:31.993]          // if-block "!hasDormant"
[03:26:31.993]            // =>  TRUE
[03:26:31.993]          <block atomic="false" info="">
[03:26:31.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:31.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.996]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:31.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:31.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:31.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:31.996]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.001]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.002]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.002]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.004]          </block>
[03:26:32.004]          // end if-block "!hasDormant"
[03:26:32.004]        </control>
[03:26:32.004]        // end if-block "isSWJ"
[03:26:32.004]      </control>
[03:26:32.004]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.004]        // if-block "!isSWJ"
[03:26:32.004]          // =>  FALSE
[03:26:32.004]        // skip if-block "!isSWJ"
[03:26:32.004]      </control>
[03:26:32.004]      <block atomic="false" info="">
[03:26:32.004]        ReadDP(0x0);
[03:26:32.006]  
[03:26:32.006]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.006]  
[03:26:32.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.006]      </block>
[03:26:32.006]      // end if-block "protType == 2"
[03:26:32.006]    </control>
[03:26:32.006]  </sequence>
[03:26:32.006]  
[03:26:32.062]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.062]  
[03:26:32.062]  <debugvars>
[03:26:32.062]    // Pre-defined
[03:26:32.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.062]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.062]    __dp=0x00000000
[03:26:32.062]    __ap=0x00000000
[03:26:32.062]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.062]    __FlashAddr=0x00000000
[03:26:32.062]    __FlashLen=0x00000000
[03:26:32.062]    __FlashArg=0x00000000
[03:26:32.062]    __FlashOp=0x00000000
[03:26:32.062]    __Result=0x00000000
[03:26:32.062]  </debugvars>
[03:26:32.062]  
[03:26:32.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.062]    <block atomic="false" info="">
[03:26:32.062]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.062]        // -> [isSWJ <= 0x00000001]
[03:26:32.062]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.062]        // -> [hasDormant <= 0x00000000]
[03:26:32.062]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.062]        // -> [protType <= 0x00000002]
[03:26:32.062]    </block>
[03:26:32.062]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.062]      // if-block "protType == 1"
[03:26:32.062]        // =>  FALSE
[03:26:32.062]      // skip if-block "protType == 1"
[03:26:32.062]    </control>
[03:26:32.062]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.062]      // if-block "protType == 2"
[03:26:32.066]        // =>  TRUE
[03:26:32.066]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.066]        // if-block "isSWJ"
[03:26:32.066]          // =>  TRUE
[03:26:32.066]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.066]          // if-block "hasDormant"
[03:26:32.066]            // =>  FALSE
[03:26:32.066]          // skip if-block "hasDormant"
[03:26:32.066]        </control>
[03:26:32.066]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.066]          // if-block "!hasDormant"
[03:26:32.066]            // =>  TRUE
[03:26:32.066]          <block atomic="false" info="">
[03:26:32.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.070]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.074]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.075]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.075]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.075]          </block>
[03:26:32.075]          // end if-block "!hasDormant"
[03:26:32.075]        </control>
[03:26:32.078]        // end if-block "isSWJ"
[03:26:32.078]      </control>
[03:26:32.078]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.078]        // if-block "!isSWJ"
[03:26:32.078]          // =>  FALSE
[03:26:32.078]        // skip if-block "!isSWJ"
[03:26:32.078]      </control>
[03:26:32.078]      <block atomic="false" info="">
[03:26:32.078]        ReadDP(0x0);
[03:26:32.078]  
[03:26:32.078]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.078]  
[03:26:32.078]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.078]      </block>
[03:26:32.078]      // end if-block "protType == 2"
[03:26:32.078]    </control>
[03:26:32.078]  </sequence>
[03:26:32.078]  
[03:26:32.134]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.134]  
[03:26:32.134]  <debugvars>
[03:26:32.134]    // Pre-defined
[03:26:32.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.134]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.134]    __dp=0x00000000
[03:26:32.134]    __ap=0x00000000
[03:26:32.134]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.134]    __FlashAddr=0x00000000
[03:26:32.134]    __FlashLen=0x00000000
[03:26:32.134]    __FlashArg=0x00000000
[03:26:32.134]    __FlashOp=0x00000000
[03:26:32.134]    __Result=0x00000000
[03:26:32.134]  </debugvars>
[03:26:32.134]  
[03:26:32.137]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.137]    <block atomic="false" info="">
[03:26:32.137]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.137]        // -> [isSWJ <= 0x00000001]
[03:26:32.137]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.137]        // -> [hasDormant <= 0x00000000]
[03:26:32.137]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.137]        // -> [protType <= 0x00000002]
[03:26:32.137]    </block>
[03:26:32.138]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.138]      // if-block "protType == 1"
[03:26:32.138]        // =>  FALSE
[03:26:32.138]      // skip if-block "protType == 1"
[03:26:32.138]    </control>
[03:26:32.138]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.138]      // if-block "protType == 2"
[03:26:32.138]        // =>  TRUE
[03:26:32.138]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.138]        // if-block "isSWJ"
[03:26:32.138]          // =>  TRUE
[03:26:32.138]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.138]          // if-block "hasDormant"
[03:26:32.138]            // =>  FALSE
[03:26:32.138]          // skip if-block "hasDormant"
[03:26:32.138]        </control>
[03:26:32.138]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.138]          // if-block "!hasDormant"
[03:26:32.138]            // =>  TRUE
[03:26:32.138]          <block atomic="false" info="">
[03:26:32.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.142]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.146]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.150]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.150]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.150]          </block>
[03:26:32.150]          // end if-block "!hasDormant"
[03:26:32.150]        </control>
[03:26:32.150]        // end if-block "isSWJ"
[03:26:32.150]      </control>
[03:26:32.150]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.150]        // if-block "!isSWJ"
[03:26:32.150]          // =>  FALSE
[03:26:32.150]        // skip if-block "!isSWJ"
[03:26:32.150]      </control>
[03:26:32.150]      <block atomic="false" info="">
[03:26:32.150]        ReadDP(0x0);
[03:26:32.154]  
[03:26:32.154]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.154]  
[03:26:32.154]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.154]      </block>
[03:26:32.154]      // end if-block "protType == 2"
[03:26:32.154]    </control>
[03:26:32.154]  </sequence>
[03:26:32.154]  
[03:26:32.207]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.207]  
[03:26:32.207]  <debugvars>
[03:26:32.207]    // Pre-defined
[03:26:32.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.207]    __dp=0x00000000
[03:26:32.207]    __ap=0x00000000
[03:26:32.207]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.207]    __FlashAddr=0x00000000
[03:26:32.207]    __FlashLen=0x00000000
[03:26:32.207]    __FlashArg=0x00000000
[03:26:32.207]    __FlashOp=0x00000000
[03:26:32.207]    __Result=0x00000000
[03:26:32.207]  </debugvars>
[03:26:32.207]  
[03:26:32.207]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.207]    <block atomic="false" info="">
[03:26:32.207]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.207]        // -> [isSWJ <= 0x00000001]
[03:26:32.207]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.207]        // -> [hasDormant <= 0x00000000]
[03:26:32.207]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.207]        // -> [protType <= 0x00000002]
[03:26:32.207]    </block>
[03:26:32.207]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.207]      // if-block "protType == 1"
[03:26:32.207]        // =>  FALSE
[03:26:32.211]      // skip if-block "protType == 1"
[03:26:32.211]    </control>
[03:26:32.211]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.211]      // if-block "protType == 2"
[03:26:32.211]        // =>  TRUE
[03:26:32.211]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.211]        // if-block "isSWJ"
[03:26:32.211]          // =>  TRUE
[03:26:32.211]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.211]          // if-block "hasDormant"
[03:26:32.211]            // =>  FALSE
[03:26:32.211]          // skip if-block "hasDormant"
[03:26:32.211]        </control>
[03:26:32.211]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.211]          // if-block "!hasDormant"
[03:26:32.211]            // =>  TRUE
[03:26:32.211]          <block atomic="false" info="">
[03:26:32.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.215]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.223]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.231]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.231]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.231]          </block>
[03:26:32.231]          // end if-block "!hasDormant"
[03:26:32.231]        </control>
[03:26:32.231]        // end if-block "isSWJ"
[03:26:32.235]      </control>
[03:26:32.235]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.235]        // if-block "!isSWJ"
[03:26:32.235]          // =>  FALSE
[03:26:32.235]        // skip if-block "!isSWJ"
[03:26:32.235]      </control>
[03:26:32.235]      <block atomic="false" info="">
[03:26:32.235]        ReadDP(0x0);
[03:26:32.239]  
[03:26:32.243]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.243]  
[03:26:32.243]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.243]      </block>
[03:26:32.243]      // end if-block "protType == 2"
[03:26:32.243]    </control>
[03:26:32.243]  </sequence>
[03:26:32.244]  
[03:26:32.304]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.304]  
[03:26:32.304]  <debugvars>
[03:26:32.304]    // Pre-defined
[03:26:32.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.304]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.304]    __dp=0x00000000
[03:26:32.304]    __ap=0x00000000
[03:26:32.304]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.304]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.304]    __FlashAddr=0x00000000
[03:26:32.304]    __FlashLen=0x00000000
[03:26:32.305]    __FlashArg=0x00000000
[03:26:32.305]    __FlashOp=0x00000000
[03:26:32.305]    __Result=0x00000000
[03:26:32.305]  </debugvars>
[03:26:32.305]  
[03:26:32.305]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.305]    <block atomic="false" info="">
[03:26:32.305]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.305]        // -> [isSWJ <= 0x00000001]
[03:26:32.305]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.305]        // -> [hasDormant <= 0x00000000]
[03:26:32.305]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.305]        // -> [protType <= 0x00000002]
[03:26:32.305]    </block>
[03:26:32.305]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.305]      // if-block "protType == 1"
[03:26:32.305]        // =>  FALSE
[03:26:32.305]      // skip if-block "protType == 1"
[03:26:32.305]    </control>
[03:26:32.308]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.308]      // if-block "protType == 2"
[03:26:32.308]        // =>  TRUE
[03:26:32.308]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.308]        // if-block "isSWJ"
[03:26:32.308]          // =>  TRUE
[03:26:32.308]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.308]          // if-block "hasDormant"
[03:26:32.308]            // =>  FALSE
[03:26:32.308]          // skip if-block "hasDormant"
[03:26:32.308]        </control>
[03:26:32.308]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.308]          // if-block "!hasDormant"
[03:26:32.308]            // =>  TRUE
[03:26:32.308]          <block atomic="false" info="">
[03:26:32.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.308]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.312]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.312]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.320]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.324]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.324]          </block>
[03:26:32.324]          // end if-block "!hasDormant"
[03:26:32.324]        </control>
[03:26:32.324]        // end if-block "isSWJ"
[03:26:32.324]      </control>
[03:26:32.324]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.324]        // if-block "!isSWJ"
[03:26:32.324]          // =>  FALSE
[03:26:32.324]        // skip if-block "!isSWJ"
[03:26:32.324]      </control>
[03:26:32.324]      <block atomic="false" info="">
[03:26:32.324]        ReadDP(0x0);
[03:26:32.328]  
[03:26:32.328]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.328]  
[03:26:32.328]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.328]      </block>
[03:26:32.328]      // end if-block "protType == 2"
[03:26:32.328]    </control>
[03:26:32.329]  </sequence>
[03:26:32.329]  
[03:26:32.380]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.380]  
[03:26:32.380]  <debugvars>
[03:26:32.380]    // Pre-defined
[03:26:32.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.380]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.380]    __dp=0x00000000
[03:26:32.380]    __ap=0x00000000
[03:26:32.380]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.380]    __FlashAddr=0x00000000
[03:26:32.380]    __FlashLen=0x00000000
[03:26:32.380]    __FlashArg=0x00000000
[03:26:32.380]    __FlashOp=0x00000000
[03:26:32.380]    __Result=0x00000000
[03:26:32.382]  </debugvars>
[03:26:32.382]  
[03:26:32.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.382]    <block atomic="false" info="">
[03:26:32.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.382]        // -> [isSWJ <= 0x00000001]
[03:26:32.382]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.382]        // -> [hasDormant <= 0x00000000]
[03:26:32.382]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.382]        // -> [protType <= 0x00000002]
[03:26:32.382]    </block>
[03:26:32.382]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.382]      // if-block "protType == 1"
[03:26:32.384]        // =>  FALSE
[03:26:32.384]      // skip if-block "protType == 1"
[03:26:32.384]    </control>
[03:26:32.384]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.384]      // if-block "protType == 2"
[03:26:32.384]        // =>  TRUE
[03:26:32.384]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.384]        // if-block "isSWJ"
[03:26:32.384]          // =>  TRUE
[03:26:32.384]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.385]          // if-block "hasDormant"
[03:26:32.385]            // =>  FALSE
[03:26:32.385]          // skip if-block "hasDormant"
[03:26:32.385]        </control>
[03:26:32.385]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.385]          // if-block "!hasDormant"
[03:26:32.385]            // =>  TRUE
[03:26:32.385]          <block atomic="false" info="">
[03:26:32.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.388]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.392]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.392]          </block>
[03:26:32.392]          // end if-block "!hasDormant"
[03:26:32.392]        </control>
[03:26:32.396]        // end if-block "isSWJ"
[03:26:32.396]      </control>
[03:26:32.396]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.396]        // if-block "!isSWJ"
[03:26:32.396]          // =>  FALSE
[03:26:32.396]        // skip if-block "!isSWJ"
[03:26:32.396]      </control>
[03:26:32.396]      <block atomic="false" info="">
[03:26:32.396]        ReadDP(0x0);
[03:26:32.396]  
[03:26:32.396]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.396]  
[03:26:32.396]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.396]      </block>
[03:26:32.396]      // end if-block "protType == 2"
[03:26:32.396]    </control>
[03:26:32.396]  </sequence>
[03:26:32.396]  
[03:26:32.457]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.457]  
[03:26:32.457]  <debugvars>
[03:26:32.457]    // Pre-defined
[03:26:32.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.457]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.457]    __dp=0x00000000
[03:26:32.457]    __ap=0x00000000
[03:26:32.457]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.457]    __FlashAddr=0x00000000
[03:26:32.457]    __FlashLen=0x00000000
[03:26:32.457]    __FlashArg=0x00000000
[03:26:32.457]    __FlashOp=0x00000000
[03:26:32.457]    __Result=0x00000000
[03:26:32.457]  </debugvars>
[03:26:32.457]  
[03:26:32.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.457]    <block atomic="false" info="">
[03:26:32.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.457]        // -> [isSWJ <= 0x00000001]
[03:26:32.460]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.460]        // -> [hasDormant <= 0x00000000]
[03:26:32.460]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.460]        // -> [protType <= 0x00000002]
[03:26:32.460]    </block>
[03:26:32.460]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.460]      // if-block "protType == 1"
[03:26:32.460]        // =>  FALSE
[03:26:32.460]      // skip if-block "protType == 1"
[03:26:32.460]    </control>
[03:26:32.460]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.460]      // if-block "protType == 2"
[03:26:32.461]        // =>  TRUE
[03:26:32.461]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.461]        // if-block "isSWJ"
[03:26:32.461]          // =>  TRUE
[03:26:32.461]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.461]          // if-block "hasDormant"
[03:26:32.461]            // =>  FALSE
[03:26:32.461]          // skip if-block "hasDormant"
[03:26:32.461]        </control>
[03:26:32.461]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.461]          // if-block "!hasDormant"
[03:26:32.461]            // =>  TRUE
[03:26:32.461]          <block atomic="false" info="">
[03:26:32.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.465]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.465]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.473]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.473]          </block>
[03:26:32.473]          // end if-block "!hasDormant"
[03:26:32.473]        </control>
[03:26:32.473]        // end if-block "isSWJ"
[03:26:32.473]      </control>
[03:26:32.473]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.473]        // if-block "!isSWJ"
[03:26:32.473]          // =>  FALSE
[03:26:32.473]        // skip if-block "!isSWJ"
[03:26:32.473]      </control>
[03:26:32.473]      <block atomic="false" info="">
[03:26:32.473]        ReadDP(0x0);
[03:26:32.473]  
[03:26:32.473]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.473]  
[03:26:32.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.473]      </block>
[03:26:32.473]      // end if-block "protType == 2"
[03:26:32.477]    </control>
[03:26:32.477]  </sequence>
[03:26:32.477]  
[03:26:32.530]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.530]  
[03:26:32.530]  <debugvars>
[03:26:32.530]    // Pre-defined
[03:26:32.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.530]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.530]    __dp=0x00000000
[03:26:32.530]    __ap=0x00000000
[03:26:32.530]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.532]    __FlashAddr=0x00000000
[03:26:32.532]    __FlashLen=0x00000000
[03:26:32.532]    __FlashArg=0x00000000
[03:26:32.532]    __FlashOp=0x00000000
[03:26:32.532]    __Result=0x00000000
[03:26:32.533]  </debugvars>
[03:26:32.533]  
[03:26:32.533]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.533]    <block atomic="false" info="">
[03:26:32.533]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.533]        // -> [isSWJ <= 0x00000001]
[03:26:32.533]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.533]        // -> [hasDormant <= 0x00000000]
[03:26:32.533]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.533]        // -> [protType <= 0x00000002]
[03:26:32.533]    </block>
[03:26:32.533]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.533]      // if-block "protType == 1"
[03:26:32.534]        // =>  FALSE
[03:26:32.534]      // skip if-block "protType == 1"
[03:26:32.534]    </control>
[03:26:32.534]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.534]      // if-block "protType == 2"
[03:26:32.534]        // =>  TRUE
[03:26:32.534]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.534]        // if-block "isSWJ"
[03:26:32.534]          // =>  TRUE
[03:26:32.534]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.535]          // if-block "hasDormant"
[03:26:32.535]            // =>  FALSE
[03:26:32.535]          // skip if-block "hasDormant"
[03:26:32.535]        </control>
[03:26:32.535]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.535]          // if-block "!hasDormant"
[03:26:32.535]            // =>  TRUE
[03:26:32.535]          <block atomic="false" info="">
[03:26:32.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.539]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.541]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.547]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.548]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.548]          </block>
[03:26:32.548]          // end if-block "!hasDormant"
[03:26:32.548]        </control>
[03:26:32.548]        // end if-block "isSWJ"
[03:26:32.548]      </control>
[03:26:32.548]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.548]        // if-block "!isSWJ"
[03:26:32.548]          // =>  FALSE
[03:26:32.548]        // skip if-block "!isSWJ"
[03:26:32.548]      </control>
[03:26:32.548]      <block atomic="false" info="">
[03:26:32.548]        ReadDP(0x0);
[03:26:32.550]  
[03:26:32.550]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.550]  
[03:26:32.550]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.550]      </block>
[03:26:32.550]      // end if-block "protType == 2"
[03:26:32.550]    </control>
[03:26:32.550]  </sequence>
[03:26:32.550]  
[03:26:32.604]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.604]  
[03:26:32.604]  <debugvars>
[03:26:32.604]    // Pre-defined
[03:26:32.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.604]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.604]    __dp=0x00000000
[03:26:32.604]    __ap=0x00000000
[03:26:32.604]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.604]    __FlashAddr=0x00000000
[03:26:32.604]    __FlashLen=0x00000000
[03:26:32.604]    __FlashArg=0x00000000
[03:26:32.606]    __FlashOp=0x00000000
[03:26:32.606]    __Result=0x00000000
[03:26:32.606]  </debugvars>
[03:26:32.606]  
[03:26:32.606]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.606]    <block atomic="false" info="">
[03:26:32.606]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.606]        // -> [isSWJ <= 0x00000001]
[03:26:32.606]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.606]        // -> [hasDormant <= 0x00000000]
[03:26:32.606]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.606]        // -> [protType <= 0x00000002]
[03:26:32.606]    </block>
[03:26:32.606]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.606]      // if-block "protType == 1"
[03:26:32.606]        // =>  FALSE
[03:26:32.606]      // skip if-block "protType == 1"
[03:26:32.606]    </control>
[03:26:32.606]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.606]      // if-block "protType == 2"
[03:26:32.606]        // =>  TRUE
[03:26:32.608]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.608]        // if-block "isSWJ"
[03:26:32.608]          // =>  TRUE
[03:26:32.608]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.608]          // if-block "hasDormant"
[03:26:32.608]            // =>  FALSE
[03:26:32.608]          // skip if-block "hasDormant"
[03:26:32.608]        </control>
[03:26:32.608]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.608]          // if-block "!hasDormant"
[03:26:32.608]            // =>  TRUE
[03:26:32.608]          <block atomic="false" info="">
[03:26:32.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.612]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.616]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.616]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.620]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.620]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.620]          </block>
[03:26:32.620]          // end if-block "!hasDormant"
[03:26:32.620]        </control>
[03:26:32.620]        // end if-block "isSWJ"
[03:26:32.620]      </control>
[03:26:32.620]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.620]        // if-block "!isSWJ"
[03:26:32.620]          // =>  FALSE
[03:26:32.620]        // skip if-block "!isSWJ"
[03:26:32.620]      </control>
[03:26:32.620]      <block atomic="false" info="">
[03:26:32.620]        ReadDP(0x0);
[03:26:32.632]  
[03:26:32.632]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.632]  
[03:26:32.632]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.632]      </block>
[03:26:32.632]      // end if-block "protType == 2"
[03:26:32.632]    </control>
[03:26:32.632]  </sequence>
[03:26:32.632]  
[03:26:32.689]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.689]  
[03:26:32.689]  <debugvars>
[03:26:32.689]    // Pre-defined
[03:26:32.689]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.689]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.690]    __dp=0x00000000
[03:26:32.690]    __ap=0x00000000
[03:26:32.690]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.690]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.690]    __FlashAddr=0x00000000
[03:26:32.690]    __FlashLen=0x00000000
[03:26:32.690]    __FlashArg=0x00000000
[03:26:32.690]    __FlashOp=0x00000000
[03:26:32.690]    __Result=0x00000000
[03:26:32.690]  </debugvars>
[03:26:32.690]  
[03:26:32.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.690]    <block atomic="false" info="">
[03:26:32.690]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.690]        // -> [isSWJ <= 0x00000001]
[03:26:32.690]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.690]        // -> [hasDormant <= 0x00000000]
[03:26:32.690]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.692]        // -> [protType <= 0x00000002]
[03:26:32.692]    </block>
[03:26:32.692]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.692]      // if-block "protType == 1"
[03:26:32.692]        // =>  FALSE
[03:26:32.692]      // skip if-block "protType == 1"
[03:26:32.692]    </control>
[03:26:32.692]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.692]      // if-block "protType == 2"
[03:26:32.692]        // =>  TRUE
[03:26:32.692]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.692]        // if-block "isSWJ"
[03:26:32.692]          // =>  TRUE
[03:26:32.692]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.692]          // if-block "hasDormant"
[03:26:32.692]            // =>  FALSE
[03:26:32.692]          // skip if-block "hasDormant"
[03:26:32.692]        </control>
[03:26:32.692]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.692]          // if-block "!hasDormant"
[03:26:32.692]            // =>  TRUE
[03:26:32.692]          <block atomic="false" info="">
[03:26:32.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.696]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.696]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.696]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.700]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.700]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.704]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.704]          </block>
[03:26:32.704]          // end if-block "!hasDormant"
[03:26:32.704]        </control>
[03:26:32.704]        // end if-block "isSWJ"
[03:26:32.704]      </control>
[03:26:32.704]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.704]        // if-block "!isSWJ"
[03:26:32.704]          // =>  FALSE
[03:26:32.704]        // skip if-block "!isSWJ"
[03:26:32.704]      </control>
[03:26:32.704]      <block atomic="false" info="">
[03:26:32.704]        ReadDP(0x0);
[03:26:32.704]  
[03:26:32.704]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.704]  
[03:26:32.704]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.704]      </block>
[03:26:32.704]      // end if-block "protType == 2"
[03:26:32.704]    </control>
[03:26:32.704]  </sequence>
[03:26:32.704]  
[03:26:32.760]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.760]  
[03:26:32.760]  <debugvars>
[03:26:32.760]    // Pre-defined
[03:26:32.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.760]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.760]    __dp=0x00000000
[03:26:32.760]    __ap=0x00000000
[03:26:32.760]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.760]    __FlashAddr=0x00000000
[03:26:32.760]    __FlashLen=0x00000000
[03:26:32.760]    __FlashArg=0x00000000
[03:26:32.760]    __FlashOp=0x00000000
[03:26:32.760]    __Result=0x00000000
[03:26:32.760]  </debugvars>
[03:26:32.760]  
[03:26:32.760]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.760]    <block atomic="false" info="">
[03:26:32.760]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.760]        // -> [isSWJ <= 0x00000001]
[03:26:32.760]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.760]        // -> [hasDormant <= 0x00000000]
[03:26:32.760]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.760]        // -> [protType <= 0x00000002]
[03:26:32.760]    </block>
[03:26:32.760]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.760]      // if-block "protType == 1"
[03:26:32.760]        // =>  FALSE
[03:26:32.760]      // skip if-block "protType == 1"
[03:26:32.764]    </control>
[03:26:32.764]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.764]      // if-block "protType == 2"
[03:26:32.764]        // =>  TRUE
[03:26:32.764]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.764]        // if-block "isSWJ"
[03:26:32.764]          // =>  TRUE
[03:26:32.764]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.764]          // if-block "hasDormant"
[03:26:32.764]            // =>  FALSE
[03:26:32.764]          // skip if-block "hasDormant"
[03:26:32.764]        </control>
[03:26:32.764]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.764]          // if-block "!hasDormant"
[03:26:32.764]            // =>  TRUE
[03:26:32.764]          <block atomic="false" info="">
[03:26:32.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.764]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.768]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.772]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.776]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.776]          </block>
[03:26:32.776]          // end if-block "!hasDormant"
[03:26:32.776]        </control>
[03:26:32.776]        // end if-block "isSWJ"
[03:26:32.776]      </control>
[03:26:32.776]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.776]        // if-block "!isSWJ"
[03:26:32.776]          // =>  FALSE
[03:26:32.776]        // skip if-block "!isSWJ"
[03:26:32.776]      </control>
[03:26:32.776]      <block atomic="false" info="">
[03:26:32.776]        ReadDP(0x0);
[03:26:32.780]  
[03:26:32.780]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.780]  
[03:26:32.780]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.780]      </block>
[03:26:32.780]      // end if-block "protType == 2"
[03:26:32.780]    </control>
[03:26:32.780]  </sequence>
[03:26:32.780]  
[03:26:32.832]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.832]  
[03:26:32.832]  <debugvars>
[03:26:32.832]    // Pre-defined
[03:26:32.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.832]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.832]    __dp=0x00000000
[03:26:32.832]    __ap=0x00000000
[03:26:32.832]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.832]    __FlashAddr=0x00000000
[03:26:32.832]    __FlashLen=0x00000000
[03:26:32.832]    __FlashArg=0x00000000
[03:26:32.832]    __FlashOp=0x00000000
[03:26:32.832]    __Result=0x00000000
[03:26:32.832]  </debugvars>
[03:26:32.832]  
[03:26:32.832]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.832]    <block atomic="false" info="">
[03:26:32.832]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.832]        // -> [isSWJ <= 0x00000001]
[03:26:32.832]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.832]        // -> [hasDormant <= 0x00000000]
[03:26:32.832]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.832]        // -> [protType <= 0x00000002]
[03:26:32.832]    </block>
[03:26:32.832]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.836]      // if-block "protType == 1"
[03:26:32.836]        // =>  FALSE
[03:26:32.836]      // skip if-block "protType == 1"
[03:26:32.836]    </control>
[03:26:32.836]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.836]      // if-block "protType == 2"
[03:26:32.836]        // =>  TRUE
[03:26:32.836]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.836]        // if-block "isSWJ"
[03:26:32.836]          // =>  TRUE
[03:26:32.836]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.836]          // if-block "hasDormant"
[03:26:32.836]            // =>  FALSE
[03:26:32.836]          // skip if-block "hasDormant"
[03:26:32.836]        </control>
[03:26:32.836]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.836]          // if-block "!hasDormant"
[03:26:32.836]            // =>  TRUE
[03:26:32.836]          <block atomic="false" info="">
[03:26:32.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.840]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.852]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.852]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.852]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.856]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.856]          </block>
[03:26:32.856]          // end if-block "!hasDormant"
[03:26:32.856]        </control>
[03:26:32.856]        // end if-block "isSWJ"
[03:26:32.856]      </control>
[03:26:32.856]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.856]        // if-block "!isSWJ"
[03:26:32.856]          // =>  FALSE
[03:26:32.856]        // skip if-block "!isSWJ"
[03:26:32.856]      </control>
[03:26:32.856]      <block atomic="false" info="">
[03:26:32.856]        ReadDP(0x0);
[03:26:32.856]  
[03:26:32.856]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.856]  
[03:26:32.860]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.860]      </block>
[03:26:32.860]      // end if-block "protType == 2"
[03:26:32.860]    </control>
[03:26:32.860]  </sequence>
[03:26:32.860]  
[03:26:32.916]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.916]  
[03:26:32.916]  <debugvars>
[03:26:32.916]    // Pre-defined
[03:26:32.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.916]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.916]    __dp=0x00000000
[03:26:32.916]    __ap=0x00000000
[03:26:32.916]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.916]    __FlashAddr=0x00000000
[03:26:32.916]    __FlashLen=0x00000000
[03:26:32.916]    __FlashArg=0x00000000
[03:26:32.916]    __FlashOp=0x00000000
[03:26:32.916]    __Result=0x00000000
[03:26:32.916]  </debugvars>
[03:26:32.916]  
[03:26:32.916]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.916]    <block atomic="false" info="">
[03:26:32.916]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.916]        // -> [isSWJ <= 0x00000001]
[03:26:32.916]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.916]        // -> [hasDormant <= 0x00000000]
[03:26:32.916]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.916]        // -> [protType <= 0x00000002]
[03:26:32.916]    </block>
[03:26:32.916]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.916]      // if-block "protType == 1"
[03:26:32.916]        // =>  FALSE
[03:26:32.916]      // skip if-block "protType == 1"
[03:26:32.916]    </control>
[03:26:32.916]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.916]      // if-block "protType == 2"
[03:26:32.916]        // =>  TRUE
[03:26:32.916]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.916]        // if-block "isSWJ"
[03:26:32.916]          // =>  TRUE
[03:26:32.916]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.916]          // if-block "hasDormant"
[03:26:32.920]            // =>  FALSE
[03:26:32.920]          // skip if-block "hasDormant"
[03:26:32.920]        </control>
[03:26:32.920]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.920]          // if-block "!hasDormant"
[03:26:32.920]            // =>  TRUE
[03:26:32.920]          <block atomic="false" info="">
[03:26:32.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.920]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:32.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.924]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:32.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:32.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:32.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:32.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:32.930]          </block>
[03:26:32.930]          // end if-block "!hasDormant"
[03:26:32.930]        </control>
[03:26:32.930]        // end if-block "isSWJ"
[03:26:32.930]      </control>
[03:26:32.930]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:32.930]        // if-block "!isSWJ"
[03:26:32.933]          // =>  FALSE
[03:26:32.933]        // skip if-block "!isSWJ"
[03:26:32.933]      </control>
[03:26:32.933]      <block atomic="false" info="">
[03:26:32.933]        ReadDP(0x0);
[03:26:32.937]  
[03:26:32.937]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:32.937]  
[03:26:32.937]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:32.937]      </block>
[03:26:32.937]      // end if-block "protType == 2"
[03:26:32.937]    </control>
[03:26:32.937]  </sequence>
[03:26:32.937]  
[03:26:32.989]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:32.989]  
[03:26:32.989]  <debugvars>
[03:26:32.989]    // Pre-defined
[03:26:32.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:32.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:32.989]    __dp=0x00000000
[03:26:32.989]    __ap=0x00000000
[03:26:32.989]    __traceout=0x00000000      (Trace Disabled)
[03:26:32.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:32.989]    __FlashAddr=0x00000000
[03:26:32.989]    __FlashLen=0x00000000
[03:26:32.989]    __FlashArg=0x00000000
[03:26:32.989]    __FlashOp=0x00000000
[03:26:32.989]    __Result=0x00000000
[03:26:32.989]  </debugvars>
[03:26:32.989]  
[03:26:32.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:32.989]    <block atomic="false" info="">
[03:26:32.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:32.989]        // -> [isSWJ <= 0x00000001]
[03:26:32.989]      __var hasDormant = __protocol & 0x00020000;
[03:26:32.989]        // -> [hasDormant <= 0x00000000]
[03:26:32.993]      __var protType   = __protocol & 0x0000FFFF;
[03:26:32.993]        // -> [protType <= 0x00000002]
[03:26:32.993]    </block>
[03:26:32.993]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:32.993]      // if-block "protType == 1"
[03:26:32.993]        // =>  FALSE
[03:26:32.993]      // skip if-block "protType == 1"
[03:26:32.993]    </control>
[03:26:32.993]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:32.993]      // if-block "protType == 2"
[03:26:32.993]        // =>  TRUE
[03:26:32.993]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:32.993]        // if-block "isSWJ"
[03:26:32.993]          // =>  TRUE
[03:26:32.993]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:32.993]          // if-block "hasDormant"
[03:26:32.993]            // =>  FALSE
[03:26:32.993]          // skip if-block "hasDormant"
[03:26:32.993]        </control>
[03:26:32.993]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:32.993]          // if-block "!hasDormant"
[03:26:32.993]            // =>  TRUE
[03:26:32.993]          <block atomic="false" info="">
[03:26:32.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:32.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:32.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:32.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:32.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.001]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.009]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.009]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.013]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.013]          </block>
[03:26:33.013]          // end if-block "!hasDormant"
[03:26:33.013]        </control>
[03:26:33.013]        // end if-block "isSWJ"
[03:26:33.013]      </control>
[03:26:33.013]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.013]        // if-block "!isSWJ"
[03:26:33.013]          // =>  FALSE
[03:26:33.013]        // skip if-block "!isSWJ"
[03:26:33.013]      </control>
[03:26:33.013]      <block atomic="false" info="">
[03:26:33.013]        ReadDP(0x0);
[03:26:33.017]  
[03:26:33.017]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.017]  
[03:26:33.017]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.017]      </block>
[03:26:33.017]      // end if-block "protType == 2"
[03:26:33.017]    </control>
[03:26:33.017]  </sequence>
[03:26:33.017]  
[03:26:33.073]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.073]  
[03:26:33.073]  <debugvars>
[03:26:33.073]    // Pre-defined
[03:26:33.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.073]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.073]    __dp=0x00000000
[03:26:33.073]    __ap=0x00000000
[03:26:33.073]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.073]    __FlashAddr=0x00000000
[03:26:33.073]    __FlashLen=0x00000000
[03:26:33.073]    __FlashArg=0x00000000
[03:26:33.073]    __FlashOp=0x00000000
[03:26:33.073]    __Result=0x00000000
[03:26:33.073]  </debugvars>
[03:26:33.073]  
[03:26:33.073]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.073]    <block atomic="false" info="">
[03:26:33.073]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.073]        // -> [isSWJ <= 0x00000001]
[03:26:33.073]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.073]        // -> [hasDormant <= 0x00000000]
[03:26:33.073]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.073]        // -> [protType <= 0x00000002]
[03:26:33.073]    </block>
[03:26:33.077]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.077]      // if-block "protType == 1"
[03:26:33.077]        // =>  FALSE
[03:26:33.077]      // skip if-block "protType == 1"
[03:26:33.077]    </control>
[03:26:33.077]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.077]      // if-block "protType == 2"
[03:26:33.077]        // =>  TRUE
[03:26:33.077]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.077]        // if-block "isSWJ"
[03:26:33.077]          // =>  TRUE
[03:26:33.077]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.077]          // if-block "hasDormant"
[03:26:33.077]            // =>  FALSE
[03:26:33.077]          // skip if-block "hasDormant"
[03:26:33.077]        </control>
[03:26:33.077]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.077]          // if-block "!hasDormant"
[03:26:33.077]            // =>  TRUE
[03:26:33.077]          <block atomic="false" info="">
[03:26:33.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.077]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.081]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.081]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.081]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.085]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.085]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.089]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.089]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.089]          </block>
[03:26:33.089]          // end if-block "!hasDormant"
[03:26:33.089]        </control>
[03:26:33.089]        // end if-block "isSWJ"
[03:26:33.093]      </control>
[03:26:33.093]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.093]        // if-block "!isSWJ"
[03:26:33.093]          // =>  FALSE
[03:26:33.093]        // skip if-block "!isSWJ"
[03:26:33.093]      </control>
[03:26:33.093]      <block atomic="false" info="">
[03:26:33.093]        ReadDP(0x0);
[03:26:33.093]  
[03:26:33.093]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.093]  
[03:26:33.093]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.093]      </block>
[03:26:33.093]      // end if-block "protType == 2"
[03:26:33.093]    </control>
[03:26:33.093]  </sequence>
[03:26:33.093]  
[03:26:33.145]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.145]  
[03:26:33.145]  <debugvars>
[03:26:33.145]    // Pre-defined
[03:26:33.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.145]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.145]    __dp=0x00000000
[03:26:33.145]    __ap=0x00000000
[03:26:33.145]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.145]    __FlashAddr=0x00000000
[03:26:33.145]    __FlashLen=0x00000000
[03:26:33.145]    __FlashArg=0x00000000
[03:26:33.145]    __FlashOp=0x00000000
[03:26:33.145]    __Result=0x00000000
[03:26:33.145]  </debugvars>
[03:26:33.145]  
[03:26:33.145]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.145]    <block atomic="false" info="">
[03:26:33.145]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.145]        // -> [isSWJ <= 0x00000001]
[03:26:33.145]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.145]        // -> [hasDormant <= 0x00000000]
[03:26:33.145]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.149]        // -> [protType <= 0x00000002]
[03:26:33.149]    </block>
[03:26:33.149]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.149]      // if-block "protType == 1"
[03:26:33.149]        // =>  FALSE
[03:26:33.149]      // skip if-block "protType == 1"
[03:26:33.149]    </control>
[03:26:33.149]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.149]      // if-block "protType == 2"
[03:26:33.149]        // =>  TRUE
[03:26:33.149]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.149]        // if-block "isSWJ"
[03:26:33.149]          // =>  TRUE
[03:26:33.149]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.149]          // if-block "hasDormant"
[03:26:33.149]            // =>  FALSE
[03:26:33.149]          // skip if-block "hasDormant"
[03:26:33.149]        </control>
[03:26:33.149]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.149]          // if-block "!hasDormant"
[03:26:33.149]            // =>  TRUE
[03:26:33.149]          <block atomic="false" info="">
[03:26:33.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.153]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.153]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.153]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.161]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.161]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.161]          </block>
[03:26:33.161]          // end if-block "!hasDormant"
[03:26:33.161]        </control>
[03:26:33.161]        // end if-block "isSWJ"
[03:26:33.161]      </control>
[03:26:33.161]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.161]        // if-block "!isSWJ"
[03:26:33.161]          // =>  FALSE
[03:26:33.161]        // skip if-block "!isSWJ"
[03:26:33.165]      </control>
[03:26:33.165]      <block atomic="false" info="">
[03:26:33.165]        ReadDP(0x0);
[03:26:33.165]  
[03:26:33.165]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.165]  
[03:26:33.165]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.165]      </block>
[03:26:33.165]      // end if-block "protType == 2"
[03:26:33.165]    </control>
[03:26:33.165]  </sequence>
[03:26:33.165]  
[03:26:33.217]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.217]  
[03:26:33.217]  <debugvars>
[03:26:33.217]    // Pre-defined
[03:26:33.217]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.217]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.217]    __dp=0x00000000
[03:26:33.217]    __ap=0x00000000
[03:26:33.217]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.217]    __FlashAddr=0x00000000
[03:26:33.217]    __FlashLen=0x00000000
[03:26:33.217]    __FlashArg=0x00000000
[03:26:33.217]    __FlashOp=0x00000000
[03:26:33.217]    __Result=0x00000000
[03:26:33.217]  </debugvars>
[03:26:33.217]  
[03:26:33.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.217]    <block atomic="false" info="">
[03:26:33.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.217]        // -> [isSWJ <= 0x00000001]
[03:26:33.217]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.217]        // -> [hasDormant <= 0x00000000]
[03:26:33.217]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.217]        // -> [protType <= 0x00000002]
[03:26:33.217]    </block>
[03:26:33.217]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.217]      // if-block "protType == 1"
[03:26:33.217]        // =>  FALSE
[03:26:33.217]      // skip if-block "protType == 1"
[03:26:33.217]    </control>
[03:26:33.221]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.221]      // if-block "protType == 2"
[03:26:33.221]        // =>  TRUE
[03:26:33.221]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.221]        // if-block "isSWJ"
[03:26:33.221]          // =>  TRUE
[03:26:33.221]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.221]          // if-block "hasDormant"
[03:26:33.221]            // =>  FALSE
[03:26:33.221]          // skip if-block "hasDormant"
[03:26:33.221]        </control>
[03:26:33.221]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.221]          // if-block "!hasDormant"
[03:26:33.221]            // =>  TRUE
[03:26:33.221]          <block atomic="false" info="">
[03:26:33.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.225]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.229]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.229]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.229]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.229]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.233]          </block>
[03:26:33.233]          // end if-block "!hasDormant"
[03:26:33.233]        </control>
[03:26:33.233]        // end if-block "isSWJ"
[03:26:33.233]      </control>
[03:26:33.233]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.233]        // if-block "!isSWJ"
[03:26:33.233]          // =>  FALSE
[03:26:33.233]        // skip if-block "!isSWJ"
[03:26:33.233]      </control>
[03:26:33.233]      <block atomic="false" info="">
[03:26:33.233]        ReadDP(0x0);
[03:26:33.237]  
[03:26:33.237]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.237]  
[03:26:33.237]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.237]      </block>
[03:26:33.237]      // end if-block "protType == 2"
[03:26:33.237]    </control>
[03:26:33.237]  </sequence>
[03:26:33.237]  
[03:26:33.289]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.289]  
[03:26:33.289]  <debugvars>
[03:26:33.289]    // Pre-defined
[03:26:33.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.289]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.289]    __dp=0x00000000
[03:26:33.289]    __ap=0x00000000
[03:26:33.289]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.289]    __FlashAddr=0x00000000
[03:26:33.289]    __FlashLen=0x00000000
[03:26:33.289]    __FlashArg=0x00000000
[03:26:33.289]    __FlashOp=0x00000000
[03:26:33.289]    __Result=0x00000000
[03:26:33.289]  </debugvars>
[03:26:33.289]  
[03:26:33.289]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.289]    <block atomic="false" info="">
[03:26:33.289]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.289]        // -> [isSWJ <= 0x00000001]
[03:26:33.289]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.289]        // -> [hasDormant <= 0x00000000]
[03:26:33.289]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.289]        // -> [protType <= 0x00000002]
[03:26:33.293]    </block>
[03:26:33.293]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.293]      // if-block "protType == 1"
[03:26:33.293]        // =>  FALSE
[03:26:33.293]      // skip if-block "protType == 1"
[03:26:33.293]    </control>
[03:26:33.293]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.293]      // if-block "protType == 2"
[03:26:33.293]        // =>  TRUE
[03:26:33.293]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.293]        // if-block "isSWJ"
[03:26:33.293]          // =>  TRUE
[03:26:33.293]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.293]          // if-block "hasDormant"
[03:26:33.293]            // =>  FALSE
[03:26:33.293]          // skip if-block "hasDormant"
[03:26:33.293]        </control>
[03:26:33.293]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.293]          // if-block "!hasDormant"
[03:26:33.293]            // =>  TRUE
[03:26:33.293]          <block atomic="false" info="">
[03:26:33.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.297]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.301]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.305]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.305]          </block>
[03:26:33.305]          // end if-block "!hasDormant"
[03:26:33.305]        </control>
[03:26:33.305]        // end if-block "isSWJ"
[03:26:33.305]      </control>
[03:26:33.305]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.305]        // if-block "!isSWJ"
[03:26:33.305]          // =>  FALSE
[03:26:33.305]        // skip if-block "!isSWJ"
[03:26:33.305]      </control>
[03:26:33.305]      <block atomic="false" info="">
[03:26:33.305]        ReadDP(0x0);
[03:26:33.305]  
[03:26:33.305]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.305]  
[03:26:33.305]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.305]      </block>
[03:26:33.305]      // end if-block "protType == 2"
[03:26:33.309]    </control>
[03:26:33.309]  </sequence>
[03:26:33.309]  
[03:26:33.361]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.361]  
[03:26:33.361]  <debugvars>
[03:26:33.361]    // Pre-defined
[03:26:33.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.361]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.361]    __dp=0x00000000
[03:26:33.361]    __ap=0x00000000
[03:26:33.361]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.361]    __FlashAddr=0x00000000
[03:26:33.361]    __FlashLen=0x00000000
[03:26:33.361]    __FlashArg=0x00000000
[03:26:33.361]    __FlashOp=0x00000000
[03:26:33.361]    __Result=0x00000000
[03:26:33.361]  </debugvars>
[03:26:33.361]  
[03:26:33.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.361]    <block atomic="false" info="">
[03:26:33.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.361]        // -> [isSWJ <= 0x00000001]
[03:26:33.361]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.361]        // -> [hasDormant <= 0x00000000]
[03:26:33.361]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.361]        // -> [protType <= 0x00000002]
[03:26:33.361]    </block>
[03:26:33.365]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.365]      // if-block "protType == 1"
[03:26:33.365]        // =>  FALSE
[03:26:33.365]      // skip if-block "protType == 1"
[03:26:33.365]    </control>
[03:26:33.365]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.365]      // if-block "protType == 2"
[03:26:33.365]        // =>  TRUE
[03:26:33.365]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.365]        // if-block "isSWJ"
[03:26:33.365]          // =>  TRUE
[03:26:33.365]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.365]          // if-block "hasDormant"
[03:26:33.365]            // =>  FALSE
[03:26:33.365]          // skip if-block "hasDormant"
[03:26:33.365]        </control>
[03:26:33.365]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.365]          // if-block "!hasDormant"
[03:26:33.365]            // =>  TRUE
[03:26:33.365]          <block atomic="false" info="">
[03:26:33.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.369]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.373]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.373]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.377]          </block>
[03:26:33.377]          // end if-block "!hasDormant"
[03:26:33.377]        </control>
[03:26:33.377]        // end if-block "isSWJ"
[03:26:33.377]      </control>
[03:26:33.377]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.377]        // if-block "!isSWJ"
[03:26:33.377]          // =>  FALSE
[03:26:33.377]        // skip if-block "!isSWJ"
[03:26:33.377]      </control>
[03:26:33.377]      <block atomic="false" info="">
[03:26:33.377]        ReadDP(0x0);
[03:26:33.377]  
[03:26:33.377]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.377]  
[03:26:33.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.377]      </block>
[03:26:33.377]      // end if-block "protType == 2"
[03:26:33.377]    </control>
[03:26:33.377]  </sequence>
[03:26:33.377]  
[03:26:33.434]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.434]  
[03:26:33.434]  <debugvars>
[03:26:33.434]    // Pre-defined
[03:26:33.434]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.434]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.434]    __dp=0x00000000
[03:26:33.434]    __ap=0x00000000
[03:26:33.434]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.434]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.434]    __FlashAddr=0x00000000
[03:26:33.434]    __FlashLen=0x00000000
[03:26:33.434]    __FlashArg=0x00000000
[03:26:33.434]    __FlashOp=0x00000000
[03:26:33.434]    __Result=0x00000000
[03:26:33.434]  </debugvars>
[03:26:33.434]  
[03:26:33.434]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.434]    <block atomic="false" info="">
[03:26:33.434]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.437]        // -> [isSWJ <= 0x00000001]
[03:26:33.437]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.437]        // -> [hasDormant <= 0x00000000]
[03:26:33.437]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.437]        // -> [protType <= 0x00000002]
[03:26:33.437]    </block>
[03:26:33.437]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.437]      // if-block "protType == 1"
[03:26:33.437]        // =>  FALSE
[03:26:33.437]      // skip if-block "protType == 1"
[03:26:33.437]    </control>
[03:26:33.437]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.437]      // if-block "protType == 2"
[03:26:33.437]        // =>  TRUE
[03:26:33.437]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.437]        // if-block "isSWJ"
[03:26:33.437]          // =>  TRUE
[03:26:33.437]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.437]          // if-block "hasDormant"
[03:26:33.437]            // =>  FALSE
[03:26:33.437]          // skip if-block "hasDormant"
[03:26:33.437]        </control>
[03:26:33.437]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.437]          // if-block "!hasDormant"
[03:26:33.437]            // =>  TRUE
[03:26:33.437]          <block atomic="false" info="">
[03:26:33.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.441]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.441]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.445]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.445]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.445]          </block>
[03:26:33.449]          // end if-block "!hasDormant"
[03:26:33.449]        </control>
[03:26:33.449]        // end if-block "isSWJ"
[03:26:33.449]      </control>
[03:26:33.449]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.449]        // if-block "!isSWJ"
[03:26:33.449]          // =>  FALSE
[03:26:33.449]        // skip if-block "!isSWJ"
[03:26:33.449]      </control>
[03:26:33.449]      <block atomic="false" info="">
[03:26:33.449]        ReadDP(0x0);
[03:26:33.449]  
[03:26:33.449]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.449]  
[03:26:33.449]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.449]      </block>
[03:26:33.449]      // end if-block "protType == 2"
[03:26:33.449]    </control>
[03:26:33.449]  </sequence>
[03:26:33.449]  
[03:26:33.505]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.505]  
[03:26:33.507]  <debugvars>
[03:26:33.507]    // Pre-defined
[03:26:33.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.507]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.507]    __dp=0x00000000
[03:26:33.507]    __ap=0x00000000
[03:26:33.507]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.507]    __FlashAddr=0x00000000
[03:26:33.507]    __FlashLen=0x00000000
[03:26:33.507]    __FlashArg=0x00000000
[03:26:33.507]    __FlashOp=0x00000000
[03:26:33.507]    __Result=0x00000000
[03:26:33.507]  </debugvars>
[03:26:33.507]  
[03:26:33.507]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.507]    <block atomic="false" info="">
[03:26:33.507]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.507]        // -> [isSWJ <= 0x00000001]
[03:26:33.507]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.507]        // -> [hasDormant <= 0x00000000]
[03:26:33.507]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.507]        // -> [protType <= 0x00000002]
[03:26:33.507]    </block>
[03:26:33.507]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.507]      // if-block "protType == 1"
[03:26:33.507]        // =>  FALSE
[03:26:33.507]      // skip if-block "protType == 1"
[03:26:33.510]    </control>
[03:26:33.510]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.510]      // if-block "protType == 2"
[03:26:33.510]        // =>  TRUE
[03:26:33.510]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.510]        // if-block "isSWJ"
[03:26:33.510]          // =>  TRUE
[03:26:33.510]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.510]          // if-block "hasDormant"
[03:26:33.510]            // =>  FALSE
[03:26:33.510]          // skip if-block "hasDormant"
[03:26:33.510]        </control>
[03:26:33.510]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.510]          // if-block "!hasDormant"
[03:26:33.510]            // =>  TRUE
[03:26:33.510]          <block atomic="false" info="">
[03:26:33.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.518]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.522]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.522]          </block>
[03:26:33.522]          // end if-block "!hasDormant"
[03:26:33.522]        </control>
[03:26:33.522]        // end if-block "isSWJ"
[03:26:33.522]      </control>
[03:26:33.526]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.526]        // if-block "!isSWJ"
[03:26:33.526]          // =>  FALSE
[03:26:33.526]        // skip if-block "!isSWJ"
[03:26:33.526]      </control>
[03:26:33.526]      <block atomic="false" info="">
[03:26:33.526]        ReadDP(0x0);
[03:26:33.530]  
[03:26:33.530]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.530]  
[03:26:33.530]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.530]      </block>
[03:26:33.530]      // end if-block "protType == 2"
[03:26:33.530]    </control>
[03:26:33.534]  </sequence>
[03:26:33.534]  
[03:26:33.590]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.590]  
[03:26:33.590]  <debugvars>
[03:26:33.590]    // Pre-defined
[03:26:33.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.590]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.590]    __dp=0x00000000
[03:26:33.590]    __ap=0x00000000
[03:26:33.590]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.590]    __FlashAddr=0x00000000
[03:26:33.590]    __FlashLen=0x00000000
[03:26:33.590]    __FlashArg=0x00000000
[03:26:33.590]    __FlashOp=0x00000000
[03:26:33.590]    __Result=0x00000000
[03:26:33.590]  </debugvars>
[03:26:33.590]  
[03:26:33.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.590]    <block atomic="false" info="">
[03:26:33.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.590]        // -> [isSWJ <= 0x00000001]
[03:26:33.590]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.590]        // -> [hasDormant <= 0x00000000]
[03:26:33.590]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.590]        // -> [protType <= 0x00000002]
[03:26:33.594]    </block>
[03:26:33.594]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.594]      // if-block "protType == 1"
[03:26:33.594]        // =>  FALSE
[03:26:33.594]      // skip if-block "protType == 1"
[03:26:33.594]    </control>
[03:26:33.594]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.594]      // if-block "protType == 2"
[03:26:33.594]        // =>  TRUE
[03:26:33.594]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.594]        // if-block "isSWJ"
[03:26:33.594]          // =>  TRUE
[03:26:33.594]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.594]          // if-block "hasDormant"
[03:26:33.594]            // =>  FALSE
[03:26:33.594]          // skip if-block "hasDormant"
[03:26:33.594]        </control>
[03:26:33.594]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.594]          // if-block "!hasDormant"
[03:26:33.594]            // =>  TRUE
[03:26:33.594]          <block atomic="false" info="">
[03:26:33.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.598]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.602]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.606]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.606]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.606]          </block>
[03:26:33.606]          // end if-block "!hasDormant"
[03:26:33.606]        </control>
[03:26:33.606]        // end if-block "isSWJ"
[03:26:33.606]      </control>
[03:26:33.606]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.606]        // if-block "!isSWJ"
[03:26:33.610]          // =>  FALSE
[03:26:33.610]        // skip if-block "!isSWJ"
[03:26:33.610]      </control>
[03:26:33.610]      <block atomic="false" info="">
[03:26:33.610]        ReadDP(0x0);
[03:26:33.610]  
[03:26:33.610]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.610]  
[03:26:33.610]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.610]      </block>
[03:26:33.610]      // end if-block "protType == 2"
[03:26:33.610]    </control>
[03:26:33.610]  </sequence>
[03:26:33.610]  
[03:26:33.662]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.662]  
[03:26:33.662]  <debugvars>
[03:26:33.662]    // Pre-defined
[03:26:33.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.662]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.662]    __dp=0x00000000
[03:26:33.662]    __ap=0x00000000
[03:26:33.662]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.662]    __FlashAddr=0x00000000
[03:26:33.662]    __FlashLen=0x00000000
[03:26:33.662]    __FlashArg=0x00000000
[03:26:33.662]    __FlashOp=0x00000000
[03:26:33.662]    __Result=0x00000000
[03:26:33.662]  </debugvars>
[03:26:33.662]  
[03:26:33.662]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.662]    <block atomic="false" info="">
[03:26:33.662]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.662]        // -> [isSWJ <= 0x00000001]
[03:26:33.662]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.666]        // -> [hasDormant <= 0x00000000]
[03:26:33.666]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.666]        // -> [protType <= 0x00000002]
[03:26:33.666]    </block>
[03:26:33.666]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.666]      // if-block "protType == 1"
[03:26:33.666]        // =>  FALSE
[03:26:33.666]      // skip if-block "protType == 1"
[03:26:33.666]    </control>
[03:26:33.666]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.666]      // if-block "protType == 2"
[03:26:33.666]        // =>  TRUE
[03:26:33.666]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.666]        // if-block "isSWJ"
[03:26:33.666]          // =>  TRUE
[03:26:33.666]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.666]          // if-block "hasDormant"
[03:26:33.666]            // =>  FALSE
[03:26:33.666]          // skip if-block "hasDormant"
[03:26:33.666]        </control>
[03:26:33.666]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.666]          // if-block "!hasDormant"
[03:26:33.666]            // =>  TRUE
[03:26:33.666]          <block atomic="false" info="">
[03:26:33.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.670]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.678]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.682]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.682]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.682]          </block>
[03:26:33.682]          // end if-block "!hasDormant"
[03:26:33.682]        </control>
[03:26:33.682]        // end if-block "isSWJ"
[03:26:33.682]      </control>
[03:26:33.682]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.682]        // if-block "!isSWJ"
[03:26:33.686]          // =>  FALSE
[03:26:33.686]        // skip if-block "!isSWJ"
[03:26:33.686]      </control>
[03:26:33.686]      <block atomic="false" info="">
[03:26:33.686]        ReadDP(0x0);
[03:26:33.686]  
[03:26:33.686]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.686]  
[03:26:33.686]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.686]      </block>
[03:26:33.686]      // end if-block "protType == 2"
[03:26:33.686]    </control>
[03:26:33.686]  </sequence>
[03:26:33.686]  
[03:26:33.747]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.747]  
[03:26:33.747]  <debugvars>
[03:26:33.747]    // Pre-defined
[03:26:33.747]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.747]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.747]    __dp=0x00000000
[03:26:33.747]    __ap=0x00000000
[03:26:33.747]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.747]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.747]    __FlashAddr=0x00000000
[03:26:33.747]    __FlashLen=0x00000000
[03:26:33.747]    __FlashArg=0x00000000
[03:26:33.747]    __FlashOp=0x00000000
[03:26:33.747]    __Result=0x00000000
[03:26:33.747]  </debugvars>
[03:26:33.747]  
[03:26:33.747]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.747]    <block atomic="false" info="">
[03:26:33.747]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.747]        // -> [isSWJ <= 0x00000001]
[03:26:33.747]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.747]        // -> [hasDormant <= 0x00000000]
[03:26:33.747]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.747]        // -> [protType <= 0x00000002]
[03:26:33.751]    </block>
[03:26:33.751]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.751]      // if-block "protType == 1"
[03:26:33.751]        // =>  FALSE
[03:26:33.751]      // skip if-block "protType == 1"
[03:26:33.751]    </control>
[03:26:33.751]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.751]      // if-block "protType == 2"
[03:26:33.751]        // =>  TRUE
[03:26:33.751]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.751]        // if-block "isSWJ"
[03:26:33.751]          // =>  TRUE
[03:26:33.751]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.751]          // if-block "hasDormant"
[03:26:33.751]            // =>  FALSE
[03:26:33.751]          // skip if-block "hasDormant"
[03:26:33.751]        </control>
[03:26:33.751]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.751]          // if-block "!hasDormant"
[03:26:33.751]            // =>  TRUE
[03:26:33.751]          <block atomic="false" info="">
[03:26:33.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.751]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.755]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.755]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.763]          </block>
[03:26:33.763]          // end if-block "!hasDormant"
[03:26:33.763]        </control>
[03:26:33.763]        // end if-block "isSWJ"
[03:26:33.763]      </control>
[03:26:33.763]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.763]        // if-block "!isSWJ"
[03:26:33.763]          // =>  FALSE
[03:26:33.763]        // skip if-block "!isSWJ"
[03:26:33.763]      </control>
[03:26:33.763]      <block atomic="false" info="">
[03:26:33.763]        ReadDP(0x0);
[03:26:33.763]  
[03:26:33.763]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.763]  
[03:26:33.763]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.763]      </block>
[03:26:33.763]      // end if-block "protType == 2"
[03:26:33.763]    </control>
[03:26:33.763]  </sequence>
[03:26:33.763]  
[03:26:33.819]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.819]  
[03:26:33.819]  <debugvars>
[03:26:33.819]    // Pre-defined
[03:26:33.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.819]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.819]    __dp=0x00000000
[03:26:33.819]    __ap=0x00000000
[03:26:33.819]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.819]    __FlashAddr=0x00000000
[03:26:33.819]    __FlashLen=0x00000000
[03:26:33.819]    __FlashArg=0x00000000
[03:26:33.819]    __FlashOp=0x00000000
[03:26:33.821]    __Result=0x00000000
[03:26:33.821]  </debugvars>
[03:26:33.821]  
[03:26:33.821]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.821]    <block atomic="false" info="">
[03:26:33.821]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.821]        // -> [isSWJ <= 0x00000001]
[03:26:33.821]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.821]        // -> [hasDormant <= 0x00000000]
[03:26:33.821]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.821]        // -> [protType <= 0x00000002]
[03:26:33.821]    </block>
[03:26:33.821]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.821]      // if-block "protType == 1"
[03:26:33.821]        // =>  FALSE
[03:26:33.821]      // skip if-block "protType == 1"
[03:26:33.821]    </control>
[03:26:33.821]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.821]      // if-block "protType == 2"
[03:26:33.821]        // =>  TRUE
[03:26:33.823]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.823]        // if-block "isSWJ"
[03:26:33.823]          // =>  TRUE
[03:26:33.823]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.823]          // if-block "hasDormant"
[03:26:33.823]            // =>  FALSE
[03:26:33.823]          // skip if-block "hasDormant"
[03:26:33.823]        </control>
[03:26:33.823]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.823]          // if-block "!hasDormant"
[03:26:33.823]            // =>  TRUE
[03:26:33.823]          <block atomic="false" info="">
[03:26:33.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.823]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.827]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.827]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.827]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.827]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.839]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.839]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.839]          </block>
[03:26:33.839]          // end if-block "!hasDormant"
[03:26:33.839]        </control>
[03:26:33.839]        // end if-block "isSWJ"
[03:26:33.839]      </control>
[03:26:33.839]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.839]        // if-block "!isSWJ"
[03:26:33.839]          // =>  FALSE
[03:26:33.839]        // skip if-block "!isSWJ"
[03:26:33.839]      </control>
[03:26:33.839]      <block atomic="false" info="">
[03:26:33.839]        ReadDP(0x0);
[03:26:33.843]  
[03:26:33.843]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.843]  
[03:26:33.843]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.843]      </block>
[03:26:33.843]      // end if-block "protType == 2"
[03:26:33.843]    </control>
[03:26:33.843]  </sequence>
[03:26:33.843]  
[03:26:33.904]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.904]  
[03:26:33.904]  <debugvars>
[03:26:33.904]    // Pre-defined
[03:26:33.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.904]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.904]    __dp=0x00000000
[03:26:33.904]    __ap=0x00000000
[03:26:33.905]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.905]    __FlashAddr=0x00000000
[03:26:33.905]    __FlashLen=0x00000000
[03:26:33.905]    __FlashArg=0x00000000
[03:26:33.905]    __FlashOp=0x00000000
[03:26:33.905]    __Result=0x00000000
[03:26:33.905]  </debugvars>
[03:26:33.905]  
[03:26:33.905]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.905]    <block atomic="false" info="">
[03:26:33.905]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.905]        // -> [isSWJ <= 0x00000001]
[03:26:33.905]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.905]        // -> [hasDormant <= 0x00000000]
[03:26:33.905]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.905]        // -> [protType <= 0x00000002]
[03:26:33.905]    </block>
[03:26:33.905]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.905]      // if-block "protType == 1"
[03:26:33.905]        // =>  FALSE
[03:26:33.908]      // skip if-block "protType == 1"
[03:26:33.908]    </control>
[03:26:33.908]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.908]      // if-block "protType == 2"
[03:26:33.908]        // =>  TRUE
[03:26:33.908]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.908]        // if-block "isSWJ"
[03:26:33.908]          // =>  TRUE
[03:26:33.908]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.908]          // if-block "hasDormant"
[03:26:33.908]            // =>  FALSE
[03:26:33.908]          // skip if-block "hasDormant"
[03:26:33.908]        </control>
[03:26:33.908]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.908]          // if-block "!hasDormant"
[03:26:33.908]            // =>  TRUE
[03:26:33.908]          <block atomic="false" info="">
[03:26:33.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.912]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.918]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.920]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.920]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.920]          </block>
[03:26:33.920]          // end if-block "!hasDormant"
[03:26:33.920]        </control>
[03:26:33.924]        // end if-block "isSWJ"
[03:26:33.924]      </control>
[03:26:33.924]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.924]        // if-block "!isSWJ"
[03:26:33.924]          // =>  FALSE
[03:26:33.924]        // skip if-block "!isSWJ"
[03:26:33.924]      </control>
[03:26:33.924]      <block atomic="false" info="">
[03:26:33.924]        ReadDP(0x0);
[03:26:33.924]  
[03:26:33.924]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:33.924]  
[03:26:33.924]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:33.924]      </block>
[03:26:33.924]      // end if-block "protType == 2"
[03:26:33.924]    </control>
[03:26:33.924]  </sequence>
[03:26:33.924]  
[03:26:33.976]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:33.976]  
[03:26:33.976]  <debugvars>
[03:26:33.976]    // Pre-defined
[03:26:33.976]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:33.976]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:33.976]    __dp=0x00000000
[03:26:33.976]    __ap=0x00000000
[03:26:33.976]    __traceout=0x00000000      (Trace Disabled)
[03:26:33.976]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:33.976]    __FlashAddr=0x00000000
[03:26:33.976]    __FlashLen=0x00000000
[03:26:33.976]    __FlashArg=0x00000000
[03:26:33.976]    __FlashOp=0x00000000
[03:26:33.976]    __Result=0x00000000
[03:26:33.976]  </debugvars>
[03:26:33.976]  
[03:26:33.976]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:33.976]    <block atomic="false" info="">
[03:26:33.976]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:33.976]        // -> [isSWJ <= 0x00000001]
[03:26:33.976]      __var hasDormant = __protocol & 0x00020000;
[03:26:33.976]        // -> [hasDormant <= 0x00000000]
[03:26:33.976]      __var protType   = __protocol & 0x0000FFFF;
[03:26:33.980]        // -> [protType <= 0x00000002]
[03:26:33.980]    </block>
[03:26:33.980]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:33.980]      // if-block "protType == 1"
[03:26:33.980]        // =>  FALSE
[03:26:33.980]      // skip if-block "protType == 1"
[03:26:33.980]    </control>
[03:26:33.980]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:33.980]      // if-block "protType == 2"
[03:26:33.980]        // =>  TRUE
[03:26:33.980]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:33.980]        // if-block "isSWJ"
[03:26:33.980]          // =>  TRUE
[03:26:33.980]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:33.980]          // if-block "hasDormant"
[03:26:33.980]            // =>  FALSE
[03:26:33.980]          // skip if-block "hasDormant"
[03:26:33.980]        </control>
[03:26:33.980]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:33.980]          // if-block "!hasDormant"
[03:26:33.980]            // =>  TRUE
[03:26:33.980]          <block atomic="false" info="">
[03:26:33.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:33.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.984]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:33.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:33.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:33.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.988]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:33.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:33.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:33.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:33.992]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:33.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:33.996]          </block>
[03:26:33.996]          // end if-block "!hasDormant"
[03:26:33.996]        </control>
[03:26:33.996]        // end if-block "isSWJ"
[03:26:33.996]      </control>
[03:26:33.996]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:33.996]        // if-block "!isSWJ"
[03:26:33.996]          // =>  FALSE
[03:26:33.996]        // skip if-block "!isSWJ"
[03:26:33.996]      </control>
[03:26:34.000]      <block atomic="false" info="">
[03:26:34.000]        ReadDP(0x0);
[03:26:34.000]  
[03:26:34.000]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.000]  
[03:26:34.000]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.000]      </block>
[03:26:34.000]      // end if-block "protType == 2"
[03:26:34.000]    </control>
[03:26:34.000]  </sequence>
[03:26:34.000]  
[03:26:34.055]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.055]  
[03:26:34.055]  <debugvars>
[03:26:34.055]    // Pre-defined
[03:26:34.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.055]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.055]    __dp=0x00000000
[03:26:34.055]    __ap=0x00000000
[03:26:34.055]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.055]    __FlashAddr=0x00000000
[03:26:34.055]    __FlashLen=0x00000000
[03:26:34.055]    __FlashArg=0x00000000
[03:26:34.055]    __FlashOp=0x00000000
[03:26:34.055]    __Result=0x00000000
[03:26:34.055]  </debugvars>
[03:26:34.055]  
[03:26:34.055]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.055]    <block atomic="false" info="">
[03:26:34.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.055]        // -> [isSWJ <= 0x00000001]
[03:26:34.055]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.055]        // -> [hasDormant <= 0x00000000]
[03:26:34.055]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.055]        // -> [protType <= 0x00000002]
[03:26:34.055]    </block>
[03:26:34.055]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.055]      // if-block "protType == 1"
[03:26:34.055]        // =>  FALSE
[03:26:34.055]      // skip if-block "protType == 1"
[03:26:34.055]    </control>
[03:26:34.059]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.059]      // if-block "protType == 2"
[03:26:34.059]        // =>  TRUE
[03:26:34.059]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.059]        // if-block "isSWJ"
[03:26:34.059]          // =>  TRUE
[03:26:34.059]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.059]          // if-block "hasDormant"
[03:26:34.059]            // =>  FALSE
[03:26:34.059]          // skip if-block "hasDormant"
[03:26:34.059]        </control>
[03:26:34.059]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.059]          // if-block "!hasDormant"
[03:26:34.059]            // =>  TRUE
[03:26:34.059]          <block atomic="false" info="">
[03:26:34.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.059]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.067]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.067]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.067]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.071]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.071]          </block>
[03:26:34.071]          // end if-block "!hasDormant"
[03:26:34.071]        </control>
[03:26:34.071]        // end if-block "isSWJ"
[03:26:34.071]      </control>
[03:26:34.071]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.071]        // if-block "!isSWJ"
[03:26:34.071]          // =>  FALSE
[03:26:34.071]        // skip if-block "!isSWJ"
[03:26:34.071]      </control>
[03:26:34.071]      <block atomic="false" info="">
[03:26:34.071]        ReadDP(0x0);
[03:26:34.075]  
[03:26:34.075]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.075]  
[03:26:34.075]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.075]      </block>
[03:26:34.075]      // end if-block "protType == 2"
[03:26:34.075]    </control>
[03:26:34.075]  </sequence>
[03:26:34.075]  
[03:26:34.127]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.127]  
[03:26:34.127]  <debugvars>
[03:26:34.127]    // Pre-defined
[03:26:34.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.127]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.127]    __dp=0x00000000
[03:26:34.127]    __ap=0x00000000
[03:26:34.127]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.127]    __FlashAddr=0x00000000
[03:26:34.127]    __FlashLen=0x00000000
[03:26:34.127]    __FlashArg=0x00000000
[03:26:34.127]    __FlashOp=0x00000000
[03:26:34.127]    __Result=0x00000000
[03:26:34.127]  </debugvars>
[03:26:34.127]  
[03:26:34.127]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.127]    <block atomic="false" info="">
[03:26:34.127]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.127]        // -> [isSWJ <= 0x00000001]
[03:26:34.127]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.127]        // -> [hasDormant <= 0x00000000]
[03:26:34.127]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.127]        // -> [protType <= 0x00000002]
[03:26:34.127]    </block>
[03:26:34.127]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.127]      // if-block "protType == 1"
[03:26:34.127]        // =>  FALSE
[03:26:34.127]      // skip if-block "protType == 1"
[03:26:34.127]    </control>
[03:26:34.127]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.127]      // if-block "protType == 2"
[03:26:34.131]        // =>  TRUE
[03:26:34.131]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.131]        // if-block "isSWJ"
[03:26:34.131]          // =>  TRUE
[03:26:34.131]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.131]          // if-block "hasDormant"
[03:26:34.131]            // =>  FALSE
[03:26:34.131]          // skip if-block "hasDormant"
[03:26:34.131]        </control>
[03:26:34.131]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.131]          // if-block "!hasDormant"
[03:26:34.131]            // =>  TRUE
[03:26:34.131]          <block atomic="false" info="">
[03:26:34.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.139]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.147]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.151]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.151]          </block>
[03:26:34.151]          // end if-block "!hasDormant"
[03:26:34.151]        </control>
[03:26:34.151]        // end if-block "isSWJ"
[03:26:34.151]      </control>
[03:26:34.151]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.151]        // if-block "!isSWJ"
[03:26:34.151]          // =>  FALSE
[03:26:34.151]        // skip if-block "!isSWJ"
[03:26:34.151]      </control>
[03:26:34.151]      <block atomic="false" info="">
[03:26:34.151]        ReadDP(0x0);
[03:26:34.155]  
[03:26:34.155]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.155]  
[03:26:34.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.155]      </block>
[03:26:34.155]      // end if-block "protType == 2"
[03:26:34.155]    </control>
[03:26:34.155]  </sequence>
[03:26:34.155]  
[03:26:34.211]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.211]  
[03:26:34.211]  <debugvars>
[03:26:34.211]    // Pre-defined
[03:26:34.211]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.211]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.211]    __dp=0x00000000
[03:26:34.213]    __ap=0x00000000
[03:26:34.213]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.213]    __FlashAddr=0x00000000
[03:26:34.213]    __FlashLen=0x00000000
[03:26:34.213]    __FlashArg=0x00000000
[03:26:34.213]    __FlashOp=0x00000000
[03:26:34.213]    __Result=0x00000000
[03:26:34.213]  </debugvars>
[03:26:34.213]  
[03:26:34.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.213]    <block atomic="false" info="">
[03:26:34.213]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.213]        // -> [isSWJ <= 0x00000001]
[03:26:34.213]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.213]        // -> [hasDormant <= 0x00000000]
[03:26:34.213]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.213]        // -> [protType <= 0x00000002]
[03:26:34.213]    </block>
[03:26:34.213]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.213]      // if-block "protType == 1"
[03:26:34.215]        // =>  FALSE
[03:26:34.215]      // skip if-block "protType == 1"
[03:26:34.215]    </control>
[03:26:34.215]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.215]      // if-block "protType == 2"
[03:26:34.215]        // =>  TRUE
[03:26:34.215]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.215]        // if-block "isSWJ"
[03:26:34.215]          // =>  TRUE
[03:26:34.215]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.215]          // if-block "hasDormant"
[03:26:34.215]            // =>  FALSE
[03:26:34.215]          // skip if-block "hasDormant"
[03:26:34.215]        </control>
[03:26:34.215]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.215]          // if-block "!hasDormant"
[03:26:34.215]            // =>  TRUE
[03:26:34.215]          <block atomic="false" info="">
[03:26:34.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.215]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.219]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.223]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.227]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.231]          </block>
[03:26:34.231]          // end if-block "!hasDormant"
[03:26:34.231]        </control>
[03:26:34.231]        // end if-block "isSWJ"
[03:26:34.231]      </control>
[03:26:34.231]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.231]        // if-block "!isSWJ"
[03:26:34.231]          // =>  FALSE
[03:26:34.231]        // skip if-block "!isSWJ"
[03:26:34.231]      </control>
[03:26:34.231]      <block atomic="false" info="">
[03:26:34.231]        ReadDP(0x0);
[03:26:34.231]  
[03:26:34.231]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.231]  
[03:26:34.231]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.231]      </block>
[03:26:34.231]      // end if-block "protType == 2"
[03:26:34.231]    </control>
[03:26:34.231]  </sequence>
[03:26:34.231]  
[03:26:34.283]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.283]  
[03:26:34.283]  <debugvars>
[03:26:34.283]    // Pre-defined
[03:26:34.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.283]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.283]    __dp=0x00000000
[03:26:34.283]    __ap=0x00000000
[03:26:34.283]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.283]    __FlashAddr=0x00000000
[03:26:34.283]    __FlashLen=0x00000000
[03:26:34.283]    __FlashArg=0x00000000
[03:26:34.283]    __FlashOp=0x00000000
[03:26:34.283]    __Result=0x00000000
[03:26:34.283]  </debugvars>
[03:26:34.283]  
[03:26:34.283]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.283]    <block atomic="false" info="">
[03:26:34.283]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.283]        // -> [isSWJ <= 0x00000001]
[03:26:34.283]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.283]        // -> [hasDormant <= 0x00000000]
[03:26:34.283]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.283]        // -> [protType <= 0x00000002]
[03:26:34.283]    </block>
[03:26:34.283]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.283]      // if-block "protType == 1"
[03:26:34.283]        // =>  FALSE
[03:26:34.283]      // skip if-block "protType == 1"
[03:26:34.283]    </control>
[03:26:34.283]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.283]      // if-block "protType == 2"
[03:26:34.283]        // =>  TRUE
[03:26:34.287]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.287]        // if-block "isSWJ"
[03:26:34.287]          // =>  TRUE
[03:26:34.287]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.287]          // if-block "hasDormant"
[03:26:34.287]            // =>  FALSE
[03:26:34.287]          // skip if-block "hasDormant"
[03:26:34.287]        </control>
[03:26:34.287]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.287]          // if-block "!hasDormant"
[03:26:34.287]            // =>  TRUE
[03:26:34.287]          <block atomic="false" info="">
[03:26:34.287]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.287]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.287]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.291]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.291]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.291]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.295]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.295]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.295]          </block>
[03:26:34.295]          // end if-block "!hasDormant"
[03:26:34.295]        </control>
[03:26:34.295]        // end if-block "isSWJ"
[03:26:34.295]      </control>
[03:26:34.295]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.295]        // if-block "!isSWJ"
[03:26:34.295]          // =>  FALSE
[03:26:34.295]        // skip if-block "!isSWJ"
[03:26:34.295]      </control>
[03:26:34.295]      <block atomic="false" info="">
[03:26:34.295]        ReadDP(0x0);
[03:26:34.303]  
[03:26:34.303]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.303]  
[03:26:34.303]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.303]      </block>
[03:26:34.303]      // end if-block "protType == 2"
[03:26:34.303]    </control>
[03:26:34.303]  </sequence>
[03:26:34.303]  
[03:26:34.355]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.355]  
[03:26:34.355]  <debugvars>
[03:26:34.355]    // Pre-defined
[03:26:34.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.355]    __dp=0x00000000
[03:26:34.355]    __ap=0x00000000
[03:26:34.355]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.355]    __FlashAddr=0x00000000
[03:26:34.355]    __FlashLen=0x00000000
[03:26:34.355]    __FlashArg=0x00000000
[03:26:34.355]    __FlashOp=0x00000000
[03:26:34.355]    __Result=0x00000000
[03:26:34.355]  </debugvars>
[03:26:34.355]  
[03:26:34.355]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.355]    <block atomic="false" info="">
[03:26:34.355]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.355]        // -> [isSWJ <= 0x00000001]
[03:26:34.355]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.355]        // -> [hasDormant <= 0x00000000]
[03:26:34.355]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.355]        // -> [protType <= 0x00000002]
[03:26:34.355]    </block>
[03:26:34.355]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.355]      // if-block "protType == 1"
[03:26:34.355]        // =>  FALSE
[03:26:34.355]      // skip if-block "protType == 1"
[03:26:34.355]    </control>
[03:26:34.355]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.355]      // if-block "protType == 2"
[03:26:34.355]        // =>  TRUE
[03:26:34.355]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.355]        // if-block "isSWJ"
[03:26:34.355]          // =>  TRUE
[03:26:34.355]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.355]          // if-block "hasDormant"
[03:26:34.359]            // =>  FALSE
[03:26:34.359]          // skip if-block "hasDormant"
[03:26:34.359]        </control>
[03:26:34.359]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.359]          // if-block "!hasDormant"
[03:26:34.359]            // =>  TRUE
[03:26:34.359]          <block atomic="false" info="">
[03:26:34.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.359]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.367]          </block>
[03:26:34.367]          // end if-block "!hasDormant"
[03:26:34.367]        </control>
[03:26:34.367]        // end if-block "isSWJ"
[03:26:34.367]      </control>
[03:26:34.367]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.367]        // if-block "!isSWJ"
[03:26:34.367]          // =>  FALSE
[03:26:34.367]        // skip if-block "!isSWJ"
[03:26:34.367]      </control>
[03:26:34.367]      <block atomic="false" info="">
[03:26:34.367]        ReadDP(0x0);
[03:26:34.371]  
[03:26:34.371]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.371]  
[03:26:34.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.371]      </block>
[03:26:34.371]      // end if-block "protType == 2"
[03:26:34.371]    </control>
[03:26:34.371]  </sequence>
[03:26:34.371]  
[03:26:34.428]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.428]  
[03:26:34.428]  <debugvars>
[03:26:34.428]    // Pre-defined
[03:26:34.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.428]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.428]    __dp=0x00000000
[03:26:34.428]    __ap=0x00000000
[03:26:34.428]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.428]    __FlashAddr=0x00000000
[03:26:34.428]    __FlashLen=0x00000000
[03:26:34.428]    __FlashArg=0x00000000
[03:26:34.428]    __FlashOp=0x00000000
[03:26:34.428]    __Result=0x00000000
[03:26:34.428]  </debugvars>
[03:26:34.428]  
[03:26:34.428]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.428]    <block atomic="false" info="">
[03:26:34.428]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.428]        // -> [isSWJ <= 0x00000001]
[03:26:34.428]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.428]        // -> [hasDormant <= 0x00000000]
[03:26:34.428]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.428]        // -> [protType <= 0x00000002]
[03:26:34.428]    </block>
[03:26:34.428]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.428]      // if-block "protType == 1"
[03:26:34.428]        // =>  FALSE
[03:26:34.428]      // skip if-block "protType == 1"
[03:26:34.428]    </control>
[03:26:34.432]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.432]      // if-block "protType == 2"
[03:26:34.432]        // =>  TRUE
[03:26:34.432]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.432]        // if-block "isSWJ"
[03:26:34.432]          // =>  TRUE
[03:26:34.432]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.432]          // if-block "hasDormant"
[03:26:34.432]            // =>  FALSE
[03:26:34.432]          // skip if-block "hasDormant"
[03:26:34.432]        </control>
[03:26:34.432]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.432]          // if-block "!hasDormant"
[03:26:34.432]            // =>  TRUE
[03:26:34.432]          <block atomic="false" info="">
[03:26:34.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.432]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.440]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.444]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.452]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.452]          </block>
[03:26:34.452]          // end if-block "!hasDormant"
[03:26:34.452]        </control>
[03:26:34.452]        // end if-block "isSWJ"
[03:26:34.452]      </control>
[03:26:34.452]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.452]        // if-block "!isSWJ"
[03:26:34.452]          // =>  FALSE
[03:26:34.452]        // skip if-block "!isSWJ"
[03:26:34.452]      </control>
[03:26:34.452]      <block atomic="false" info="">
[03:26:34.452]        ReadDP(0x0);
[03:26:34.456]  
[03:26:34.456]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.456]  
[03:26:34.456]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.456]      </block>
[03:26:34.456]      // end if-block "protType == 2"
[03:26:34.456]    </control>
[03:26:34.456]  </sequence>
[03:26:34.456]  
[03:26:34.512]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.512]  
[03:26:34.512]  <debugvars>
[03:26:34.512]    // Pre-defined
[03:26:34.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.512]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.512]    __dp=0x00000000
[03:26:34.512]    __ap=0x00000000
[03:26:34.512]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.512]    __FlashAddr=0x00000000
[03:26:34.512]    __FlashLen=0x00000000
[03:26:34.512]    __FlashArg=0x00000000
[03:26:34.512]    __FlashOp=0x00000000
[03:26:34.512]    __Result=0x00000000
[03:26:34.512]  </debugvars>
[03:26:34.512]  
[03:26:34.512]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.512]    <block atomic="false" info="">
[03:26:34.512]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.512]        // -> [isSWJ <= 0x00000001]
[03:26:34.512]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.512]        // -> [hasDormant <= 0x00000000]
[03:26:34.512]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.512]        // -> [protType <= 0x00000002]
[03:26:34.512]    </block>
[03:26:34.512]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.512]      // if-block "protType == 1"
[03:26:34.512]        // =>  FALSE
[03:26:34.512]      // skip if-block "protType == 1"
[03:26:34.512]    </control>
[03:26:34.512]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.512]      // if-block "protType == 2"
[03:26:34.512]        // =>  TRUE
[03:26:34.512]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.512]        // if-block "isSWJ"
[03:26:34.512]          // =>  TRUE
[03:26:34.516]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.516]          // if-block "hasDormant"
[03:26:34.516]            // =>  FALSE
[03:26:34.516]          // skip if-block "hasDormant"
[03:26:34.516]        </control>
[03:26:34.516]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.516]          // if-block "!hasDormant"
[03:26:34.516]            // =>  TRUE
[03:26:34.516]          <block atomic="false" info="">
[03:26:34.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.516]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.516]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.520]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.520]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.520]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.520]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.524]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.524]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.524]          </block>
[03:26:34.524]          // end if-block "!hasDormant"
[03:26:34.524]        </control>
[03:26:34.524]        // end if-block "isSWJ"
[03:26:34.524]      </control>
[03:26:34.524]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.524]        // if-block "!isSWJ"
[03:26:34.524]          // =>  FALSE
[03:26:34.524]        // skip if-block "!isSWJ"
[03:26:34.524]      </control>
[03:26:34.524]      <block atomic="false" info="">
[03:26:34.524]        ReadDP(0x0);
[03:26:34.528]  
[03:26:34.528]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.528]  
[03:26:34.528]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.528]      </block>
[03:26:34.528]      // end if-block "protType == 2"
[03:26:34.528]    </control>
[03:26:34.528]  </sequence>
[03:26:34.528]  
[03:26:34.584]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.584]  
[03:26:34.584]  <debugvars>
[03:26:34.584]    // Pre-defined
[03:26:34.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.584]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.584]    __dp=0x00000000
[03:26:34.584]    __ap=0x00000000
[03:26:34.584]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.584]    __FlashAddr=0x00000000
[03:26:34.584]    __FlashLen=0x00000000
[03:26:34.584]    __FlashArg=0x00000000
[03:26:34.584]    __FlashOp=0x00000000
[03:26:34.584]    __Result=0x00000000
[03:26:34.584]  </debugvars>
[03:26:34.584]  
[03:26:34.584]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.588]    <block atomic="false" info="">
[03:26:34.588]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.588]        // -> [isSWJ <= 0x00000001]
[03:26:34.588]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.588]        // -> [hasDormant <= 0x00000000]
[03:26:34.588]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.588]        // -> [protType <= 0x00000002]
[03:26:34.588]    </block>
[03:26:34.588]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.588]      // if-block "protType == 1"
[03:26:34.588]        // =>  FALSE
[03:26:34.588]      // skip if-block "protType == 1"
[03:26:34.588]    </control>
[03:26:34.588]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.588]      // if-block "protType == 2"
[03:26:34.588]        // =>  TRUE
[03:26:34.588]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.588]        // if-block "isSWJ"
[03:26:34.588]          // =>  TRUE
[03:26:34.588]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.588]          // if-block "hasDormant"
[03:26:34.588]            // =>  FALSE
[03:26:34.588]          // skip if-block "hasDormant"
[03:26:34.588]        </control>
[03:26:34.588]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.588]          // if-block "!hasDormant"
[03:26:34.588]            // =>  TRUE
[03:26:34.588]          <block atomic="false" info="">
[03:26:34.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.592]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.592]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.592]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.596]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.600]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.604]          </block>
[03:26:34.604]          // end if-block "!hasDormant"
[03:26:34.604]        </control>
[03:26:34.604]        // end if-block "isSWJ"
[03:26:34.604]      </control>
[03:26:34.604]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.604]        // if-block "!isSWJ"
[03:26:34.604]          // =>  FALSE
[03:26:34.604]        // skip if-block "!isSWJ"
[03:26:34.604]      </control>
[03:26:34.604]      <block atomic="false" info="">
[03:26:34.604]        ReadDP(0x0);
[03:26:34.608]  
[03:26:34.608]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.608]  
[03:26:34.608]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.608]      </block>
[03:26:34.608]      // end if-block "protType == 2"
[03:26:34.608]    </control>
[03:26:34.608]  </sequence>
[03:26:34.608]  
[03:26:34.668]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.668]  
[03:26:34.668]  <debugvars>
[03:26:34.668]    // Pre-defined
[03:26:34.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.668]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.668]    __dp=0x00000000
[03:26:34.668]    __ap=0x00000000
[03:26:34.668]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.668]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.668]    __FlashAddr=0x00000000
[03:26:34.668]    __FlashLen=0x00000000
[03:26:34.668]    __FlashArg=0x00000000
[03:26:34.668]    __FlashOp=0x00000000
[03:26:34.668]    __Result=0x00000000
[03:26:34.668]  </debugvars>
[03:26:34.668]  
[03:26:34.668]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.668]    <block atomic="false" info="">
[03:26:34.668]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.668]        // -> [isSWJ <= 0x00000001]
[03:26:34.668]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.668]        // -> [hasDormant <= 0x00000000]
[03:26:34.668]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.668]        // -> [protType <= 0x00000002]
[03:26:34.668]    </block>
[03:26:34.668]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.668]      // if-block "protType == 1"
[03:26:34.668]        // =>  FALSE
[03:26:34.668]      // skip if-block "protType == 1"
[03:26:34.668]    </control>
[03:26:34.668]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.668]      // if-block "protType == 2"
[03:26:34.668]        // =>  TRUE
[03:26:34.668]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.668]        // if-block "isSWJ"
[03:26:34.668]          // =>  TRUE
[03:26:34.672]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.672]          // if-block "hasDormant"
[03:26:34.672]            // =>  FALSE
[03:26:34.672]          // skip if-block "hasDormant"
[03:26:34.672]        </control>
[03:26:34.672]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.672]          // if-block "!hasDormant"
[03:26:34.672]            // =>  TRUE
[03:26:34.672]          <block atomic="false" info="">
[03:26:34.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.672]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.672]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.680]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.684]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.684]          </block>
[03:26:34.684]          // end if-block "!hasDormant"
[03:26:34.684]        </control>
[03:26:34.684]        // end if-block "isSWJ"
[03:26:34.684]      </control>
[03:26:34.684]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.684]        // if-block "!isSWJ"
[03:26:34.684]          // =>  FALSE
[03:26:34.684]        // skip if-block "!isSWJ"
[03:26:34.684]      </control>
[03:26:34.684]      <block atomic="false" info="">
[03:26:34.684]        ReadDP(0x0);
[03:26:34.688]  
[03:26:34.688]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.688]  
[03:26:34.688]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.688]      </block>
[03:26:34.688]      // end if-block "protType == 2"
[03:26:34.688]    </control>
[03:26:34.688]  </sequence>
[03:26:34.688]  
[03:26:34.740]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.740]  
[03:26:34.740]  <debugvars>
[03:26:34.740]    // Pre-defined
[03:26:34.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.740]    __dp=0x00000000
[03:26:34.740]    __ap=0x00000000
[03:26:34.740]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.742]    __FlashAddr=0x00000000
[03:26:34.742]    __FlashLen=0x00000000
[03:26:34.742]    __FlashArg=0x00000000
[03:26:34.742]    __FlashOp=0x00000000
[03:26:34.742]    __Result=0x00000000
[03:26:34.742]  </debugvars>
[03:26:34.742]  
[03:26:34.742]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.742]    <block atomic="false" info="">
[03:26:34.742]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.742]        // -> [isSWJ <= 0x00000001]
[03:26:34.742]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.742]        // -> [hasDormant <= 0x00000000]
[03:26:34.742]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.742]        // -> [protType <= 0x00000002]
[03:26:34.742]    </block>
[03:26:34.742]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.742]      // if-block "protType == 1"
[03:26:34.742]        // =>  FALSE
[03:26:34.742]      // skip if-block "protType == 1"
[03:26:34.742]    </control>
[03:26:34.744]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.744]      // if-block "protType == 2"
[03:26:34.744]        // =>  TRUE
[03:26:34.744]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.744]        // if-block "isSWJ"
[03:26:34.744]          // =>  TRUE
[03:26:34.744]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.744]          // if-block "hasDormant"
[03:26:34.744]            // =>  FALSE
[03:26:34.744]          // skip if-block "hasDormant"
[03:26:34.745]        </control>
[03:26:34.745]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.745]          // if-block "!hasDormant"
[03:26:34.745]            // =>  TRUE
[03:26:34.745]          <block atomic="false" info="">
[03:26:34.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.749]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.761]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.765]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.765]          </block>
[03:26:34.765]          // end if-block "!hasDormant"
[03:26:34.765]        </control>
[03:26:34.765]        // end if-block "isSWJ"
[03:26:34.765]      </control>
[03:26:34.765]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.765]        // if-block "!isSWJ"
[03:26:34.765]          // =>  FALSE
[03:26:34.765]        // skip if-block "!isSWJ"
[03:26:34.765]      </control>
[03:26:34.765]      <block atomic="false" info="">
[03:26:34.765]        ReadDP(0x0);
[03:26:34.765]  
[03:26:34.765]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.765]  
[03:26:34.765]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.765]      </block>
[03:26:34.765]      // end if-block "protType == 2"
[03:26:34.765]    </control>
[03:26:34.765]  </sequence>
[03:26:34.769]  
[03:26:34.825]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.825]  
[03:26:34.825]  <debugvars>
[03:26:34.825]    // Pre-defined
[03:26:34.825]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.825]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.825]    __dp=0x00000000
[03:26:34.825]    __ap=0x00000000
[03:26:34.825]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.825]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.825]    __FlashAddr=0x00000000
[03:26:34.825]    __FlashLen=0x00000000
[03:26:34.825]    __FlashArg=0x00000000
[03:26:34.825]    __FlashOp=0x00000000
[03:26:34.825]    __Result=0x00000000
[03:26:34.825]  </debugvars>
[03:26:34.825]  
[03:26:34.825]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.825]    <block atomic="false" info="">
[03:26:34.825]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.825]        // -> [isSWJ <= 0x00000001]
[03:26:34.825]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.825]        // -> [hasDormant <= 0x00000000]
[03:26:34.825]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.825]        // -> [protType <= 0x00000002]
[03:26:34.825]    </block>
[03:26:34.825]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.825]      // if-block "protType == 1"
[03:26:34.825]        // =>  FALSE
[03:26:34.825]      // skip if-block "protType == 1"
[03:26:34.825]    </control>
[03:26:34.825]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.825]      // if-block "protType == 2"
[03:26:34.825]        // =>  TRUE
[03:26:34.829]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.829]        // if-block "isSWJ"
[03:26:34.829]          // =>  TRUE
[03:26:34.829]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.829]          // if-block "hasDormant"
[03:26:34.829]            // =>  FALSE
[03:26:34.829]          // skip if-block "hasDormant"
[03:26:34.829]        </control>
[03:26:34.829]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.829]          // if-block "!hasDormant"
[03:26:34.829]            // =>  TRUE
[03:26:34.829]          <block atomic="false" info="">
[03:26:34.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.829]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.833]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.833]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.833]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.837]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.837]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.837]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.837]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.837]          </block>
[03:26:34.837]          // end if-block "!hasDormant"
[03:26:34.837]        </control>
[03:26:34.841]        // end if-block "isSWJ"
[03:26:34.841]      </control>
[03:26:34.841]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.841]        // if-block "!isSWJ"
[03:26:34.841]          // =>  FALSE
[03:26:34.841]        // skip if-block "!isSWJ"
[03:26:34.841]      </control>
[03:26:34.841]      <block atomic="false" info="">
[03:26:34.841]        ReadDP(0x0);
[03:26:34.841]  
[03:26:34.841]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.841]  
[03:26:34.841]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.841]      </block>
[03:26:34.841]      // end if-block "protType == 2"
[03:26:34.841]    </control>
[03:26:34.841]  </sequence>
[03:26:34.841]  
[03:26:34.897]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.897]  
[03:26:34.897]  <debugvars>
[03:26:34.897]    // Pre-defined
[03:26:34.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.897]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.897]    __dp=0x00000000
[03:26:34.897]    __ap=0x00000000
[03:26:34.897]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.897]    __FlashAddr=0x00000000
[03:26:34.897]    __FlashLen=0x00000000
[03:26:34.897]    __FlashArg=0x00000000
[03:26:34.897]    __FlashOp=0x00000000
[03:26:34.897]    __Result=0x00000000
[03:26:34.897]  </debugvars>
[03:26:34.897]  
[03:26:34.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.897]    <block atomic="false" info="">
[03:26:34.897]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.897]        // -> [isSWJ <= 0x00000001]
[03:26:34.897]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.897]        // -> [hasDormant <= 0x00000000]
[03:26:34.897]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.897]        // -> [protType <= 0x00000002]
[03:26:34.897]    </block>
[03:26:34.897]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.897]      // if-block "protType == 1"
[03:26:34.897]        // =>  FALSE
[03:26:34.897]      // skip if-block "protType == 1"
[03:26:34.897]    </control>
[03:26:34.897]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.897]      // if-block "protType == 2"
[03:26:34.897]        // =>  TRUE
[03:26:34.897]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.897]        // if-block "isSWJ"
[03:26:34.897]          // =>  TRUE
[03:26:34.901]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.901]          // if-block "hasDormant"
[03:26:34.901]            // =>  FALSE
[03:26:34.901]          // skip if-block "hasDormant"
[03:26:34.901]        </control>
[03:26:34.901]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.901]          // if-block "!hasDormant"
[03:26:34.901]            // =>  TRUE
[03:26:34.901]          <block atomic="false" info="">
[03:26:34.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.905]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.909]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.913]          </block>
[03:26:34.913]          // end if-block "!hasDormant"
[03:26:34.913]        </control>
[03:26:34.913]        // end if-block "isSWJ"
[03:26:34.913]      </control>
[03:26:34.913]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.913]        // if-block "!isSWJ"
[03:26:34.913]          // =>  FALSE
[03:26:34.913]        // skip if-block "!isSWJ"
[03:26:34.913]      </control>
[03:26:34.913]      <block atomic="false" info="">
[03:26:34.913]        ReadDP(0x0);
[03:26:34.913]  
[03:26:34.913]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.913]  
[03:26:34.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.913]      </block>
[03:26:34.913]      // end if-block "protType == 2"
[03:26:34.913]    </control>
[03:26:34.917]  </sequence>
[03:26:34.917]  
[03:26:34.969]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:34.969]  
[03:26:34.969]  <debugvars>
[03:26:34.969]    // Pre-defined
[03:26:34.969]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:34.969]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:34.969]    __dp=0x00000000
[03:26:34.969]    __ap=0x00000000
[03:26:34.969]    __traceout=0x00000000      (Trace Disabled)
[03:26:34.969]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:34.969]    __FlashAddr=0x00000000
[03:26:34.969]    __FlashLen=0x00000000
[03:26:34.969]    __FlashArg=0x00000000
[03:26:34.969]    __FlashOp=0x00000000
[03:26:34.969]    __Result=0x00000000
[03:26:34.969]  </debugvars>
[03:26:34.969]  
[03:26:34.969]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:34.969]    <block atomic="false" info="">
[03:26:34.969]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:34.969]        // -> [isSWJ <= 0x00000001]
[03:26:34.969]      __var hasDormant = __protocol & 0x00020000;
[03:26:34.969]        // -> [hasDormant <= 0x00000000]
[03:26:34.969]      __var protType   = __protocol & 0x0000FFFF;
[03:26:34.969]        // -> [protType <= 0x00000002]
[03:26:34.969]    </block>
[03:26:34.969]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:34.969]      // if-block "protType == 1"
[03:26:34.969]        // =>  FALSE
[03:26:34.969]      // skip if-block "protType == 1"
[03:26:34.969]    </control>
[03:26:34.969]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:34.969]      // if-block "protType == 2"
[03:26:34.969]        // =>  TRUE
[03:26:34.969]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:34.969]        // if-block "isSWJ"
[03:26:34.973]          // =>  TRUE
[03:26:34.973]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:34.973]          // if-block "hasDormant"
[03:26:34.973]            // =>  FALSE
[03:26:34.973]          // skip if-block "hasDormant"
[03:26:34.973]        </control>
[03:26:34.973]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:34.973]          // if-block "!hasDormant"
[03:26:34.973]            // =>  TRUE
[03:26:34.973]          <block atomic="false" info="">
[03:26:34.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:34.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.973]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:34.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:34.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:34.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.977]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:34.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:34.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:34.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:34.985]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:34.985]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:34.985]          </block>
[03:26:34.985]          // end if-block "!hasDormant"
[03:26:34.985]        </control>
[03:26:34.985]        // end if-block "isSWJ"
[03:26:34.985]      </control>
[03:26:34.985]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:34.985]        // if-block "!isSWJ"
[03:26:34.985]          // =>  FALSE
[03:26:34.985]        // skip if-block "!isSWJ"
[03:26:34.989]      </control>
[03:26:34.989]      <block atomic="false" info="">
[03:26:34.989]        ReadDP(0x0);
[03:26:34.989]  
[03:26:34.989]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:34.989]  
[03:26:34.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:34.989]      </block>
[03:26:34.989]      // end if-block "protType == 2"
[03:26:34.989]    </control>
[03:26:34.989]  </sequence>
[03:26:34.989]  
[03:26:35.041]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.041]  
[03:26:35.041]  <debugvars>
[03:26:35.041]    // Pre-defined
[03:26:35.041]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.041]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.041]    __dp=0x00000000
[03:26:35.041]    __ap=0x00000000
[03:26:35.041]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.041]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.041]    __FlashAddr=0x00000000
[03:26:35.041]    __FlashLen=0x00000000
[03:26:35.041]    __FlashArg=0x00000000
[03:26:35.041]    __FlashOp=0x00000000
[03:26:35.041]    __Result=0x00000000
[03:26:35.041]  </debugvars>
[03:26:35.041]  
[03:26:35.041]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.041]    <block atomic="false" info="">
[03:26:35.041]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.041]        // -> [isSWJ <= 0x00000001]
[03:26:35.041]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.041]        // -> [hasDormant <= 0x00000000]
[03:26:35.041]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.041]        // -> [protType <= 0x00000002]
[03:26:35.041]    </block>
[03:26:35.041]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.041]      // if-block "protType == 1"
[03:26:35.045]        // =>  FALSE
[03:26:35.045]      // skip if-block "protType == 1"
[03:26:35.045]    </control>
[03:26:35.045]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.045]      // if-block "protType == 2"
[03:26:35.045]        // =>  TRUE
[03:26:35.045]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.045]        // if-block "isSWJ"
[03:26:35.045]          // =>  TRUE
[03:26:35.045]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.045]          // if-block "hasDormant"
[03:26:35.045]            // =>  FALSE
[03:26:35.045]          // skip if-block "hasDormant"
[03:26:35.045]        </control>
[03:26:35.045]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.045]          // if-block "!hasDormant"
[03:26:35.045]            // =>  TRUE
[03:26:35.045]          <block atomic="false" info="">
[03:26:35.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.049]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.053]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.057]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.061]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.061]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.061]          </block>
[03:26:35.061]          // end if-block "!hasDormant"
[03:26:35.061]        </control>
[03:26:35.061]        // end if-block "isSWJ"
[03:26:35.061]      </control>
[03:26:35.061]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.061]        // if-block "!isSWJ"
[03:26:35.061]          // =>  FALSE
[03:26:35.061]        // skip if-block "!isSWJ"
[03:26:35.061]      </control>
[03:26:35.061]      <block atomic="false" info="">
[03:26:35.061]        ReadDP(0x0);
[03:26:35.065]  
[03:26:35.065]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.065]  
[03:26:35.065]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.065]      </block>
[03:26:35.065]      // end if-block "protType == 2"
[03:26:35.065]    </control>
[03:26:35.065]  </sequence>
[03:26:35.065]  
[03:26:35.125]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.125]  
[03:26:35.125]  <debugvars>
[03:26:35.125]    // Pre-defined
[03:26:35.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.125]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.125]    __dp=0x00000000
[03:26:35.125]    __ap=0x00000000
[03:26:35.125]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.125]    __FlashAddr=0x00000000
[03:26:35.125]    __FlashLen=0x00000000
[03:26:35.125]    __FlashArg=0x00000000
[03:26:35.125]    __FlashOp=0x00000000
[03:26:35.125]    __Result=0x00000000
[03:26:35.125]  </debugvars>
[03:26:35.125]  
[03:26:35.125]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.125]    <block atomic="false" info="">
[03:26:35.125]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.125]        // -> [isSWJ <= 0x00000001]
[03:26:35.125]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.125]        // -> [hasDormant <= 0x00000000]
[03:26:35.125]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.125]        // -> [protType <= 0x00000002]
[03:26:35.125]    </block>
[03:26:35.125]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.125]      // if-block "protType == 1"
[03:26:35.125]        // =>  FALSE
[03:26:35.125]      // skip if-block "protType == 1"
[03:26:35.125]    </control>
[03:26:35.125]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.125]      // if-block "protType == 2"
[03:26:35.125]        // =>  TRUE
[03:26:35.129]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.129]        // if-block "isSWJ"
[03:26:35.129]          // =>  TRUE
[03:26:35.129]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.129]          // if-block "hasDormant"
[03:26:35.129]            // =>  FALSE
[03:26:35.129]          // skip if-block "hasDormant"
[03:26:35.129]        </control>
[03:26:35.129]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.129]          // if-block "!hasDormant"
[03:26:35.129]            // =>  TRUE
[03:26:35.129]          <block atomic="false" info="">
[03:26:35.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.129]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.141]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.141]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.141]          </block>
[03:26:35.141]          // end if-block "!hasDormant"
[03:26:35.141]        </control>
[03:26:35.141]        // end if-block "isSWJ"
[03:26:35.141]      </control>
[03:26:35.141]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.141]        // if-block "!isSWJ"
[03:26:35.141]          // =>  FALSE
[03:26:35.141]        // skip if-block "!isSWJ"
[03:26:35.141]      </control>
[03:26:35.141]      <block atomic="false" info="">
[03:26:35.141]        ReadDP(0x0);
[03:26:35.141]  
[03:26:35.141]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.141]  
[03:26:35.141]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.141]      </block>
[03:26:35.145]      // end if-block "protType == 2"
[03:26:35.145]    </control>
[03:26:35.145]  </sequence>
[03:26:35.145]  
[03:26:35.197]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.197]  
[03:26:35.197]  <debugvars>
[03:26:35.197]    // Pre-defined
[03:26:35.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.197]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.197]    __dp=0x00000000
[03:26:35.197]    __ap=0x00000000
[03:26:35.197]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.197]    __FlashAddr=0x00000000
[03:26:35.197]    __FlashLen=0x00000000
[03:26:35.197]    __FlashArg=0x00000000
[03:26:35.197]    __FlashOp=0x00000000
[03:26:35.197]    __Result=0x00000000
[03:26:35.197]  </debugvars>
[03:26:35.197]  
[03:26:35.197]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.197]    <block atomic="false" info="">
[03:26:35.197]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.197]        // -> [isSWJ <= 0x00000001]
[03:26:35.197]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.197]        // -> [hasDormant <= 0x00000000]
[03:26:35.197]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.197]        // -> [protType <= 0x00000002]
[03:26:35.197]    </block>
[03:26:35.197]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.197]      // if-block "protType == 1"
[03:26:35.197]        // =>  FALSE
[03:26:35.197]      // skip if-block "protType == 1"
[03:26:35.197]    </control>
[03:26:35.197]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.201]      // if-block "protType == 2"
[03:26:35.201]        // =>  TRUE
[03:26:35.201]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.201]        // if-block "isSWJ"
[03:26:35.201]          // =>  TRUE
[03:26:35.201]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.201]          // if-block "hasDormant"
[03:26:35.201]            // =>  FALSE
[03:26:35.201]          // skip if-block "hasDormant"
[03:26:35.201]        </control>
[03:26:35.201]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.201]          // if-block "!hasDormant"
[03:26:35.201]            // =>  TRUE
[03:26:35.201]          <block atomic="false" info="">
[03:26:35.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.201]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.205]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.205]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.209]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.209]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.209]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.209]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.213]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.213]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.213]          </block>
[03:26:35.213]          // end if-block "!hasDormant"
[03:26:35.213]        </control>
[03:26:35.213]        // end if-block "isSWJ"
[03:26:35.213]      </control>
[03:26:35.213]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.213]        // if-block "!isSWJ"
[03:26:35.213]          // =>  FALSE
[03:26:35.213]        // skip if-block "!isSWJ"
[03:26:35.213]      </control>
[03:26:35.213]      <block atomic="false" info="">
[03:26:35.213]        ReadDP(0x0);
[03:26:35.213]  
[03:26:35.213]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.213]  
[03:26:35.217]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.217]      </block>
[03:26:35.217]      // end if-block "protType == 2"
[03:26:35.217]    </control>
[03:26:35.217]  </sequence>
[03:26:35.217]  
[03:26:35.269]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.269]  
[03:26:35.269]  <debugvars>
[03:26:35.269]    // Pre-defined
[03:26:35.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.269]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.269]    __dp=0x00000000
[03:26:35.269]    __ap=0x00000000
[03:26:35.271]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.271]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.271]    __FlashAddr=0x00000000
[03:26:35.271]    __FlashLen=0x00000000
[03:26:35.271]    __FlashArg=0x00000000
[03:26:35.271]    __FlashOp=0x00000000
[03:26:35.271]    __Result=0x00000000
[03:26:35.271]  </debugvars>
[03:26:35.271]  
[03:26:35.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.271]    <block atomic="false" info="">
[03:26:35.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.271]        // -> [isSWJ <= 0x00000001]
[03:26:35.271]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.271]        // -> [hasDormant <= 0x00000000]
[03:26:35.271]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.271]        // -> [protType <= 0x00000002]
[03:26:35.271]    </block>
[03:26:35.272]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.272]      // if-block "protType == 1"
[03:26:35.272]        // =>  FALSE
[03:26:35.272]      // skip if-block "protType == 1"
[03:26:35.272]    </control>
[03:26:35.272]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.272]      // if-block "protType == 2"
[03:26:35.272]        // =>  TRUE
[03:26:35.272]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.272]        // if-block "isSWJ"
[03:26:35.272]          // =>  TRUE
[03:26:35.272]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.272]          // if-block "hasDormant"
[03:26:35.272]            // =>  FALSE
[03:26:35.274]          // skip if-block "hasDormant"
[03:26:35.274]        </control>
[03:26:35.274]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.274]          // if-block "!hasDormant"
[03:26:35.274]            // =>  TRUE
[03:26:35.274]          <block atomic="false" info="">
[03:26:35.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.275]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.279]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.282]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.282]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.282]          </block>
[03:26:35.282]          // end if-block "!hasDormant"
[03:26:35.282]        </control>
[03:26:35.282]        // end if-block "isSWJ"
[03:26:35.282]      </control>
[03:26:35.282]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.282]        // if-block "!isSWJ"
[03:26:35.282]          // =>  FALSE
[03:26:35.282]        // skip if-block "!isSWJ"
[03:26:35.282]      </control>
[03:26:35.282]      <block atomic="false" info="">
[03:26:35.282]        ReadDP(0x0);
[03:26:35.287]  
[03:26:35.287]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.287]  
[03:26:35.287]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.287]      </block>
[03:26:35.287]      // end if-block "protType == 2"
[03:26:35.287]    </control>
[03:26:35.287]  </sequence>
[03:26:35.287]  
[03:26:35.346]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.346]  
[03:26:35.346]  <debugvars>
[03:26:35.346]    // Pre-defined
[03:26:35.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.346]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.346]    __dp=0x00000000
[03:26:35.346]    __ap=0x00000000
[03:26:35.346]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.346]    __FlashAddr=0x00000000
[03:26:35.346]    __FlashLen=0x00000000
[03:26:35.346]    __FlashArg=0x00000000
[03:26:35.346]    __FlashOp=0x00000000
[03:26:35.346]    __Result=0x00000000
[03:26:35.346]  </debugvars>
[03:26:35.346]  
[03:26:35.348]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.348]    <block atomic="false" info="">
[03:26:35.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.348]        // -> [isSWJ <= 0x00000001]
[03:26:35.348]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.348]        // -> [hasDormant <= 0x00000000]
[03:26:35.348]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.348]        // -> [protType <= 0x00000002]
[03:26:35.348]    </block>
[03:26:35.348]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.348]      // if-block "protType == 1"
[03:26:35.348]        // =>  FALSE
[03:26:35.348]      // skip if-block "protType == 1"
[03:26:35.348]    </control>
[03:26:35.348]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.348]      // if-block "protType == 2"
[03:26:35.348]        // =>  TRUE
[03:26:35.348]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.348]        // if-block "isSWJ"
[03:26:35.348]          // =>  TRUE
[03:26:35.348]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.348]          // if-block "hasDormant"
[03:26:35.348]            // =>  FALSE
[03:26:35.348]          // skip if-block "hasDormant"
[03:26:35.350]        </control>
[03:26:35.350]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.350]          // if-block "!hasDormant"
[03:26:35.350]            // =>  TRUE
[03:26:35.350]          <block atomic="false" info="">
[03:26:35.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.350]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.354]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.358]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.359]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.359]          </block>
[03:26:35.359]          // end if-block "!hasDormant"
[03:26:35.359]        </control>
[03:26:35.359]        // end if-block "isSWJ"
[03:26:35.359]      </control>
[03:26:35.359]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.359]        // if-block "!isSWJ"
[03:26:35.359]          // =>  FALSE
[03:26:35.359]        // skip if-block "!isSWJ"
[03:26:35.359]      </control>
[03:26:35.359]      <block atomic="false" info="">
[03:26:35.359]        ReadDP(0x0);
[03:26:35.359]  
[03:26:35.359]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.359]  
[03:26:35.359]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.359]      </block>
[03:26:35.362]      // end if-block "protType == 2"
[03:26:35.362]    </control>
[03:26:35.362]  </sequence>
[03:26:35.362]  
[03:26:35.419]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.419]  
[03:26:35.419]  <debugvars>
[03:26:35.419]    // Pre-defined
[03:26:35.419]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.419]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.419]    __dp=0x00000000
[03:26:35.419]    __ap=0x00000000
[03:26:35.419]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.419]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.419]    __FlashAddr=0x00000000
[03:26:35.419]    __FlashLen=0x00000000
[03:26:35.419]    __FlashArg=0x00000000
[03:26:35.419]    __FlashOp=0x00000000
[03:26:35.419]    __Result=0x00000000
[03:26:35.419]  </debugvars>
[03:26:35.419]  
[03:26:35.419]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.419]    <block atomic="false" info="">
[03:26:35.419]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.419]        // -> [isSWJ <= 0x00000001]
[03:26:35.419]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.419]        // -> [hasDormant <= 0x00000000]
[03:26:35.419]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.419]        // -> [protType <= 0x00000002]
[03:26:35.419]    </block>
[03:26:35.419]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.419]      // if-block "protType == 1"
[03:26:35.419]        // =>  FALSE
[03:26:35.419]      // skip if-block "protType == 1"
[03:26:35.419]    </control>
[03:26:35.419]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.419]      // if-block "protType == 2"
[03:26:35.423]        // =>  TRUE
[03:26:35.423]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.423]        // if-block "isSWJ"
[03:26:35.423]          // =>  TRUE
[03:26:35.423]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.423]          // if-block "hasDormant"
[03:26:35.423]            // =>  FALSE
[03:26:35.423]          // skip if-block "hasDormant"
[03:26:35.423]        </control>
[03:26:35.423]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.423]          // if-block "!hasDormant"
[03:26:35.423]            // =>  TRUE
[03:26:35.423]          <block atomic="false" info="">
[03:26:35.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.423]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.423]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.432]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.432]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.432]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.436]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.436]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.436]          </block>
[03:26:35.436]          // end if-block "!hasDormant"
[03:26:35.436]        </control>
[03:26:35.436]        // end if-block "isSWJ"
[03:26:35.436]      </control>
[03:26:35.436]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.436]        // if-block "!isSWJ"
[03:26:35.436]          // =>  FALSE
[03:26:35.436]        // skip if-block "!isSWJ"
[03:26:35.436]      </control>
[03:26:35.436]      <block atomic="false" info="">
[03:26:35.436]        ReadDP(0x0);
[03:26:35.440]  
[03:26:35.440]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.440]  
[03:26:35.440]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.440]      </block>
[03:26:35.440]      // end if-block "protType == 2"
[03:26:35.440]    </control>
[03:26:35.440]  </sequence>
[03:26:35.440]  
[03:26:35.492]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.492]  
[03:26:35.492]  <debugvars>
[03:26:35.492]    // Pre-defined
[03:26:35.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.494]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.494]    __dp=0x00000000
[03:26:35.494]    __ap=0x00000000
[03:26:35.494]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.494]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.494]    __FlashAddr=0x00000000
[03:26:35.494]    __FlashLen=0x00000000
[03:26:35.494]    __FlashArg=0x00000000
[03:26:35.494]    __FlashOp=0x00000000
[03:26:35.494]    __Result=0x00000000
[03:26:35.494]  </debugvars>
[03:26:35.494]  
[03:26:35.494]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.494]    <block atomic="false" info="">
[03:26:35.494]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.494]        // -> [isSWJ <= 0x00000001]
[03:26:35.494]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.494]        // -> [hasDormant <= 0x00000000]
[03:26:35.494]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.494]        // -> [protType <= 0x00000002]
[03:26:35.494]    </block>
[03:26:35.497]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.497]      // if-block "protType == 1"
[03:26:35.497]        // =>  FALSE
[03:26:35.497]      // skip if-block "protType == 1"
[03:26:35.497]    </control>
[03:26:35.497]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.497]      // if-block "protType == 2"
[03:26:35.497]        // =>  TRUE
[03:26:35.497]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.497]        // if-block "isSWJ"
[03:26:35.497]          // =>  TRUE
[03:26:35.497]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.497]          // if-block "hasDormant"
[03:26:35.497]            // =>  FALSE
[03:26:35.497]          // skip if-block "hasDormant"
[03:26:35.497]        </control>
[03:26:35.497]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.497]          // if-block "!hasDormant"
[03:26:35.497]            // =>  TRUE
[03:26:35.498]          <block atomic="false" info="">
[03:26:35.498]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.500]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.503]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.509]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.511]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.511]          </block>
[03:26:35.511]          // end if-block "!hasDormant"
[03:26:35.511]        </control>
[03:26:35.511]        // end if-block "isSWJ"
[03:26:35.511]      </control>
[03:26:35.511]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.511]        // if-block "!isSWJ"
[03:26:35.511]          // =>  FALSE
[03:26:35.511]        // skip if-block "!isSWJ"
[03:26:35.511]      </control>
[03:26:35.511]      <block atomic="false" info="">
[03:26:35.513]        ReadDP(0x0);
[03:26:35.514]  
[03:26:35.514]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.514]  
[03:26:35.514]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.514]      </block>
[03:26:35.514]      // end if-block "protType == 2"
[03:26:35.514]    </control>
[03:26:35.514]  </sequence>
[03:26:35.514]  
[03:26:35.571]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.571]  
[03:26:35.571]  <debugvars>
[03:26:35.571]    // Pre-defined
[03:26:35.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.571]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.571]    __dp=0x00000000
[03:26:35.571]    __ap=0x00000000
[03:26:35.571]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.572]    __FlashAddr=0x00000000
[03:26:35.572]    __FlashLen=0x00000000
[03:26:35.572]    __FlashArg=0x00000000
[03:26:35.572]    __FlashOp=0x00000000
[03:26:35.572]    __Result=0x00000000
[03:26:35.572]  </debugvars>
[03:26:35.572]  
[03:26:35.572]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.572]    <block atomic="false" info="">
[03:26:35.572]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.572]        // -> [isSWJ <= 0x00000001]
[03:26:35.572]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.572]        // -> [hasDormant <= 0x00000000]
[03:26:35.572]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.572]        // -> [protType <= 0x00000002]
[03:26:35.572]    </block>
[03:26:35.572]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.572]      // if-block "protType == 1"
[03:26:35.572]        // =>  FALSE
[03:26:35.572]      // skip if-block "protType == 1"
[03:26:35.572]    </control>
[03:26:35.572]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.572]      // if-block "protType == 2"
[03:26:35.572]        // =>  TRUE
[03:26:35.572]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.572]        // if-block "isSWJ"
[03:26:35.572]          // =>  TRUE
[03:26:35.572]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.575]          // if-block "hasDormant"
[03:26:35.575]            // =>  FALSE
[03:26:35.575]          // skip if-block "hasDormant"
[03:26:35.575]        </control>
[03:26:35.575]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.575]          // if-block "!hasDormant"
[03:26:35.575]            // =>  TRUE
[03:26:35.575]          <block atomic="false" info="">
[03:26:35.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.579]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.587]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.587]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.591]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.591]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.595]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.595]          </block>
[03:26:35.595]          // end if-block "!hasDormant"
[03:26:35.595]        </control>
[03:26:35.595]        // end if-block "isSWJ"
[03:26:35.595]      </control>
[03:26:35.595]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.595]        // if-block "!isSWJ"
[03:26:35.595]          // =>  FALSE
[03:26:35.595]        // skip if-block "!isSWJ"
[03:26:35.595]      </control>
[03:26:35.595]      <block atomic="false" info="">
[03:26:35.595]        ReadDP(0x0);
[03:26:35.595]  
[03:26:35.595]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.595]  
[03:26:35.595]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.595]      </block>
[03:26:35.595]      // end if-block "protType == 2"
[03:26:35.595]    </control>
[03:26:35.595]  </sequence>
[03:26:35.595]  
[03:26:35.656]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.656]  
[03:26:35.656]  <debugvars>
[03:26:35.656]    // Pre-defined
[03:26:35.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.656]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.656]    __dp=0x00000000
[03:26:35.656]    __ap=0x00000000
[03:26:35.656]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.656]    __FlashAddr=0x00000000
[03:26:35.656]    __FlashLen=0x00000000
[03:26:35.656]    __FlashArg=0x00000000
[03:26:35.656]    __FlashOp=0x00000000
[03:26:35.656]    __Result=0x00000000
[03:26:35.656]  </debugvars>
[03:26:35.656]  
[03:26:35.656]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.656]    <block atomic="false" info="">
[03:26:35.656]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.656]        // -> [isSWJ <= 0x00000001]
[03:26:35.656]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.656]        // -> [hasDormant <= 0x00000000]
[03:26:35.656]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.656]        // -> [protType <= 0x00000002]
[03:26:35.656]    </block>
[03:26:35.656]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.656]      // if-block "protType == 1"
[03:26:35.656]        // =>  FALSE
[03:26:35.660]      // skip if-block "protType == 1"
[03:26:35.660]    </control>
[03:26:35.660]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.660]      // if-block "protType == 2"
[03:26:35.660]        // =>  TRUE
[03:26:35.660]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.660]        // if-block "isSWJ"
[03:26:35.660]          // =>  TRUE
[03:26:35.660]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.660]          // if-block "hasDormant"
[03:26:35.660]            // =>  FALSE
[03:26:35.660]          // skip if-block "hasDormant"
[03:26:35.660]        </control>
[03:26:35.660]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.660]          // if-block "!hasDormant"
[03:26:35.660]            // =>  TRUE
[03:26:35.660]          <block atomic="false" info="">
[03:26:35.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.664]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.664]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.664]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.669]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.669]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.672]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.672]          </block>
[03:26:35.672]          // end if-block "!hasDormant"
[03:26:35.672]        </control>
[03:26:35.672]        // end if-block "isSWJ"
[03:26:35.672]      </control>
[03:26:35.672]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.672]        // if-block "!isSWJ"
[03:26:35.672]          // =>  FALSE
[03:26:35.672]        // skip if-block "!isSWJ"
[03:26:35.672]      </control>
[03:26:35.672]      <block atomic="false" info="">
[03:26:35.672]        ReadDP(0x0);
[03:26:35.672]  
[03:26:35.672]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.672]  
[03:26:35.672]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.672]      </block>
[03:26:35.672]      // end if-block "protType == 2"
[03:26:35.672]    </control>
[03:26:35.672]  </sequence>
[03:26:35.672]  
[03:26:35.728]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.728]  
[03:26:35.728]  <debugvars>
[03:26:35.728]    // Pre-defined
[03:26:35.728]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.728]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.728]    __dp=0x00000000
[03:26:35.728]    __ap=0x00000000
[03:26:35.730]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.730]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.730]    __FlashAddr=0x00000000
[03:26:35.730]    __FlashLen=0x00000000
[03:26:35.730]    __FlashArg=0x00000000
[03:26:35.731]    __FlashOp=0x00000000
[03:26:35.731]    __Result=0x00000000
[03:26:35.731]  </debugvars>
[03:26:35.731]  
[03:26:35.731]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.731]    <block atomic="false" info="">
[03:26:35.731]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.731]        // -> [isSWJ <= 0x00000001]
[03:26:35.731]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.731]        // -> [hasDormant <= 0x00000000]
[03:26:35.731]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.731]        // -> [protType <= 0x00000002]
[03:26:35.731]    </block>
[03:26:35.731]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.732]      // if-block "protType == 1"
[03:26:35.732]        // =>  FALSE
[03:26:35.732]      // skip if-block "protType == 1"
[03:26:35.733]    </control>
[03:26:35.733]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.733]      // if-block "protType == 2"
[03:26:35.733]        // =>  TRUE
[03:26:35.733]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.733]        // if-block "isSWJ"
[03:26:35.733]          // =>  TRUE
[03:26:35.733]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.733]          // if-block "hasDormant"
[03:26:35.733]            // =>  FALSE
[03:26:35.733]          // skip if-block "hasDormant"
[03:26:35.733]        </control>
[03:26:35.733]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.734]          // if-block "!hasDormant"
[03:26:35.734]            // =>  TRUE
[03:26:35.734]          <block atomic="false" info="">
[03:26:35.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.736]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.738]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.741]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.741]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.741]          </block>
[03:26:35.741]          // end if-block "!hasDormant"
[03:26:35.741]        </control>
[03:26:35.741]        // end if-block "isSWJ"
[03:26:35.745]      </control>
[03:26:35.745]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.745]        // if-block "!isSWJ"
[03:26:35.745]          // =>  FALSE
[03:26:35.745]        // skip if-block "!isSWJ"
[03:26:35.745]      </control>
[03:26:35.745]      <block atomic="false" info="">
[03:26:35.745]        ReadDP(0x0);
[03:26:35.753]  
[03:26:35.753]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.753]  
[03:26:35.753]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.754]      </block>
[03:26:35.754]      // end if-block "protType == 2"
[03:26:35.754]    </control>
[03:26:35.754]  </sequence>
[03:26:35.754]  
[03:26:35.815]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.815]  
[03:26:35.815]  <debugvars>
[03:26:35.815]    // Pre-defined
[03:26:35.815]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.815]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.815]    __dp=0x00000000
[03:26:35.815]    __ap=0x00000000
[03:26:35.815]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.815]    __FlashAddr=0x00000000
[03:26:35.815]    __FlashLen=0x00000000
[03:26:35.815]    __FlashArg=0x00000000
[03:26:35.815]    __FlashOp=0x00000000
[03:26:35.815]    __Result=0x00000000
[03:26:35.815]  </debugvars>
[03:26:35.815]  
[03:26:35.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.815]    <block atomic="false" info="">
[03:26:35.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.815]        // -> [isSWJ <= 0x00000001]
[03:26:35.815]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.815]        // -> [hasDormant <= 0x00000000]
[03:26:35.815]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.815]        // -> [protType <= 0x00000002]
[03:26:35.815]    </block>
[03:26:35.815]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.815]      // if-block "protType == 1"
[03:26:35.815]        // =>  FALSE
[03:26:35.815]      // skip if-block "protType == 1"
[03:26:35.815]    </control>
[03:26:35.815]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.819]      // if-block "protType == 2"
[03:26:35.819]        // =>  TRUE
[03:26:35.819]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.819]        // if-block "isSWJ"
[03:26:35.819]          // =>  TRUE
[03:26:35.819]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.819]          // if-block "hasDormant"
[03:26:35.819]            // =>  FALSE
[03:26:35.819]          // skip if-block "hasDormant"
[03:26:35.819]        </control>
[03:26:35.819]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.819]          // if-block "!hasDormant"
[03:26:35.819]            // =>  TRUE
[03:26:35.819]          <block atomic="false" info="">
[03:26:35.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.823]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.825]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.827]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.827]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.827]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.831]          </block>
[03:26:35.831]          // end if-block "!hasDormant"
[03:26:35.831]        </control>
[03:26:35.831]        // end if-block "isSWJ"
[03:26:35.831]      </control>
[03:26:35.831]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.831]        // if-block "!isSWJ"
[03:26:35.831]          // =>  FALSE
[03:26:35.831]        // skip if-block "!isSWJ"
[03:26:35.831]      </control>
[03:26:35.831]      <block atomic="false" info="">
[03:26:35.831]        ReadDP(0x0);
[03:26:35.831]  
[03:26:35.831]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.831]  
[03:26:35.831]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.831]      </block>
[03:26:35.835]      // end if-block "protType == 2"
[03:26:35.835]    </control>
[03:26:35.835]  </sequence>
[03:26:35.835]  
[03:26:35.889]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.889]  
[03:26:35.889]  <debugvars>
[03:26:35.889]    // Pre-defined
[03:26:35.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.889]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.889]    __dp=0x00000000
[03:26:35.889]    __ap=0x00000000
[03:26:35.889]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.889]    __FlashAddr=0x00000000
[03:26:35.889]    __FlashLen=0x00000000
[03:26:35.889]    __FlashArg=0x00000000
[03:26:35.889]    __FlashOp=0x00000000
[03:26:35.889]    __Result=0x00000000
[03:26:35.889]  </debugvars>
[03:26:35.889]  
[03:26:35.889]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.889]    <block atomic="false" info="">
[03:26:35.889]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.889]        // -> [isSWJ <= 0x00000001]
[03:26:35.889]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.892]        // -> [hasDormant <= 0x00000000]
[03:26:35.892]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.892]        // -> [protType <= 0x00000002]
[03:26:35.892]    </block>
[03:26:35.892]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.892]      // if-block "protType == 1"
[03:26:35.892]        // =>  FALSE
[03:26:35.892]      // skip if-block "protType == 1"
[03:26:35.892]    </control>
[03:26:35.892]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.892]      // if-block "protType == 2"
[03:26:35.892]        // =>  TRUE
[03:26:35.892]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.892]        // if-block "isSWJ"
[03:26:35.893]          // =>  TRUE
[03:26:35.893]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.893]          // if-block "hasDormant"
[03:26:35.893]            // =>  FALSE
[03:26:35.893]          // skip if-block "hasDormant"
[03:26:35.893]        </control>
[03:26:35.893]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.893]          // if-block "!hasDormant"
[03:26:35.893]            // =>  TRUE
[03:26:35.893]          <block atomic="false" info="">
[03:26:35.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.897]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.901]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.905]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.905]          </block>
[03:26:35.905]          // end if-block "!hasDormant"
[03:26:35.905]        </control>
[03:26:35.905]        // end if-block "isSWJ"
[03:26:35.905]      </control>
[03:26:35.905]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.905]        // if-block "!isSWJ"
[03:26:35.905]          // =>  FALSE
[03:26:35.905]        // skip if-block "!isSWJ"
[03:26:35.905]      </control>
[03:26:35.905]      <block atomic="false" info="">
[03:26:35.905]        ReadDP(0x0);
[03:26:35.908]  
[03:26:35.908]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.908]  
[03:26:35.908]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.908]      </block>
[03:26:35.908]      // end if-block "protType == 2"
[03:26:35.908]    </control>
[03:26:35.908]  </sequence>
[03:26:35.908]  
[03:26:35.965]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:35.965]  
[03:26:35.965]  <debugvars>
[03:26:35.965]    // Pre-defined
[03:26:35.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:35.965]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:35.965]    __dp=0x00000000
[03:26:35.965]    __ap=0x00000000
[03:26:35.965]    __traceout=0x00000000      (Trace Disabled)
[03:26:35.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:35.965]    __FlashAddr=0x00000000
[03:26:35.965]    __FlashLen=0x00000000
[03:26:35.965]    __FlashArg=0x00000000
[03:26:35.965]    __FlashOp=0x00000000
[03:26:35.965]    __Result=0x00000000
[03:26:35.965]  </debugvars>
[03:26:35.965]  
[03:26:35.965]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:35.965]    <block atomic="false" info="">
[03:26:35.965]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:35.965]        // -> [isSWJ <= 0x00000001]
[03:26:35.965]      __var hasDormant = __protocol & 0x00020000;
[03:26:35.965]        // -> [hasDormant <= 0x00000000]
[03:26:35.965]      __var protType   = __protocol & 0x0000FFFF;
[03:26:35.965]        // -> [protType <= 0x00000002]
[03:26:35.965]    </block>
[03:26:35.965]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:35.965]      // if-block "protType == 1"
[03:26:35.965]        // =>  FALSE
[03:26:35.965]      // skip if-block "protType == 1"
[03:26:35.965]    </control>
[03:26:35.965]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:35.970]      // if-block "protType == 2"
[03:26:35.970]        // =>  TRUE
[03:26:35.970]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:35.970]        // if-block "isSWJ"
[03:26:35.970]          // =>  TRUE
[03:26:35.971]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:35.971]          // if-block "hasDormant"
[03:26:35.971]            // =>  FALSE
[03:26:35.971]          // skip if-block "hasDormant"
[03:26:35.971]        </control>
[03:26:35.971]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:35.971]          // if-block "!hasDormant"
[03:26:35.971]            // =>  TRUE
[03:26:35.971]          <block atomic="false" info="">
[03:26:35.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:35.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:35.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:35.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:35.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.977]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:35.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:35.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:35.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:35.981]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:35.982]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:35.982]          </block>
[03:26:35.982]          // end if-block "!hasDormant"
[03:26:35.982]        </control>
[03:26:35.982]        // end if-block "isSWJ"
[03:26:35.982]      </control>
[03:26:35.982]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:35.982]        // if-block "!isSWJ"
[03:26:35.982]          // =>  FALSE
[03:26:35.982]        // skip if-block "!isSWJ"
[03:26:35.982]      </control>
[03:26:35.982]      <block atomic="false" info="">
[03:26:35.982]        ReadDP(0x0);
[03:26:35.989]  
[03:26:35.989]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:35.989]  
[03:26:35.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:35.989]      </block>
[03:26:35.989]      // end if-block "protType == 2"
[03:26:35.989]    </control>
[03:26:35.989]  </sequence>
[03:26:35.989]  
[03:26:36.042]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.042]  
[03:26:36.042]  <debugvars>
[03:26:36.042]    // Pre-defined
[03:26:36.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.042]    __dp=0x00000000
[03:26:36.042]    __ap=0x00000000
[03:26:36.042]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.043]    __FlashAddr=0x00000000
[03:26:36.043]    __FlashLen=0x00000000
[03:26:36.043]    __FlashArg=0x00000000
[03:26:36.043]    __FlashOp=0x00000000
[03:26:36.043]    __Result=0x00000000
[03:26:36.043]  </debugvars>
[03:26:36.043]  
[03:26:36.043]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.043]    <block atomic="false" info="">
[03:26:36.043]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.043]        // -> [isSWJ <= 0x00000001]
[03:26:36.043]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.043]        // -> [hasDormant <= 0x00000000]
[03:26:36.043]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.043]        // -> [protType <= 0x00000002]
[03:26:36.043]    </block>
[03:26:36.043]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.043]      // if-block "protType == 1"
[03:26:36.043]        // =>  FALSE
[03:26:36.043]      // skip if-block "protType == 1"
[03:26:36.043]    </control>
[03:26:36.043]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.043]      // if-block "protType == 2"
[03:26:36.043]        // =>  TRUE
[03:26:36.043]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.043]        // if-block "isSWJ"
[03:26:36.046]          // =>  TRUE
[03:26:36.046]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.046]          // if-block "hasDormant"
[03:26:36.046]            // =>  FALSE
[03:26:36.046]          // skip if-block "hasDormant"
[03:26:36.046]        </control>
[03:26:36.046]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.046]          // if-block "!hasDormant"
[03:26:36.046]            // =>  TRUE
[03:26:36.046]          <block atomic="false" info="">
[03:26:36.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.050]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.050]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.050]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.056]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.056]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.056]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.058]          </block>
[03:26:36.058]          // end if-block "!hasDormant"
[03:26:36.058]        </control>
[03:26:36.058]        // end if-block "isSWJ"
[03:26:36.058]      </control>
[03:26:36.058]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.058]        // if-block "!isSWJ"
[03:26:36.058]          // =>  FALSE
[03:26:36.058]        // skip if-block "!isSWJ"
[03:26:36.058]      </control>
[03:26:36.058]      <block atomic="false" info="">
[03:26:36.058]        ReadDP(0x0);
[03:26:36.058]  
[03:26:36.058]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.058]  
[03:26:36.058]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.058]      </block>
[03:26:36.058]      // end if-block "protType == 2"
[03:26:36.058]    </control>
[03:26:36.058]  </sequence>
[03:26:36.058]  
[03:26:36.115]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.115]  
[03:26:36.115]  <debugvars>
[03:26:36.115]    // Pre-defined
[03:26:36.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.115]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.116]    __dp=0x00000000
[03:26:36.116]    __ap=0x00000000
[03:26:36.116]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.117]    __FlashAddr=0x00000000
[03:26:36.117]    __FlashLen=0x00000000
[03:26:36.117]    __FlashArg=0x00000000
[03:26:36.117]    __FlashOp=0x00000000
[03:26:36.117]    __Result=0x00000000
[03:26:36.117]  </debugvars>
[03:26:36.117]  
[03:26:36.117]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.118]    <block atomic="false" info="">
[03:26:36.118]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.118]        // -> [isSWJ <= 0x00000001]
[03:26:36.118]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.118]        // -> [hasDormant <= 0x00000000]
[03:26:36.118]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.118]        // -> [protType <= 0x00000002]
[03:26:36.118]    </block>
[03:26:36.119]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.119]      // if-block "protType == 1"
[03:26:36.119]        // =>  FALSE
[03:26:36.119]      // skip if-block "protType == 1"
[03:26:36.120]    </control>
[03:26:36.120]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.120]      // if-block "protType == 2"
[03:26:36.120]        // =>  TRUE
[03:26:36.120]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.120]        // if-block "isSWJ"
[03:26:36.120]          // =>  TRUE
[03:26:36.120]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.120]          // if-block "hasDormant"
[03:26:36.120]            // =>  FALSE
[03:26:36.120]          // skip if-block "hasDormant"
[03:26:36.122]        </control>
[03:26:36.122]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.122]          // if-block "!hasDormant"
[03:26:36.122]            // =>  TRUE
[03:26:36.122]          <block atomic="false" info="">
[03:26:36.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.124]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.126]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.126]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.132]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.132]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.132]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.135]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.135]          </block>
[03:26:36.135]          // end if-block "!hasDormant"
[03:26:36.135]        </control>
[03:26:36.135]        // end if-block "isSWJ"
[03:26:36.135]      </control>
[03:26:36.136]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.136]        // if-block "!isSWJ"
[03:26:36.136]          // =>  FALSE
[03:26:36.136]        // skip if-block "!isSWJ"
[03:26:36.136]      </control>
[03:26:36.136]      <block atomic="false" info="">
[03:26:36.136]        ReadDP(0x0);
[03:26:36.140]  
[03:26:36.140]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.140]  
[03:26:36.140]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.140]      </block>
[03:26:36.140]      // end if-block "protType == 2"
[03:26:36.140]    </control>
[03:26:36.140]  </sequence>
[03:26:36.140]  
[03:26:36.205]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.205]  
[03:26:36.207]  <debugvars>
[03:26:36.207]    // Pre-defined
[03:26:36.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.207]    __dp=0x00000000
[03:26:36.207]    __ap=0x00000000
[03:26:36.207]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.207]    __FlashAddr=0x00000000
[03:26:36.207]    __FlashLen=0x00000000
[03:26:36.207]    __FlashArg=0x00000000
[03:26:36.207]    __FlashOp=0x00000000
[03:26:36.207]    __Result=0x00000000
[03:26:36.207]  </debugvars>
[03:26:36.207]  
[03:26:36.207]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.207]    <block atomic="false" info="">
[03:26:36.207]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.207]        // -> [isSWJ <= 0x00000001]
[03:26:36.207]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.207]        // -> [hasDormant <= 0x00000000]
[03:26:36.207]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.207]        // -> [protType <= 0x00000002]
[03:26:36.207]    </block>
[03:26:36.207]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.210]      // if-block "protType == 1"
[03:26:36.210]        // =>  FALSE
[03:26:36.210]      // skip if-block "protType == 1"
[03:26:36.210]    </control>
[03:26:36.210]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.210]      // if-block "protType == 2"
[03:26:36.210]        // =>  TRUE
[03:26:36.210]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.211]        // if-block "isSWJ"
[03:26:36.211]          // =>  TRUE
[03:26:36.211]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.211]          // if-block "hasDormant"
[03:26:36.211]            // =>  FALSE
[03:26:36.211]          // skip if-block "hasDormant"
[03:26:36.211]        </control>
[03:26:36.211]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.211]          // if-block "!hasDormant"
[03:26:36.211]            // =>  TRUE
[03:26:36.211]          <block atomic="false" info="">
[03:26:36.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.214]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.222]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.227]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.233]          </block>
[03:26:36.233]          // end if-block "!hasDormant"
[03:26:36.234]        </control>
[03:26:36.234]        // end if-block "isSWJ"
[03:26:36.234]      </control>
[03:26:36.234]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.234]        // if-block "!isSWJ"
[03:26:36.234]          // =>  FALSE
[03:26:36.234]        // skip if-block "!isSWJ"
[03:26:36.234]      </control>
[03:26:36.234]      <block atomic="false" info="">
[03:26:36.236]        ReadDP(0x0);
[03:26:36.236]  
[03:26:36.236]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.236]  
[03:26:36.236]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.236]      </block>
[03:26:36.236]      // end if-block "protType == 2"
[03:26:36.236]    </control>
[03:26:36.236]  </sequence>
[03:26:36.236]  
[03:26:36.297]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.297]  
[03:26:36.297]  <debugvars>
[03:26:36.297]    // Pre-defined
[03:26:36.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.297]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.297]    __dp=0x00000000
[03:26:36.297]    __ap=0x00000000
[03:26:36.297]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.297]    __FlashAddr=0x00000000
[03:26:36.297]    __FlashLen=0x00000000
[03:26:36.297]    __FlashArg=0x00000000
[03:26:36.297]    __FlashOp=0x00000000
[03:26:36.297]    __Result=0x00000000
[03:26:36.297]  </debugvars>
[03:26:36.297]  
[03:26:36.297]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.297]    <block atomic="false" info="">
[03:26:36.297]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.297]        // -> [isSWJ <= 0x00000001]
[03:26:36.297]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.297]        // -> [hasDormant <= 0x00000000]
[03:26:36.297]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.297]        // -> [protType <= 0x00000002]
[03:26:36.297]    </block>
[03:26:36.301]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.301]      // if-block "protType == 1"
[03:26:36.301]        // =>  FALSE
[03:26:36.301]      // skip if-block "protType == 1"
[03:26:36.301]    </control>
[03:26:36.301]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.301]      // if-block "protType == 2"
[03:26:36.301]        // =>  TRUE
[03:26:36.301]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.301]        // if-block "isSWJ"
[03:26:36.301]          // =>  TRUE
[03:26:36.301]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.302]          // if-block "hasDormant"
[03:26:36.302]            // =>  FALSE
[03:26:36.302]          // skip if-block "hasDormant"
[03:26:36.302]        </control>
[03:26:36.302]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.302]          // if-block "!hasDormant"
[03:26:36.302]            // =>  TRUE
[03:26:36.302]          <block atomic="false" info="">
[03:26:36.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.304]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.308]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.312]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.313]          </block>
[03:26:36.313]          // end if-block "!hasDormant"
[03:26:36.313]        </control>
[03:26:36.313]        // end if-block "isSWJ"
[03:26:36.313]      </control>
[03:26:36.313]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.313]        // if-block "!isSWJ"
[03:26:36.313]          // =>  FALSE
[03:26:36.313]        // skip if-block "!isSWJ"
[03:26:36.313]      </control>
[03:26:36.314]      <block atomic="false" info="">
[03:26:36.314]        ReadDP(0x0);
[03:26:36.316]  
[03:26:36.316]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.316]  
[03:26:36.316]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.316]      </block>
[03:26:36.316]      // end if-block "protType == 2"
[03:26:36.316]    </control>
[03:26:36.316]  </sequence>
[03:26:36.317]  
[03:26:36.374]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.374]  
[03:26:36.374]  <debugvars>
[03:26:36.374]    // Pre-defined
[03:26:36.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.374]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.374]    __dp=0x00000000
[03:26:36.374]    __ap=0x00000000
[03:26:36.374]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.374]    __FlashAddr=0x00000000
[03:26:36.374]    __FlashLen=0x00000000
[03:26:36.374]    __FlashArg=0x00000000
[03:26:36.374]    __FlashOp=0x00000000
[03:26:36.374]    __Result=0x00000000
[03:26:36.374]  </debugvars>
[03:26:36.374]  
[03:26:36.374]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.374]    <block atomic="false" info="">
[03:26:36.374]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.374]        // -> [isSWJ <= 0x00000001]
[03:26:36.374]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.374]        // -> [hasDormant <= 0x00000000]
[03:26:36.374]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.374]        // -> [protType <= 0x00000002]
[03:26:36.374]    </block>
[03:26:36.374]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.374]      // if-block "protType == 1"
[03:26:36.374]        // =>  FALSE
[03:26:36.374]      // skip if-block "protType == 1"
[03:26:36.374]    </control>
[03:26:36.374]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.374]      // if-block "protType == 2"
[03:26:36.378]        // =>  TRUE
[03:26:36.378]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.378]        // if-block "isSWJ"
[03:26:36.378]          // =>  TRUE
[03:26:36.378]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.378]          // if-block "hasDormant"
[03:26:36.378]            // =>  FALSE
[03:26:36.378]          // skip if-block "hasDormant"
[03:26:36.378]        </control>
[03:26:36.378]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.378]          // if-block "!hasDormant"
[03:26:36.378]            // =>  TRUE
[03:26:36.378]          <block atomic="false" info="">
[03:26:36.378]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.382]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.382]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.382]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.390]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.390]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.394]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.394]          </block>
[03:26:36.394]          // end if-block "!hasDormant"
[03:26:36.394]        </control>
[03:26:36.394]        // end if-block "isSWJ"
[03:26:36.394]      </control>
[03:26:36.394]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.394]        // if-block "!isSWJ"
[03:26:36.394]          // =>  FALSE
[03:26:36.394]        // skip if-block "!isSWJ"
[03:26:36.394]      </control>
[03:26:36.394]      <block atomic="false" info="">
[03:26:36.394]        ReadDP(0x0);
[03:26:36.400]  
[03:26:36.400]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.400]  
[03:26:36.400]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.400]      </block>
[03:26:36.400]      // end if-block "protType == 2"
[03:26:36.400]    </control>
[03:26:36.400]  </sequence>
[03:26:36.402]  
[03:26:36.459]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.459]  
[03:26:36.459]  <debugvars>
[03:26:36.459]    // Pre-defined
[03:26:36.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.459]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.459]    __dp=0x00000000
[03:26:36.459]    __ap=0x00000000
[03:26:36.459]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.459]    __FlashAddr=0x00000000
[03:26:36.459]    __FlashLen=0x00000000
[03:26:36.459]    __FlashArg=0x00000000
[03:26:36.459]    __FlashOp=0x00000000
[03:26:36.459]    __Result=0x00000000
[03:26:36.459]  </debugvars>
[03:26:36.459]  
[03:26:36.459]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.459]    <block atomic="false" info="">
[03:26:36.459]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.459]        // -> [isSWJ <= 0x00000001]
[03:26:36.459]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.459]        // -> [hasDormant <= 0x00000000]
[03:26:36.459]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.459]        // -> [protType <= 0x00000002]
[03:26:36.459]    </block>
[03:26:36.459]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.459]      // if-block "protType == 1"
[03:26:36.459]        // =>  FALSE
[03:26:36.459]      // skip if-block "protType == 1"
[03:26:36.459]    </control>
[03:26:36.459]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.459]      // if-block "protType == 2"
[03:26:36.463]        // =>  TRUE
[03:26:36.463]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.463]        // if-block "isSWJ"
[03:26:36.463]          // =>  TRUE
[03:26:36.463]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.463]          // if-block "hasDormant"
[03:26:36.463]            // =>  FALSE
[03:26:36.463]          // skip if-block "hasDormant"
[03:26:36.463]        </control>
[03:26:36.463]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.463]          // if-block "!hasDormant"
[03:26:36.463]            // =>  TRUE
[03:26:36.463]          <block atomic="false" info="">
[03:26:36.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.467]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.467]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.471]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.491]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.491]          </block>
[03:26:36.491]          // end if-block "!hasDormant"
[03:26:36.491]        </control>
[03:26:36.491]        // end if-block "isSWJ"
[03:26:36.491]      </control>
[03:26:36.491]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.491]        // if-block "!isSWJ"
[03:26:36.491]          // =>  FALSE
[03:26:36.491]        // skip if-block "!isSWJ"
[03:26:36.491]      </control>
[03:26:36.491]      <block atomic="false" info="">
[03:26:36.491]        ReadDP(0x0);
[03:26:36.495]  
[03:26:36.495]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.495]  
[03:26:36.495]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.495]      </block>
[03:26:36.495]      // end if-block "protType == 2"
[03:26:36.495]    </control>
[03:26:36.495]  </sequence>
[03:26:36.495]  
[03:26:36.556]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.556]  
[03:26:36.556]  <debugvars>
[03:26:36.556]    // Pre-defined
[03:26:36.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.556]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.556]    __dp=0x00000000
[03:26:36.556]    __ap=0x00000000
[03:26:36.556]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.556]    __FlashAddr=0x00000000
[03:26:36.556]    __FlashLen=0x00000000
[03:26:36.556]    __FlashArg=0x00000000
[03:26:36.556]    __FlashOp=0x00000000
[03:26:36.556]    __Result=0x00000000
[03:26:36.556]  </debugvars>
[03:26:36.556]  
[03:26:36.556]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.556]    <block atomic="false" info="">
[03:26:36.556]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.556]        // -> [isSWJ <= 0x00000001]
[03:26:36.556]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.556]        // -> [hasDormant <= 0x00000000]
[03:26:36.556]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.556]        // -> [protType <= 0x00000002]
[03:26:36.556]    </block>
[03:26:36.556]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.556]      // if-block "protType == 1"
[03:26:36.556]        // =>  FALSE
[03:26:36.556]      // skip if-block "protType == 1"
[03:26:36.556]    </control>
[03:26:36.556]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.560]      // if-block "protType == 2"
[03:26:36.560]        // =>  TRUE
[03:26:36.560]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.560]        // if-block "isSWJ"
[03:26:36.560]          // =>  TRUE
[03:26:36.560]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.560]          // if-block "hasDormant"
[03:26:36.560]            // =>  FALSE
[03:26:36.560]          // skip if-block "hasDormant"
[03:26:36.560]        </control>
[03:26:36.560]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.560]          // if-block "!hasDormant"
[03:26:36.560]            // =>  TRUE
[03:26:36.560]          <block atomic="false" info="">
[03:26:36.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.560]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.564]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.568]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.568]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.572]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.572]          </block>
[03:26:36.572]          // end if-block "!hasDormant"
[03:26:36.572]        </control>
[03:26:36.572]        // end if-block "isSWJ"
[03:26:36.572]      </control>
[03:26:36.572]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.572]        // if-block "!isSWJ"
[03:26:36.572]          // =>  FALSE
[03:26:36.572]        // skip if-block "!isSWJ"
[03:26:36.572]      </control>
[03:26:36.572]      <block atomic="false" info="">
[03:26:36.572]        ReadDP(0x0);
[03:26:36.576]  
[03:26:36.576]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.576]  
[03:26:36.576]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.576]      </block>
[03:26:36.576]      // end if-block "protType == 2"
[03:26:36.576]    </control>
[03:26:36.576]  </sequence>
[03:26:36.576]  
[03:26:36.628]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.628]  
[03:26:36.628]  <debugvars>
[03:26:36.628]    // Pre-defined
[03:26:36.628]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.628]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.628]    __dp=0x00000000
[03:26:36.628]    __ap=0x00000000
[03:26:36.628]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.628]    __FlashAddr=0x00000000
[03:26:36.628]    __FlashLen=0x00000000
[03:26:36.628]    __FlashArg=0x00000000
[03:26:36.628]    __FlashOp=0x00000000
[03:26:36.628]    __Result=0x00000000
[03:26:36.628]  </debugvars>
[03:26:36.628]  
[03:26:36.628]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.628]    <block atomic="false" info="">
[03:26:36.628]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.628]        // -> [isSWJ <= 0x00000001]
[03:26:36.631]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.631]        // -> [hasDormant <= 0x00000000]
[03:26:36.631]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.632]        // -> [protType <= 0x00000002]
[03:26:36.632]    </block>
[03:26:36.632]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.632]      // if-block "protType == 1"
[03:26:36.632]        // =>  FALSE
[03:26:36.632]      // skip if-block "protType == 1"
[03:26:36.632]    </control>
[03:26:36.632]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.632]      // if-block "protType == 2"
[03:26:36.633]        // =>  TRUE
[03:26:36.633]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.633]        // if-block "isSWJ"
[03:26:36.633]          // =>  TRUE
[03:26:36.633]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.633]          // if-block "hasDormant"
[03:26:36.633]            // =>  FALSE
[03:26:36.633]          // skip if-block "hasDormant"
[03:26:36.633]        </control>
[03:26:36.633]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.633]          // if-block "!hasDormant"
[03:26:36.633]            // =>  TRUE
[03:26:36.633]          <block atomic="false" info="">
[03:26:36.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.635]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.635]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.637]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.637]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.649]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.649]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.649]          </block>
[03:26:36.649]          // end if-block "!hasDormant"
[03:26:36.649]        </control>
[03:26:36.649]        // end if-block "isSWJ"
[03:26:36.649]      </control>
[03:26:36.649]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.649]        // if-block "!isSWJ"
[03:26:36.649]          // =>  FALSE
[03:26:36.649]        // skip if-block "!isSWJ"
[03:26:36.649]      </control>
[03:26:36.649]      <block atomic="false" info="">
[03:26:36.649]        ReadDP(0x0);
[03:26:36.649]  
[03:26:36.649]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.649]  
[03:26:36.649]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.649]      </block>
[03:26:36.653]      // end if-block "protType == 2"
[03:26:36.653]    </control>
[03:26:36.653]  </sequence>
[03:26:36.653]  
[03:26:36.714]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.714]  
[03:26:36.714]  <debugvars>
[03:26:36.714]    // Pre-defined
[03:26:36.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.714]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.714]    __dp=0x00000000
[03:26:36.714]    __ap=0x00000000
[03:26:36.714]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.716]    __FlashAddr=0x00000000
[03:26:36.716]    __FlashLen=0x00000000
[03:26:36.716]    __FlashArg=0x00000000
[03:26:36.716]    __FlashOp=0x00000000
[03:26:36.716]    __Result=0x00000000
[03:26:36.716]  </debugvars>
[03:26:36.716]  
[03:26:36.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.716]    <block atomic="false" info="">
[03:26:36.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.716]        // -> [isSWJ <= 0x00000001]
[03:26:36.718]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.718]        // -> [hasDormant <= 0x00000000]
[03:26:36.718]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.718]        // -> [protType <= 0x00000002]
[03:26:36.718]    </block>
[03:26:36.718]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.718]      // if-block "protType == 1"
[03:26:36.718]        // =>  FALSE
[03:26:36.718]      // skip if-block "protType == 1"
[03:26:36.718]    </control>
[03:26:36.718]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.718]      // if-block "protType == 2"
[03:26:36.718]        // =>  TRUE
[03:26:36.718]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.718]        // if-block "isSWJ"
[03:26:36.718]          // =>  TRUE
[03:26:36.718]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.718]          // if-block "hasDormant"
[03:26:36.718]            // =>  FALSE
[03:26:36.718]          // skip if-block "hasDormant"
[03:26:36.718]        </control>
[03:26:36.718]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.718]          // if-block "!hasDormant"
[03:26:36.718]            // =>  TRUE
[03:26:36.718]          <block atomic="false" info="">
[03:26:36.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.722]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.726]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.726]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.726]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.730]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.730]          </block>
[03:26:36.730]          // end if-block "!hasDormant"
[03:26:36.730]        </control>
[03:26:36.730]        // end if-block "isSWJ"
[03:26:36.734]      </control>
[03:26:36.734]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.734]        // if-block "!isSWJ"
[03:26:36.734]          // =>  FALSE
[03:26:36.734]        // skip if-block "!isSWJ"
[03:26:36.734]      </control>
[03:26:36.734]      <block atomic="false" info="">
[03:26:36.734]        ReadDP(0x0);
[03:26:36.734]  
[03:26:36.734]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.734]  
[03:26:36.734]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.734]      </block>
[03:26:36.734]      // end if-block "protType == 2"
[03:26:36.734]    </control>
[03:26:36.734]  </sequence>
[03:26:36.734]  
[03:26:36.790]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.790]  
[03:26:36.790]  <debugvars>
[03:26:36.790]    // Pre-defined
[03:26:36.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.790]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.790]    __dp=0x00000000
[03:26:36.790]    __ap=0x00000000
[03:26:36.790]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.790]    __FlashAddr=0x00000000
[03:26:36.790]    __FlashLen=0x00000000
[03:26:36.790]    __FlashArg=0x00000000
[03:26:36.790]    __FlashOp=0x00000000
[03:26:36.793]    __Result=0x00000000
[03:26:36.793]  </debugvars>
[03:26:36.793]  
[03:26:36.793]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.793]    <block atomic="false" info="">
[03:26:36.793]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.793]        // -> [isSWJ <= 0x00000001]
[03:26:36.793]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.793]        // -> [hasDormant <= 0x00000000]
[03:26:36.793]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.793]        // -> [protType <= 0x00000002]
[03:26:36.793]    </block>
[03:26:36.793]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.793]      // if-block "protType == 1"
[03:26:36.793]        // =>  FALSE
[03:26:36.795]      // skip if-block "protType == 1"
[03:26:36.795]    </control>
[03:26:36.795]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.795]      // if-block "protType == 2"
[03:26:36.795]        // =>  TRUE
[03:26:36.795]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.795]        // if-block "isSWJ"
[03:26:36.795]          // =>  TRUE
[03:26:36.795]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.795]          // if-block "hasDormant"
[03:26:36.795]            // =>  FALSE
[03:26:36.795]          // skip if-block "hasDormant"
[03:26:36.795]        </control>
[03:26:36.795]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.795]          // if-block "!hasDormant"
[03:26:36.795]            // =>  TRUE
[03:26:36.795]          <block atomic="false" info="">
[03:26:36.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.799]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.799]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.799]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.803]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.811]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.811]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.811]          </block>
[03:26:36.811]          // end if-block "!hasDormant"
[03:26:36.811]        </control>
[03:26:36.811]        // end if-block "isSWJ"
[03:26:36.811]      </control>
[03:26:36.811]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.815]        // if-block "!isSWJ"
[03:26:36.815]          // =>  FALSE
[03:26:36.815]        // skip if-block "!isSWJ"
[03:26:36.815]      </control>
[03:26:36.815]      <block atomic="false" info="">
[03:26:36.815]        ReadDP(0x0);
[03:26:36.815]  
[03:26:36.815]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.815]  
[03:26:36.815]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.815]      </block>
[03:26:36.815]      // end if-block "protType == 2"
[03:26:36.815]    </control>
[03:26:36.815]  </sequence>
[03:26:36.815]  
[03:26:36.876]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.876]  
[03:26:36.876]  <debugvars>
[03:26:36.876]    // Pre-defined
[03:26:36.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.876]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.876]    __dp=0x00000000
[03:26:36.876]    __ap=0x00000000
[03:26:36.876]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.876]    __FlashAddr=0x00000000
[03:26:36.876]    __FlashLen=0x00000000
[03:26:36.876]    __FlashArg=0x00000000
[03:26:36.876]    __FlashOp=0x00000000
[03:26:36.876]    __Result=0x00000000
[03:26:36.876]  </debugvars>
[03:26:36.876]  
[03:26:36.876]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.876]    <block atomic="false" info="">
[03:26:36.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.876]        // -> [isSWJ <= 0x00000001]
[03:26:36.876]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.876]        // -> [hasDormant <= 0x00000000]
[03:26:36.876]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.876]        // -> [protType <= 0x00000002]
[03:26:36.876]    </block>
[03:26:36.876]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.876]      // if-block "protType == 1"
[03:26:36.876]        // =>  FALSE
[03:26:36.876]      // skip if-block "protType == 1"
[03:26:36.876]    </control>
[03:26:36.876]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.876]      // if-block "protType == 2"
[03:26:36.876]        // =>  TRUE
[03:26:36.876]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.876]        // if-block "isSWJ"
[03:26:36.880]          // =>  TRUE
[03:26:36.880]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.880]          // if-block "hasDormant"
[03:26:36.880]            // =>  FALSE
[03:26:36.880]          // skip if-block "hasDormant"
[03:26:36.880]        </control>
[03:26:36.880]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.880]          // if-block "!hasDormant"
[03:26:36.880]            // =>  TRUE
[03:26:36.880]          <block atomic="false" info="">
[03:26:36.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.888]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.892]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.894]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.896]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.900]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.900]          </block>
[03:26:36.900]          // end if-block "!hasDormant"
[03:26:36.900]        </control>
[03:26:36.900]        // end if-block "isSWJ"
[03:26:36.900]      </control>
[03:26:36.900]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.900]        // if-block "!isSWJ"
[03:26:36.900]          // =>  FALSE
[03:26:36.900]        // skip if-block "!isSWJ"
[03:26:36.900]      </control>
[03:26:36.900]      <block atomic="false" info="">
[03:26:36.900]        ReadDP(0x0);
[03:26:36.900]  
[03:26:36.900]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.900]  
[03:26:36.900]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.900]      </block>
[03:26:36.900]      // end if-block "protType == 2"
[03:26:36.900]    </control>
[03:26:36.900]  </sequence>
[03:26:36.900]  
[03:26:36.961]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:36.961]  
[03:26:36.961]  <debugvars>
[03:26:36.961]    // Pre-defined
[03:26:36.961]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:36.961]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:36.961]    __dp=0x00000000
[03:26:36.961]    __ap=0x00000000
[03:26:36.961]    __traceout=0x00000000      (Trace Disabled)
[03:26:36.961]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:36.961]    __FlashAddr=0x00000000
[03:26:36.961]    __FlashLen=0x00000000
[03:26:36.961]    __FlashArg=0x00000000
[03:26:36.961]    __FlashOp=0x00000000
[03:26:36.961]    __Result=0x00000000
[03:26:36.961]  </debugvars>
[03:26:36.961]  
[03:26:36.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:36.961]    <block atomic="false" info="">
[03:26:36.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:36.961]        // -> [isSWJ <= 0x00000001]
[03:26:36.961]      __var hasDormant = __protocol & 0x00020000;
[03:26:36.961]        // -> [hasDormant <= 0x00000000]
[03:26:36.961]      __var protType   = __protocol & 0x0000FFFF;
[03:26:36.961]        // -> [protType <= 0x00000002]
[03:26:36.961]    </block>
[03:26:36.961]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:36.961]      // if-block "protType == 1"
[03:26:36.961]        // =>  FALSE
[03:26:36.961]      // skip if-block "protType == 1"
[03:26:36.961]    </control>
[03:26:36.961]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:36.961]      // if-block "protType == 2"
[03:26:36.961]        // =>  TRUE
[03:26:36.961]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:36.961]        // if-block "isSWJ"
[03:26:36.961]          // =>  TRUE
[03:26:36.961]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:36.961]          // if-block "hasDormant"
[03:26:36.965]            // =>  FALSE
[03:26:36.965]          // skip if-block "hasDormant"
[03:26:36.965]        </control>
[03:26:36.965]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:36.965]          // if-block "!hasDormant"
[03:26:36.965]            // =>  TRUE
[03:26:36.965]          <block atomic="false" info="">
[03:26:36.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:36.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.965]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:36.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:36.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:36.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.969]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:36.973]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:36.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:36.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:36.974]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:36.974]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:36.974]          </block>
[03:26:36.974]          // end if-block "!hasDormant"
[03:26:36.974]        </control>
[03:26:36.974]        // end if-block "isSWJ"
[03:26:36.974]      </control>
[03:26:36.974]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:36.974]        // if-block "!isSWJ"
[03:26:36.974]          // =>  FALSE
[03:26:36.974]        // skip if-block "!isSWJ"
[03:26:36.974]      </control>
[03:26:36.974]      <block atomic="false" info="">
[03:26:36.974]        ReadDP(0x0);
[03:26:36.977]  
[03:26:36.977]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:36.977]  
[03:26:36.977]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:36.977]      </block>
[03:26:36.977]      // end if-block "protType == 2"
[03:26:36.977]    </control>
[03:26:36.977]  </sequence>
[03:26:36.977]  
[03:26:37.033]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.033]  
[03:26:37.033]  <debugvars>
[03:26:37.033]    // Pre-defined
[03:26:37.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.033]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.033]    __dp=0x00000000
[03:26:37.033]    __ap=0x00000000
[03:26:37.033]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.033]    __FlashAddr=0x00000000
[03:26:37.033]    __FlashLen=0x00000000
[03:26:37.033]    __FlashArg=0x00000000
[03:26:37.033]    __FlashOp=0x00000000
[03:26:37.033]    __Result=0x00000000
[03:26:37.033]  </debugvars>
[03:26:37.033]  
[03:26:37.033]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.033]    <block atomic="false" info="">
[03:26:37.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.033]        // -> [isSWJ <= 0x00000001]
[03:26:37.033]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.033]        // -> [hasDormant <= 0x00000000]
[03:26:37.033]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.033]        // -> [protType <= 0x00000002]
[03:26:37.033]    </block>
[03:26:37.033]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.037]      // if-block "protType == 1"
[03:26:37.037]        // =>  FALSE
[03:26:37.037]      // skip if-block "protType == 1"
[03:26:37.037]    </control>
[03:26:37.037]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.037]      // if-block "protType == 2"
[03:26:37.038]        // =>  TRUE
[03:26:37.038]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.038]        // if-block "isSWJ"
[03:26:37.038]          // =>  TRUE
[03:26:37.038]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.038]          // if-block "hasDormant"
[03:26:37.038]            // =>  FALSE
[03:26:37.038]          // skip if-block "hasDormant"
[03:26:37.038]        </control>
[03:26:37.038]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.038]          // if-block "!hasDormant"
[03:26:37.038]            // =>  TRUE
[03:26:37.038]          <block atomic="false" info="">
[03:26:37.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.042]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.042]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.047]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.050]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.055]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.059]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.059]          </block>
[03:26:37.059]          // end if-block "!hasDormant"
[03:26:37.059]        </control>
[03:26:37.059]        // end if-block "isSWJ"
[03:26:37.059]      </control>
[03:26:37.059]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.059]        // if-block "!isSWJ"
[03:26:37.059]          // =>  FALSE
[03:26:37.059]        // skip if-block "!isSWJ"
[03:26:37.059]      </control>
[03:26:37.059]      <block atomic="false" info="">
[03:26:37.059]        ReadDP(0x0);
[03:26:37.062]  
[03:26:37.062]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.062]  
[03:26:37.062]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.062]      </block>
[03:26:37.062]      // end if-block "protType == 2"
[03:26:37.062]    </control>
[03:26:37.062]  </sequence>
[03:26:37.062]  
[03:26:37.119]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.119]  
[03:26:37.119]  <debugvars>
[03:26:37.119]    // Pre-defined
[03:26:37.119]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.119]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.119]    __dp=0x00000000
[03:26:37.119]    __ap=0x00000000
[03:26:37.119]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.119]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.119]    __FlashAddr=0x00000000
[03:26:37.119]    __FlashLen=0x00000000
[03:26:37.119]    __FlashArg=0x00000000
[03:26:37.119]    __FlashOp=0x00000000
[03:26:37.119]    __Result=0x00000000
[03:26:37.119]  </debugvars>
[03:26:37.119]  
[03:26:37.119]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.119]    <block atomic="false" info="">
[03:26:37.119]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.119]        // -> [isSWJ <= 0x00000001]
[03:26:37.119]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.119]        // -> [hasDormant <= 0x00000000]
[03:26:37.119]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.119]        // -> [protType <= 0x00000002]
[03:26:37.119]    </block>
[03:26:37.119]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.123]      // if-block "protType == 1"
[03:26:37.123]        // =>  FALSE
[03:26:37.123]      // skip if-block "protType == 1"
[03:26:37.123]    </control>
[03:26:37.123]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.123]      // if-block "protType == 2"
[03:26:37.123]        // =>  TRUE
[03:26:37.123]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.123]        // if-block "isSWJ"
[03:26:37.123]          // =>  TRUE
[03:26:37.123]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.123]          // if-block "hasDormant"
[03:26:37.123]            // =>  FALSE
[03:26:37.123]          // skip if-block "hasDormant"
[03:26:37.123]        </control>
[03:26:37.123]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.123]          // if-block "!hasDormant"
[03:26:37.123]            // =>  TRUE
[03:26:37.123]          <block atomic="false" info="">
[03:26:37.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.123]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.127]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.127]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.127]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.131]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.131]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.131]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.131]          </block>
[03:26:37.131]          // end if-block "!hasDormant"
[03:26:37.131]        </control>
[03:26:37.131]        // end if-block "isSWJ"
[03:26:37.131]      </control>
[03:26:37.135]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.135]        // if-block "!isSWJ"
[03:26:37.135]          // =>  FALSE
[03:26:37.135]        // skip if-block "!isSWJ"
[03:26:37.135]      </control>
[03:26:37.135]      <block atomic="false" info="">
[03:26:37.135]        ReadDP(0x0);
[03:26:37.143]  
[03:26:37.143]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.143]  
[03:26:37.143]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.143]      </block>
[03:26:37.143]      // end if-block "protType == 2"
[03:26:37.143]    </control>
[03:26:37.143]  </sequence>
[03:26:37.143]  
[03:26:37.204]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.204]  
[03:26:37.204]  <debugvars>
[03:26:37.204]    // Pre-defined
[03:26:37.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.204]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.204]    __dp=0x00000000
[03:26:37.204]    __ap=0x00000000
[03:26:37.204]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.204]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.204]    __FlashAddr=0x00000000
[03:26:37.204]    __FlashLen=0x00000000
[03:26:37.204]    __FlashArg=0x00000000
[03:26:37.204]    __FlashOp=0x00000000
[03:26:37.204]    __Result=0x00000000
[03:26:37.204]  </debugvars>
[03:26:37.204]  
[03:26:37.204]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.204]    <block atomic="false" info="">
[03:26:37.204]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.204]        // -> [isSWJ <= 0x00000001]
[03:26:37.204]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.204]        // -> [hasDormant <= 0x00000000]
[03:26:37.204]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.204]        // -> [protType <= 0x00000002]
[03:26:37.204]    </block>
[03:26:37.204]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.204]      // if-block "protType == 1"
[03:26:37.204]        // =>  FALSE
[03:26:37.204]      // skip if-block "protType == 1"
[03:26:37.204]    </control>
[03:26:37.204]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.204]      // if-block "protType == 2"
[03:26:37.204]        // =>  TRUE
[03:26:37.204]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.204]        // if-block "isSWJ"
[03:26:37.204]          // =>  TRUE
[03:26:37.208]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.208]          // if-block "hasDormant"
[03:26:37.208]            // =>  FALSE
[03:26:37.208]          // skip if-block "hasDormant"
[03:26:37.208]        </control>
[03:26:37.208]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.208]          // if-block "!hasDormant"
[03:26:37.208]            // =>  TRUE
[03:26:37.208]          <block atomic="false" info="">
[03:26:37.208]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.208]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.208]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.220]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.220]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.220]          </block>
[03:26:37.220]          // end if-block "!hasDormant"
[03:26:37.220]        </control>
[03:26:37.220]        // end if-block "isSWJ"
[03:26:37.224]      </control>
[03:26:37.224]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.224]        // if-block "!isSWJ"
[03:26:37.224]          // =>  FALSE
[03:26:37.224]        // skip if-block "!isSWJ"
[03:26:37.224]      </control>
[03:26:37.224]      <block atomic="false" info="">
[03:26:37.224]        ReadDP(0x0);
[03:26:37.224]  
[03:26:37.224]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.224]  
[03:26:37.224]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.224]      </block>
[03:26:37.224]      // end if-block "protType == 2"
[03:26:37.224]    </control>
[03:26:37.224]  </sequence>
[03:26:37.224]  
[03:26:37.277]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.277]  
[03:26:37.277]  <debugvars>
[03:26:37.277]    // Pre-defined
[03:26:37.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.277]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.277]    __dp=0x00000000
[03:26:37.277]    __ap=0x00000000
[03:26:37.277]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.277]    __FlashAddr=0x00000000
[03:26:37.277]    __FlashLen=0x00000000
[03:26:37.277]    __FlashArg=0x00000000
[03:26:37.277]    __FlashOp=0x00000000
[03:26:37.277]    __Result=0x00000000
[03:26:37.277]  </debugvars>
[03:26:37.277]  
[03:26:37.277]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.277]    <block atomic="false" info="">
[03:26:37.277]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.277]        // -> [isSWJ <= 0x00000001]
[03:26:37.277]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.277]        // -> [hasDormant <= 0x00000000]
[03:26:37.277]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.277]        // -> [protType <= 0x00000002]
[03:26:37.277]    </block>
[03:26:37.277]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.277]      // if-block "protType == 1"
[03:26:37.277]        // =>  FALSE
[03:26:37.277]      // skip if-block "protType == 1"
[03:26:37.277]    </control>
[03:26:37.277]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.277]      // if-block "protType == 2"
[03:26:37.277]        // =>  TRUE
[03:26:37.281]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.281]        // if-block "isSWJ"
[03:26:37.281]          // =>  TRUE
[03:26:37.281]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.281]          // if-block "hasDormant"
[03:26:37.281]            // =>  FALSE
[03:26:37.281]          // skip if-block "hasDormant"
[03:26:37.281]        </control>
[03:26:37.281]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.281]          // if-block "!hasDormant"
[03:26:37.281]            // =>  TRUE
[03:26:37.281]          <block atomic="false" info="">
[03:26:37.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.281]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.285]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.293]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.293]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.293]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.293]          </block>
[03:26:37.293]          // end if-block "!hasDormant"
[03:26:37.293]        </control>
[03:26:37.293]        // end if-block "isSWJ"
[03:26:37.293]      </control>
[03:26:37.293]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.293]        // if-block "!isSWJ"
[03:26:37.293]          // =>  FALSE
[03:26:37.293]        // skip if-block "!isSWJ"
[03:26:37.293]      </control>
[03:26:37.293]      <block atomic="false" info="">
[03:26:37.293]        ReadDP(0x0);
[03:26:37.297]  
[03:26:37.297]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.297]  
[03:26:37.297]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.297]      </block>
[03:26:37.297]      // end if-block "protType == 2"
[03:26:37.297]    </control>
[03:26:37.297]  </sequence>
[03:26:37.297]  
[03:26:37.349]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.349]  
[03:26:37.349]  <debugvars>
[03:26:37.349]    // Pre-defined
[03:26:37.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.349]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.349]    __dp=0x00000000
[03:26:37.349]    __ap=0x00000000
[03:26:37.349]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.349]    __FlashAddr=0x00000000
[03:26:37.349]    __FlashLen=0x00000000
[03:26:37.349]    __FlashArg=0x00000000
[03:26:37.349]    __FlashOp=0x00000000
[03:26:37.349]    __Result=0x00000000
[03:26:37.349]  </debugvars>
[03:26:37.349]  
[03:26:37.349]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.349]    <block atomic="false" info="">
[03:26:37.349]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.349]        // -> [isSWJ <= 0x00000001]
[03:26:37.349]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.349]        // -> [hasDormant <= 0x00000000]
[03:26:37.349]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.349]        // -> [protType <= 0x00000002]
[03:26:37.349]    </block>
[03:26:37.349]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.349]      // if-block "protType == 1"
[03:26:37.349]        // =>  FALSE
[03:26:37.349]      // skip if-block "protType == 1"
[03:26:37.349]    </control>
[03:26:37.349]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.349]      // if-block "protType == 2"
[03:26:37.349]        // =>  TRUE
[03:26:37.349]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.349]        // if-block "isSWJ"
[03:26:37.349]          // =>  TRUE
[03:26:37.353]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.353]          // if-block "hasDormant"
[03:26:37.353]            // =>  FALSE
[03:26:37.353]          // skip if-block "hasDormant"
[03:26:37.353]        </control>
[03:26:37.353]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.353]          // if-block "!hasDormant"
[03:26:37.353]            // =>  TRUE
[03:26:37.353]          <block atomic="false" info="">
[03:26:37.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.357]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.365]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.369]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.369]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.369]          </block>
[03:26:37.369]          // end if-block "!hasDormant"
[03:26:37.369]        </control>
[03:26:37.373]        // end if-block "isSWJ"
[03:26:37.373]      </control>
[03:26:37.373]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.373]        // if-block "!isSWJ"
[03:26:37.373]          // =>  FALSE
[03:26:37.373]        // skip if-block "!isSWJ"
[03:26:37.373]      </control>
[03:26:37.373]      <block atomic="false" info="">
[03:26:37.373]        ReadDP(0x0);
[03:26:37.373]  
[03:26:37.373]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.373]  
[03:26:37.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.373]      </block>
[03:26:37.373]      // end if-block "protType == 2"
[03:26:37.373]    </control>
[03:26:37.373]  </sequence>
[03:26:37.373]  
[03:26:37.435]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.435]  
[03:26:37.435]  <debugvars>
[03:26:37.435]    // Pre-defined
[03:26:37.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.435]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.435]    __dp=0x00000000
[03:26:37.435]    __ap=0x00000000
[03:26:37.436]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.436]    __FlashAddr=0x00000000
[03:26:37.436]    __FlashLen=0x00000000
[03:26:37.437]    __FlashArg=0x00000000
[03:26:37.437]    __FlashOp=0x00000000
[03:26:37.437]    __Result=0x00000000
[03:26:37.437]  </debugvars>
[03:26:37.437]  
[03:26:37.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.437]    <block atomic="false" info="">
[03:26:37.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.437]        // -> [isSWJ <= 0x00000001]
[03:26:37.437]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.437]        // -> [hasDormant <= 0x00000000]
[03:26:37.437]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.437]        // -> [protType <= 0x00000002]
[03:26:37.437]    </block>
[03:26:37.439]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.439]      // if-block "protType == 1"
[03:26:37.439]        // =>  FALSE
[03:26:37.439]      // skip if-block "protType == 1"
[03:26:37.439]    </control>
[03:26:37.439]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.439]      // if-block "protType == 2"
[03:26:37.439]        // =>  TRUE
[03:26:37.439]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.439]        // if-block "isSWJ"
[03:26:37.439]          // =>  TRUE
[03:26:37.439]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.439]          // if-block "hasDormant"
[03:26:37.439]            // =>  FALSE
[03:26:37.439]          // skip if-block "hasDormant"
[03:26:37.439]        </control>
[03:26:37.439]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.439]          // if-block "!hasDormant"
[03:26:37.439]            // =>  TRUE
[03:26:37.439]          <block atomic="false" info="">
[03:26:37.439]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.439]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.443]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.447]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.451]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.451]          </block>
[03:26:37.451]          // end if-block "!hasDormant"
[03:26:37.451]        </control>
[03:26:37.451]        // end if-block "isSWJ"
[03:26:37.451]      </control>
[03:26:37.451]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.451]        // if-block "!isSWJ"
[03:26:37.451]          // =>  FALSE
[03:26:37.451]        // skip if-block "!isSWJ"
[03:26:37.451]      </control>
[03:26:37.451]      <block atomic="false" info="">
[03:26:37.451]        ReadDP(0x0);
[03:26:37.455]  
[03:26:37.455]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.455]  
[03:26:37.455]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.455]      </block>
[03:26:37.455]      // end if-block "protType == 2"
[03:26:37.455]    </control>
[03:26:37.455]  </sequence>
[03:26:37.455]  
[03:26:37.508]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.508]  
[03:26:37.508]  <debugvars>
[03:26:37.508]    // Pre-defined
[03:26:37.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.508]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.508]    __dp=0x00000000
[03:26:37.510]    __ap=0x00000000
[03:26:37.510]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.510]    __FlashAddr=0x00000000
[03:26:37.510]    __FlashLen=0x00000000
[03:26:37.510]    __FlashArg=0x00000000
[03:26:37.510]    __FlashOp=0x00000000
[03:26:37.510]    __Result=0x00000000
[03:26:37.510]  </debugvars>
[03:26:37.510]  
[03:26:37.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.510]    <block atomic="false" info="">
[03:26:37.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.510]        // -> [isSWJ <= 0x00000001]
[03:26:37.510]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.510]        // -> [hasDormant <= 0x00000000]
[03:26:37.510]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.510]        // -> [protType <= 0x00000002]
[03:26:37.511]    </block>
[03:26:37.511]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.512]      // if-block "protType == 1"
[03:26:37.512]        // =>  FALSE
[03:26:37.512]      // skip if-block "protType == 1"
[03:26:37.512]    </control>
[03:26:37.512]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.512]      // if-block "protType == 2"
[03:26:37.512]        // =>  TRUE
[03:26:37.512]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.512]        // if-block "isSWJ"
[03:26:37.512]          // =>  TRUE
[03:26:37.512]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.512]          // if-block "hasDormant"
[03:26:37.512]            // =>  FALSE
[03:26:37.512]          // skip if-block "hasDormant"
[03:26:37.512]        </control>
[03:26:37.512]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.512]          // if-block "!hasDormant"
[03:26:37.512]            // =>  TRUE
[03:26:37.512]          <block atomic="false" info="">
[03:26:37.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.526]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.528]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.532]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.532]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.532]          </block>
[03:26:37.532]          // end if-block "!hasDormant"
[03:26:37.532]        </control>
[03:26:37.532]        // end if-block "isSWJ"
[03:26:37.532]      </control>
[03:26:37.532]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.532]        // if-block "!isSWJ"
[03:26:37.532]          // =>  FALSE
[03:26:37.532]        // skip if-block "!isSWJ"
[03:26:37.532]      </control>
[03:26:37.532]      <block atomic="false" info="">
[03:26:37.532]        ReadDP(0x0);
[03:26:37.536]  
[03:26:37.536]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.536]  
[03:26:37.536]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.536]      </block>
[03:26:37.536]      // end if-block "protType == 2"
[03:26:37.536]    </control>
[03:26:37.536]  </sequence>
[03:26:37.537]  
[03:26:37.593]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.593]  
[03:26:37.593]  <debugvars>
[03:26:37.593]    // Pre-defined
[03:26:37.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.593]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.593]    __dp=0x00000000
[03:26:37.593]    __ap=0x00000000
[03:26:37.593]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.594]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.594]    __FlashAddr=0x00000000
[03:26:37.594]    __FlashLen=0x00000000
[03:26:37.594]    __FlashArg=0x00000000
[03:26:37.594]    __FlashOp=0x00000000
[03:26:37.594]    __Result=0x00000000
[03:26:37.594]  </debugvars>
[03:26:37.594]  
[03:26:37.594]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.594]    <block atomic="false" info="">
[03:26:37.594]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.594]        // -> [isSWJ <= 0x00000001]
[03:26:37.594]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.594]        // -> [hasDormant <= 0x00000000]
[03:26:37.594]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.594]        // -> [protType <= 0x00000002]
[03:26:37.594]    </block>
[03:26:37.594]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.594]      // if-block "protType == 1"
[03:26:37.594]        // =>  FALSE
[03:26:37.594]      // skip if-block "protType == 1"
[03:26:37.594]    </control>
[03:26:37.597]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.597]      // if-block "protType == 2"
[03:26:37.597]        // =>  TRUE
[03:26:37.597]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.597]        // if-block "isSWJ"
[03:26:37.597]          // =>  TRUE
[03:26:37.597]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.597]          // if-block "hasDormant"
[03:26:37.597]            // =>  FALSE
[03:26:37.597]          // skip if-block "hasDormant"
[03:26:37.597]        </control>
[03:26:37.597]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.597]          // if-block "!hasDormant"
[03:26:37.597]            // =>  TRUE
[03:26:37.597]          <block atomic="false" info="">
[03:26:37.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.601]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.611]          </block>
[03:26:37.611]          // end if-block "!hasDormant"
[03:26:37.611]        </control>
[03:26:37.611]        // end if-block "isSWJ"
[03:26:37.611]      </control>
[03:26:37.611]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.611]        // if-block "!isSWJ"
[03:26:37.611]          // =>  FALSE
[03:26:37.611]        // skip if-block "!isSWJ"
[03:26:37.611]      </control>
[03:26:37.611]      <block atomic="false" info="">
[03:26:37.613]        ReadDP(0x0);
[03:26:37.613]  
[03:26:37.613]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.613]  
[03:26:37.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.613]      </block>
[03:26:37.613]      // end if-block "protType == 2"
[03:26:37.613]    </control>
[03:26:37.613]  </sequence>
[03:26:37.613]  
[03:26:37.674]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.674]  
[03:26:37.674]  <debugvars>
[03:26:37.674]    // Pre-defined
[03:26:37.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.674]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.674]    __dp=0x00000000
[03:26:37.674]    __ap=0x00000000
[03:26:37.674]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.674]    __FlashAddr=0x00000000
[03:26:37.674]    __FlashLen=0x00000000
[03:26:37.674]    __FlashArg=0x00000000
[03:26:37.674]    __FlashOp=0x00000000
[03:26:37.674]    __Result=0x00000000
[03:26:37.676]  </debugvars>
[03:26:37.676]  
[03:26:37.676]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.676]    <block atomic="false" info="">
[03:26:37.676]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.676]        // -> [isSWJ <= 0x00000001]
[03:26:37.677]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.677]        // -> [hasDormant <= 0x00000000]
[03:26:37.677]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.677]        // -> [protType <= 0x00000002]
[03:26:37.677]    </block>
[03:26:37.677]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.677]      // if-block "protType == 1"
[03:26:37.677]        // =>  FALSE
[03:26:37.678]      // skip if-block "protType == 1"
[03:26:37.678]    </control>
[03:26:37.678]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.678]      // if-block "protType == 2"
[03:26:37.678]        // =>  TRUE
[03:26:37.679]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.679]        // if-block "isSWJ"
[03:26:37.679]          // =>  TRUE
[03:26:37.679]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.679]          // if-block "hasDormant"
[03:26:37.679]            // =>  FALSE
[03:26:37.679]          // skip if-block "hasDormant"
[03:26:37.679]        </control>
[03:26:37.679]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.679]          // if-block "!hasDormant"
[03:26:37.679]            // =>  TRUE
[03:26:37.679]          <block atomic="false" info="">
[03:26:37.681]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.683]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.683]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.685]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.687]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.687]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.688]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.688]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.689]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.689]          </block>
[03:26:37.689]          // end if-block "!hasDormant"
[03:26:37.689]        </control>
[03:26:37.689]        // end if-block "isSWJ"
[03:26:37.691]      </control>
[03:26:37.691]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.691]        // if-block "!isSWJ"
[03:26:37.691]          // =>  FALSE
[03:26:37.691]        // skip if-block "!isSWJ"
[03:26:37.691]      </control>
[03:26:37.691]      <block atomic="false" info="">
[03:26:37.691]        ReadDP(0x0);
[03:26:37.698]  
[03:26:37.698]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.698]  
[03:26:37.698]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.698]      </block>
[03:26:37.698]      // end if-block "protType == 2"
[03:26:37.698]    </control>
[03:26:37.698]  </sequence>
[03:26:37.699]  
[03:26:37.761]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.761]  
[03:26:37.763]  <debugvars>
[03:26:37.763]    // Pre-defined
[03:26:37.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.763]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.763]    __dp=0x00000000
[03:26:37.763]    __ap=0x00000000
[03:26:37.763]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.763]    __FlashAddr=0x00000000
[03:26:37.763]    __FlashLen=0x00000000
[03:26:37.763]    __FlashArg=0x00000000
[03:26:37.763]    __FlashOp=0x00000000
[03:26:37.763]    __Result=0x00000000
[03:26:37.763]  </debugvars>
[03:26:37.763]  
[03:26:37.763]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.763]    <block atomic="false" info="">
[03:26:37.763]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.763]        // -> [isSWJ <= 0x00000001]
[03:26:37.763]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.763]        // -> [hasDormant <= 0x00000000]
[03:26:37.763]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.763]        // -> [protType <= 0x00000002]
[03:26:37.763]    </block>
[03:26:37.765]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.765]      // if-block "protType == 1"
[03:26:37.765]        // =>  FALSE
[03:26:37.765]      // skip if-block "protType == 1"
[03:26:37.765]    </control>
[03:26:37.765]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.765]      // if-block "protType == 2"
[03:26:37.765]        // =>  TRUE
[03:26:37.765]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.765]        // if-block "isSWJ"
[03:26:37.765]          // =>  TRUE
[03:26:37.765]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.765]          // if-block "hasDormant"
[03:26:37.765]            // =>  FALSE
[03:26:37.765]          // skip if-block "hasDormant"
[03:26:37.765]        </control>
[03:26:37.765]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.765]          // if-block "!hasDormant"
[03:26:37.765]            // =>  TRUE
[03:26:37.767]          <block atomic="false" info="">
[03:26:37.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.769]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.781]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.781]          </block>
[03:26:37.782]          // end if-block "!hasDormant"
[03:26:37.782]        </control>
[03:26:37.782]        // end if-block "isSWJ"
[03:26:37.782]      </control>
[03:26:37.782]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.782]        // if-block "!isSWJ"
[03:26:37.782]          // =>  FALSE
[03:26:37.782]        // skip if-block "!isSWJ"
[03:26:37.782]      </control>
[03:26:37.782]      <block atomic="false" info="">
[03:26:37.782]        ReadDP(0x0);
[03:26:37.785]  
[03:26:37.785]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.785]  
[03:26:37.785]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.785]      </block>
[03:26:37.786]      // end if-block "protType == 2"
[03:26:37.786]    </control>
[03:26:37.786]  </sequence>
[03:26:37.786]  
[03:26:37.848]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.848]  
[03:26:37.848]  <debugvars>
[03:26:37.848]    // Pre-defined
[03:26:37.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.848]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.848]    __dp=0x00000000
[03:26:37.848]    __ap=0x00000000
[03:26:37.848]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.848]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.848]    __FlashAddr=0x00000000
[03:26:37.848]    __FlashLen=0x00000000
[03:26:37.848]    __FlashArg=0x00000000
[03:26:37.848]    __FlashOp=0x00000000
[03:26:37.848]    __Result=0x00000000
[03:26:37.848]  </debugvars>
[03:26:37.848]  
[03:26:37.848]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.848]    <block atomic="false" info="">
[03:26:37.848]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.848]        // -> [isSWJ <= 0x00000001]
[03:26:37.852]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.852]        // -> [hasDormant <= 0x00000000]
[03:26:37.852]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.852]        // -> [protType <= 0x00000002]
[03:26:37.852]    </block>
[03:26:37.852]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.852]      // if-block "protType == 1"
[03:26:37.852]        // =>  FALSE
[03:26:37.852]      // skip if-block "protType == 1"
[03:26:37.852]    </control>
[03:26:37.852]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.852]      // if-block "protType == 2"
[03:26:37.852]        // =>  TRUE
[03:26:37.852]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.852]        // if-block "isSWJ"
[03:26:37.852]          // =>  TRUE
[03:26:37.852]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.852]          // if-block "hasDormant"
[03:26:37.852]            // =>  FALSE
[03:26:37.852]          // skip if-block "hasDormant"
[03:26:37.852]        </control>
[03:26:37.852]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.855]          // if-block "!hasDormant"
[03:26:37.855]            // =>  TRUE
[03:26:37.855]          <block atomic="false" info="">
[03:26:37.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.856]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.862]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.869]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.869]          </block>
[03:26:37.869]          // end if-block "!hasDormant"
[03:26:37.869]        </control>
[03:26:37.869]        // end if-block "isSWJ"
[03:26:37.869]      </control>
[03:26:37.870]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.870]        // if-block "!isSWJ"
[03:26:37.870]          // =>  FALSE
[03:26:37.870]        // skip if-block "!isSWJ"
[03:26:37.870]      </control>
[03:26:37.870]      <block atomic="false" info="">
[03:26:37.870]        ReadDP(0x0);
[03:26:37.870]  
[03:26:37.870]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.870]  
[03:26:37.870]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.870]      </block>
[03:26:37.870]      // end if-block "protType == 2"
[03:26:37.870]    </control>
[03:26:37.870]  </sequence>
[03:26:37.870]  
[03:26:37.938]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:37.938]  
[03:26:37.938]  <debugvars>
[03:26:37.938]    // Pre-defined
[03:26:37.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:37.938]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:37.938]    __dp=0x00000000
[03:26:37.938]    __ap=0x00000000
[03:26:37.938]    __traceout=0x00000000      (Trace Disabled)
[03:26:37.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:37.938]    __FlashAddr=0x00000000
[03:26:37.938]    __FlashLen=0x00000000
[03:26:37.938]    __FlashArg=0x00000000
[03:26:37.938]    __FlashOp=0x00000000
[03:26:37.938]    __Result=0x00000000
[03:26:37.938]  </debugvars>
[03:26:37.938]  
[03:26:37.938]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:37.938]    <block atomic="false" info="">
[03:26:37.938]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:37.938]        // -> [isSWJ <= 0x00000001]
[03:26:37.938]      __var hasDormant = __protocol & 0x00020000;
[03:26:37.938]        // -> [hasDormant <= 0x00000000]
[03:26:37.938]      __var protType   = __protocol & 0x0000FFFF;
[03:26:37.938]        // -> [protType <= 0x00000002]
[03:26:37.938]    </block>
[03:26:37.938]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:37.938]      // if-block "protType == 1"
[03:26:37.938]        // =>  FALSE
[03:26:37.942]      // skip if-block "protType == 1"
[03:26:37.942]    </control>
[03:26:37.942]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:37.942]      // if-block "protType == 2"
[03:26:37.942]        // =>  TRUE
[03:26:37.942]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:37.942]        // if-block "isSWJ"
[03:26:37.942]          // =>  TRUE
[03:26:37.942]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:37.942]          // if-block "hasDormant"
[03:26:37.942]            // =>  FALSE
[03:26:37.942]          // skip if-block "hasDormant"
[03:26:37.942]        </control>
[03:26:37.942]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:37.942]          // if-block "!hasDormant"
[03:26:37.942]            // =>  TRUE
[03:26:37.942]          <block atomic="false" info="">
[03:26:37.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:37.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.946]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:37.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:37.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:37.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.946]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:37.950]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:37.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:37.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:37.952]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:37.953]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:37.954]          </block>
[03:26:37.954]          // end if-block "!hasDormant"
[03:26:37.954]        </control>
[03:26:37.954]        // end if-block "isSWJ"
[03:26:37.954]      </control>
[03:26:37.954]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:37.954]        // if-block "!isSWJ"
[03:26:37.954]          // =>  FALSE
[03:26:37.954]        // skip if-block "!isSWJ"
[03:26:37.954]      </control>
[03:26:37.954]      <block atomic="false" info="">
[03:26:37.954]        ReadDP(0x0);
[03:26:37.954]  
[03:26:37.954]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:37.954]  
[03:26:37.954]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:37.954]      </block>
[03:26:37.954]      // end if-block "protType == 2"
[03:26:37.954]    </control>
[03:26:37.954]  </sequence>
[03:26:37.954]  
[03:26:38.012]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.012]  
[03:26:38.012]  <debugvars>
[03:26:38.012]    // Pre-defined
[03:26:38.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.012]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.012]    __dp=0x00000000
[03:26:38.012]    __ap=0x00000000
[03:26:38.012]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.014]    __FlashAddr=0x00000000
[03:26:38.014]    __FlashLen=0x00000000
[03:26:38.014]    __FlashArg=0x00000000
[03:26:38.014]    __FlashOp=0x00000000
[03:26:38.014]    __Result=0x00000000
[03:26:38.014]  </debugvars>
[03:26:38.014]  
[03:26:38.014]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.014]    <block atomic="false" info="">
[03:26:38.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.014]        // -> [isSWJ <= 0x00000001]
[03:26:38.014]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.014]        // -> [hasDormant <= 0x00000000]
[03:26:38.014]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.014]        // -> [protType <= 0x00000002]
[03:26:38.014]    </block>
[03:26:38.014]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.014]      // if-block "protType == 1"
[03:26:38.014]        // =>  FALSE
[03:26:38.014]      // skip if-block "protType == 1"
[03:26:38.014]    </control>
[03:26:38.014]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.014]      // if-block "protType == 2"
[03:26:38.014]        // =>  TRUE
[03:26:38.014]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.016]        // if-block "isSWJ"
[03:26:38.016]          // =>  TRUE
[03:26:38.016]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.016]          // if-block "hasDormant"
[03:26:38.016]            // =>  FALSE
[03:26:38.016]          // skip if-block "hasDormant"
[03:26:38.016]        </control>
[03:26:38.016]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.016]          // if-block "!hasDormant"
[03:26:38.016]            // =>  TRUE
[03:26:38.016]          <block atomic="false" info="">
[03:26:38.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.016]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.022]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.022]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.024]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.024]          </block>
[03:26:38.024]          // end if-block "!hasDormant"
[03:26:38.024]        </control>
[03:26:38.024]        // end if-block "isSWJ"
[03:26:38.024]      </control>
[03:26:38.024]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.024]        // if-block "!isSWJ"
[03:26:38.024]          // =>  FALSE
[03:26:38.024]        // skip if-block "!isSWJ"
[03:26:38.024]      </control>
[03:26:38.024]      <block atomic="false" info="">
[03:26:38.024]        ReadDP(0x0);
[03:26:38.028]  
[03:26:38.028]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.028]  
[03:26:38.028]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.028]      </block>
[03:26:38.028]      // end if-block "protType == 2"
[03:26:38.028]    </control>
[03:26:38.032]  </sequence>
[03:26:38.033]  
[03:26:38.088]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.088]  
[03:26:38.088]  <debugvars>
[03:26:38.088]    // Pre-defined
[03:26:38.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.088]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.088]    __dp=0x00000000
[03:26:38.088]    __ap=0x00000000
[03:26:38.088]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.088]    __FlashAddr=0x00000000
[03:26:38.088]    __FlashLen=0x00000000
[03:26:38.088]    __FlashArg=0x00000000
[03:26:38.088]    __FlashOp=0x00000000
[03:26:38.088]    __Result=0x00000000
[03:26:38.088]  </debugvars>
[03:26:38.088]  
[03:26:38.088]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.088]    <block atomic="false" info="">
[03:26:38.088]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.088]        // -> [isSWJ <= 0x00000001]
[03:26:38.088]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.090]        // -> [hasDormant <= 0x00000000]
[03:26:38.090]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.090]        // -> [protType <= 0x00000002]
[03:26:38.090]    </block>
[03:26:38.090]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.090]      // if-block "protType == 1"
[03:26:38.090]        // =>  FALSE
[03:26:38.090]      // skip if-block "protType == 1"
[03:26:38.090]    </control>
[03:26:38.090]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.091]      // if-block "protType == 2"
[03:26:38.091]        // =>  TRUE
[03:26:38.091]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.091]        // if-block "isSWJ"
[03:26:38.092]          // =>  TRUE
[03:26:38.092]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.092]          // if-block "hasDormant"
[03:26:38.092]            // =>  FALSE
[03:26:38.092]          // skip if-block "hasDormant"
[03:26:38.092]        </control>
[03:26:38.092]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.092]          // if-block "!hasDormant"
[03:26:38.092]            // =>  TRUE
[03:26:38.092]          <block atomic="false" info="">
[03:26:38.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.097]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.100]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.102]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.103]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.103]          </block>
[03:26:38.103]          // end if-block "!hasDormant"
[03:26:38.103]        </control>
[03:26:38.103]        // end if-block "isSWJ"
[03:26:38.103]      </control>
[03:26:38.103]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.103]        // if-block "!isSWJ"
[03:26:38.103]          // =>  FALSE
[03:26:38.103]        // skip if-block "!isSWJ"
[03:26:38.103]      </control>
[03:26:38.103]      <block atomic="false" info="">
[03:26:38.103]        ReadDP(0x0);
[03:26:38.103]  
[03:26:38.103]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.103]  
[03:26:38.103]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.103]      </block>
[03:26:38.103]      // end if-block "protType == 2"
[03:26:38.103]    </control>
[03:26:38.103]  </sequence>
[03:26:38.107]  
[03:26:38.160]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.160]  
[03:26:38.160]  <debugvars>
[03:26:38.160]    // Pre-defined
[03:26:38.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.160]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.160]    __dp=0x00000000
[03:26:38.160]    __ap=0x00000000
[03:26:38.160]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.160]    __FlashAddr=0x00000000
[03:26:38.160]    __FlashLen=0x00000000
[03:26:38.160]    __FlashArg=0x00000000
[03:26:38.160]    __FlashOp=0x00000000
[03:26:38.160]    __Result=0x00000000
[03:26:38.160]  </debugvars>
[03:26:38.162]  
[03:26:38.162]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.162]    <block atomic="false" info="">
[03:26:38.162]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.162]        // -> [isSWJ <= 0x00000001]
[03:26:38.162]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.162]        // -> [hasDormant <= 0x00000000]
[03:26:38.162]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.162]        // -> [protType <= 0x00000002]
[03:26:38.162]    </block>
[03:26:38.162]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.162]      // if-block "protType == 1"
[03:26:38.162]        // =>  FALSE
[03:26:38.162]      // skip if-block "protType == 1"
[03:26:38.162]    </control>
[03:26:38.164]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.164]      // if-block "protType == 2"
[03:26:38.164]        // =>  TRUE
[03:26:38.164]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.164]        // if-block "isSWJ"
[03:26:38.164]          // =>  TRUE
[03:26:38.164]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.164]          // if-block "hasDormant"
[03:26:38.164]            // =>  FALSE
[03:26:38.164]          // skip if-block "hasDormant"
[03:26:38.165]        </control>
[03:26:38.165]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.165]          // if-block "!hasDormant"
[03:26:38.165]            // =>  TRUE
[03:26:38.165]          <block atomic="false" info="">
[03:26:38.165]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.168]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.168]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.168]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.172]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.180]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.180]          </block>
[03:26:38.180]          // end if-block "!hasDormant"
[03:26:38.180]        </control>
[03:26:38.180]        // end if-block "isSWJ"
[03:26:38.180]      </control>
[03:26:38.180]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.184]        // if-block "!isSWJ"
[03:26:38.184]          // =>  FALSE
[03:26:38.184]        // skip if-block "!isSWJ"
[03:26:38.184]      </control>
[03:26:38.184]      <block atomic="false" info="">
[03:26:38.184]        ReadDP(0x0);
[03:26:38.188]  
[03:26:38.188]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.188]  
[03:26:38.188]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.188]      </block>
[03:26:38.188]      // end if-block "protType == 2"
[03:26:38.188]    </control>
[03:26:38.188]  </sequence>
[03:26:38.188]  
[03:26:38.247]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.247]  
[03:26:38.247]  <debugvars>
[03:26:38.247]    // Pre-defined
[03:26:38.247]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.247]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.247]    __dp=0x00000000
[03:26:38.248]    __ap=0x00000000
[03:26:38.248]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.248]    __FlashAddr=0x00000000
[03:26:38.248]    __FlashLen=0x00000000
[03:26:38.248]    __FlashArg=0x00000000
[03:26:38.248]    __FlashOp=0x00000000
[03:26:38.248]    __Result=0x00000000
[03:26:38.248]  </debugvars>
[03:26:38.248]  
[03:26:38.248]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.248]    <block atomic="false" info="">
[03:26:38.248]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.248]        // -> [isSWJ <= 0x00000001]
[03:26:38.248]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.248]        // -> [hasDormant <= 0x00000000]
[03:26:38.248]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.248]        // -> [protType <= 0x00000002]
[03:26:38.248]    </block>
[03:26:38.250]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.250]      // if-block "protType == 1"
[03:26:38.250]        // =>  FALSE
[03:26:38.250]      // skip if-block "protType == 1"
[03:26:38.250]    </control>
[03:26:38.250]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.250]      // if-block "protType == 2"
[03:26:38.250]        // =>  TRUE
[03:26:38.250]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.250]        // if-block "isSWJ"
[03:26:38.250]          // =>  TRUE
[03:26:38.250]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.250]          // if-block "hasDormant"
[03:26:38.250]            // =>  FALSE
[03:26:38.250]          // skip if-block "hasDormant"
[03:26:38.250]        </control>
[03:26:38.250]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.250]          // if-block "!hasDormant"
[03:26:38.250]            // =>  TRUE
[03:26:38.250]          <block atomic="false" info="">
[03:26:38.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.250]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.250]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.254]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.258]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.258]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.258]          </block>
[03:26:38.258]          // end if-block "!hasDormant"
[03:26:38.258]        </control>
[03:26:38.262]        // end if-block "isSWJ"
[03:26:38.262]      </control>
[03:26:38.262]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.262]        // if-block "!isSWJ"
[03:26:38.262]          // =>  FALSE
[03:26:38.262]        // skip if-block "!isSWJ"
[03:26:38.262]      </control>
[03:26:38.262]      <block atomic="false" info="">
[03:26:38.262]        ReadDP(0x0);
[03:26:38.262]  
[03:26:38.262]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.262]  
[03:26:38.262]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.262]      </block>
[03:26:38.262]      // end if-block "protType == 2"
[03:26:38.262]    </control>
[03:26:38.262]  </sequence>
[03:26:38.262]  
[03:26:38.318]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.318]  
[03:26:38.318]  <debugvars>
[03:26:38.318]    // Pre-defined
[03:26:38.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.318]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.318]    __dp=0x00000000
[03:26:38.318]    __ap=0x00000000
[03:26:38.318]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.318]    __FlashAddr=0x00000000
[03:26:38.318]    __FlashLen=0x00000000
[03:26:38.318]    __FlashArg=0x00000000
[03:26:38.318]    __FlashOp=0x00000000
[03:26:38.318]    __Result=0x00000000
[03:26:38.318]  </debugvars>
[03:26:38.318]  
[03:26:38.318]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.318]    <block atomic="false" info="">
[03:26:38.318]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.318]        // -> [isSWJ <= 0x00000001]
[03:26:38.318]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.318]        // -> [hasDormant <= 0x00000000]
[03:26:38.318]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.318]        // -> [protType <= 0x00000002]
[03:26:38.318]    </block>
[03:26:38.318]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.318]      // if-block "protType == 1"
[03:26:38.318]        // =>  FALSE
[03:26:38.318]      // skip if-block "protType == 1"
[03:26:38.318]    </control>
[03:26:38.318]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.318]      // if-block "protType == 2"
[03:26:38.318]        // =>  TRUE
[03:26:38.318]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.322]        // if-block "isSWJ"
[03:26:38.322]          // =>  TRUE
[03:26:38.322]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.322]          // if-block "hasDormant"
[03:26:38.322]            // =>  FALSE
[03:26:38.322]          // skip if-block "hasDormant"
[03:26:38.322]        </control>
[03:26:38.322]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.322]          // if-block "!hasDormant"
[03:26:38.322]            // =>  TRUE
[03:26:38.322]          <block atomic="false" info="">
[03:26:38.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.322]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.326]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.326]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.330]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.330]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.330]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.334]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.334]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.334]          </block>
[03:26:38.334]          // end if-block "!hasDormant"
[03:26:38.334]        </control>
[03:26:38.334]        // end if-block "isSWJ"
[03:26:38.334]      </control>
[03:26:38.334]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.334]        // if-block "!isSWJ"
[03:26:38.334]          // =>  FALSE
[03:26:38.334]        // skip if-block "!isSWJ"
[03:26:38.334]      </control>
[03:26:38.334]      <block atomic="false" info="">
[03:26:38.334]        ReadDP(0x0);
[03:26:38.338]  
[03:26:38.338]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.338]  
[03:26:38.338]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.338]      </block>
[03:26:38.338]      // end if-block "protType == 2"
[03:26:38.338]    </control>
[03:26:38.338]  </sequence>
[03:26:38.338]  
[03:26:38.390]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.390]  
[03:26:38.390]  <debugvars>
[03:26:38.390]    // Pre-defined
[03:26:38.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.391]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.391]    __dp=0x00000000
[03:26:38.391]    __ap=0x00000000
[03:26:38.391]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.391]    __FlashAddr=0x00000000
[03:26:38.391]    __FlashLen=0x00000000
[03:26:38.391]    __FlashArg=0x00000000
[03:26:38.391]    __FlashOp=0x00000000
[03:26:38.391]    __Result=0x00000000
[03:26:38.391]  </debugvars>
[03:26:38.391]  
[03:26:38.391]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.391]    <block atomic="false" info="">
[03:26:38.391]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.391]        // -> [isSWJ <= 0x00000001]
[03:26:38.391]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.391]        // -> [hasDormant <= 0x00000000]
[03:26:38.391]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.393]        // -> [protType <= 0x00000002]
[03:26:38.393]    </block>
[03:26:38.393]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.393]      // if-block "protType == 1"
[03:26:38.393]        // =>  FALSE
[03:26:38.393]      // skip if-block "protType == 1"
[03:26:38.393]    </control>
[03:26:38.393]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.393]      // if-block "protType == 2"
[03:26:38.393]        // =>  TRUE
[03:26:38.393]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.394]        // if-block "isSWJ"
[03:26:38.394]          // =>  TRUE
[03:26:38.394]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.394]          // if-block "hasDormant"
[03:26:38.394]            // =>  FALSE
[03:26:38.394]          // skip if-block "hasDormant"
[03:26:38.394]        </control>
[03:26:38.395]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.395]          // if-block "!hasDormant"
[03:26:38.395]            // =>  TRUE
[03:26:38.395]          <block atomic="false" info="">
[03:26:38.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.399]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.399]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.403]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.407]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.409]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.409]          </block>
[03:26:38.409]          // end if-block "!hasDormant"
[03:26:38.409]        </control>
[03:26:38.410]        // end if-block "isSWJ"
[03:26:38.410]      </control>
[03:26:38.410]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.410]        // if-block "!isSWJ"
[03:26:38.410]          // =>  FALSE
[03:26:38.410]        // skip if-block "!isSWJ"
[03:26:38.411]      </control>
[03:26:38.411]      <block atomic="false" info="">
[03:26:38.411]        ReadDP(0x0);
[03:26:38.412]  
[03:26:38.412]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.412]  
[03:26:38.412]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.412]      </block>
[03:26:38.412]      // end if-block "protType == 2"
[03:26:38.412]    </control>
[03:26:38.412]  </sequence>
[03:26:38.412]  
[03:26:38.464]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.464]  
[03:26:38.464]  <debugvars>
[03:26:38.464]    // Pre-defined
[03:26:38.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.464]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.464]    __dp=0x00000000
[03:26:38.464]    __ap=0x00000000
[03:26:38.464]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.464]    __FlashAddr=0x00000000
[03:26:38.464]    __FlashLen=0x00000000
[03:26:38.464]    __FlashArg=0x00000000
[03:26:38.464]    __FlashOp=0x00000000
[03:26:38.464]    __Result=0x00000000
[03:26:38.467]  </debugvars>
[03:26:38.467]  
[03:26:38.467]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.467]    <block atomic="false" info="">
[03:26:38.467]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.467]        // -> [isSWJ <= 0x00000001]
[03:26:38.467]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.468]        // -> [hasDormant <= 0x00000000]
[03:26:38.468]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.468]        // -> [protType <= 0x00000002]
[03:26:38.468]    </block>
[03:26:38.468]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.468]      // if-block "protType == 1"
[03:26:38.468]        // =>  FALSE
[03:26:38.468]      // skip if-block "protType == 1"
[03:26:38.468]    </control>
[03:26:38.468]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.470]      // if-block "protType == 2"
[03:26:38.470]        // =>  TRUE
[03:26:38.470]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.470]        // if-block "isSWJ"
[03:26:38.470]          // =>  TRUE
[03:26:38.470]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.470]          // if-block "hasDormant"
[03:26:38.470]            // =>  FALSE
[03:26:38.470]          // skip if-block "hasDormant"
[03:26:38.470]        </control>
[03:26:38.470]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.471]          // if-block "!hasDormant"
[03:26:38.471]            // =>  TRUE
[03:26:38.471]          <block atomic="false" info="">
[03:26:38.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.473]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.473]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.478]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.478]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.491]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.491]          </block>
[03:26:38.491]          // end if-block "!hasDormant"
[03:26:38.491]        </control>
[03:26:38.494]        // end if-block "isSWJ"
[03:26:38.494]      </control>
[03:26:38.494]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.494]        // if-block "!isSWJ"
[03:26:38.494]          // =>  FALSE
[03:26:38.494]        // skip if-block "!isSWJ"
[03:26:38.494]      </control>
[03:26:38.494]      <block atomic="false" info="">
[03:26:38.494]        ReadDP(0x0);
[03:26:38.496]  
[03:26:38.496]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.496]  
[03:26:38.496]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.496]      </block>
[03:26:38.496]      // end if-block "protType == 2"
[03:26:38.496]    </control>
[03:26:38.497]  </sequence>
[03:26:38.497]  
[03:26:38.547]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.547]  
[03:26:38.547]  <debugvars>
[03:26:38.547]    // Pre-defined
[03:26:38.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.547]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.547]    __dp=0x00000000
[03:26:38.547]    __ap=0x00000000
[03:26:38.547]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.547]    __FlashAddr=0x00000000
[03:26:38.547]    __FlashLen=0x00000000
[03:26:38.547]    __FlashArg=0x00000000
[03:26:38.547]    __FlashOp=0x00000000
[03:26:38.547]    __Result=0x00000000
[03:26:38.547]  </debugvars>
[03:26:38.547]  
[03:26:38.547]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.547]    <block atomic="false" info="">
[03:26:38.547]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.547]        // -> [isSWJ <= 0x00000001]
[03:26:38.547]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.547]        // -> [hasDormant <= 0x00000000]
[03:26:38.547]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.547]        // -> [protType <= 0x00000002]
[03:26:38.547]    </block>
[03:26:38.547]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.547]      // if-block "protType == 1"
[03:26:38.547]        // =>  FALSE
[03:26:38.547]      // skip if-block "protType == 1"
[03:26:38.547]    </control>
[03:26:38.547]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.547]      // if-block "protType == 2"
[03:26:38.547]        // =>  TRUE
[03:26:38.547]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.547]        // if-block "isSWJ"
[03:26:38.547]          // =>  TRUE
[03:26:38.547]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.547]          // if-block "hasDormant"
[03:26:38.547]            // =>  FALSE
[03:26:38.547]          // skip if-block "hasDormant"
[03:26:38.552]        </control>
[03:26:38.552]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.552]          // if-block "!hasDormant"
[03:26:38.552]            // =>  TRUE
[03:26:38.552]          <block atomic="false" info="">
[03:26:38.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.554]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.554]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.556]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.559]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.559]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.560]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.561]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.562]          </block>
[03:26:38.562]          // end if-block "!hasDormant"
[03:26:38.562]        </control>
[03:26:38.562]        // end if-block "isSWJ"
[03:26:38.562]      </control>
[03:26:38.562]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.562]        // if-block "!isSWJ"
[03:26:38.562]          // =>  FALSE
[03:26:38.562]        // skip if-block "!isSWJ"
[03:26:38.562]      </control>
[03:26:38.562]      <block atomic="false" info="">
[03:26:38.562]        ReadDP(0x0);
[03:26:38.564]  
[03:26:38.564]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.564]  
[03:26:38.564]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.564]      </block>
[03:26:38.564]      // end if-block "protType == 2"
[03:26:38.564]    </control>
[03:26:38.564]  </sequence>
[03:26:38.564]  
[03:26:38.625]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.625]  
[03:26:38.625]  <debugvars>
[03:26:38.625]    // Pre-defined
[03:26:38.625]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.625]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.625]    __dp=0x00000000
[03:26:38.625]    __ap=0x00000000
[03:26:38.625]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.625]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.625]    __FlashAddr=0x00000000
[03:26:38.625]    __FlashLen=0x00000000
[03:26:38.625]    __FlashArg=0x00000000
[03:26:38.625]    __FlashOp=0x00000000
[03:26:38.625]    __Result=0x00000000
[03:26:38.625]  </debugvars>
[03:26:38.625]  
[03:26:38.625]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.625]    <block atomic="false" info="">
[03:26:38.625]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.625]        // -> [isSWJ <= 0x00000001]
[03:26:38.625]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.625]        // -> [hasDormant <= 0x00000000]
[03:26:38.625]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.625]        // -> [protType <= 0x00000002]
[03:26:38.625]    </block>
[03:26:38.625]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.625]      // if-block "protType == 1"
[03:26:38.625]        // =>  FALSE
[03:26:38.625]      // skip if-block "protType == 1"
[03:26:38.625]    </control>
[03:26:38.625]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.629]      // if-block "protType == 2"
[03:26:38.629]        // =>  TRUE
[03:26:38.629]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.629]        // if-block "isSWJ"
[03:26:38.629]          // =>  TRUE
[03:26:38.629]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.629]          // if-block "hasDormant"
[03:26:38.629]            // =>  FALSE
[03:26:38.629]          // skip if-block "hasDormant"
[03:26:38.629]        </control>
[03:26:38.629]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.629]          // if-block "!hasDormant"
[03:26:38.629]            // =>  TRUE
[03:26:38.629]          <block atomic="false" info="">
[03:26:38.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.637]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.639]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.641]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.641]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.653]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.653]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.653]          </block>
[03:26:38.653]          // end if-block "!hasDormant"
[03:26:38.653]        </control>
[03:26:38.657]        // end if-block "isSWJ"
[03:26:38.657]      </control>
[03:26:38.657]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.657]        // if-block "!isSWJ"
[03:26:38.657]          // =>  FALSE
[03:26:38.657]        // skip if-block "!isSWJ"
[03:26:38.657]      </control>
[03:26:38.657]      <block atomic="false" info="">
[03:26:38.657]        ReadDP(0x0);
[03:26:38.657]  
[03:26:38.657]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.657]  
[03:26:38.657]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.657]      </block>
[03:26:38.657]      // end if-block "protType == 2"
[03:26:38.657]    </control>
[03:26:38.657]  </sequence>
[03:26:38.657]  
[03:26:38.710]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.710]  
[03:26:38.710]  <debugvars>
[03:26:38.710]    // Pre-defined
[03:26:38.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.710]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.711]    __dp=0x00000000
[03:26:38.711]    __ap=0x00000000
[03:26:38.712]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.712]    __FlashAddr=0x00000000
[03:26:38.712]    __FlashLen=0x00000000
[03:26:38.712]    __FlashArg=0x00000000
[03:26:38.712]    __FlashOp=0x00000000
[03:26:38.712]    __Result=0x00000000
[03:26:38.712]  </debugvars>
[03:26:38.712]  
[03:26:38.712]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.712]    <block atomic="false" info="">
[03:26:38.713]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.713]        // -> [isSWJ <= 0x00000001]
[03:26:38.713]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.713]        // -> [hasDormant <= 0x00000000]
[03:26:38.713]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.713]        // -> [protType <= 0x00000002]
[03:26:38.713]    </block>
[03:26:38.713]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.713]      // if-block "protType == 1"
[03:26:38.713]        // =>  FALSE
[03:26:38.713]      // skip if-block "protType == 1"
[03:26:38.713]    </control>
[03:26:38.713]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.714]      // if-block "protType == 2"
[03:26:38.714]        // =>  TRUE
[03:26:38.714]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.714]        // if-block "isSWJ"
[03:26:38.714]          // =>  TRUE
[03:26:38.714]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.714]          // if-block "hasDormant"
[03:26:38.714]            // =>  FALSE
[03:26:38.714]          // skip if-block "hasDormant"
[03:26:38.714]        </control>
[03:26:38.714]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.714]          // if-block "!hasDormant"
[03:26:38.714]            // =>  TRUE
[03:26:38.714]          <block atomic="false" info="">
[03:26:38.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.714]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.718]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.720]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.726]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.726]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.726]          </block>
[03:26:38.727]          // end if-block "!hasDormant"
[03:26:38.728]        </control>
[03:26:38.728]        // end if-block "isSWJ"
[03:26:38.728]      </control>
[03:26:38.728]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.728]        // if-block "!isSWJ"
[03:26:38.728]          // =>  FALSE
[03:26:38.728]        // skip if-block "!isSWJ"
[03:26:38.728]      </control>
[03:26:38.728]      <block atomic="false" info="">
[03:26:38.728]        ReadDP(0x0);
[03:26:38.729]  
[03:26:38.729]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.729]  
[03:26:38.729]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.729]      </block>
[03:26:38.729]      // end if-block "protType == 2"
[03:26:38.729]    </control>
[03:26:38.729]  </sequence>
[03:26:38.729]  
[03:26:38.784]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.784]  
[03:26:38.784]  <debugvars>
[03:26:38.784]    // Pre-defined
[03:26:38.784]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.784]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.784]    __dp=0x00000000
[03:26:38.784]    __ap=0x00000000
[03:26:38.784]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.784]    __FlashAddr=0x00000000
[03:26:38.787]    __FlashLen=0x00000000
[03:26:38.787]    __FlashArg=0x00000000
[03:26:38.787]    __FlashOp=0x00000000
[03:26:38.787]    __Result=0x00000000
[03:26:38.787]  </debugvars>
[03:26:38.787]  
[03:26:38.787]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.787]    <block atomic="false" info="">
[03:26:38.787]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.787]        // -> [isSWJ <= 0x00000001]
[03:26:38.787]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.787]        // -> [hasDormant <= 0x00000000]
[03:26:38.787]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.789]        // -> [protType <= 0x00000002]
[03:26:38.789]    </block>
[03:26:38.789]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.789]      // if-block "protType == 1"
[03:26:38.789]        // =>  FALSE
[03:26:38.789]      // skip if-block "protType == 1"
[03:26:38.789]    </control>
[03:26:38.789]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.789]      // if-block "protType == 2"
[03:26:38.789]        // =>  TRUE
[03:26:38.790]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.790]        // if-block "isSWJ"
[03:26:38.790]          // =>  TRUE
[03:26:38.790]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.790]          // if-block "hasDormant"
[03:26:38.790]            // =>  FALSE
[03:26:38.790]          // skip if-block "hasDormant"
[03:26:38.790]        </control>
[03:26:38.790]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.790]          // if-block "!hasDormant"
[03:26:38.790]            // =>  TRUE
[03:26:38.790]          <block atomic="false" info="">
[03:26:38.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.792]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.795]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.797]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.797]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.798]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.798]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.798]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.798]          </block>
[03:26:38.798]          // end if-block "!hasDormant"
[03:26:38.798]        </control>
[03:26:38.801]        // end if-block "isSWJ"
[03:26:38.801]      </control>
[03:26:38.801]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.801]        // if-block "!isSWJ"
[03:26:38.801]          // =>  FALSE
[03:26:38.801]        // skip if-block "!isSWJ"
[03:26:38.801]      </control>
[03:26:38.801]      <block atomic="false" info="">
[03:26:38.801]        ReadDP(0x0);
[03:26:38.801]  
[03:26:38.801]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.801]  
[03:26:38.801]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.801]      </block>
[03:26:38.801]      // end if-block "protType == 2"
[03:26:38.801]    </control>
[03:26:38.801]  </sequence>
[03:26:38.801]  
[03:26:38.858]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.858]  
[03:26:38.858]  <debugvars>
[03:26:38.858]    // Pre-defined
[03:26:38.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.858]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.858]    __dp=0x00000000
[03:26:38.858]    __ap=0x00000000
[03:26:38.858]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.858]    __FlashAddr=0x00000000
[03:26:38.858]    __FlashLen=0x00000000
[03:26:38.858]    __FlashArg=0x00000000
[03:26:38.858]    __FlashOp=0x00000000
[03:26:38.858]    __Result=0x00000000
[03:26:38.858]  </debugvars>
[03:26:38.858]  
[03:26:38.858]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.858]    <block atomic="false" info="">
[03:26:38.858]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.858]        // -> [isSWJ <= 0x00000001]
[03:26:38.858]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.858]        // -> [hasDormant <= 0x00000000]
[03:26:38.858]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.858]        // -> [protType <= 0x00000002]
[03:26:38.858]    </block>
[03:26:38.858]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.858]      // if-block "protType == 1"
[03:26:38.862]        // =>  FALSE
[03:26:38.862]      // skip if-block "protType == 1"
[03:26:38.862]    </control>
[03:26:38.862]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.862]      // if-block "protType == 2"
[03:26:38.862]        // =>  TRUE
[03:26:38.862]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.862]        // if-block "isSWJ"
[03:26:38.862]          // =>  TRUE
[03:26:38.862]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.862]          // if-block "hasDormant"
[03:26:38.863]            // =>  FALSE
[03:26:38.863]          // skip if-block "hasDormant"
[03:26:38.863]        </control>
[03:26:38.863]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.863]          // if-block "!hasDormant"
[03:26:38.863]            // =>  TRUE
[03:26:38.863]          <block atomic="false" info="">
[03:26:38.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.863]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.863]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.866]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.868]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.868]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.871]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.871]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.871]          </block>
[03:26:38.871]          // end if-block "!hasDormant"
[03:26:38.871]        </control>
[03:26:38.871]        // end if-block "isSWJ"
[03:26:38.871]      </control>
[03:26:38.871]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.875]        // if-block "!isSWJ"
[03:26:38.875]          // =>  FALSE
[03:26:38.875]        // skip if-block "!isSWJ"
[03:26:38.875]      </control>
[03:26:38.875]      <block atomic="false" info="">
[03:26:38.875]        ReadDP(0x0);
[03:26:38.876]  
[03:26:38.876]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.876]  
[03:26:38.876]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.876]      </block>
[03:26:38.876]      // end if-block "protType == 2"
[03:26:38.876]    </control>
[03:26:38.876]  </sequence>
[03:26:38.876]  
[03:26:38.932]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:38.932]  
[03:26:38.933]  <debugvars>
[03:26:38.933]    // Pre-defined
[03:26:38.933]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:38.933]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:38.933]    __dp=0x00000000
[03:26:38.933]    __ap=0x00000000
[03:26:38.933]    __traceout=0x00000000      (Trace Disabled)
[03:26:38.933]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:38.933]    __FlashAddr=0x00000000
[03:26:38.933]    __FlashLen=0x00000000
[03:26:38.933]    __FlashArg=0x00000000
[03:26:38.933]    __FlashOp=0x00000000
[03:26:38.933]    __Result=0x00000000
[03:26:38.933]  </debugvars>
[03:26:38.933]  
[03:26:38.933]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:38.933]    <block atomic="false" info="">
[03:26:38.933]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:38.933]        // -> [isSWJ <= 0x00000001]
[03:26:38.933]      __var hasDormant = __protocol & 0x00020000;
[03:26:38.933]        // -> [hasDormant <= 0x00000000]
[03:26:38.933]      __var protType   = __protocol & 0x0000FFFF;
[03:26:38.933]        // -> [protType <= 0x00000002]
[03:26:38.933]    </block>
[03:26:38.936]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:38.936]      // if-block "protType == 1"
[03:26:38.936]        // =>  FALSE
[03:26:38.936]      // skip if-block "protType == 1"
[03:26:38.936]    </control>
[03:26:38.936]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:38.936]      // if-block "protType == 2"
[03:26:38.936]        // =>  TRUE
[03:26:38.936]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:38.936]        // if-block "isSWJ"
[03:26:38.936]          // =>  TRUE
[03:26:38.936]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:38.936]          // if-block "hasDormant"
[03:26:38.936]            // =>  FALSE
[03:26:38.936]          // skip if-block "hasDormant"
[03:26:38.936]        </control>
[03:26:38.936]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:38.936]          // if-block "!hasDormant"
[03:26:38.936]            // =>  TRUE
[03:26:38.936]          <block atomic="false" info="">
[03:26:38.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:38.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.940]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:38.943]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:38.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:38.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.944]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:38.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:38.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:38.950]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:38.950]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:38.951]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:38.952]          </block>
[03:26:38.952]          // end if-block "!hasDormant"
[03:26:38.952]        </control>
[03:26:38.952]        // end if-block "isSWJ"
[03:26:38.952]      </control>
[03:26:38.952]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:38.953]        // if-block "!isSWJ"
[03:26:38.953]          // =>  FALSE
[03:26:38.953]        // skip if-block "!isSWJ"
[03:26:38.953]      </control>
[03:26:38.953]      <block atomic="false" info="">
[03:26:38.953]        ReadDP(0x0);
[03:26:38.957]  
[03:26:38.957]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:38.957]  
[03:26:38.957]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:38.957]      </block>
[03:26:38.957]      // end if-block "protType == 2"
[03:26:38.957]    </control>
[03:26:38.957]  </sequence>
[03:26:38.957]  
[03:26:39.018]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.018]  
[03:26:39.018]  <debugvars>
[03:26:39.018]    // Pre-defined
[03:26:39.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.018]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.018]    __dp=0x00000000
[03:26:39.018]    __ap=0x00000000
[03:26:39.018]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.020]    __FlashAddr=0x00000000
[03:26:39.020]    __FlashLen=0x00000000
[03:26:39.020]    __FlashArg=0x00000000
[03:26:39.020]    __FlashOp=0x00000000
[03:26:39.020]    __Result=0x00000000
[03:26:39.020]  </debugvars>
[03:26:39.020]  
[03:26:39.020]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.020]    <block atomic="false" info="">
[03:26:39.020]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.020]        // -> [isSWJ <= 0x00000001]
[03:26:39.020]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.020]        // -> [hasDormant <= 0x00000000]
[03:26:39.020]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.020]        // -> [protType <= 0x00000002]
[03:26:39.020]    </block>
[03:26:39.020]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.020]      // if-block "protType == 1"
[03:26:39.020]        // =>  FALSE
[03:26:39.020]      // skip if-block "protType == 1"
[03:26:39.020]    </control>
[03:26:39.020]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.020]      // if-block "protType == 2"
[03:26:39.022]        // =>  TRUE
[03:26:39.022]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.022]        // if-block "isSWJ"
[03:26:39.022]          // =>  TRUE
[03:26:39.022]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.022]          // if-block "hasDormant"
[03:26:39.022]            // =>  FALSE
[03:26:39.022]          // skip if-block "hasDormant"
[03:26:39.022]        </control>
[03:26:39.022]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.022]          // if-block "!hasDormant"
[03:26:39.022]            // =>  TRUE
[03:26:39.022]          <block atomic="false" info="">
[03:26:39.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.026]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.026]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.026]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.030]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.034]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.034]          </block>
[03:26:39.034]          // end if-block "!hasDormant"
[03:26:39.034]        </control>
[03:26:39.034]        // end if-block "isSWJ"
[03:26:39.034]      </control>
[03:26:39.034]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.034]        // if-block "!isSWJ"
[03:26:39.034]          // =>  FALSE
[03:26:39.034]        // skip if-block "!isSWJ"
[03:26:39.034]      </control>
[03:26:39.034]      <block atomic="false" info="">
[03:26:39.034]        ReadDP(0x0);
[03:26:39.034]  
[03:26:39.034]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.034]  
[03:26:39.034]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.034]      </block>
[03:26:39.034]      // end if-block "protType == 2"
[03:26:39.034]    </control>
[03:26:39.034]  </sequence>
[03:26:39.038]  
[03:26:39.091]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.091]  
[03:26:39.091]  <debugvars>
[03:26:39.091]    // Pre-defined
[03:26:39.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.091]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.091]    __dp=0x00000000
[03:26:39.091]    __ap=0x00000000
[03:26:39.091]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.091]    __FlashAddr=0x00000000
[03:26:39.091]    __FlashLen=0x00000000
[03:26:39.091]    __FlashArg=0x00000000
[03:26:39.091]    __FlashOp=0x00000000
[03:26:39.091]    __Result=0x00000000
[03:26:39.091]  </debugvars>
[03:26:39.091]  
[03:26:39.091]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.091]    <block atomic="false" info="">
[03:26:39.091]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.091]        // -> [isSWJ <= 0x00000001]
[03:26:39.091]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.091]        // -> [hasDormant <= 0x00000000]
[03:26:39.091]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.091]        // -> [protType <= 0x00000002]
[03:26:39.091]    </block>
[03:26:39.094]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.094]      // if-block "protType == 1"
[03:26:39.094]        // =>  FALSE
[03:26:39.094]      // skip if-block "protType == 1"
[03:26:39.095]    </control>
[03:26:39.095]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.095]      // if-block "protType == 2"
[03:26:39.095]        // =>  TRUE
[03:26:39.095]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.095]        // if-block "isSWJ"
[03:26:39.095]          // =>  TRUE
[03:26:39.095]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.095]          // if-block "hasDormant"
[03:26:39.095]            // =>  FALSE
[03:26:39.095]          // skip if-block "hasDormant"
[03:26:39.095]        </control>
[03:26:39.095]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.095]          // if-block "!hasDormant"
[03:26:39.095]            // =>  TRUE
[03:26:39.095]          <block atomic="false" info="">
[03:26:39.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.099]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.103]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.104]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.104]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.107]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.107]          </block>
[03:26:39.107]          // end if-block "!hasDormant"
[03:26:39.107]        </control>
[03:26:39.107]        // end if-block "isSWJ"
[03:26:39.107]      </control>
[03:26:39.107]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.107]        // if-block "!isSWJ"
[03:26:39.107]          // =>  FALSE
[03:26:39.107]        // skip if-block "!isSWJ"
[03:26:39.107]      </control>
[03:26:39.107]      <block atomic="false" info="">
[03:26:39.107]        ReadDP(0x0);
[03:26:39.107]  
[03:26:39.107]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.107]  
[03:26:39.107]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.107]      </block>
[03:26:39.107]      // end if-block "protType == 2"
[03:26:39.111]    </control>
[03:26:39.111]  </sequence>
[03:26:39.111]  
[03:26:39.169]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.169]  
[03:26:39.169]  <debugvars>
[03:26:39.169]    // Pre-defined
[03:26:39.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.169]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.169]    __dp=0x00000000
[03:26:39.169]    __ap=0x00000000
[03:26:39.169]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.169]    __FlashAddr=0x00000000
[03:26:39.171]    __FlashLen=0x00000000
[03:26:39.171]    __FlashArg=0x00000000
[03:26:39.171]    __FlashOp=0x00000000
[03:26:39.171]    __Result=0x00000000
[03:26:39.171]  </debugvars>
[03:26:39.171]  
[03:26:39.171]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.171]    <block atomic="false" info="">
[03:26:39.171]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.171]        // -> [isSWJ <= 0x00000001]
[03:26:39.171]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.171]        // -> [hasDormant <= 0x00000000]
[03:26:39.171]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.171]        // -> [protType <= 0x00000002]
[03:26:39.171]    </block>
[03:26:39.171]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.171]      // if-block "protType == 1"
[03:26:39.171]        // =>  FALSE
[03:26:39.171]      // skip if-block "protType == 1"
[03:26:39.171]    </control>
[03:26:39.173]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.173]      // if-block "protType == 2"
[03:26:39.173]        // =>  TRUE
[03:26:39.173]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.173]        // if-block "isSWJ"
[03:26:39.173]          // =>  TRUE
[03:26:39.173]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.173]          // if-block "hasDormant"
[03:26:39.173]            // =>  FALSE
[03:26:39.173]          // skip if-block "hasDormant"
[03:26:39.173]        </control>
[03:26:39.173]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.173]          // if-block "!hasDormant"
[03:26:39.173]            // =>  TRUE
[03:26:39.173]          <block atomic="false" info="">
[03:26:39.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.173]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.177]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.177]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.181]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.183]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.183]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.183]          </block>
[03:26:39.183]          // end if-block "!hasDormant"
[03:26:39.183]        </control>
[03:26:39.183]        // end if-block "isSWJ"
[03:26:39.185]      </control>
[03:26:39.185]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.185]        // if-block "!isSWJ"
[03:26:39.185]          // =>  FALSE
[03:26:39.185]        // skip if-block "!isSWJ"
[03:26:39.185]      </control>
[03:26:39.185]      <block atomic="false" info="">
[03:26:39.185]        ReadDP(0x0);
[03:26:39.189]  
[03:26:39.189]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.189]  
[03:26:39.189]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.189]      </block>
[03:26:39.189]      // end if-block "protType == 2"
[03:26:39.189]    </control>
[03:26:39.189]  </sequence>
[03:26:39.189]  
[03:26:39.241]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.241]  
[03:26:39.243]  <debugvars>
[03:26:39.243]    // Pre-defined
[03:26:39.243]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.243]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.243]    __dp=0x00000000
[03:26:39.243]    __ap=0x00000000
[03:26:39.243]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.243]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.243]    __FlashAddr=0x00000000
[03:26:39.243]    __FlashLen=0x00000000
[03:26:39.243]    __FlashArg=0x00000000
[03:26:39.243]    __FlashOp=0x00000000
[03:26:39.243]    __Result=0x00000000
[03:26:39.243]  </debugvars>
[03:26:39.243]  
[03:26:39.243]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.243]    <block atomic="false" info="">
[03:26:39.243]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.243]        // -> [isSWJ <= 0x00000001]
[03:26:39.243]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.243]        // -> [hasDormant <= 0x00000000]
[03:26:39.243]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.243]        // -> [protType <= 0x00000002]
[03:26:39.243]    </block>
[03:26:39.243]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.243]      // if-block "protType == 1"
[03:26:39.246]        // =>  FALSE
[03:26:39.246]      // skip if-block "protType == 1"
[03:26:39.246]    </control>
[03:26:39.246]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.246]      // if-block "protType == 2"
[03:26:39.246]        // =>  TRUE
[03:26:39.246]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.246]        // if-block "isSWJ"
[03:26:39.246]          // =>  TRUE
[03:26:39.246]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.246]          // if-block "hasDormant"
[03:26:39.246]            // =>  FALSE
[03:26:39.246]          // skip if-block "hasDormant"
[03:26:39.246]        </control>
[03:26:39.246]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.246]          // if-block "!hasDormant"
[03:26:39.246]            // =>  TRUE
[03:26:39.246]          <block atomic="false" info="">
[03:26:39.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.250]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.250]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.254]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.258]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.266]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.266]          </block>
[03:26:39.266]          // end if-block "!hasDormant"
[03:26:39.266]        </control>
[03:26:39.266]        // end if-block "isSWJ"
[03:26:39.266]      </control>
[03:26:39.266]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.266]        // if-block "!isSWJ"
[03:26:39.266]          // =>  FALSE
[03:26:39.266]        // skip if-block "!isSWJ"
[03:26:39.266]      </control>
[03:26:39.266]      <block atomic="false" info="">
[03:26:39.266]        ReadDP(0x0);
[03:26:39.270]  
[03:26:39.270]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.270]  
[03:26:39.270]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.270]      </block>
[03:26:39.270]      // end if-block "protType == 2"
[03:26:39.270]    </control>
[03:26:39.270]  </sequence>
[03:26:39.271]  
[03:26:39.326]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.326]  
[03:26:39.326]  <debugvars>
[03:26:39.326]    // Pre-defined
[03:26:39.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.326]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.326]    __dp=0x00000000
[03:26:39.326]    __ap=0x00000000
[03:26:39.326]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.328]    __FlashAddr=0x00000000
[03:26:39.328]    __FlashLen=0x00000000
[03:26:39.328]    __FlashArg=0x00000000
[03:26:39.328]    __FlashOp=0x00000000
[03:26:39.328]    __Result=0x00000000
[03:26:39.328]  </debugvars>
[03:26:39.328]  
[03:26:39.328]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.328]    <block atomic="false" info="">
[03:26:39.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.328]        // -> [isSWJ <= 0x00000001]
[03:26:39.328]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.328]        // -> [hasDormant <= 0x00000000]
[03:26:39.328]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.328]        // -> [protType <= 0x00000002]
[03:26:39.328]    </block>
[03:26:39.328]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.328]      // if-block "protType == 1"
[03:26:39.328]        // =>  FALSE
[03:26:39.330]      // skip if-block "protType == 1"
[03:26:39.330]    </control>
[03:26:39.330]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.330]      // if-block "protType == 2"
[03:26:39.330]        // =>  TRUE
[03:26:39.330]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.330]        // if-block "isSWJ"
[03:26:39.330]          // =>  TRUE
[03:26:39.330]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.331]          // if-block "hasDormant"
[03:26:39.331]            // =>  FALSE
[03:26:39.331]          // skip if-block "hasDormant"
[03:26:39.331]        </control>
[03:26:39.331]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.331]          // if-block "!hasDormant"
[03:26:39.331]            // =>  TRUE
[03:26:39.331]          <block atomic="false" info="">
[03:26:39.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.337]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.344]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.346]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.346]          </block>
[03:26:39.346]          // end if-block "!hasDormant"
[03:26:39.346]        </control>
[03:26:39.346]        // end if-block "isSWJ"
[03:26:39.346]      </control>
[03:26:39.346]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.346]        // if-block "!isSWJ"
[03:26:39.346]          // =>  FALSE
[03:26:39.346]        // skip if-block "!isSWJ"
[03:26:39.346]      </control>
[03:26:39.346]      <block atomic="false" info="">
[03:26:39.346]        ReadDP(0x0);
[03:26:39.348]  
[03:26:39.348]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.348]  
[03:26:39.349]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.349]      </block>
[03:26:39.349]      // end if-block "protType == 2"
[03:26:39.349]    </control>
[03:26:39.349]  </sequence>
[03:26:39.349]  
[03:26:39.402]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.402]  
[03:26:39.402]  <debugvars>
[03:26:39.402]    // Pre-defined
[03:26:39.402]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.402]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.402]    __dp=0x00000000
[03:26:39.402]    __ap=0x00000000
[03:26:39.402]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.402]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.402]    __FlashAddr=0x00000000
[03:26:39.402]    __FlashLen=0x00000000
[03:26:39.404]    __FlashArg=0x00000000
[03:26:39.404]    __FlashOp=0x00000000
[03:26:39.404]    __Result=0x00000000
[03:26:39.404]  </debugvars>
[03:26:39.404]  
[03:26:39.405]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.405]    <block atomic="false" info="">
[03:26:39.405]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.405]        // -> [isSWJ <= 0x00000001]
[03:26:39.405]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.405]        // -> [hasDormant <= 0x00000000]
[03:26:39.405]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.405]        // -> [protType <= 0x00000002]
[03:26:39.405]    </block>
[03:26:39.406]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.406]      // if-block "protType == 1"
[03:26:39.406]        // =>  FALSE
[03:26:39.406]      // skip if-block "protType == 1"
[03:26:39.406]    </control>
[03:26:39.406]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.406]      // if-block "protType == 2"
[03:26:39.406]        // =>  TRUE
[03:26:39.406]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.406]        // if-block "isSWJ"
[03:26:39.406]          // =>  TRUE
[03:26:39.406]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.406]          // if-block "hasDormant"
[03:26:39.406]            // =>  FALSE
[03:26:39.406]          // skip if-block "hasDormant"
[03:26:39.406]        </control>
[03:26:39.406]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.406]          // if-block "!hasDormant"
[03:26:39.406]            // =>  TRUE
[03:26:39.406]          <block atomic="false" info="">
[03:26:39.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.410]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.410]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.414]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.418]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.418]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.418]          </block>
[03:26:39.418]          // end if-block "!hasDormant"
[03:26:39.418]        </control>
[03:26:39.418]        // end if-block "isSWJ"
[03:26:39.418]      </control>
[03:26:39.418]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.418]        // if-block "!isSWJ"
[03:26:39.418]          // =>  FALSE
[03:26:39.418]        // skip if-block "!isSWJ"
[03:26:39.418]      </control>
[03:26:39.418]      <block atomic="false" info="">
[03:26:39.418]        ReadDP(0x0);
[03:26:39.422]  
[03:26:39.422]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.422]  
[03:26:39.422]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.422]      </block>
[03:26:39.422]      // end if-block "protType == 2"
[03:26:39.422]    </control>
[03:26:39.422]  </sequence>
[03:26:39.422]  
[03:26:39.475]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.475]  
[03:26:39.475]  <debugvars>
[03:26:39.476]    // Pre-defined
[03:26:39.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.476]    __dp=0x00000000
[03:26:39.477]    __ap=0x00000000
[03:26:39.477]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.477]    __FlashAddr=0x00000000
[03:26:39.477]    __FlashLen=0x00000000
[03:26:39.477]    __FlashArg=0x00000000
[03:26:39.477]    __FlashOp=0x00000000
[03:26:39.477]    __Result=0x00000000
[03:26:39.477]  </debugvars>
[03:26:39.477]  
[03:26:39.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.477]    <block atomic="false" info="">
[03:26:39.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.479]        // -> [isSWJ <= 0x00000001]
[03:26:39.480]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.480]        // -> [hasDormant <= 0x00000000]
[03:26:39.480]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.480]        // -> [protType <= 0x00000002]
[03:26:39.480]    </block>
[03:26:39.480]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.480]      // if-block "protType == 1"
[03:26:39.480]        // =>  FALSE
[03:26:39.480]      // skip if-block "protType == 1"
[03:26:39.480]    </control>
[03:26:39.480]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.480]      // if-block "protType == 2"
[03:26:39.480]        // =>  TRUE
[03:26:39.480]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.480]        // if-block "isSWJ"
[03:26:39.480]          // =>  TRUE
[03:26:39.480]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.480]          // if-block "hasDormant"
[03:26:39.480]            // =>  FALSE
[03:26:39.480]          // skip if-block "hasDormant"
[03:26:39.481]        </control>
[03:26:39.481]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.481]          // if-block "!hasDormant"
[03:26:39.481]            // =>  TRUE
[03:26:39.481]          <block atomic="false" info="">
[03:26:39.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.491]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.491]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.491]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.494]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.495]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.495]          </block>
[03:26:39.495]          // end if-block "!hasDormant"
[03:26:39.495]        </control>
[03:26:39.495]        // end if-block "isSWJ"
[03:26:39.495]      </control>
[03:26:39.495]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.495]        // if-block "!isSWJ"
[03:26:39.495]          // =>  FALSE
[03:26:39.495]        // skip if-block "!isSWJ"
[03:26:39.498]      </control>
[03:26:39.498]      <block atomic="false" info="">
[03:26:39.498]        ReadDP(0x0);
[03:26:39.498]  
[03:26:39.498]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.498]  
[03:26:39.498]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.498]      </block>
[03:26:39.498]      // end if-block "protType == 2"
[03:26:39.498]    </control>
[03:26:39.500]  </sequence>
[03:26:39.500]  
[03:26:39.551]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.551]  
[03:26:39.552]  <debugvars>
[03:26:39.552]    // Pre-defined
[03:26:39.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.552]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.552]    __dp=0x00000000
[03:26:39.552]    __ap=0x00000000
[03:26:39.552]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.552]    __FlashAddr=0x00000000
[03:26:39.552]    __FlashLen=0x00000000
[03:26:39.552]    __FlashArg=0x00000000
[03:26:39.552]    __FlashOp=0x00000000
[03:26:39.552]    __Result=0x00000000
[03:26:39.552]  </debugvars>
[03:26:39.553]  
[03:26:39.553]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.553]    <block atomic="false" info="">
[03:26:39.553]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.553]        // -> [isSWJ <= 0x00000001]
[03:26:39.554]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.554]        // -> [hasDormant <= 0x00000000]
[03:26:39.554]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.554]        // -> [protType <= 0x00000002]
[03:26:39.554]    </block>
[03:26:39.554]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.554]      // if-block "protType == 1"
[03:26:39.554]        // =>  FALSE
[03:26:39.554]      // skip if-block "protType == 1"
[03:26:39.554]    </control>
[03:26:39.554]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.554]      // if-block "protType == 2"
[03:26:39.554]        // =>  TRUE
[03:26:39.554]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.554]        // if-block "isSWJ"
[03:26:39.554]          // =>  TRUE
[03:26:39.554]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.554]          // if-block "hasDormant"
[03:26:39.554]            // =>  FALSE
[03:26:39.554]          // skip if-block "hasDormant"
[03:26:39.554]        </control>
[03:26:39.554]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.554]          // if-block "!hasDormant"
[03:26:39.554]            // =>  TRUE
[03:26:39.554]          <block atomic="false" info="">
[03:26:39.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.557]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.557]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.565]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.565]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.569]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.569]          </block>
[03:26:39.569]          // end if-block "!hasDormant"
[03:26:39.569]        </control>
[03:26:39.569]        // end if-block "isSWJ"
[03:26:39.569]      </control>
[03:26:39.569]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.573]        // if-block "!isSWJ"
[03:26:39.573]          // =>  FALSE
[03:26:39.573]        // skip if-block "!isSWJ"
[03:26:39.573]      </control>
[03:26:39.573]      <block atomic="false" info="">
[03:26:39.573]        ReadDP(0x0);
[03:26:39.573]  
[03:26:39.573]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.573]  
[03:26:39.573]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.573]      </block>
[03:26:39.573]      // end if-block "protType == 2"
[03:26:39.573]    </control>
[03:26:39.573]  </sequence>
[03:26:39.573]  
[03:26:39.626]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.626]  
[03:26:39.626]  <debugvars>
[03:26:39.626]    // Pre-defined
[03:26:39.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.626]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.626]    __dp=0x00000000
[03:26:39.626]    __ap=0x00000000
[03:26:39.626]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.626]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.626]    __FlashAddr=0x00000000
[03:26:39.626]    __FlashLen=0x00000000
[03:26:39.626]    __FlashArg=0x00000000
[03:26:39.626]    __FlashOp=0x00000000
[03:26:39.626]    __Result=0x00000000
[03:26:39.626]  </debugvars>
[03:26:39.626]  
[03:26:39.626]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.626]    <block atomic="false" info="">
[03:26:39.626]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.626]        // -> [isSWJ <= 0x00000001]
[03:26:39.626]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.626]        // -> [hasDormant <= 0x00000000]
[03:26:39.626]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.626]        // -> [protType <= 0x00000002]
[03:26:39.626]    </block>
[03:26:39.626]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.626]      // if-block "protType == 1"
[03:26:39.626]        // =>  FALSE
[03:26:39.626]      // skip if-block "protType == 1"
[03:26:39.626]    </control>
[03:26:39.630]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.630]      // if-block "protType == 2"
[03:26:39.630]        // =>  TRUE
[03:26:39.630]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.630]        // if-block "isSWJ"
[03:26:39.630]          // =>  TRUE
[03:26:39.630]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.630]          // if-block "hasDormant"
[03:26:39.630]            // =>  FALSE
[03:26:39.630]          // skip if-block "hasDormant"
[03:26:39.630]        </control>
[03:26:39.630]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.630]          // if-block "!hasDormant"
[03:26:39.630]            // =>  TRUE
[03:26:39.630]          <block atomic="false" info="">
[03:26:39.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.630]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.634]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.634]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.634]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.634]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.638]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.638]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.638]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.642]          </block>
[03:26:39.642]          // end if-block "!hasDormant"
[03:26:39.642]        </control>
[03:26:39.642]        // end if-block "isSWJ"
[03:26:39.642]      </control>
[03:26:39.642]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.642]        // if-block "!isSWJ"
[03:26:39.642]          // =>  FALSE
[03:26:39.642]        // skip if-block "!isSWJ"
[03:26:39.642]      </control>
[03:26:39.642]      <block atomic="false" info="">
[03:26:39.642]        ReadDP(0x0);
[03:26:39.642]  
[03:26:39.642]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.642]  
[03:26:39.642]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.642]      </block>
[03:26:39.642]      // end if-block "protType == 2"
[03:26:39.642]    </control>
[03:26:39.642]  </sequence>
[03:26:39.642]  
[03:26:39.699]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.699]  
[03:26:39.699]  <debugvars>
[03:26:39.699]    // Pre-defined
[03:26:39.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.699]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.699]    __dp=0x00000000
[03:26:39.699]    __ap=0x00000000
[03:26:39.699]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.699]    __FlashAddr=0x00000000
[03:26:39.699]    __FlashLen=0x00000000
[03:26:39.699]    __FlashArg=0x00000000
[03:26:39.699]    __FlashOp=0x00000000
[03:26:39.701]    __Result=0x00000000
[03:26:39.701]  </debugvars>
[03:26:39.701]  
[03:26:39.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.701]    <block atomic="false" info="">
[03:26:39.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.701]        // -> [isSWJ <= 0x00000001]
[03:26:39.701]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.701]        // -> [hasDormant <= 0x00000000]
[03:26:39.701]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.701]        // -> [protType <= 0x00000002]
[03:26:39.701]    </block>
[03:26:39.701]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.701]      // if-block "protType == 1"
[03:26:39.701]        // =>  FALSE
[03:26:39.701]      // skip if-block "protType == 1"
[03:26:39.701]    </control>
[03:26:39.703]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.703]      // if-block "protType == 2"
[03:26:39.703]        // =>  TRUE
[03:26:39.703]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.703]        // if-block "isSWJ"
[03:26:39.703]          // =>  TRUE
[03:26:39.703]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.703]          // if-block "hasDormant"
[03:26:39.703]            // =>  FALSE
[03:26:39.703]          // skip if-block "hasDormant"
[03:26:39.703]        </control>
[03:26:39.703]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.703]          // if-block "!hasDormant"
[03:26:39.703]            // =>  TRUE
[03:26:39.703]          <block atomic="false" info="">
[03:26:39.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.707]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.707]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.707]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.716]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.716]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.716]          </block>
[03:26:39.716]          // end if-block "!hasDormant"
[03:26:39.716]        </control>
[03:26:39.716]        // end if-block "isSWJ"
[03:26:39.716]      </control>
[03:26:39.716]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.716]        // if-block "!isSWJ"
[03:26:39.716]          // =>  FALSE
[03:26:39.720]        // skip if-block "!isSWJ"
[03:26:39.720]      </control>
[03:26:39.720]      <block atomic="false" info="">
[03:26:39.720]        ReadDP(0x0);
[03:26:39.720]  
[03:26:39.720]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.720]  
[03:26:39.720]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.720]      </block>
[03:26:39.720]      // end if-block "protType == 2"
[03:26:39.720]    </control>
[03:26:39.720]  </sequence>
[03:26:39.720]  
[03:26:39.772]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.772]  
[03:26:39.772]  <debugvars>
[03:26:39.772]    // Pre-defined
[03:26:39.772]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.772]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.772]    __dp=0x00000000
[03:26:39.772]    __ap=0x00000000
[03:26:39.772]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.772]    __FlashAddr=0x00000000
[03:26:39.772]    __FlashLen=0x00000000
[03:26:39.772]    __FlashArg=0x00000000
[03:26:39.772]    __FlashOp=0x00000000
[03:26:39.772]    __Result=0x00000000
[03:26:39.772]  </debugvars>
[03:26:39.772]  
[03:26:39.772]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.772]    <block atomic="false" info="">
[03:26:39.772]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.772]        // -> [isSWJ <= 0x00000001]
[03:26:39.772]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.772]        // -> [hasDormant <= 0x00000000]
[03:26:39.772]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.772]        // -> [protType <= 0x00000002]
[03:26:39.772]    </block>
[03:26:39.772]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.772]      // if-block "protType == 1"
[03:26:39.772]        // =>  FALSE
[03:26:39.772]      // skip if-block "protType == 1"
[03:26:39.772]    </control>
[03:26:39.772]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.772]      // if-block "protType == 2"
[03:26:39.776]        // =>  TRUE
[03:26:39.776]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.776]        // if-block "isSWJ"
[03:26:39.776]          // =>  TRUE
[03:26:39.776]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.776]          // if-block "hasDormant"
[03:26:39.776]            // =>  FALSE
[03:26:39.776]          // skip if-block "hasDormant"
[03:26:39.776]        </control>
[03:26:39.776]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.776]          // if-block "!hasDormant"
[03:26:39.776]            // =>  TRUE
[03:26:39.776]          <block atomic="false" info="">
[03:26:39.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.780]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.785]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.785]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.787]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.787]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.791]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.791]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.791]          </block>
[03:26:39.791]          // end if-block "!hasDormant"
[03:26:39.791]        </control>
[03:26:39.795]        // end if-block "isSWJ"
[03:26:39.795]      </control>
[03:26:39.795]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.795]        // if-block "!isSWJ"
[03:26:39.795]          // =>  FALSE
[03:26:39.795]        // skip if-block "!isSWJ"
[03:26:39.795]      </control>
[03:26:39.795]      <block atomic="false" info="">
[03:26:39.795]        ReadDP(0x0);
[03:26:39.795]  
[03:26:39.795]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.795]  
[03:26:39.795]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.795]      </block>
[03:26:39.795]      // end if-block "protType == 2"
[03:26:39.795]    </control>
[03:26:39.795]  </sequence>
[03:26:39.795]  
[03:26:39.848]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.848]  
[03:26:39.848]  <debugvars>
[03:26:39.848]    // Pre-defined
[03:26:39.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.848]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.848]    __dp=0x00000000
[03:26:39.848]    __ap=0x00000000
[03:26:39.848]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.848]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.848]    __FlashAddr=0x00000000
[03:26:39.848]    __FlashLen=0x00000000
[03:26:39.848]    __FlashArg=0x00000000
[03:26:39.848]    __FlashOp=0x00000000
[03:26:39.848]    __Result=0x00000000
[03:26:39.848]  </debugvars>
[03:26:39.848]  
[03:26:39.848]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.848]    <block atomic="false" info="">
[03:26:39.848]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.848]        // -> [isSWJ <= 0x00000001]
[03:26:39.852]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.852]        // -> [hasDormant <= 0x00000000]
[03:26:39.852]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.852]        // -> [protType <= 0x00000002]
[03:26:39.852]    </block>
[03:26:39.852]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.852]      // if-block "protType == 1"
[03:26:39.852]        // =>  FALSE
[03:26:39.852]      // skip if-block "protType == 1"
[03:26:39.852]    </control>
[03:26:39.852]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.852]      // if-block "protType == 2"
[03:26:39.852]        // =>  TRUE
[03:26:39.852]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.852]        // if-block "isSWJ"
[03:26:39.852]          // =>  TRUE
[03:26:39.852]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.852]          // if-block "hasDormant"
[03:26:39.852]            // =>  FALSE
[03:26:39.852]          // skip if-block "hasDormant"
[03:26:39.852]        </control>
[03:26:39.852]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.852]          // if-block "!hasDormant"
[03:26:39.852]            // =>  TRUE
[03:26:39.852]          <block atomic="false" info="">
[03:26:39.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.856]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.856]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.860]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.864]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.868]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.868]          </block>
[03:26:39.868]          // end if-block "!hasDormant"
[03:26:39.868]        </control>
[03:26:39.868]        // end if-block "isSWJ"
[03:26:39.868]      </control>
[03:26:39.868]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.868]        // if-block "!isSWJ"
[03:26:39.868]          // =>  FALSE
[03:26:39.868]        // skip if-block "!isSWJ"
[03:26:39.868]      </control>
[03:26:39.868]      <block atomic="false" info="">
[03:26:39.868]        ReadDP(0x0);
[03:26:39.872]  
[03:26:39.872]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.872]  
[03:26:39.872]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.872]      </block>
[03:26:39.872]      // end if-block "protType == 2"
[03:26:39.872]    </control>
[03:26:39.872]  </sequence>
[03:26:39.872]  
[03:26:39.932]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:39.932]  
[03:26:39.932]  <debugvars>
[03:26:39.932]    // Pre-defined
[03:26:39.932]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:39.932]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:39.932]    __dp=0x00000000
[03:26:39.932]    __ap=0x00000000
[03:26:39.932]    __traceout=0x00000000      (Trace Disabled)
[03:26:39.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:39.932]    __FlashAddr=0x00000000
[03:26:39.932]    __FlashLen=0x00000000
[03:26:39.932]    __FlashArg=0x00000000
[03:26:39.932]    __FlashOp=0x00000000
[03:26:39.932]    __Result=0x00000000
[03:26:39.932]  </debugvars>
[03:26:39.932]  
[03:26:39.932]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:39.932]    <block atomic="false" info="">
[03:26:39.932]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:39.932]        // -> [isSWJ <= 0x00000001]
[03:26:39.932]      __var hasDormant = __protocol & 0x00020000;
[03:26:39.936]        // -> [hasDormant <= 0x00000000]
[03:26:39.936]      __var protType   = __protocol & 0x0000FFFF;
[03:26:39.937]        // -> [protType <= 0x00000002]
[03:26:39.937]    </block>
[03:26:39.937]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:39.937]      // if-block "protType == 1"
[03:26:39.937]        // =>  FALSE
[03:26:39.937]      // skip if-block "protType == 1"
[03:26:39.937]    </control>
[03:26:39.937]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:39.937]      // if-block "protType == 2"
[03:26:39.937]        // =>  TRUE
[03:26:39.937]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:39.937]        // if-block "isSWJ"
[03:26:39.937]          // =>  TRUE
[03:26:39.937]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:39.937]          // if-block "hasDormant"
[03:26:39.937]            // =>  FALSE
[03:26:39.937]          // skip if-block "hasDormant"
[03:26:39.937]        </control>
[03:26:39.937]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:39.937]          // if-block "!hasDormant"
[03:26:39.937]            // =>  TRUE
[03:26:39.937]          <block atomic="false" info="">
[03:26:39.937]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:39.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.940]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:39.940]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:39.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:39.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.940]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:39.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:39.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:39.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:39.944]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:39.952]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:39.952]          </block>
[03:26:39.952]          // end if-block "!hasDormant"
[03:26:39.952]        </control>
[03:26:39.952]        // end if-block "isSWJ"
[03:26:39.952]      </control>
[03:26:39.952]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:39.952]        // if-block "!isSWJ"
[03:26:39.952]          // =>  FALSE
[03:26:39.952]        // skip if-block "!isSWJ"
[03:26:39.952]      </control>
[03:26:39.952]      <block atomic="false" info="">
[03:26:39.952]        ReadDP(0x0);
[03:26:39.956]  
[03:26:39.956]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:39.956]  
[03:26:39.956]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:39.956]      </block>
[03:26:39.956]      // end if-block "protType == 2"
[03:26:39.956]    </control>
[03:26:39.956]  </sequence>
[03:26:39.956]  
[03:26:40.016]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.016]  
[03:26:40.016]  <debugvars>
[03:26:40.016]    // Pre-defined
[03:26:40.016]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.016]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.016]    __dp=0x00000000
[03:26:40.016]    __ap=0x00000000
[03:26:40.016]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.016]    __FlashAddr=0x00000000
[03:26:40.016]    __FlashLen=0x00000000
[03:26:40.016]    __FlashArg=0x00000000
[03:26:40.016]    __FlashOp=0x00000000
[03:26:40.016]    __Result=0x00000000
[03:26:40.016]  </debugvars>
[03:26:40.016]  
[03:26:40.016]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.016]    <block atomic="false" info="">
[03:26:40.016]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.016]        // -> [isSWJ <= 0x00000001]
[03:26:40.016]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.016]        // -> [hasDormant <= 0x00000000]
[03:26:40.016]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.016]        // -> [protType <= 0x00000002]
[03:26:40.016]    </block>
[03:26:40.016]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.020]      // if-block "protType == 1"
[03:26:40.020]        // =>  FALSE
[03:26:40.020]      // skip if-block "protType == 1"
[03:26:40.020]    </control>
[03:26:40.020]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.020]      // if-block "protType == 2"
[03:26:40.020]        // =>  TRUE
[03:26:40.020]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.020]        // if-block "isSWJ"
[03:26:40.020]          // =>  TRUE
[03:26:40.020]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.020]          // if-block "hasDormant"
[03:26:40.020]            // =>  FALSE
[03:26:40.020]          // skip if-block "hasDormant"
[03:26:40.020]        </control>
[03:26:40.020]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.020]          // if-block "!hasDormant"
[03:26:40.020]            // =>  TRUE
[03:26:40.020]          <block atomic="false" info="">
[03:26:40.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.024]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.024]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.024]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.028]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.028]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.028]          </block>
[03:26:40.028]          // end if-block "!hasDormant"
[03:26:40.028]        </control>
[03:26:40.032]        // end if-block "isSWJ"
[03:26:40.032]      </control>
[03:26:40.032]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.032]        // if-block "!isSWJ"
[03:26:40.032]          // =>  FALSE
[03:26:40.032]        // skip if-block "!isSWJ"
[03:26:40.032]      </control>
[03:26:40.032]      <block atomic="false" info="">
[03:26:40.032]        ReadDP(0x0);
[03:26:40.032]  
[03:26:40.032]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.032]  
[03:26:40.032]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.032]      </block>
[03:26:40.032]      // end if-block "protType == 2"
[03:26:40.032]    </control>
[03:26:40.032]  </sequence>
[03:26:40.032]  
[03:26:40.088]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.088]  
[03:26:40.088]  <debugvars>
[03:26:40.088]    // Pre-defined
[03:26:40.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.088]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.088]    __dp=0x00000000
[03:26:40.088]    __ap=0x00000000
[03:26:40.088]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.088]    __FlashAddr=0x00000000
[03:26:40.088]    __FlashLen=0x00000000
[03:26:40.088]    __FlashArg=0x00000000
[03:26:40.088]    __FlashOp=0x00000000
[03:26:40.090]    __Result=0x00000000
[03:26:40.090]  </debugvars>
[03:26:40.090]  
[03:26:40.090]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.090]    <block atomic="false" info="">
[03:26:40.090]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.090]        // -> [isSWJ <= 0x00000001]
[03:26:40.090]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.090]        // -> [hasDormant <= 0x00000000]
[03:26:40.090]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.090]        // -> [protType <= 0x00000002]
[03:26:40.090]    </block>
[03:26:40.090]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.090]      // if-block "protType == 1"
[03:26:40.090]        // =>  FALSE
[03:26:40.090]      // skip if-block "protType == 1"
[03:26:40.090]    </control>
[03:26:40.090]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.090]      // if-block "protType == 2"
[03:26:40.090]        // =>  TRUE
[03:26:40.090]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.093]        // if-block "isSWJ"
[03:26:40.093]          // =>  TRUE
[03:26:40.093]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.093]          // if-block "hasDormant"
[03:26:40.093]            // =>  FALSE
[03:26:40.093]          // skip if-block "hasDormant"
[03:26:40.093]        </control>
[03:26:40.093]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.093]          // if-block "!hasDormant"
[03:26:40.093]            // =>  TRUE
[03:26:40.093]          <block atomic="false" info="">
[03:26:40.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.093]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.101]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.103]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.105]          </block>
[03:26:40.105]          // end if-block "!hasDormant"
[03:26:40.105]        </control>
[03:26:40.105]        // end if-block "isSWJ"
[03:26:40.105]      </control>
[03:26:40.105]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.105]        // if-block "!isSWJ"
[03:26:40.105]          // =>  FALSE
[03:26:40.105]        // skip if-block "!isSWJ"
[03:26:40.105]      </control>
[03:26:40.105]      <block atomic="false" info="">
[03:26:40.105]        ReadDP(0x0);
[03:26:40.109]  
[03:26:40.109]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.109]  
[03:26:40.109]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.109]      </block>
[03:26:40.109]      // end if-block "protType == 2"
[03:26:40.109]    </control>
[03:26:40.109]  </sequence>
[03:26:40.109]  
[03:26:40.161]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.161]  
[03:26:40.161]  <debugvars>
[03:26:40.161]    // Pre-defined
[03:26:40.161]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.161]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.162]    __dp=0x00000000
[03:26:40.162]    __ap=0x00000000
[03:26:40.162]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.162]    __FlashAddr=0x00000000
[03:26:40.162]    __FlashLen=0x00000000
[03:26:40.162]    __FlashArg=0x00000000
[03:26:40.162]    __FlashOp=0x00000000
[03:26:40.162]    __Result=0x00000000
[03:26:40.162]  </debugvars>
[03:26:40.162]  
[03:26:40.162]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.162]    <block atomic="false" info="">
[03:26:40.162]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.162]        // -> [isSWJ <= 0x00000001]
[03:26:40.162]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.162]        // -> [hasDormant <= 0x00000000]
[03:26:40.162]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.162]        // -> [protType <= 0x00000002]
[03:26:40.162]    </block>
[03:26:40.162]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.162]      // if-block "protType == 1"
[03:26:40.162]        // =>  FALSE
[03:26:40.162]      // skip if-block "protType == 1"
[03:26:40.162]    </control>
[03:26:40.162]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.162]      // if-block "protType == 2"
[03:26:40.165]        // =>  TRUE
[03:26:40.165]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.165]        // if-block "isSWJ"
[03:26:40.165]          // =>  TRUE
[03:26:40.165]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.165]          // if-block "hasDormant"
[03:26:40.165]            // =>  FALSE
[03:26:40.165]          // skip if-block "hasDormant"
[03:26:40.165]        </control>
[03:26:40.165]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.165]          // if-block "!hasDormant"
[03:26:40.165]            // =>  TRUE
[03:26:40.165]          <block atomic="false" info="">
[03:26:40.165]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.165]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.169]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.169]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.169]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.173]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.175]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.175]          </block>
[03:26:40.175]          // end if-block "!hasDormant"
[03:26:40.175]        </control>
[03:26:40.175]        // end if-block "isSWJ"
[03:26:40.175]      </control>
[03:26:40.175]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.175]        // if-block "!isSWJ"
[03:26:40.175]          // =>  FALSE
[03:26:40.175]        // skip if-block "!isSWJ"
[03:26:40.175]      </control>
[03:26:40.175]      <block atomic="false" info="">
[03:26:40.175]        ReadDP(0x0);
[03:26:40.177]  
[03:26:40.177]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.177]  
[03:26:40.177]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.177]      </block>
[03:26:40.177]      // end if-block "protType == 2"
[03:26:40.177]    </control>
[03:26:40.177]  </sequence>
[03:26:40.177]  
[03:26:40.234]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.234]  
[03:26:40.234]  <debugvars>
[03:26:40.234]    // Pre-defined
[03:26:40.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.234]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.234]    __dp=0x00000000
[03:26:40.234]    __ap=0x00000000
[03:26:40.234]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.234]    __FlashAddr=0x00000000
[03:26:40.234]    __FlashLen=0x00000000
[03:26:40.234]    __FlashArg=0x00000000
[03:26:40.234]    __FlashOp=0x00000000
[03:26:40.234]    __Result=0x00000000
[03:26:40.234]  </debugvars>
[03:26:40.234]  
[03:26:40.234]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.234]    <block atomic="false" info="">
[03:26:40.234]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.234]        // -> [isSWJ <= 0x00000001]
[03:26:40.234]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.234]        // -> [hasDormant <= 0x00000000]
[03:26:40.234]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.234]        // -> [protType <= 0x00000002]
[03:26:40.234]    </block>
[03:26:40.234]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.234]      // if-block "protType == 1"
[03:26:40.234]        // =>  FALSE
[03:26:40.234]      // skip if-block "protType == 1"
[03:26:40.234]    </control>
[03:26:40.234]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.234]      // if-block "protType == 2"
[03:26:40.234]        // =>  TRUE
[03:26:40.234]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.238]        // if-block "isSWJ"
[03:26:40.238]          // =>  TRUE
[03:26:40.238]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.238]          // if-block "hasDormant"
[03:26:40.238]            // =>  FALSE
[03:26:40.238]          // skip if-block "hasDormant"
[03:26:40.238]        </control>
[03:26:40.238]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.238]          // if-block "!hasDormant"
[03:26:40.238]            // =>  TRUE
[03:26:40.238]          <block atomic="false" info="">
[03:26:40.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.238]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.242]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.247]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.247]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.247]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.247]          </block>
[03:26:40.247]          // end if-block "!hasDormant"
[03:26:40.247]        </control>
[03:26:40.247]        // end if-block "isSWJ"
[03:26:40.247]      </control>
[03:26:40.247]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.247]        // if-block "!isSWJ"
[03:26:40.247]          // =>  FALSE
[03:26:40.247]        // skip if-block "!isSWJ"
[03:26:40.247]      </control>
[03:26:40.250]      <block atomic="false" info="">
[03:26:40.250]        ReadDP(0x0);
[03:26:40.250]  
[03:26:40.250]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.250]  
[03:26:40.250]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.250]      </block>
[03:26:40.250]      // end if-block "protType == 2"
[03:26:40.250]    </control>
[03:26:40.250]  </sequence>
[03:26:40.250]  
[03:26:40.307]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.307]  
[03:26:40.307]  <debugvars>
[03:26:40.307]    // Pre-defined
[03:26:40.307]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.307]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.307]    __dp=0x00000000
[03:26:40.307]    __ap=0x00000000
[03:26:40.308]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.308]    __FlashAddr=0x00000000
[03:26:40.308]    __FlashLen=0x00000000
[03:26:40.308]    __FlashArg=0x00000000
[03:26:40.308]    __FlashOp=0x00000000
[03:26:40.308]    __Result=0x00000000
[03:26:40.308]  </debugvars>
[03:26:40.308]  
[03:26:40.308]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.308]    <block atomic="false" info="">
[03:26:40.308]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.308]        // -> [isSWJ <= 0x00000001]
[03:26:40.308]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.308]        // -> [hasDormant <= 0x00000000]
[03:26:40.310]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.310]        // -> [protType <= 0x00000002]
[03:26:40.310]    </block>
[03:26:40.310]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.310]      // if-block "protType == 1"
[03:26:40.310]        // =>  FALSE
[03:26:40.310]      // skip if-block "protType == 1"
[03:26:40.310]    </control>
[03:26:40.310]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.311]      // if-block "protType == 2"
[03:26:40.311]        // =>  TRUE
[03:26:40.311]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.311]        // if-block "isSWJ"
[03:26:40.311]          // =>  TRUE
[03:26:40.311]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.311]          // if-block "hasDormant"
[03:26:40.311]            // =>  FALSE
[03:26:40.311]          // skip if-block "hasDormant"
[03:26:40.311]        </control>
[03:26:40.311]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.311]          // if-block "!hasDormant"
[03:26:40.311]            // =>  TRUE
[03:26:40.311]          <block atomic="false" info="">
[03:26:40.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.320]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.321]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.323]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.324]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.324]          </block>
[03:26:40.324]          // end if-block "!hasDormant"
[03:26:40.324]        </control>
[03:26:40.324]        // end if-block "isSWJ"
[03:26:40.324]      </control>
[03:26:40.324]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.324]        // if-block "!isSWJ"
[03:26:40.324]          // =>  FALSE
[03:26:40.324]        // skip if-block "!isSWJ"
[03:26:40.324]      </control>
[03:26:40.324]      <block atomic="false" info="">
[03:26:40.326]        ReadDP(0x0);
[03:26:40.328]  
[03:26:40.328]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.328]  
[03:26:40.328]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.328]      </block>
[03:26:40.328]      // end if-block "protType == 2"
[03:26:40.328]    </control>
[03:26:40.328]  </sequence>
[03:26:40.328]  
[03:26:40.381]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.381]  
[03:26:40.381]  <debugvars>
[03:26:40.381]    // Pre-defined
[03:26:40.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.381]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.381]    __dp=0x00000000
[03:26:40.381]    __ap=0x00000000
[03:26:40.381]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.381]    __FlashAddr=0x00000000
[03:26:40.381]    __FlashLen=0x00000000
[03:26:40.381]    __FlashArg=0x00000000
[03:26:40.381]    __FlashOp=0x00000000
[03:26:40.381]    __Result=0x00000000
[03:26:40.381]  </debugvars>
[03:26:40.381]  
[03:26:40.381]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.381]    <block atomic="false" info="">
[03:26:40.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.381]        // -> [isSWJ <= 0x00000001]
[03:26:40.381]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.381]        // -> [hasDormant <= 0x00000000]
[03:26:40.381]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.381]        // -> [protType <= 0x00000002]
[03:26:40.381]    </block>
[03:26:40.381]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.381]      // if-block "protType == 1"
[03:26:40.381]        // =>  FALSE
[03:26:40.381]      // skip if-block "protType == 1"
[03:26:40.381]    </control>
[03:26:40.385]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.385]      // if-block "protType == 2"
[03:26:40.385]        // =>  TRUE
[03:26:40.385]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.385]        // if-block "isSWJ"
[03:26:40.385]          // =>  TRUE
[03:26:40.385]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.385]          // if-block "hasDormant"
[03:26:40.385]            // =>  FALSE
[03:26:40.385]          // skip if-block "hasDormant"
[03:26:40.385]        </control>
[03:26:40.385]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.385]          // if-block "!hasDormant"
[03:26:40.385]            // =>  TRUE
[03:26:40.385]          <block atomic="false" info="">
[03:26:40.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.393]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.395]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.395]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.397]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.397]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.401]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.401]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.401]          </block>
[03:26:40.401]          // end if-block "!hasDormant"
[03:26:40.401]        </control>
[03:26:40.401]        // end if-block "isSWJ"
[03:26:40.401]      </control>
[03:26:40.401]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.401]        // if-block "!isSWJ"
[03:26:40.401]          // =>  FALSE
[03:26:40.401]        // skip if-block "!isSWJ"
[03:26:40.401]      </control>
[03:26:40.401]      <block atomic="false" info="">
[03:26:40.401]        ReadDP(0x0);
[03:26:40.405]  
[03:26:40.405]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.405]  
[03:26:40.405]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.405]      </block>
[03:26:40.405]      // end if-block "protType == 2"
[03:26:40.405]    </control>
[03:26:40.405]  </sequence>
[03:26:40.405]  
[03:26:40.458]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.458]  
[03:26:40.458]  <debugvars>
[03:26:40.458]    // Pre-defined
[03:26:40.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.458]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.458]    __dp=0x00000000
[03:26:40.458]    __ap=0x00000000
[03:26:40.459]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.459]    __FlashAddr=0x00000000
[03:26:40.459]    __FlashLen=0x00000000
[03:26:40.459]    __FlashArg=0x00000000
[03:26:40.459]    __FlashOp=0x00000000
[03:26:40.459]    __Result=0x00000000
[03:26:40.459]  </debugvars>
[03:26:40.459]  
[03:26:40.459]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.459]    <block atomic="false" info="">
[03:26:40.459]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.459]        // -> [isSWJ <= 0x00000001]
[03:26:40.459]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.459]        // -> [hasDormant <= 0x00000000]
[03:26:40.461]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.461]        // -> [protType <= 0x00000002]
[03:26:40.461]    </block>
[03:26:40.461]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.461]      // if-block "protType == 1"
[03:26:40.461]        // =>  FALSE
[03:26:40.461]      // skip if-block "protType == 1"
[03:26:40.461]    </control>
[03:26:40.461]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.461]      // if-block "protType == 2"
[03:26:40.461]        // =>  TRUE
[03:26:40.461]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.462]        // if-block "isSWJ"
[03:26:40.462]          // =>  TRUE
[03:26:40.462]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.462]          // if-block "hasDormant"
[03:26:40.462]            // =>  FALSE
[03:26:40.462]          // skip if-block "hasDormant"
[03:26:40.462]        </control>
[03:26:40.462]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.462]          // if-block "!hasDormant"
[03:26:40.462]            // =>  TRUE
[03:26:40.462]          <block atomic="false" info="">
[03:26:40.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.465]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.466]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.466]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.472]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.472]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.472]          </block>
[03:26:40.472]          // end if-block "!hasDormant"
[03:26:40.472]        </control>
[03:26:40.472]        // end if-block "isSWJ"
[03:26:40.472]      </control>
[03:26:40.472]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.472]        // if-block "!isSWJ"
[03:26:40.475]          // =>  FALSE
[03:26:40.475]        // skip if-block "!isSWJ"
[03:26:40.475]      </control>
[03:26:40.475]      <block atomic="false" info="">
[03:26:40.475]        ReadDP(0x0);
[03:26:40.475]  
[03:26:40.475]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.475]  
[03:26:40.475]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.475]      </block>
[03:26:40.475]      // end if-block "protType == 2"
[03:26:40.475]    </control>
[03:26:40.475]  </sequence>
[03:26:40.475]  
[03:26:40.532]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.532]  
[03:26:40.532]  <debugvars>
[03:26:40.532]    // Pre-defined
[03:26:40.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.532]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.532]    __dp=0x00000000
[03:26:40.532]    __ap=0x00000000
[03:26:40.532]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.532]    __FlashAddr=0x00000000
[03:26:40.532]    __FlashLen=0x00000000
[03:26:40.532]    __FlashArg=0x00000000
[03:26:40.532]    __FlashOp=0x00000000
[03:26:40.532]    __Result=0x00000000
[03:26:40.532]  </debugvars>
[03:26:40.532]  
[03:26:40.532]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.532]    <block atomic="false" info="">
[03:26:40.532]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.532]        // -> [isSWJ <= 0x00000001]
[03:26:40.532]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.535]        // -> [hasDormant <= 0x00000000]
[03:26:40.535]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.535]        // -> [protType <= 0x00000002]
[03:26:40.535]    </block>
[03:26:40.535]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.535]      // if-block "protType == 1"
[03:26:40.535]        // =>  FALSE
[03:26:40.535]      // skip if-block "protType == 1"
[03:26:40.535]    </control>
[03:26:40.535]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.535]      // if-block "protType == 2"
[03:26:40.535]        // =>  TRUE
[03:26:40.535]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.536]        // if-block "isSWJ"
[03:26:40.536]          // =>  TRUE
[03:26:40.536]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.536]          // if-block "hasDormant"
[03:26:40.536]            // =>  FALSE
[03:26:40.536]          // skip if-block "hasDormant"
[03:26:40.536]        </control>
[03:26:40.536]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.536]          // if-block "!hasDormant"
[03:26:40.536]            // =>  TRUE
[03:26:40.536]          <block atomic="false" info="">
[03:26:40.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.540]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.545]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.545]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.545]          </block>
[03:26:40.545]          // end if-block "!hasDormant"
[03:26:40.545]        </control>
[03:26:40.545]        // end if-block "isSWJ"
[03:26:40.545]      </control>
[03:26:40.545]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.545]        // if-block "!isSWJ"
[03:26:40.545]          // =>  FALSE
[03:26:40.545]        // skip if-block "!isSWJ"
[03:26:40.549]      </control>
[03:26:40.549]      <block atomic="false" info="">
[03:26:40.549]        ReadDP(0x0);
[03:26:40.549]  
[03:26:40.549]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.549]  
[03:26:40.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.549]      </block>
[03:26:40.549]      // end if-block "protType == 2"
[03:26:40.549]    </control>
[03:26:40.549]  </sequence>
[03:26:40.549]  
[03:26:40.605]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.605]  
[03:26:40.605]  <debugvars>
[03:26:40.605]    // Pre-defined
[03:26:40.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.605]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.605]    __dp=0x00000000
[03:26:40.605]    __ap=0x00000000
[03:26:40.605]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.605]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.605]    __FlashAddr=0x00000000
[03:26:40.605]    __FlashLen=0x00000000
[03:26:40.605]    __FlashArg=0x00000000
[03:26:40.607]    __FlashOp=0x00000000
[03:26:40.607]    __Result=0x00000000
[03:26:40.607]  </debugvars>
[03:26:40.607]  
[03:26:40.607]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.607]    <block atomic="false" info="">
[03:26:40.608]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.608]        // -> [isSWJ <= 0x00000001]
[03:26:40.608]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.608]        // -> [hasDormant <= 0x00000000]
[03:26:40.608]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.608]        // -> [protType <= 0x00000002]
[03:26:40.608]    </block>
[03:26:40.608]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.608]      // if-block "protType == 1"
[03:26:40.608]        // =>  FALSE
[03:26:40.608]      // skip if-block "protType == 1"
[03:26:40.608]    </control>
[03:26:40.608]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.608]      // if-block "protType == 2"
[03:26:40.608]        // =>  TRUE
[03:26:40.608]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.608]        // if-block "isSWJ"
[03:26:40.608]          // =>  TRUE
[03:26:40.608]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.608]          // if-block "hasDormant"
[03:26:40.610]            // =>  FALSE
[03:26:40.610]          // skip if-block "hasDormant"
[03:26:40.610]        </control>
[03:26:40.610]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.610]          // if-block "!hasDormant"
[03:26:40.610]            // =>  TRUE
[03:26:40.610]          <block atomic="false" info="">
[03:26:40.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.610]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.614]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.618]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.618]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.618]          </block>
[03:26:40.618]          // end if-block "!hasDormant"
[03:26:40.618]        </control>
[03:26:40.622]        // end if-block "isSWJ"
[03:26:40.622]      </control>
[03:26:40.622]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.622]        // if-block "!isSWJ"
[03:26:40.622]          // =>  FALSE
[03:26:40.622]        // skip if-block "!isSWJ"
[03:26:40.622]      </control>
[03:26:40.622]      <block atomic="false" info="">
[03:26:40.622]        ReadDP(0x0);
[03:26:40.626]  
[03:26:40.626]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.626]  
[03:26:40.626]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.626]      </block>
[03:26:40.626]      // end if-block "protType == 2"
[03:26:40.626]    </control>
[03:26:40.626]  </sequence>
[03:26:40.626]  
[03:26:40.678]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.678]  
[03:26:40.678]  <debugvars>
[03:26:40.678]    // Pre-defined
[03:26:40.678]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.678]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.678]    __dp=0x00000000
[03:26:40.678]    __ap=0x00000000
[03:26:40.678]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.678]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.678]    __FlashAddr=0x00000000
[03:26:40.678]    __FlashLen=0x00000000
[03:26:40.678]    __FlashArg=0x00000000
[03:26:40.678]    __FlashOp=0x00000000
[03:26:40.678]    __Result=0x00000000
[03:26:40.678]  </debugvars>
[03:26:40.678]  
[03:26:40.678]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.678]    <block atomic="false" info="">
[03:26:40.678]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.678]        // -> [isSWJ <= 0x00000001]
[03:26:40.678]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.678]        // -> [hasDormant <= 0x00000000]
[03:26:40.678]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.678]        // -> [protType <= 0x00000002]
[03:26:40.678]    </block>
[03:26:40.678]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.678]      // if-block "protType == 1"
[03:26:40.678]        // =>  FALSE
[03:26:40.678]      // skip if-block "protType == 1"
[03:26:40.682]    </control>
[03:26:40.682]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.682]      // if-block "protType == 2"
[03:26:40.682]        // =>  TRUE
[03:26:40.682]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.682]        // if-block "isSWJ"
[03:26:40.682]          // =>  TRUE
[03:26:40.682]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.682]          // if-block "hasDormant"
[03:26:40.682]            // =>  FALSE
[03:26:40.682]          // skip if-block "hasDormant"
[03:26:40.682]        </control>
[03:26:40.682]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.682]          // if-block "!hasDormant"
[03:26:40.682]            // =>  TRUE
[03:26:40.682]          <block atomic="false" info="">
[03:26:40.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.682]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.686]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.690]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.690]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.690]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.690]          </block>
[03:26:40.690]          // end if-block "!hasDormant"
[03:26:40.690]        </control>
[03:26:40.690]        // end if-block "isSWJ"
[03:26:40.694]      </control>
[03:26:40.694]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.694]        // if-block "!isSWJ"
[03:26:40.694]          // =>  FALSE
[03:26:40.694]        // skip if-block "!isSWJ"
[03:26:40.694]      </control>
[03:26:40.694]      <block atomic="false" info="">
[03:26:40.694]        ReadDP(0x0);
[03:26:40.702]  
[03:26:40.702]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.702]  
[03:26:40.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.702]      </block>
[03:26:40.702]      // end if-block "protType == 2"
[03:26:40.702]    </control>
[03:26:40.702]  </sequence>
[03:26:40.702]  
[03:26:40.767]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.767]  
[03:26:40.768]  <debugvars>
[03:26:40.768]    // Pre-defined
[03:26:40.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.768]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.768]    __dp=0x00000000
[03:26:40.768]    __ap=0x00000000
[03:26:40.768]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.769]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.769]    __FlashAddr=0x00000000
[03:26:40.769]    __FlashLen=0x00000000
[03:26:40.769]    __FlashArg=0x00000000
[03:26:40.769]    __FlashOp=0x00000000
[03:26:40.769]    __Result=0x00000000
[03:26:40.769]  </debugvars>
[03:26:40.769]  
[03:26:40.769]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.770]    <block atomic="false" info="">
[03:26:40.770]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.770]        // -> [isSWJ <= 0x00000001]
[03:26:40.770]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.770]        // -> [hasDormant <= 0x00000000]
[03:26:40.770]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.771]        // -> [protType <= 0x00000002]
[03:26:40.771]    </block>
[03:26:40.771]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.771]      // if-block "protType == 1"
[03:26:40.771]        // =>  FALSE
[03:26:40.771]      // skip if-block "protType == 1"
[03:26:40.771]    </control>
[03:26:40.771]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.771]      // if-block "protType == 2"
[03:26:40.772]        // =>  TRUE
[03:26:40.772]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.772]        // if-block "isSWJ"
[03:26:40.772]          // =>  TRUE
[03:26:40.772]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.772]          // if-block "hasDormant"
[03:26:40.772]            // =>  FALSE
[03:26:40.772]          // skip if-block "hasDormant"
[03:26:40.773]        </control>
[03:26:40.773]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.773]          // if-block "!hasDormant"
[03:26:40.773]            // =>  TRUE
[03:26:40.773]          <block atomic="false" info="">
[03:26:40.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.775]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.778]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.782]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.783]          </block>
[03:26:40.783]          // end if-block "!hasDormant"
[03:26:40.783]        </control>
[03:26:40.783]        // end if-block "isSWJ"
[03:26:40.783]      </control>
[03:26:40.783]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.783]        // if-block "!isSWJ"
[03:26:40.783]          // =>  FALSE
[03:26:40.783]        // skip if-block "!isSWJ"
[03:26:40.783]      </control>
[03:26:40.783]      <block atomic="false" info="">
[03:26:40.783]        ReadDP(0x0);
[03:26:40.785]  
[03:26:40.785]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.785]  
[03:26:40.785]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.785]      </block>
[03:26:40.785]      // end if-block "protType == 2"
[03:26:40.785]    </control>
[03:26:40.785]  </sequence>
[03:26:40.785]  
[03:26:40.842]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.842]  
[03:26:40.842]  <debugvars>
[03:26:40.842]    // Pre-defined
[03:26:40.842]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.842]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.842]    __dp=0x00000000
[03:26:40.842]    __ap=0x00000000
[03:26:40.842]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.842]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.842]    __FlashAddr=0x00000000
[03:26:40.842]    __FlashLen=0x00000000
[03:26:40.842]    __FlashArg=0x00000000
[03:26:40.842]    __FlashOp=0x00000000
[03:26:40.842]    __Result=0x00000000
[03:26:40.842]  </debugvars>
[03:26:40.842]  
[03:26:40.842]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.842]    <block atomic="false" info="">
[03:26:40.842]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.842]        // -> [isSWJ <= 0x00000001]
[03:26:40.842]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.842]        // -> [hasDormant <= 0x00000000]
[03:26:40.842]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.842]        // -> [protType <= 0x00000002]
[03:26:40.842]    </block>
[03:26:40.842]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.842]      // if-block "protType == 1"
[03:26:40.842]        // =>  FALSE
[03:26:40.842]      // skip if-block "protType == 1"
[03:26:40.842]    </control>
[03:26:40.842]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.842]      // if-block "protType == 2"
[03:26:40.846]        // =>  TRUE
[03:26:40.846]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.846]        // if-block "isSWJ"
[03:26:40.846]          // =>  TRUE
[03:26:40.846]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.846]          // if-block "hasDormant"
[03:26:40.846]            // =>  FALSE
[03:26:40.846]          // skip if-block "hasDormant"
[03:26:40.846]        </control>
[03:26:40.846]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.846]          // if-block "!hasDormant"
[03:26:40.846]            // =>  TRUE
[03:26:40.846]          <block atomic="false" info="">
[03:26:40.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.850]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.850]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.850]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.854]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.854]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.856]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.858]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.858]          </block>
[03:26:40.858]          // end if-block "!hasDormant"
[03:26:40.858]        </control>
[03:26:40.858]        // end if-block "isSWJ"
[03:26:40.858]      </control>
[03:26:40.858]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.858]        // if-block "!isSWJ"
[03:26:40.858]          // =>  FALSE
[03:26:40.858]        // skip if-block "!isSWJ"
[03:26:40.858]      </control>
[03:26:40.858]      <block atomic="false" info="">
[03:26:40.858]        ReadDP(0x0);
[03:26:40.858]  
[03:26:40.858]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.858]  
[03:26:40.858]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.858]      </block>
[03:26:40.858]      // end if-block "protType == 2"
[03:26:40.858]    </control>
[03:26:40.862]  </sequence>
[03:26:40.862]  
[03:26:40.916]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.916]  
[03:26:40.916]  <debugvars>
[03:26:40.916]    // Pre-defined
[03:26:40.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.916]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.916]    __dp=0x00000000
[03:26:40.916]    __ap=0x00000000
[03:26:40.916]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.916]    __FlashAddr=0x00000000
[03:26:40.916]    __FlashLen=0x00000000
[03:26:40.916]    __FlashArg=0x00000000
[03:26:40.916]    __FlashOp=0x00000000
[03:26:40.916]    __Result=0x00000000
[03:26:40.916]  </debugvars>
[03:26:40.916]  
[03:26:40.916]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.916]    <block atomic="false" info="">
[03:26:40.916]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.916]        // -> [isSWJ <= 0x00000001]
[03:26:40.916]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.916]        // -> [hasDormant <= 0x00000000]
[03:26:40.916]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.916]        // -> [protType <= 0x00000002]
[03:26:40.916]    </block>
[03:26:40.916]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.916]      // if-block "protType == 1"
[03:26:40.916]        // =>  FALSE
[03:26:40.916]      // skip if-block "protType == 1"
[03:26:40.916]    </control>
[03:26:40.916]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.916]      // if-block "protType == 2"
[03:26:40.916]        // =>  TRUE
[03:26:40.916]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.916]        // if-block "isSWJ"
[03:26:40.916]          // =>  TRUE
[03:26:40.920]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.920]          // if-block "hasDormant"
[03:26:40.920]            // =>  FALSE
[03:26:40.920]          // skip if-block "hasDormant"
[03:26:40.920]        </control>
[03:26:40.920]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.920]          // if-block "!hasDormant"
[03:26:40.920]            // =>  TRUE
[03:26:40.920]          <block atomic="false" info="">
[03:26:40.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.920]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:40.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:40.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:40.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:40.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:40.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:40.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.928]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:40.928]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:40.932]          </block>
[03:26:40.932]          // end if-block "!hasDormant"
[03:26:40.932]        </control>
[03:26:40.933]        // end if-block "isSWJ"
[03:26:40.933]      </control>
[03:26:40.933]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:40.933]        // if-block "!isSWJ"
[03:26:40.933]          // =>  FALSE
[03:26:40.933]        // skip if-block "!isSWJ"
[03:26:40.933]      </control>
[03:26:40.933]      <block atomic="false" info="">
[03:26:40.933]        ReadDP(0x0);
[03:26:40.936]  
[03:26:40.936]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:40.936]  
[03:26:40.936]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:40.936]      </block>
[03:26:40.936]      // end if-block "protType == 2"
[03:26:40.936]    </control>
[03:26:40.936]  </sequence>
[03:26:40.936]  
[03:26:40.993]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:40.993]  
[03:26:40.993]  <debugvars>
[03:26:40.993]    // Pre-defined
[03:26:40.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:40.993]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:40.993]    __dp=0x00000000
[03:26:40.993]    __ap=0x00000000
[03:26:40.993]    __traceout=0x00000000      (Trace Disabled)
[03:26:40.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:40.993]    __FlashAddr=0x00000000
[03:26:40.993]    __FlashLen=0x00000000
[03:26:40.993]    __FlashArg=0x00000000
[03:26:40.993]    __FlashOp=0x00000000
[03:26:40.993]    __Result=0x00000000
[03:26:40.993]  </debugvars>
[03:26:40.995]  
[03:26:40.995]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:40.995]    <block atomic="false" info="">
[03:26:40.995]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:40.995]        // -> [isSWJ <= 0x00000001]
[03:26:40.995]      __var hasDormant = __protocol & 0x00020000;
[03:26:40.995]        // -> [hasDormant <= 0x00000000]
[03:26:40.995]      __var protType   = __protocol & 0x0000FFFF;
[03:26:40.995]        // -> [protType <= 0x00000002]
[03:26:40.995]    </block>
[03:26:40.995]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:40.996]      // if-block "protType == 1"
[03:26:40.996]        // =>  FALSE
[03:26:40.996]      // skip if-block "protType == 1"
[03:26:40.996]    </control>
[03:26:40.996]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:40.996]      // if-block "protType == 2"
[03:26:40.996]        // =>  TRUE
[03:26:40.996]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:40.996]        // if-block "isSWJ"
[03:26:40.996]          // =>  TRUE
[03:26:40.996]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:40.997]          // if-block "hasDormant"
[03:26:40.997]            // =>  FALSE
[03:26:40.997]          // skip if-block "hasDormant"
[03:26:40.997]        </control>
[03:26:40.997]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:40.997]          // if-block "!hasDormant"
[03:26:40.997]            // =>  TRUE
[03:26:40.997]          <block atomic="false" info="">
[03:26:40.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:40.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:40.999]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.001]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.005]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.009]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.009]          </block>
[03:26:41.009]          // end if-block "!hasDormant"
[03:26:41.009]        </control>
[03:26:41.009]        // end if-block "isSWJ"
[03:26:41.009]      </control>
[03:26:41.009]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.009]        // if-block "!isSWJ"
[03:26:41.009]          // =>  FALSE
[03:26:41.013]        // skip if-block "!isSWJ"
[03:26:41.013]      </control>
[03:26:41.013]      <block atomic="false" info="">
[03:26:41.013]        ReadDP(0x0);
[03:26:41.013]  
[03:26:41.013]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.013]  
[03:26:41.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.013]      </block>
[03:26:41.013]      // end if-block "protType == 2"
[03:26:41.013]    </control>
[03:26:41.013]  </sequence>
[03:26:41.013]  
[03:26:41.066]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.066]  
[03:26:41.066]  <debugvars>
[03:26:41.066]    // Pre-defined
[03:26:41.066]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.067]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.067]    __dp=0x00000000
[03:26:41.067]    __ap=0x00000000
[03:26:41.067]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.067]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.067]    __FlashAddr=0x00000000
[03:26:41.068]    __FlashLen=0x00000000
[03:26:41.068]    __FlashArg=0x00000000
[03:26:41.068]    __FlashOp=0x00000000
[03:26:41.068]    __Result=0x00000000
[03:26:41.068]  </debugvars>
[03:26:41.068]  
[03:26:41.068]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.068]    <block atomic="false" info="">
[03:26:41.068]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.068]        // -> [isSWJ <= 0x00000001]
[03:26:41.068]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.068]        // -> [hasDormant <= 0x00000000]
[03:26:41.068]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.068]        // -> [protType <= 0x00000002]
[03:26:41.068]    </block>
[03:26:41.068]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.068]      // if-block "protType == 1"
[03:26:41.068]        // =>  FALSE
[03:26:41.068]      // skip if-block "protType == 1"
[03:26:41.068]    </control>
[03:26:41.068]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.068]      // if-block "protType == 2"
[03:26:41.068]        // =>  TRUE
[03:26:41.068]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.068]        // if-block "isSWJ"
[03:26:41.068]          // =>  TRUE
[03:26:41.071]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.071]          // if-block "hasDormant"
[03:26:41.071]            // =>  FALSE
[03:26:41.071]          // skip if-block "hasDormant"
[03:26:41.071]        </control>
[03:26:41.071]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.071]          // if-block "!hasDormant"
[03:26:41.071]            // =>  TRUE
[03:26:41.071]          <block atomic="false" info="">
[03:26:41.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.071]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.071]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.079]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.079]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.079]          </block>
[03:26:41.079]          // end if-block "!hasDormant"
[03:26:41.079]        </control>
[03:26:41.079]        // end if-block "isSWJ"
[03:26:41.079]      </control>
[03:26:41.079]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.079]        // if-block "!isSWJ"
[03:26:41.079]          // =>  FALSE
[03:26:41.079]        // skip if-block "!isSWJ"
[03:26:41.079]      </control>
[03:26:41.079]      <block atomic="false" info="">
[03:26:41.079]        ReadDP(0x0);
[03:26:41.083]  
[03:26:41.083]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.083]  
[03:26:41.083]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.083]      </block>
[03:26:41.083]      // end if-block "protType == 2"
[03:26:41.083]    </control>
[03:26:41.083]  </sequence>
[03:26:41.083]  
[03:26:41.143]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.143]  
[03:26:41.143]  <debugvars>
[03:26:41.143]    // Pre-defined
[03:26:41.143]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.143]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.143]    __dp=0x00000000
[03:26:41.143]    __ap=0x00000000
[03:26:41.143]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.143]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.143]    __FlashAddr=0x00000000
[03:26:41.143]    __FlashLen=0x00000000
[03:26:41.145]    __FlashArg=0x00000000
[03:26:41.145]    __FlashOp=0x00000000
[03:26:41.145]    __Result=0x00000000
[03:26:41.145]  </debugvars>
[03:26:41.145]  
[03:26:41.145]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.145]    <block atomic="false" info="">
[03:26:41.145]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.146]        // -> [isSWJ <= 0x00000001]
[03:26:41.146]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.146]        // -> [hasDormant <= 0x00000000]
[03:26:41.146]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.146]        // -> [protType <= 0x00000002]
[03:26:41.146]    </block>
[03:26:41.147]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.147]      // if-block "protType == 1"
[03:26:41.147]        // =>  FALSE
[03:26:41.147]      // skip if-block "protType == 1"
[03:26:41.147]    </control>
[03:26:41.147]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.147]      // if-block "protType == 2"
[03:26:41.147]        // =>  TRUE
[03:26:41.148]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.148]        // if-block "isSWJ"
[03:26:41.148]          // =>  TRUE
[03:26:41.148]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.148]          // if-block "hasDormant"
[03:26:41.148]            // =>  FALSE
[03:26:41.148]          // skip if-block "hasDormant"
[03:26:41.149]        </control>
[03:26:41.149]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.149]          // if-block "!hasDormant"
[03:26:41.149]            // =>  TRUE
[03:26:41.149]          <block atomic="false" info="">
[03:26:41.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.151]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.154]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.159]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.159]          </block>
[03:26:41.159]          // end if-block "!hasDormant"
[03:26:41.159]        </control>
[03:26:41.159]        // end if-block "isSWJ"
[03:26:41.159]      </control>
[03:26:41.159]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.159]        // if-block "!isSWJ"
[03:26:41.159]          // =>  FALSE
[03:26:41.159]        // skip if-block "!isSWJ"
[03:26:41.159]      </control>
[03:26:41.159]      <block atomic="false" info="">
[03:26:41.159]        ReadDP(0x0);
[03:26:41.161]  
[03:26:41.161]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.161]  
[03:26:41.161]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.161]      </block>
[03:26:41.161]      // end if-block "protType == 2"
[03:26:41.161]    </control>
[03:26:41.161]  </sequence>
[03:26:41.161]  
[03:26:41.220]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.220]  
[03:26:41.220]  <debugvars>
[03:26:41.220]    // Pre-defined
[03:26:41.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.220]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.220]    __dp=0x00000000
[03:26:41.220]    __ap=0x00000000
[03:26:41.220]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.220]    __FlashAddr=0x00000000
[03:26:41.220]    __FlashLen=0x00000000
[03:26:41.220]    __FlashArg=0x00000000
[03:26:41.220]    __FlashOp=0x00000000
[03:26:41.220]    __Result=0x00000000
[03:26:41.220]  </debugvars>
[03:26:41.220]  
[03:26:41.220]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.220]    <block atomic="false" info="">
[03:26:41.220]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.220]        // -> [isSWJ <= 0x00000001]
[03:26:41.220]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.220]        // -> [hasDormant <= 0x00000000]
[03:26:41.220]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.220]        // -> [protType <= 0x00000002]
[03:26:41.220]    </block>
[03:26:41.220]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.220]      // if-block "protType == 1"
[03:26:41.220]        // =>  FALSE
[03:26:41.220]      // skip if-block "protType == 1"
[03:26:41.220]    </control>
[03:26:41.220]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.220]      // if-block "protType == 2"
[03:26:41.224]        // =>  TRUE
[03:26:41.224]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.224]        // if-block "isSWJ"
[03:26:41.224]          // =>  TRUE
[03:26:41.224]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.224]          // if-block "hasDormant"
[03:26:41.224]            // =>  FALSE
[03:26:41.224]          // skip if-block "hasDormant"
[03:26:41.224]        </control>
[03:26:41.224]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.224]          // if-block "!hasDormant"
[03:26:41.224]            // =>  TRUE
[03:26:41.224]          <block atomic="false" info="">
[03:26:41.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.224]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.232]          </block>
[03:26:41.232]          // end if-block "!hasDormant"
[03:26:41.236]        </control>
[03:26:41.236]        // end if-block "isSWJ"
[03:26:41.236]      </control>
[03:26:41.236]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.236]        // if-block "!isSWJ"
[03:26:41.236]          // =>  FALSE
[03:26:41.236]        // skip if-block "!isSWJ"
[03:26:41.236]      </control>
[03:26:41.236]      <block atomic="false" info="">
[03:26:41.236]        ReadDP(0x0);
[03:26:41.240]  
[03:26:41.240]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.240]  
[03:26:41.240]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.240]      </block>
[03:26:41.240]      // end if-block "protType == 2"
[03:26:41.240]    </control>
[03:26:41.240]  </sequence>
[03:26:41.240]  
[03:26:41.292]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.292]  
[03:26:41.292]  <debugvars>
[03:26:41.292]    // Pre-defined
[03:26:41.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.292]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.292]    __dp=0x00000000
[03:26:41.292]    __ap=0x00000000
[03:26:41.292]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.292]    __FlashAddr=0x00000000
[03:26:41.292]    __FlashLen=0x00000000
[03:26:41.292]    __FlashArg=0x00000000
[03:26:41.292]    __FlashOp=0x00000000
[03:26:41.292]    __Result=0x00000000
[03:26:41.292]  </debugvars>
[03:26:41.292]  
[03:26:41.292]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.292]    <block atomic="false" info="">
[03:26:41.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.292]        // -> [isSWJ <= 0x00000001]
[03:26:41.292]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.292]        // -> [hasDormant <= 0x00000000]
[03:26:41.292]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.296]        // -> [protType <= 0x00000002]
[03:26:41.296]    </block>
[03:26:41.296]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.296]      // if-block "protType == 1"
[03:26:41.296]        // =>  FALSE
[03:26:41.296]      // skip if-block "protType == 1"
[03:26:41.296]    </control>
[03:26:41.296]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.296]      // if-block "protType == 2"
[03:26:41.296]        // =>  TRUE
[03:26:41.296]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.296]        // if-block "isSWJ"
[03:26:41.296]          // =>  TRUE
[03:26:41.296]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.296]          // if-block "hasDormant"
[03:26:41.296]            // =>  FALSE
[03:26:41.296]          // skip if-block "hasDormant"
[03:26:41.296]        </control>
[03:26:41.296]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.296]          // if-block "!hasDormant"
[03:26:41.296]            // =>  TRUE
[03:26:41.296]          <block atomic="false" info="">
[03:26:41.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.300]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.300]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.300]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.304]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.304]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.304]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.308]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.308]          </block>
[03:26:41.308]          // end if-block "!hasDormant"
[03:26:41.308]        </control>
[03:26:41.308]        // end if-block "isSWJ"
[03:26:41.308]      </control>
[03:26:41.308]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.308]        // if-block "!isSWJ"
[03:26:41.308]          // =>  FALSE
[03:26:41.308]        // skip if-block "!isSWJ"
[03:26:41.308]      </control>
[03:26:41.308]      <block atomic="false" info="">
[03:26:41.308]        ReadDP(0x0);
[03:26:41.312]  
[03:26:41.312]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.312]  
[03:26:41.312]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.312]      </block>
[03:26:41.312]      // end if-block "protType == 2"
[03:26:41.312]    </control>
[03:26:41.316]  </sequence>
[03:26:41.316]  
[03:26:41.376]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.376]  
[03:26:41.376]  <debugvars>
[03:26:41.376]    // Pre-defined
[03:26:41.376]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.376]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.376]    __dp=0x00000000
[03:26:41.376]    __ap=0x00000000
[03:26:41.376]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.376]    __FlashAddr=0x00000000
[03:26:41.376]    __FlashLen=0x00000000
[03:26:41.376]    __FlashArg=0x00000000
[03:26:41.376]    __FlashOp=0x00000000
[03:26:41.376]    __Result=0x00000000
[03:26:41.376]  </debugvars>
[03:26:41.376]  
[03:26:41.376]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.376]    <block atomic="false" info="">
[03:26:41.376]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.376]        // -> [isSWJ <= 0x00000001]
[03:26:41.376]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.376]        // -> [hasDormant <= 0x00000000]
[03:26:41.376]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.376]        // -> [protType <= 0x00000002]
[03:26:41.376]    </block>
[03:26:41.376]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.376]      // if-block "protType == 1"
[03:26:41.376]        // =>  FALSE
[03:26:41.376]      // skip if-block "protType == 1"
[03:26:41.376]    </control>
[03:26:41.376]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.376]      // if-block "protType == 2"
[03:26:41.380]        // =>  TRUE
[03:26:41.380]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.380]        // if-block "isSWJ"
[03:26:41.380]          // =>  TRUE
[03:26:41.380]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.380]          // if-block "hasDormant"
[03:26:41.380]            // =>  FALSE
[03:26:41.380]          // skip if-block "hasDormant"
[03:26:41.380]        </control>
[03:26:41.380]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.380]          // if-block "!hasDormant"
[03:26:41.380]            // =>  TRUE
[03:26:41.380]          <block atomic="false" info="">
[03:26:41.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.380]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.384]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.388]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.388]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.388]          </block>
[03:26:41.388]          // end if-block "!hasDormant"
[03:26:41.388]        </control>
[03:26:41.388]        // end if-block "isSWJ"
[03:26:41.388]      </control>
[03:26:41.392]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.392]        // if-block "!isSWJ"
[03:26:41.392]          // =>  FALSE
[03:26:41.392]        // skip if-block "!isSWJ"
[03:26:41.392]      </control>
[03:26:41.392]      <block atomic="false" info="">
[03:26:41.392]        ReadDP(0x0);
[03:26:41.392]  
[03:26:41.392]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.392]  
[03:26:41.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.392]      </block>
[03:26:41.392]      // end if-block "protType == 2"
[03:26:41.392]    </control>
[03:26:41.392]  </sequence>
[03:26:41.392]  
[03:26:41.449]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.449]  
[03:26:41.449]  <debugvars>
[03:26:41.449]    // Pre-defined
[03:26:41.449]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.449]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.449]    __dp=0x00000000
[03:26:41.449]    __ap=0x00000000
[03:26:41.449]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.449]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.449]    __FlashAddr=0x00000000
[03:26:41.449]    __FlashLen=0x00000000
[03:26:41.449]    __FlashArg=0x00000000
[03:26:41.449]    __FlashOp=0x00000000
[03:26:41.449]    __Result=0x00000000
[03:26:41.449]  </debugvars>
[03:26:41.449]  
[03:26:41.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.449]    <block atomic="false" info="">
[03:26:41.449]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.449]        // -> [isSWJ <= 0x00000001]
[03:26:41.453]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.453]        // -> [hasDormant <= 0x00000000]
[03:26:41.453]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.453]        // -> [protType <= 0x00000002]
[03:26:41.453]    </block>
[03:26:41.453]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.453]      // if-block "protType == 1"
[03:26:41.453]        // =>  FALSE
[03:26:41.453]      // skip if-block "protType == 1"
[03:26:41.453]    </control>
[03:26:41.453]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.453]      // if-block "protType == 2"
[03:26:41.453]        // =>  TRUE
[03:26:41.453]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.453]        // if-block "isSWJ"
[03:26:41.453]          // =>  TRUE
[03:26:41.453]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.453]          // if-block "hasDormant"
[03:26:41.453]            // =>  FALSE
[03:26:41.453]          // skip if-block "hasDormant"
[03:26:41.453]        </control>
[03:26:41.453]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.453]          // if-block "!hasDormant"
[03:26:41.453]            // =>  TRUE
[03:26:41.453]          <block atomic="false" info="">
[03:26:41.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.457]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.461]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.465]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.465]          </block>
[03:26:41.465]          // end if-block "!hasDormant"
[03:26:41.465]        </control>
[03:26:41.465]        // end if-block "isSWJ"
[03:26:41.465]      </control>
[03:26:41.465]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.465]        // if-block "!isSWJ"
[03:26:41.465]          // =>  FALSE
[03:26:41.465]        // skip if-block "!isSWJ"
[03:26:41.465]      </control>
[03:26:41.465]      <block atomic="false" info="">
[03:26:41.465]        ReadDP(0x0);
[03:26:41.465]  
[03:26:41.465]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.465]  
[03:26:41.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.469]      </block>
[03:26:41.469]      // end if-block "protType == 2"
[03:26:41.469]    </control>
[03:26:41.469]  </sequence>
[03:26:41.469]  
[03:26:41.521]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.521]  
[03:26:41.521]  <debugvars>
[03:26:41.521]    // Pre-defined
[03:26:41.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.521]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.521]    __dp=0x00000000
[03:26:41.521]    __ap=0x00000000
[03:26:41.521]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.521]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.521]    __FlashAddr=0x00000000
[03:26:41.521]    __FlashLen=0x00000000
[03:26:41.521]    __FlashArg=0x00000000
[03:26:41.521]    __FlashOp=0x00000000
[03:26:41.521]    __Result=0x00000000
[03:26:41.521]  </debugvars>
[03:26:41.521]  
[03:26:41.521]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.521]    <block atomic="false" info="">
[03:26:41.521]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.521]        // -> [isSWJ <= 0x00000001]
[03:26:41.521]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.525]        // -> [hasDormant <= 0x00000000]
[03:26:41.525]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.525]        // -> [protType <= 0x00000002]
[03:26:41.525]    </block>
[03:26:41.525]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.525]      // if-block "protType == 1"
[03:26:41.525]        // =>  FALSE
[03:26:41.525]      // skip if-block "protType == 1"
[03:26:41.525]    </control>
[03:26:41.525]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.525]      // if-block "protType == 2"
[03:26:41.525]        // =>  TRUE
[03:26:41.525]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.525]        // if-block "isSWJ"
[03:26:41.525]          // =>  TRUE
[03:26:41.525]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.525]          // if-block "hasDormant"
[03:26:41.525]            // =>  FALSE
[03:26:41.525]          // skip if-block "hasDormant"
[03:26:41.525]        </control>
[03:26:41.525]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.525]          // if-block "!hasDormant"
[03:26:41.525]            // =>  TRUE
[03:26:41.525]          <block atomic="false" info="">
[03:26:41.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.529]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.529]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.529]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.529]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.533]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.533]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.537]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.537]          </block>
[03:26:41.537]          // end if-block "!hasDormant"
[03:26:41.537]        </control>
[03:26:41.537]        // end if-block "isSWJ"
[03:26:41.537]      </control>
[03:26:41.537]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.537]        // if-block "!isSWJ"
[03:26:41.537]          // =>  FALSE
[03:26:41.537]        // skip if-block "!isSWJ"
[03:26:41.537]      </control>
[03:26:41.537]      <block atomic="false" info="">
[03:26:41.537]        ReadDP(0x0);
[03:26:41.537]  
[03:26:41.537]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.537]  
[03:26:41.537]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.537]      </block>
[03:26:41.541]      // end if-block "protType == 2"
[03:26:41.541]    </control>
[03:26:41.541]  </sequence>
[03:26:41.541]  
[03:26:41.593]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.593]  
[03:26:41.593]  <debugvars>
[03:26:41.593]    // Pre-defined
[03:26:41.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.593]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.593]    __dp=0x00000000
[03:26:41.593]    __ap=0x00000000
[03:26:41.593]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.593]    __FlashAddr=0x00000000
[03:26:41.593]    __FlashLen=0x00000000
[03:26:41.593]    __FlashArg=0x00000000
[03:26:41.593]    __FlashOp=0x00000000
[03:26:41.593]    __Result=0x00000000
[03:26:41.593]  </debugvars>
[03:26:41.593]  
[03:26:41.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.593]    <block atomic="false" info="">
[03:26:41.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.593]        // -> [isSWJ <= 0x00000001]
[03:26:41.593]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.593]        // -> [hasDormant <= 0x00000000]
[03:26:41.593]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.593]        // -> [protType <= 0x00000002]
[03:26:41.593]    </block>
[03:26:41.593]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.593]      // if-block "protType == 1"
[03:26:41.593]        // =>  FALSE
[03:26:41.593]      // skip if-block "protType == 1"
[03:26:41.593]    </control>
[03:26:41.597]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.597]      // if-block "protType == 2"
[03:26:41.597]        // =>  TRUE
[03:26:41.597]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.597]        // if-block "isSWJ"
[03:26:41.597]          // =>  TRUE
[03:26:41.597]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.597]          // if-block "hasDormant"
[03:26:41.597]            // =>  FALSE
[03:26:41.597]          // skip if-block "hasDormant"
[03:26:41.597]        </control>
[03:26:41.597]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.597]          // if-block "!hasDormant"
[03:26:41.597]            // =>  TRUE
[03:26:41.597]          <block atomic="false" info="">
[03:26:41.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.605]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.609]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.609]          </block>
[03:26:41.609]          // end if-block "!hasDormant"
[03:26:41.609]        </control>
[03:26:41.609]        // end if-block "isSWJ"
[03:26:41.609]      </control>
[03:26:41.609]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.609]        // if-block "!isSWJ"
[03:26:41.609]          // =>  FALSE
[03:26:41.609]        // skip if-block "!isSWJ"
[03:26:41.609]      </control>
[03:26:41.609]      <block atomic="false" info="">
[03:26:41.609]        ReadDP(0x0);
[03:26:41.613]  
[03:26:41.613]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.613]  
[03:26:41.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.613]      </block>
[03:26:41.613]      // end if-block "protType == 2"
[03:26:41.613]    </control>
[03:26:41.613]  </sequence>
[03:26:41.613]  
[03:26:41.665]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.665]  
[03:26:41.665]  <debugvars>
[03:26:41.665]    // Pre-defined
[03:26:41.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.665]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.665]    __dp=0x00000000
[03:26:41.665]    __ap=0x00000000
[03:26:41.665]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.665]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.665]    __FlashAddr=0x00000000
[03:26:41.665]    __FlashLen=0x00000000
[03:26:41.665]    __FlashArg=0x00000000
[03:26:41.665]    __FlashOp=0x00000000
[03:26:41.665]    __Result=0x00000000
[03:26:41.665]  </debugvars>
[03:26:41.665]  
[03:26:41.665]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.665]    <block atomic="false" info="">
[03:26:41.665]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.665]        // -> [isSWJ <= 0x00000001]
[03:26:41.665]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.665]        // -> [hasDormant <= 0x00000000]
[03:26:41.669]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.669]        // -> [protType <= 0x00000002]
[03:26:41.669]    </block>
[03:26:41.669]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.669]      // if-block "protType == 1"
[03:26:41.669]        // =>  FALSE
[03:26:41.669]      // skip if-block "protType == 1"
[03:26:41.669]    </control>
[03:26:41.669]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.669]      // if-block "protType == 2"
[03:26:41.669]        // =>  TRUE
[03:26:41.669]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.669]        // if-block "isSWJ"
[03:26:41.669]          // =>  TRUE
[03:26:41.669]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.669]          // if-block "hasDormant"
[03:26:41.669]            // =>  FALSE
[03:26:41.669]          // skip if-block "hasDormant"
[03:26:41.669]        </control>
[03:26:41.669]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.669]          // if-block "!hasDormant"
[03:26:41.669]            // =>  TRUE
[03:26:41.669]          <block atomic="false" info="">
[03:26:41.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.673]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.673]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.677]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.681]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.681]          </block>
[03:26:41.681]          // end if-block "!hasDormant"
[03:26:41.681]        </control>
[03:26:41.681]        // end if-block "isSWJ"
[03:26:41.681]      </control>
[03:26:41.681]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.681]        // if-block "!isSWJ"
[03:26:41.681]          // =>  FALSE
[03:26:41.681]        // skip if-block "!isSWJ"
[03:26:41.681]      </control>
[03:26:41.681]      <block atomic="false" info="">
[03:26:41.681]        ReadDP(0x0);
[03:26:41.685]  
[03:26:41.685]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.685]  
[03:26:41.685]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.685]      </block>
[03:26:41.685]      // end if-block "protType == 2"
[03:26:41.685]    </control>
[03:26:41.685]  </sequence>
[03:26:41.685]  
[03:26:41.737]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.737]  
[03:26:41.737]  <debugvars>
[03:26:41.737]    // Pre-defined
[03:26:41.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.737]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.737]    __dp=0x00000000
[03:26:41.737]    __ap=0x00000000
[03:26:41.737]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.737]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.737]    __FlashAddr=0x00000000
[03:26:41.737]    __FlashLen=0x00000000
[03:26:41.737]    __FlashArg=0x00000000
[03:26:41.737]    __FlashOp=0x00000000
[03:26:41.737]    __Result=0x00000000
[03:26:41.737]  </debugvars>
[03:26:41.737]  
[03:26:41.737]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.737]    <block atomic="false" info="">
[03:26:41.737]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.737]        // -> [isSWJ <= 0x00000001]
[03:26:41.737]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.737]        // -> [hasDormant <= 0x00000000]
[03:26:41.741]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.741]        // -> [protType <= 0x00000002]
[03:26:41.741]    </block>
[03:26:41.741]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.741]      // if-block "protType == 1"
[03:26:41.741]        // =>  FALSE
[03:26:41.741]      // skip if-block "protType == 1"
[03:26:41.741]    </control>
[03:26:41.741]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.741]      // if-block "protType == 2"
[03:26:41.741]        // =>  TRUE
[03:26:41.741]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.741]        // if-block "isSWJ"
[03:26:41.741]          // =>  TRUE
[03:26:41.741]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.741]          // if-block "hasDormant"
[03:26:41.741]            // =>  FALSE
[03:26:41.741]          // skip if-block "hasDormant"
[03:26:41.741]        </control>
[03:26:41.741]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.741]          // if-block "!hasDormant"
[03:26:41.741]            // =>  TRUE
[03:26:41.741]          <block atomic="false" info="">
[03:26:41.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.745]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.745]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.745]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.745]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.745]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.753]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.753]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.753]          </block>
[03:26:41.753]          // end if-block "!hasDormant"
[03:26:41.753]        </control>
[03:26:41.753]        // end if-block "isSWJ"
[03:26:41.753]      </control>
[03:26:41.753]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.753]        // if-block "!isSWJ"
[03:26:41.753]          // =>  FALSE
[03:26:41.753]        // skip if-block "!isSWJ"
[03:26:41.753]      </control>
[03:26:41.753]      <block atomic="false" info="">
[03:26:41.753]        ReadDP(0x0);
[03:26:41.757]  
[03:26:41.757]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.757]  
[03:26:41.757]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.757]      </block>
[03:26:41.757]      // end if-block "protType == 2"
[03:26:41.757]    </control>
[03:26:41.757]  </sequence>
[03:26:41.757]  
[03:26:41.809]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.809]  
[03:26:41.809]  <debugvars>
[03:26:41.809]    // Pre-defined
[03:26:41.809]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.809]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.809]    __dp=0x00000000
[03:26:41.809]    __ap=0x00000000
[03:26:41.809]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.809]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.809]    __FlashAddr=0x00000000
[03:26:41.809]    __FlashLen=0x00000000
[03:26:41.809]    __FlashArg=0x00000000
[03:26:41.809]    __FlashOp=0x00000000
[03:26:41.809]    __Result=0x00000000
[03:26:41.809]  </debugvars>
[03:26:41.809]  
[03:26:41.809]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.809]    <block atomic="false" info="">
[03:26:41.809]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.809]        // -> [isSWJ <= 0x00000001]
[03:26:41.809]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.809]        // -> [hasDormant <= 0x00000000]
[03:26:41.809]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.809]        // -> [protType <= 0x00000002]
[03:26:41.809]    </block>
[03:26:41.809]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.809]      // if-block "protType == 1"
[03:26:41.809]        // =>  FALSE
[03:26:41.813]      // skip if-block "protType == 1"
[03:26:41.813]    </control>
[03:26:41.813]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.813]      // if-block "protType == 2"
[03:26:41.813]        // =>  TRUE
[03:26:41.813]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.813]        // if-block "isSWJ"
[03:26:41.813]          // =>  TRUE
[03:26:41.813]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.813]          // if-block "hasDormant"
[03:26:41.813]            // =>  FALSE
[03:26:41.813]          // skip if-block "hasDormant"
[03:26:41.813]        </control>
[03:26:41.813]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.813]          // if-block "!hasDormant"
[03:26:41.813]            // =>  TRUE
[03:26:41.813]          <block atomic="false" info="">
[03:26:41.813]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.813]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.813]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.817]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.825]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.825]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.825]          </block>
[03:26:41.825]          // end if-block "!hasDormant"
[03:26:41.825]        </control>
[03:26:41.825]        // end if-block "isSWJ"
[03:26:41.825]      </control>
[03:26:41.825]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.825]        // if-block "!isSWJ"
[03:26:41.825]          // =>  FALSE
[03:26:41.825]        // skip if-block "!isSWJ"
[03:26:41.825]      </control>
[03:26:41.829]      <block atomic="false" info="">
[03:26:41.829]        ReadDP(0x0);
[03:26:41.829]  
[03:26:41.829]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.829]  
[03:26:41.829]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.829]      </block>
[03:26:41.829]      // end if-block "protType == 2"
[03:26:41.829]    </control>
[03:26:41.829]  </sequence>
[03:26:41.829]  
[03:26:41.881]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.881]  
[03:26:41.881]  <debugvars>
[03:26:41.881]    // Pre-defined
[03:26:41.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.881]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.881]    __dp=0x00000000
[03:26:41.881]    __ap=0x00000000
[03:26:41.881]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.881]    __FlashAddr=0x00000000
[03:26:41.881]    __FlashLen=0x00000000
[03:26:41.881]    __FlashArg=0x00000000
[03:26:41.881]    __FlashOp=0x00000000
[03:26:41.881]    __Result=0x00000000
[03:26:41.881]  </debugvars>
[03:26:41.881]  
[03:26:41.881]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.881]    <block atomic="false" info="">
[03:26:41.881]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.881]        // -> [isSWJ <= 0x00000001]
[03:26:41.881]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.881]        // -> [hasDormant <= 0x00000000]
[03:26:41.881]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.881]        // -> [protType <= 0x00000002]
[03:26:41.881]    </block>
[03:26:41.881]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.881]      // if-block "protType == 1"
[03:26:41.881]        // =>  FALSE
[03:26:41.881]      // skip if-block "protType == 1"
[03:26:41.881]    </control>
[03:26:41.881]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.885]      // if-block "protType == 2"
[03:26:41.885]        // =>  TRUE
[03:26:41.885]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.885]        // if-block "isSWJ"
[03:26:41.885]          // =>  TRUE
[03:26:41.885]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.885]          // if-block "hasDormant"
[03:26:41.885]            // =>  FALSE
[03:26:41.885]          // skip if-block "hasDormant"
[03:26:41.885]        </control>
[03:26:41.885]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.885]          // if-block "!hasDormant"
[03:26:41.885]            // =>  TRUE
[03:26:41.885]          <block atomic="false" info="">
[03:26:41.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.885]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.893]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.893]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.897]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.901]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.901]          </block>
[03:26:41.901]          // end if-block "!hasDormant"
[03:26:41.901]        </control>
[03:26:41.901]        // end if-block "isSWJ"
[03:26:41.901]      </control>
[03:26:41.901]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.901]        // if-block "!isSWJ"
[03:26:41.901]          // =>  FALSE
[03:26:41.901]        // skip if-block "!isSWJ"
[03:26:41.901]      </control>
[03:26:41.901]      <block atomic="false" info="">
[03:26:41.901]        ReadDP(0x0);
[03:26:41.905]  
[03:26:41.905]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.905]  
[03:26:41.905]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.905]      </block>
[03:26:41.905]      // end if-block "protType == 2"
[03:26:41.905]    </control>
[03:26:41.905]  </sequence>
[03:26:41.905]  
[03:26:41.965]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:41.965]  
[03:26:41.965]  <debugvars>
[03:26:41.965]    // Pre-defined
[03:26:41.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:41.965]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:41.965]    __dp=0x00000000
[03:26:41.965]    __ap=0x00000000
[03:26:41.965]    __traceout=0x00000000      (Trace Disabled)
[03:26:41.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:41.965]    __FlashAddr=0x00000000
[03:26:41.965]    __FlashLen=0x00000000
[03:26:41.965]    __FlashArg=0x00000000
[03:26:41.965]    __FlashOp=0x00000000
[03:26:41.965]    __Result=0x00000000
[03:26:41.965]  </debugvars>
[03:26:41.965]  
[03:26:41.965]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:41.965]    <block atomic="false" info="">
[03:26:41.965]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:41.965]        // -> [isSWJ <= 0x00000001]
[03:26:41.965]      __var hasDormant = __protocol & 0x00020000;
[03:26:41.965]        // -> [hasDormant <= 0x00000000]
[03:26:41.965]      __var protType   = __protocol & 0x0000FFFF;
[03:26:41.965]        // -> [protType <= 0x00000002]
[03:26:41.965]    </block>
[03:26:41.965]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:41.965]      // if-block "protType == 1"
[03:26:41.965]        // =>  FALSE
[03:26:41.965]      // skip if-block "protType == 1"
[03:26:41.965]    </control>
[03:26:41.969]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:41.969]      // if-block "protType == 2"
[03:26:41.969]        // =>  TRUE
[03:26:41.969]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:41.969]        // if-block "isSWJ"
[03:26:41.969]          // =>  TRUE
[03:26:41.969]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:41.969]          // if-block "hasDormant"
[03:26:41.969]            // =>  FALSE
[03:26:41.969]          // skip if-block "hasDormant"
[03:26:41.969]        </control>
[03:26:41.969]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:41.969]          // if-block "!hasDormant"
[03:26:41.969]            // =>  TRUE
[03:26:41.969]          <block atomic="false" info="">
[03:26:41.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:41.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.969]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:41.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:41.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:41.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.977]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:41.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:41.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:41.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:41.981]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:41.981]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:41.981]          </block>
[03:26:41.981]          // end if-block "!hasDormant"
[03:26:41.981]        </control>
[03:26:41.981]        // end if-block "isSWJ"
[03:26:41.981]      </control>
[03:26:41.981]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:41.981]        // if-block "!isSWJ"
[03:26:41.981]          // =>  FALSE
[03:26:41.981]        // skip if-block "!isSWJ"
[03:26:41.981]      </control>
[03:26:41.985]      <block atomic="false" info="">
[03:26:41.985]        ReadDP(0x0);
[03:26:41.985]  
[03:26:41.985]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:41.985]  
[03:26:41.985]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:41.985]      </block>
[03:26:41.985]      // end if-block "protType == 2"
[03:26:41.985]    </control>
[03:26:41.985]  </sequence>
[03:26:41.985]  
[03:26:42.037]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.037]  
[03:26:42.037]  <debugvars>
[03:26:42.037]    // Pre-defined
[03:26:42.037]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.037]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.037]    __dp=0x00000000
[03:26:42.037]    __ap=0x00000000
[03:26:42.037]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.037]    __FlashAddr=0x00000000
[03:26:42.037]    __FlashLen=0x00000000
[03:26:42.037]    __FlashArg=0x00000000
[03:26:42.037]    __FlashOp=0x00000000
[03:26:42.037]    __Result=0x00000000
[03:26:42.037]  </debugvars>
[03:26:42.037]  
[03:26:42.037]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.037]    <block atomic="false" info="">
[03:26:42.037]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.037]        // -> [isSWJ <= 0x00000001]
[03:26:42.037]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.037]        // -> [hasDormant <= 0x00000000]
[03:26:42.037]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.037]        // -> [protType <= 0x00000002]
[03:26:42.037]    </block>
[03:26:42.037]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.041]      // if-block "protType == 1"
[03:26:42.041]        // =>  FALSE
[03:26:42.041]      // skip if-block "protType == 1"
[03:26:42.041]    </control>
[03:26:42.041]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.041]      // if-block "protType == 2"
[03:26:42.041]        // =>  TRUE
[03:26:42.041]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.041]        // if-block "isSWJ"
[03:26:42.041]          // =>  TRUE
[03:26:42.041]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.041]          // if-block "hasDormant"
[03:26:42.041]            // =>  FALSE
[03:26:42.041]          // skip if-block "hasDormant"
[03:26:42.041]        </control>
[03:26:42.041]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.041]          // if-block "!hasDormant"
[03:26:42.041]            // =>  TRUE
[03:26:42.041]          <block atomic="false" info="">
[03:26:42.041]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.045]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.045]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.049]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.049]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.049]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.053]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.053]          </block>
[03:26:42.053]          // end if-block "!hasDormant"
[03:26:42.053]        </control>
[03:26:42.053]        // end if-block "isSWJ"
[03:26:42.053]      </control>
[03:26:42.053]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.053]        // if-block "!isSWJ"
[03:26:42.053]          // =>  FALSE
[03:26:42.053]        // skip if-block "!isSWJ"
[03:26:42.053]      </control>
[03:26:42.053]      <block atomic="false" info="">
[03:26:42.053]        ReadDP(0x0);
[03:26:42.057]  
[03:26:42.057]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.057]  
[03:26:42.057]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.057]      </block>
[03:26:42.057]      // end if-block "protType == 2"
[03:26:42.057]    </control>
[03:26:42.057]  </sequence>
[03:26:42.057]  
[03:26:42.109]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.109]  
[03:26:42.109]  <debugvars>
[03:26:42.109]    // Pre-defined
[03:26:42.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.109]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.109]    __dp=0x00000000
[03:26:42.109]    __ap=0x00000000
[03:26:42.109]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.109]    __FlashAddr=0x00000000
[03:26:42.109]    __FlashLen=0x00000000
[03:26:42.109]    __FlashArg=0x00000000
[03:26:42.109]    __FlashOp=0x00000000
[03:26:42.109]    __Result=0x00000000
[03:26:42.109]  </debugvars>
[03:26:42.109]  
[03:26:42.109]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.109]    <block atomic="false" info="">
[03:26:42.109]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.109]        // -> [isSWJ <= 0x00000001]
[03:26:42.109]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.109]        // -> [hasDormant <= 0x00000000]
[03:26:42.109]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.109]        // -> [protType <= 0x00000002]
[03:26:42.109]    </block>
[03:26:42.109]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.109]      // if-block "protType == 1"
[03:26:42.109]        // =>  FALSE
[03:26:42.113]      // skip if-block "protType == 1"
[03:26:42.113]    </control>
[03:26:42.113]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.113]      // if-block "protType == 2"
[03:26:42.113]        // =>  TRUE
[03:26:42.113]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.113]        // if-block "isSWJ"
[03:26:42.113]          // =>  TRUE
[03:26:42.113]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.113]          // if-block "hasDormant"
[03:26:42.113]            // =>  FALSE
[03:26:42.113]          // skip if-block "hasDormant"
[03:26:42.113]        </control>
[03:26:42.113]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.113]          // if-block "!hasDormant"
[03:26:42.113]            // =>  TRUE
[03:26:42.113]          <block atomic="false" info="">
[03:26:42.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.113]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.113]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.117]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.117]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.117]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.121]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.121]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.121]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.121]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.121]          </block>
[03:26:42.121]          // end if-block "!hasDormant"
[03:26:42.121]        </control>
[03:26:42.121]        // end if-block "isSWJ"
[03:26:42.125]      </control>
[03:26:42.125]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.125]        // if-block "!isSWJ"
[03:26:42.125]          // =>  FALSE
[03:26:42.125]        // skip if-block "!isSWJ"
[03:26:42.125]      </control>
[03:26:42.125]      <block atomic="false" info="">
[03:26:42.125]        ReadDP(0x0);
[03:26:42.125]  
[03:26:42.125]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.125]  
[03:26:42.125]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.125]      </block>
[03:26:42.125]      // end if-block "protType == 2"
[03:26:42.125]    </control>
[03:26:42.125]  </sequence>
[03:26:42.125]  
[03:26:42.185]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.185]  
[03:26:42.185]  <debugvars>
[03:26:42.185]    // Pre-defined
[03:26:42.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.185]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.185]    __dp=0x00000000
[03:26:42.185]    __ap=0x00000000
[03:26:42.185]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.188]    __FlashAddr=0x00000000
[03:26:42.188]    __FlashLen=0x00000000
[03:26:42.188]    __FlashArg=0x00000000
[03:26:42.188]    __FlashOp=0x00000000
[03:26:42.188]    __Result=0x00000000
[03:26:42.188]  </debugvars>
[03:26:42.188]  
[03:26:42.188]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.188]    <block atomic="false" info="">
[03:26:42.188]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.188]        // -> [isSWJ <= 0x00000001]
[03:26:42.188]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.188]        // -> [hasDormant <= 0x00000000]
[03:26:42.188]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.189]        // -> [protType <= 0x00000002]
[03:26:42.189]    </block>
[03:26:42.189]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.189]      // if-block "protType == 1"
[03:26:42.189]        // =>  FALSE
[03:26:42.189]      // skip if-block "protType == 1"
[03:26:42.189]    </control>
[03:26:42.189]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.189]      // if-block "protType == 2"
[03:26:42.189]        // =>  TRUE
[03:26:42.189]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.189]        // if-block "isSWJ"
[03:26:42.189]          // =>  TRUE
[03:26:42.189]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.189]          // if-block "hasDormant"
[03:26:42.189]            // =>  FALSE
[03:26:42.189]          // skip if-block "hasDormant"
[03:26:42.189]        </control>
[03:26:42.189]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.189]          // if-block "!hasDormant"
[03:26:42.189]            // =>  TRUE
[03:26:42.189]          <block atomic="false" info="">
[03:26:42.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.189]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.193]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.193]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.197]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.199]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.199]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.199]          </block>
[03:26:42.199]          // end if-block "!hasDormant"
[03:26:42.199]        </control>
[03:26:42.199]        // end if-block "isSWJ"
[03:26:42.199]      </control>
[03:26:42.199]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.201]        // if-block "!isSWJ"
[03:26:42.201]          // =>  FALSE
[03:26:42.201]        // skip if-block "!isSWJ"
[03:26:42.201]      </control>
[03:26:42.201]      <block atomic="false" info="">
[03:26:42.201]        ReadDP(0x0);
[03:26:42.201]  
[03:26:42.201]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.201]  
[03:26:42.201]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.201]      </block>
[03:26:42.201]      // end if-block "protType == 2"
[03:26:42.201]    </control>
[03:26:42.201]  </sequence>
[03:26:42.201]  
[03:26:42.263]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.263]  
[03:26:42.264]  <debugvars>
[03:26:42.265]    // Pre-defined
[03:26:42.265]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.265]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.265]    __dp=0x00000000
[03:26:42.265]    __ap=0x00000000
[03:26:42.265]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.265]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.265]    __FlashAddr=0x00000000
[03:26:42.265]    __FlashLen=0x00000000
[03:26:42.266]    __FlashArg=0x00000000
[03:26:42.266]    __FlashOp=0x00000000
[03:26:42.266]    __Result=0x00000000
[03:26:42.266]  </debugvars>
[03:26:42.267]  
[03:26:42.267]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.267]    <block atomic="false" info="">
[03:26:42.267]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.267]        // -> [isSWJ <= 0x00000001]
[03:26:42.267]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.268]        // -> [hasDormant <= 0x00000000]
[03:26:42.268]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.268]        // -> [protType <= 0x00000002]
[03:26:42.268]    </block>
[03:26:42.268]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.268]      // if-block "protType == 1"
[03:26:42.268]        // =>  FALSE
[03:26:42.269]      // skip if-block "protType == 1"
[03:26:42.269]    </control>
[03:26:42.269]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.269]      // if-block "protType == 2"
[03:26:42.269]        // =>  TRUE
[03:26:42.269]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.269]        // if-block "isSWJ"
[03:26:42.269]          // =>  TRUE
[03:26:42.269]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.269]          // if-block "hasDormant"
[03:26:42.269]            // =>  FALSE
[03:26:42.269]          // skip if-block "hasDormant"
[03:26:42.269]        </control>
[03:26:42.269]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.269]          // if-block "!hasDormant"
[03:26:42.269]            // =>  TRUE
[03:26:42.269]          <block atomic="false" info="">
[03:26:42.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.272]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.280]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.281]          </block>
[03:26:42.281]          // end if-block "!hasDormant"
[03:26:42.281]        </control>
[03:26:42.281]        // end if-block "isSWJ"
[03:26:42.281]      </control>
[03:26:42.283]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.283]        // if-block "!isSWJ"
[03:26:42.283]          // =>  FALSE
[03:26:42.283]        // skip if-block "!isSWJ"
[03:26:42.283]      </control>
[03:26:42.283]      <block atomic="false" info="">
[03:26:42.283]        ReadDP(0x0);
[03:26:42.284]  
[03:26:42.284]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.284]  
[03:26:42.284]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.284]      </block>
[03:26:42.284]      // end if-block "protType == 2"
[03:26:42.284]    </control>
[03:26:42.284]  </sequence>
[03:26:42.284]  
[03:26:42.337]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.337]  
[03:26:42.337]  <debugvars>
[03:26:42.337]    // Pre-defined
[03:26:42.337]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.337]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.337]    __dp=0x00000000
[03:26:42.337]    __ap=0x00000000
[03:26:42.337]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.337]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.337]    __FlashAddr=0x00000000
[03:26:42.337]    __FlashLen=0x00000000
[03:26:42.337]    __FlashArg=0x00000000
[03:26:42.337]    __FlashOp=0x00000000
[03:26:42.337]    __Result=0x00000000
[03:26:42.337]  </debugvars>
[03:26:42.337]  
[03:26:42.337]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.337]    <block atomic="false" info="">
[03:26:42.337]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.337]        // -> [isSWJ <= 0x00000001]
[03:26:42.337]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.337]        // -> [hasDormant <= 0x00000000]
[03:26:42.337]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.337]        // -> [protType <= 0x00000002]
[03:26:42.337]    </block>
[03:26:42.341]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.341]      // if-block "protType == 1"
[03:26:42.341]        // =>  FALSE
[03:26:42.341]      // skip if-block "protType == 1"
[03:26:42.341]    </control>
[03:26:42.341]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.341]      // if-block "protType == 2"
[03:26:42.341]        // =>  TRUE
[03:26:42.341]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.342]        // if-block "isSWJ"
[03:26:42.342]          // =>  TRUE
[03:26:42.342]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.342]          // if-block "hasDormant"
[03:26:42.342]            // =>  FALSE
[03:26:42.342]          // skip if-block "hasDormant"
[03:26:42.342]        </control>
[03:26:42.342]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.342]          // if-block "!hasDormant"
[03:26:42.342]            // =>  TRUE
[03:26:42.342]          <block atomic="false" info="">
[03:26:42.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.345]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.349]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.355]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.359]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.360]          </block>
[03:26:42.360]          // end if-block "!hasDormant"
[03:26:42.360]        </control>
[03:26:42.360]        // end if-block "isSWJ"
[03:26:42.360]      </control>
[03:26:42.360]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.360]        // if-block "!isSWJ"
[03:26:42.360]          // =>  FALSE
[03:26:42.360]        // skip if-block "!isSWJ"
[03:26:42.360]      </control>
[03:26:42.360]      <block atomic="false" info="">
[03:26:42.360]        ReadDP(0x0);
[03:26:42.362]  
[03:26:42.362]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.362]  
[03:26:42.362]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.362]      </block>
[03:26:42.362]      // end if-block "protType == 2"
[03:26:42.362]    </control>
[03:26:42.362]  </sequence>
[03:26:42.362]  
[03:26:42.422]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.422]  
[03:26:42.422]  <debugvars>
[03:26:42.422]    // Pre-defined
[03:26:42.422]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.422]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.422]    __dp=0x00000000
[03:26:42.423]    __ap=0x00000000
[03:26:42.423]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.423]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.423]    __FlashAddr=0x00000000
[03:26:42.423]    __FlashLen=0x00000000
[03:26:42.423]    __FlashArg=0x00000000
[03:26:42.423]    __FlashOp=0x00000000
[03:26:42.423]    __Result=0x00000000
[03:26:42.423]  </debugvars>
[03:26:42.423]  
[03:26:42.423]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.423]    <block atomic="false" info="">
[03:26:42.423]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.423]        // -> [isSWJ <= 0x00000001]
[03:26:42.423]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.425]        // -> [hasDormant <= 0x00000000]
[03:26:42.425]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.425]        // -> [protType <= 0x00000002]
[03:26:42.425]    </block>
[03:26:42.425]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.425]      // if-block "protType == 1"
[03:26:42.425]        // =>  FALSE
[03:26:42.425]      // skip if-block "protType == 1"
[03:26:42.425]    </control>
[03:26:42.425]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.425]      // if-block "protType == 2"
[03:26:42.425]        // =>  TRUE
[03:26:42.426]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.426]        // if-block "isSWJ"
[03:26:42.426]          // =>  TRUE
[03:26:42.426]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.426]          // if-block "hasDormant"
[03:26:42.427]            // =>  FALSE
[03:26:42.427]          // skip if-block "hasDormant"
[03:26:42.427]        </control>
[03:26:42.427]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.427]          // if-block "!hasDormant"
[03:26:42.427]            // =>  TRUE
[03:26:42.427]          <block atomic="false" info="">
[03:26:42.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.430]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.431]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.431]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.433]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.434]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.435]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.435]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.442]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.442]          </block>
[03:26:42.442]          // end if-block "!hasDormant"
[03:26:42.442]        </control>
[03:26:42.442]        // end if-block "isSWJ"
[03:26:42.442]      </control>
[03:26:42.442]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.442]        // if-block "!isSWJ"
[03:26:42.446]          // =>  FALSE
[03:26:42.446]        // skip if-block "!isSWJ"
[03:26:42.446]      </control>
[03:26:42.446]      <block atomic="false" info="">
[03:26:42.446]        ReadDP(0x0);
[03:26:42.447]  
[03:26:42.447]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.447]  
[03:26:42.447]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.447]      </block>
[03:26:42.447]      // end if-block "protType == 2"
[03:26:42.447]    </control>
[03:26:42.447]  </sequence>
[03:26:42.447]  
[03:26:42.507]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.507]  
[03:26:42.507]  <debugvars>
[03:26:42.507]    // Pre-defined
[03:26:42.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.507]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.507]    __dp=0x00000000
[03:26:42.507]    __ap=0x00000000
[03:26:42.507]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.507]    __FlashAddr=0x00000000
[03:26:42.507]    __FlashLen=0x00000000
[03:26:42.507]    __FlashArg=0x00000000
[03:26:42.507]    __FlashOp=0x00000000
[03:26:42.507]    __Result=0x00000000
[03:26:42.507]  </debugvars>
[03:26:42.509]  
[03:26:42.509]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.509]    <block atomic="false" info="">
[03:26:42.509]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.509]        // -> [isSWJ <= 0x00000001]
[03:26:42.509]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.509]        // -> [hasDormant <= 0x00000000]
[03:26:42.509]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.509]        // -> [protType <= 0x00000002]
[03:26:42.509]    </block>
[03:26:42.509]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.510]      // if-block "protType == 1"
[03:26:42.510]        // =>  FALSE
[03:26:42.510]      // skip if-block "protType == 1"
[03:26:42.510]    </control>
[03:26:42.511]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.511]      // if-block "protType == 2"
[03:26:42.511]        // =>  TRUE
[03:26:42.511]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.511]        // if-block "isSWJ"
[03:26:42.511]          // =>  TRUE
[03:26:42.511]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.511]          // if-block "hasDormant"
[03:26:42.512]            // =>  FALSE
[03:26:42.512]          // skip if-block "hasDormant"
[03:26:42.512]        </control>
[03:26:42.512]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.512]          // if-block "!hasDormant"
[03:26:42.512]            // =>  TRUE
[03:26:42.512]          <block atomic="false" info="">
[03:26:42.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.513]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.516]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.516]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.519]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.520]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.520]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.522]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.522]          </block>
[03:26:42.522]          // end if-block "!hasDormant"
[03:26:42.522]        </control>
[03:26:42.522]        // end if-block "isSWJ"
[03:26:42.522]      </control>
[03:26:42.523]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.523]        // if-block "!isSWJ"
[03:26:42.523]          // =>  FALSE
[03:26:42.523]        // skip if-block "!isSWJ"
[03:26:42.523]      </control>
[03:26:42.523]      <block atomic="false" info="">
[03:26:42.523]        ReadDP(0x0);
[03:26:42.524]  
[03:26:42.524]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.524]  
[03:26:42.524]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.524]      </block>
[03:26:42.524]      // end if-block "protType == 2"
[03:26:42.524]    </control>
[03:26:42.524]  </sequence>
[03:26:42.524]  
[03:26:42.584]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.584]  
[03:26:42.584]  <debugvars>
[03:26:42.584]    // Pre-defined
[03:26:42.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.584]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.584]    __dp=0x00000000
[03:26:42.584]    __ap=0x00000000
[03:26:42.584]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.584]    __FlashAddr=0x00000000
[03:26:42.584]    __FlashLen=0x00000000
[03:26:42.584]    __FlashArg=0x00000000
[03:26:42.584]    __FlashOp=0x00000000
[03:26:42.584]    __Result=0x00000000
[03:26:42.584]  </debugvars>
[03:26:42.584]  
[03:26:42.584]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.587]    <block atomic="false" info="">
[03:26:42.587]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.587]        // -> [isSWJ <= 0x00000001]
[03:26:42.587]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.587]        // -> [hasDormant <= 0x00000000]
[03:26:42.587]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.587]        // -> [protType <= 0x00000002]
[03:26:42.587]    </block>
[03:26:42.587]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.587]      // if-block "protType == 1"
[03:26:42.587]        // =>  FALSE
[03:26:42.588]      // skip if-block "protType == 1"
[03:26:42.588]    </control>
[03:26:42.588]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.588]      // if-block "protType == 2"
[03:26:42.588]        // =>  TRUE
[03:26:42.588]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.588]        // if-block "isSWJ"
[03:26:42.588]          // =>  TRUE
[03:26:42.588]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.588]          // if-block "hasDormant"
[03:26:42.589]            // =>  FALSE
[03:26:42.589]          // skip if-block "hasDormant"
[03:26:42.589]        </control>
[03:26:42.589]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.589]          // if-block "!hasDormant"
[03:26:42.589]            // =>  TRUE
[03:26:42.589]          <block atomic="false" info="">
[03:26:42.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.590]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.594]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.597]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.597]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.597]          </block>
[03:26:42.597]          // end if-block "!hasDormant"
[03:26:42.597]        </control>
[03:26:42.597]        // end if-block "isSWJ"
[03:26:42.597]      </control>
[03:26:42.597]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.597]        // if-block "!isSWJ"
[03:26:42.597]          // =>  FALSE
[03:26:42.597]        // skip if-block "!isSWJ"
[03:26:42.597]      </control>
[03:26:42.597]      <block atomic="false" info="">
[03:26:42.597]        ReadDP(0x0);
[03:26:42.602]  
[03:26:42.602]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.602]  
[03:26:42.602]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.602]      </block>
[03:26:42.602]      // end if-block "protType == 2"
[03:26:42.602]    </control>
[03:26:42.602]  </sequence>
[03:26:42.602]  
[03:26:42.662]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.662]  
[03:26:42.662]  <debugvars>
[03:26:42.662]    // Pre-defined
[03:26:42.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.663]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.663]    __dp=0x00000000
[03:26:42.663]    __ap=0x00000000
[03:26:42.663]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.663]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.663]    __FlashAddr=0x00000000
[03:26:42.663]    __FlashLen=0x00000000
[03:26:42.663]    __FlashArg=0x00000000
[03:26:42.663]    __FlashOp=0x00000000
[03:26:42.663]    __Result=0x00000000
[03:26:42.663]  </debugvars>
[03:26:42.663]  
[03:26:42.663]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.663]    <block atomic="false" info="">
[03:26:42.663]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.663]        // -> [isSWJ <= 0x00000001]
[03:26:42.663]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.663]        // -> [hasDormant <= 0x00000000]
[03:26:42.663]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.663]        // -> [protType <= 0x00000002]
[03:26:42.663]    </block>
[03:26:42.663]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.663]      // if-block "protType == 1"
[03:26:42.663]        // =>  FALSE
[03:26:42.663]      // skip if-block "protType == 1"
[03:26:42.666]    </control>
[03:26:42.666]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.666]      // if-block "protType == 2"
[03:26:42.666]        // =>  TRUE
[03:26:42.666]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.666]        // if-block "isSWJ"
[03:26:42.666]          // =>  TRUE
[03:26:42.666]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.666]          // if-block "hasDormant"
[03:26:42.666]            // =>  FALSE
[03:26:42.666]          // skip if-block "hasDormant"
[03:26:42.666]        </control>
[03:26:42.666]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.668]          // if-block "!hasDormant"
[03:26:42.668]            // =>  TRUE
[03:26:42.668]          <block atomic="false" info="">
[03:26:42.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.671]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.677]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.681]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.682]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.682]          </block>
[03:26:42.683]          // end if-block "!hasDormant"
[03:26:42.683]        </control>
[03:26:42.683]        // end if-block "isSWJ"
[03:26:42.683]      </control>
[03:26:42.683]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.683]        // if-block "!isSWJ"
[03:26:42.683]          // =>  FALSE
[03:26:42.683]        // skip if-block "!isSWJ"
[03:26:42.684]      </control>
[03:26:42.684]      <block atomic="false" info="">
[03:26:42.684]        ReadDP(0x0);
[03:26:42.686]  
[03:26:42.686]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.686]  
[03:26:42.686]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.686]      </block>
[03:26:42.686]      // end if-block "protType == 2"
[03:26:42.686]    </control>
[03:26:42.686]  </sequence>
[03:26:42.686]  
[03:26:42.736]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.736]  
[03:26:42.736]  <debugvars>
[03:26:42.736]    // Pre-defined
[03:26:42.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.736]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.736]    __dp=0x00000000
[03:26:42.738]    __ap=0x00000000
[03:26:42.738]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.738]    __FlashAddr=0x00000000
[03:26:42.738]    __FlashLen=0x00000000
[03:26:42.738]    __FlashArg=0x00000000
[03:26:42.738]    __FlashOp=0x00000000
[03:26:42.738]    __Result=0x00000000
[03:26:42.738]  </debugvars>
[03:26:42.738]  
[03:26:42.738]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.738]    <block atomic="false" info="">
[03:26:42.738]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.738]        // -> [isSWJ <= 0x00000001]
[03:26:42.738]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.738]        // -> [hasDormant <= 0x00000000]
[03:26:42.738]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.738]        // -> [protType <= 0x00000002]
[03:26:42.738]    </block>
[03:26:42.740]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.741]      // if-block "protType == 1"
[03:26:42.741]        // =>  FALSE
[03:26:42.741]      // skip if-block "protType == 1"
[03:26:42.741]    </control>
[03:26:42.741]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.741]      // if-block "protType == 2"
[03:26:42.741]        // =>  TRUE
[03:26:42.741]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.741]        // if-block "isSWJ"
[03:26:42.741]          // =>  TRUE
[03:26:42.741]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.741]          // if-block "hasDormant"
[03:26:42.741]            // =>  FALSE
[03:26:42.741]          // skip if-block "hasDormant"
[03:26:42.741]        </control>
[03:26:42.741]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.741]          // if-block "!hasDormant"
[03:26:42.741]            // =>  TRUE
[03:26:42.741]          <block atomic="false" info="">
[03:26:42.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.749]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.757]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.757]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.757]          </block>
[03:26:42.757]          // end if-block "!hasDormant"
[03:26:42.757]        </control>
[03:26:42.757]        // end if-block "isSWJ"
[03:26:42.757]      </control>
[03:26:42.757]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.757]        // if-block "!isSWJ"
[03:26:42.757]          // =>  FALSE
[03:26:42.757]        // skip if-block "!isSWJ"
[03:26:42.757]      </control>
[03:26:42.757]      <block atomic="false" info="">
[03:26:42.757]        ReadDP(0x0);
[03:26:42.761]  
[03:26:42.761]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.761]  
[03:26:42.761]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.761]      </block>
[03:26:42.761]      // end if-block "protType == 2"
[03:26:42.761]    </control>
[03:26:42.761]  </sequence>
[03:26:42.761]  
[03:26:42.821]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.821]  
[03:26:42.821]  <debugvars>
[03:26:42.821]    // Pre-defined
[03:26:42.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.821]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.821]    __dp=0x00000000
[03:26:42.821]    __ap=0x00000000
[03:26:42.821]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.821]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.821]    __FlashAddr=0x00000000
[03:26:42.821]    __FlashLen=0x00000000
[03:26:42.821]    __FlashArg=0x00000000
[03:26:42.821]    __FlashOp=0x00000000
[03:26:42.821]    __Result=0x00000000
[03:26:42.821]  </debugvars>
[03:26:42.821]  
[03:26:42.821]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.821]    <block atomic="false" info="">
[03:26:42.821]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.821]        // -> [isSWJ <= 0x00000001]
[03:26:42.821]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.821]        // -> [hasDormant <= 0x00000000]
[03:26:42.821]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.821]        // -> [protType <= 0x00000002]
[03:26:42.821]    </block>
[03:26:42.821]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.821]      // if-block "protType == 1"
[03:26:42.821]        // =>  FALSE
[03:26:42.821]      // skip if-block "protType == 1"
[03:26:42.821]    </control>
[03:26:42.821]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.821]      // if-block "protType == 2"
[03:26:42.821]        // =>  TRUE
[03:26:42.821]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.825]        // if-block "isSWJ"
[03:26:42.825]          // =>  TRUE
[03:26:42.825]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.825]          // if-block "hasDormant"
[03:26:42.825]            // =>  FALSE
[03:26:42.825]          // skip if-block "hasDormant"
[03:26:42.825]        </control>
[03:26:42.825]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.825]          // if-block "!hasDormant"
[03:26:42.825]            // =>  TRUE
[03:26:42.825]          <block atomic="false" info="">
[03:26:42.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.825]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.829]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.833]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.837]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.841]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.841]          </block>
[03:26:42.841]          // end if-block "!hasDormant"
[03:26:42.841]        </control>
[03:26:42.841]        // end if-block "isSWJ"
[03:26:42.841]      </control>
[03:26:42.841]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.841]        // if-block "!isSWJ"
[03:26:42.841]          // =>  FALSE
[03:26:42.841]        // skip if-block "!isSWJ"
[03:26:42.841]      </control>
[03:26:42.841]      <block atomic="false" info="">
[03:26:42.841]        ReadDP(0x0);
[03:26:42.841]  
[03:26:42.841]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.841]  
[03:26:42.841]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.841]      </block>
[03:26:42.841]      // end if-block "protType == 2"
[03:26:42.841]    </control>
[03:26:42.845]  </sequence>
[03:26:42.845]  
[03:26:42.905]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.905]  
[03:26:42.905]  <debugvars>
[03:26:42.905]    // Pre-defined
[03:26:42.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.905]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.905]    __dp=0x00000000
[03:26:42.905]    __ap=0x00000000
[03:26:42.905]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.905]    __FlashAddr=0x00000000
[03:26:42.905]    __FlashLen=0x00000000
[03:26:42.905]    __FlashArg=0x00000000
[03:26:42.905]    __FlashOp=0x00000000
[03:26:42.905]    __Result=0x00000000
[03:26:42.905]  </debugvars>
[03:26:42.905]  
[03:26:42.905]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.905]    <block atomic="false" info="">
[03:26:42.905]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.905]        // -> [isSWJ <= 0x00000001]
[03:26:42.905]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.905]        // -> [hasDormant <= 0x00000000]
[03:26:42.905]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.905]        // -> [protType <= 0x00000002]
[03:26:42.905]    </block>
[03:26:42.905]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.905]      // if-block "protType == 1"
[03:26:42.905]        // =>  FALSE
[03:26:42.905]      // skip if-block "protType == 1"
[03:26:42.905]    </control>
[03:26:42.909]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.909]      // if-block "protType == 2"
[03:26:42.909]        // =>  TRUE
[03:26:42.909]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.909]        // if-block "isSWJ"
[03:26:42.909]          // =>  TRUE
[03:26:42.909]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.909]          // if-block "hasDormant"
[03:26:42.909]            // =>  FALSE
[03:26:42.909]          // skip if-block "hasDormant"
[03:26:42.909]        </control>
[03:26:42.909]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.909]          // if-block "!hasDormant"
[03:26:42.909]            // =>  TRUE
[03:26:42.909]          <block atomic="false" info="">
[03:26:42.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.913]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.913]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.917]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.917]          </block>
[03:26:42.921]          // end if-block "!hasDormant"
[03:26:42.921]        </control>
[03:26:42.921]        // end if-block "isSWJ"
[03:26:42.921]      </control>
[03:26:42.921]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.921]        // if-block "!isSWJ"
[03:26:42.921]          // =>  FALSE
[03:26:42.921]        // skip if-block "!isSWJ"
[03:26:42.921]      </control>
[03:26:42.921]      <block atomic="false" info="">
[03:26:42.921]        ReadDP(0x0);
[03:26:42.921]  
[03:26:42.921]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.921]  
[03:26:42.921]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.921]      </block>
[03:26:42.921]      // end if-block "protType == 2"
[03:26:42.921]    </control>
[03:26:42.921]  </sequence>
[03:26:42.921]  
[03:26:42.978]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:42.978]  
[03:26:42.978]  <debugvars>
[03:26:42.978]    // Pre-defined
[03:26:42.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:42.978]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:42.978]    __dp=0x00000000
[03:26:42.978]    __ap=0x00000000
[03:26:42.978]    __traceout=0x00000000      (Trace Disabled)
[03:26:42.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:42.978]    __FlashAddr=0x00000000
[03:26:42.978]    __FlashLen=0x00000000
[03:26:42.978]    __FlashArg=0x00000000
[03:26:42.978]    __FlashOp=0x00000000
[03:26:42.978]    __Result=0x00000000
[03:26:42.978]  </debugvars>
[03:26:42.978]  
[03:26:42.980]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:42.980]    <block atomic="false" info="">
[03:26:42.980]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:42.980]        // -> [isSWJ <= 0x00000001]
[03:26:42.981]      __var hasDormant = __protocol & 0x00020000;
[03:26:42.981]        // -> [hasDormant <= 0x00000000]
[03:26:42.981]      __var protType   = __protocol & 0x0000FFFF;
[03:26:42.981]        // -> [protType <= 0x00000002]
[03:26:42.981]    </block>
[03:26:42.981]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:42.981]      // if-block "protType == 1"
[03:26:42.981]        // =>  FALSE
[03:26:42.981]      // skip if-block "protType == 1"
[03:26:42.981]    </control>
[03:26:42.981]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:42.981]      // if-block "protType == 2"
[03:26:42.981]        // =>  TRUE
[03:26:42.981]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:42.981]        // if-block "isSWJ"
[03:26:42.981]          // =>  TRUE
[03:26:42.982]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:42.982]          // if-block "hasDormant"
[03:26:42.982]            // =>  FALSE
[03:26:42.982]          // skip if-block "hasDormant"
[03:26:42.982]        </control>
[03:26:42.982]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:42.982]          // if-block "!hasDormant"
[03:26:42.982]            // =>  TRUE
[03:26:42.982]          <block atomic="false" info="">
[03:26:42.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:42.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.986]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:42.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:42.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:42.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.991]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:42.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:42.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:42.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:42.994]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:42.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:42.996]          </block>
[03:26:42.996]          // end if-block "!hasDormant"
[03:26:42.996]        </control>
[03:26:42.996]        // end if-block "isSWJ"
[03:26:42.996]      </control>
[03:26:42.997]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:42.997]        // if-block "!isSWJ"
[03:26:42.997]          // =>  FALSE
[03:26:42.997]        // skip if-block "!isSWJ"
[03:26:42.997]      </control>
[03:26:42.998]      <block atomic="false" info="">
[03:26:42.998]        ReadDP(0x0);
[03:26:42.999]  
[03:26:42.999]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:42.999]  
[03:26:42.999]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:42.999]      </block>
[03:26:42.999]      // end if-block "protType == 2"
[03:26:42.999]    </control>
[03:26:43.000]  </sequence>
[03:26:43.000]  
[03:26:43.056]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.056]  
[03:26:43.056]  <debugvars>
[03:26:43.056]    // Pre-defined
[03:26:43.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.056]    __dp=0x00000000
[03:26:43.056]    __ap=0x00000000
[03:26:43.056]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.056]    __FlashAddr=0x00000000
[03:26:43.056]    __FlashLen=0x00000000
[03:26:43.056]    __FlashArg=0x00000000
[03:26:43.056]    __FlashOp=0x00000000
[03:26:43.056]    __Result=0x00000000
[03:26:43.056]  </debugvars>
[03:26:43.056]  
[03:26:43.056]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.056]    <block atomic="false" info="">
[03:26:43.056]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.056]        // -> [isSWJ <= 0x00000001]
[03:26:43.056]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.056]        // -> [hasDormant <= 0x00000000]
[03:26:43.056]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.056]        // -> [protType <= 0x00000002]
[03:26:43.056]    </block>
[03:26:43.056]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.056]      // if-block "protType == 1"
[03:26:43.056]        // =>  FALSE
[03:26:43.056]      // skip if-block "protType == 1"
[03:26:43.056]    </control>
[03:26:43.056]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.056]      // if-block "protType == 2"
[03:26:43.056]        // =>  TRUE
[03:26:43.060]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.060]        // if-block "isSWJ"
[03:26:43.060]          // =>  TRUE
[03:26:43.060]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.060]          // if-block "hasDormant"
[03:26:43.060]            // =>  FALSE
[03:26:43.060]          // skip if-block "hasDormant"
[03:26:43.060]        </control>
[03:26:43.060]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.060]          // if-block "!hasDormant"
[03:26:43.060]            // =>  TRUE
[03:26:43.060]          <block atomic="false" info="">
[03:26:43.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.064]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.064]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.064]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.069]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.069]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.072]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.072]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.072]          </block>
[03:26:43.072]          // end if-block "!hasDormant"
[03:26:43.072]        </control>
[03:26:43.072]        // end if-block "isSWJ"
[03:26:43.072]      </control>
[03:26:43.072]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.072]        // if-block "!isSWJ"
[03:26:43.072]          // =>  FALSE
[03:26:43.072]        // skip if-block "!isSWJ"
[03:26:43.072]      </control>
[03:26:43.072]      <block atomic="false" info="">
[03:26:43.072]        ReadDP(0x0);
[03:26:43.076]  
[03:26:43.076]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.076]  
[03:26:43.076]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.076]      </block>
[03:26:43.076]      // end if-block "protType == 2"
[03:26:43.076]    </control>
[03:26:43.076]  </sequence>
[03:26:43.076]  
[03:26:43.129]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.129]  
[03:26:43.129]  <debugvars>
[03:26:43.129]    // Pre-defined
[03:26:43.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.129]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.129]    __dp=0x00000000
[03:26:43.129]    __ap=0x00000000
[03:26:43.129]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.131]    __FlashAddr=0x00000000
[03:26:43.131]    __FlashLen=0x00000000
[03:26:43.131]    __FlashArg=0x00000000
[03:26:43.131]    __FlashOp=0x00000000
[03:26:43.131]    __Result=0x00000000
[03:26:43.131]  </debugvars>
[03:26:43.131]  
[03:26:43.131]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.131]    <block atomic="false" info="">
[03:26:43.131]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.131]        // -> [isSWJ <= 0x00000001]
[03:26:43.131]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.131]        // -> [hasDormant <= 0x00000000]
[03:26:43.132]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.132]        // -> [protType <= 0x00000002]
[03:26:43.132]    </block>
[03:26:43.132]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.132]      // if-block "protType == 1"
[03:26:43.132]        // =>  FALSE
[03:26:43.132]      // skip if-block "protType == 1"
[03:26:43.132]    </control>
[03:26:43.132]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.132]      // if-block "protType == 2"
[03:26:43.132]        // =>  TRUE
[03:26:43.132]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.132]        // if-block "isSWJ"
[03:26:43.132]          // =>  TRUE
[03:26:43.132]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.132]          // if-block "hasDormant"
[03:26:43.132]            // =>  FALSE
[03:26:43.134]          // skip if-block "hasDormant"
[03:26:43.134]        </control>
[03:26:43.134]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.134]          // if-block "!hasDormant"
[03:26:43.134]            // =>  TRUE
[03:26:43.134]          <block atomic="false" info="">
[03:26:43.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.136]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.140]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.144]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.144]          </block>
[03:26:43.144]          // end if-block "!hasDormant"
[03:26:43.144]        </control>
[03:26:43.144]        // end if-block "isSWJ"
[03:26:43.144]      </control>
[03:26:43.144]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.144]        // if-block "!isSWJ"
[03:26:43.144]          // =>  FALSE
[03:26:43.144]        // skip if-block "!isSWJ"
[03:26:43.144]      </control>
[03:26:43.144]      <block atomic="false" info="">
[03:26:43.144]        ReadDP(0x0);
[03:26:43.144]  
[03:26:43.144]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.144]  
[03:26:43.144]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.144]      </block>
[03:26:43.144]      // end if-block "protType == 2"
[03:26:43.144]    </control>
[03:26:43.144]  </sequence>
[03:26:43.148]  
[03:26:43.204]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.204]  
[03:26:43.204]  <debugvars>
[03:26:43.204]    // Pre-defined
[03:26:43.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.206]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.206]    __dp=0x00000000
[03:26:43.206]    __ap=0x00000000
[03:26:43.206]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.206]    __FlashAddr=0x00000000
[03:26:43.206]    __FlashLen=0x00000000
[03:26:43.206]    __FlashArg=0x00000000
[03:26:43.206]    __FlashOp=0x00000000
[03:26:43.206]    __Result=0x00000000
[03:26:43.206]  </debugvars>
[03:26:43.206]  
[03:26:43.206]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.206]    <block atomic="false" info="">
[03:26:43.206]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.206]        // -> [isSWJ <= 0x00000001]
[03:26:43.206]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.206]        // -> [hasDormant <= 0x00000000]
[03:26:43.206]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.209]        // -> [protType <= 0x00000002]
[03:26:43.209]    </block>
[03:26:43.209]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.209]      // if-block "protType == 1"
[03:26:43.209]        // =>  FALSE
[03:26:43.209]      // skip if-block "protType == 1"
[03:26:43.209]    </control>
[03:26:43.209]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.209]      // if-block "protType == 2"
[03:26:43.209]        // =>  TRUE
[03:26:43.209]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.209]        // if-block "isSWJ"
[03:26:43.209]          // =>  TRUE
[03:26:43.209]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.209]          // if-block "hasDormant"
[03:26:43.209]            // =>  FALSE
[03:26:43.209]          // skip if-block "hasDormant"
[03:26:43.209]        </control>
[03:26:43.209]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.209]          // if-block "!hasDormant"
[03:26:43.209]            // =>  TRUE
[03:26:43.209]          <block atomic="false" info="">
[03:26:43.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.213]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.217]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.221]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.221]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.221]          </block>
[03:26:43.221]          // end if-block "!hasDormant"
[03:26:43.225]        </control>
[03:26:43.225]        // end if-block "isSWJ"
[03:26:43.225]      </control>
[03:26:43.225]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.225]        // if-block "!isSWJ"
[03:26:43.225]          // =>  FALSE
[03:26:43.225]        // skip if-block "!isSWJ"
[03:26:43.225]      </control>
[03:26:43.225]      <block atomic="false" info="">
[03:26:43.225]        ReadDP(0x0);
[03:26:43.225]  
[03:26:43.225]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.225]  
[03:26:43.225]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.225]      </block>
[03:26:43.225]      // end if-block "protType == 2"
[03:26:43.225]    </control>
[03:26:43.225]  </sequence>
[03:26:43.225]  
[03:26:43.277]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.277]  
[03:26:43.277]  <debugvars>
[03:26:43.277]    // Pre-defined
[03:26:43.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.277]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.279]    __dp=0x00000000
[03:26:43.279]    __ap=0x00000000
[03:26:43.279]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.279]    __FlashAddr=0x00000000
[03:26:43.279]    __FlashLen=0x00000000
[03:26:43.279]    __FlashArg=0x00000000
[03:26:43.279]    __FlashOp=0x00000000
[03:26:43.279]    __Result=0x00000000
[03:26:43.279]  </debugvars>
[03:26:43.279]  
[03:26:43.279]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.279]    <block atomic="false" info="">
[03:26:43.279]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.279]        // -> [isSWJ <= 0x00000001]
[03:26:43.279]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.279]        // -> [hasDormant <= 0x00000000]
[03:26:43.279]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.279]        // -> [protType <= 0x00000002]
[03:26:43.281]    </block>
[03:26:43.281]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.281]      // if-block "protType == 1"
[03:26:43.281]        // =>  FALSE
[03:26:43.281]      // skip if-block "protType == 1"
[03:26:43.281]    </control>
[03:26:43.281]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.281]      // if-block "protType == 2"
[03:26:43.281]        // =>  TRUE
[03:26:43.281]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.281]        // if-block "isSWJ"
[03:26:43.281]          // =>  TRUE
[03:26:43.281]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.281]          // if-block "hasDormant"
[03:26:43.281]            // =>  FALSE
[03:26:43.281]          // skip if-block "hasDormant"
[03:26:43.281]        </control>
[03:26:43.281]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.281]          // if-block "!hasDormant"
[03:26:43.281]            // =>  TRUE
[03:26:43.281]          <block atomic="false" info="">
[03:26:43.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.289]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.293]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.301]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.301]          </block>
[03:26:43.301]          // end if-block "!hasDormant"
[03:26:43.301]        </control>
[03:26:43.301]        // end if-block "isSWJ"
[03:26:43.301]      </control>
[03:26:43.301]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.301]        // if-block "!isSWJ"
[03:26:43.301]          // =>  FALSE
[03:26:43.301]        // skip if-block "!isSWJ"
[03:26:43.301]      </control>
[03:26:43.301]      <block atomic="false" info="">
[03:26:43.301]        ReadDP(0x0);
[03:26:43.306]  
[03:26:43.306]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.306]  
[03:26:43.306]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.306]      </block>
[03:26:43.306]      // end if-block "protType == 2"
[03:26:43.306]    </control>
[03:26:43.306]  </sequence>
[03:26:43.306]  
[03:26:43.367]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.367]  
[03:26:43.368]  <debugvars>
[03:26:43.368]    // Pre-defined
[03:26:43.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.368]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.368]    __dp=0x00000000
[03:26:43.368]    __ap=0x00000000
[03:26:43.368]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.368]    __FlashAddr=0x00000000
[03:26:43.368]    __FlashLen=0x00000000
[03:26:43.368]    __FlashArg=0x00000000
[03:26:43.368]    __FlashOp=0x00000000
[03:26:43.368]    __Result=0x00000000
[03:26:43.368]  </debugvars>
[03:26:43.368]  
[03:26:43.368]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.368]    <block atomic="false" info="">
[03:26:43.368]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.368]        // -> [isSWJ <= 0x00000001]
[03:26:43.370]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.370]        // -> [hasDormant <= 0x00000000]
[03:26:43.370]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.370]        // -> [protType <= 0x00000002]
[03:26:43.370]    </block>
[03:26:43.370]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.370]      // if-block "protType == 1"
[03:26:43.370]        // =>  FALSE
[03:26:43.371]      // skip if-block "protType == 1"
[03:26:43.371]    </control>
[03:26:43.371]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.371]      // if-block "protType == 2"
[03:26:43.371]        // =>  TRUE
[03:26:43.371]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.371]        // if-block "isSWJ"
[03:26:43.371]          // =>  TRUE
[03:26:43.371]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.371]          // if-block "hasDormant"
[03:26:43.371]            // =>  FALSE
[03:26:43.371]          // skip if-block "hasDormant"
[03:26:43.371]        </control>
[03:26:43.371]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.372]          // if-block "!hasDormant"
[03:26:43.372]            // =>  TRUE
[03:26:43.372]          <block atomic="false" info="">
[03:26:43.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.374]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.377]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.379]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.379]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.379]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.379]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.383]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.383]          </block>
[03:26:43.383]          // end if-block "!hasDormant"
[03:26:43.383]        </control>
[03:26:43.383]        // end if-block "isSWJ"
[03:26:43.383]      </control>
[03:26:43.383]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.383]        // if-block "!isSWJ"
[03:26:43.383]          // =>  FALSE
[03:26:43.383]        // skip if-block "!isSWJ"
[03:26:43.383]      </control>
[03:26:43.383]      <block atomic="false" info="">
[03:26:43.383]        ReadDP(0x0);
[03:26:43.386]  
[03:26:43.386]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.386]  
[03:26:43.386]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.386]      </block>
[03:26:43.386]      // end if-block "protType == 2"
[03:26:43.386]    </control>
[03:26:43.386]  </sequence>
[03:26:43.386]  
[03:26:43.440]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.440]  
[03:26:43.440]  <debugvars>
[03:26:43.440]    // Pre-defined
[03:26:43.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.440]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.440]    __dp=0x00000000
[03:26:43.440]    __ap=0x00000000
[03:26:43.440]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.440]    __FlashAddr=0x00000000
[03:26:43.440]    __FlashLen=0x00000000
[03:26:43.440]    __FlashArg=0x00000000
[03:26:43.440]    __FlashOp=0x00000000
[03:26:43.440]    __Result=0x00000000
[03:26:43.440]  </debugvars>
[03:26:43.440]  
[03:26:43.440]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.440]    <block atomic="false" info="">
[03:26:43.440]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.440]        // -> [isSWJ <= 0x00000001]
[03:26:43.443]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.443]        // -> [hasDormant <= 0x00000000]
[03:26:43.443]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.443]        // -> [protType <= 0x00000002]
[03:26:43.443]    </block>
[03:26:43.443]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.443]      // if-block "protType == 1"
[03:26:43.443]        // =>  FALSE
[03:26:43.444]      // skip if-block "protType == 1"
[03:26:43.444]    </control>
[03:26:43.444]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.444]      // if-block "protType == 2"
[03:26:43.444]        // =>  TRUE
[03:26:43.444]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.444]        // if-block "isSWJ"
[03:26:43.444]          // =>  TRUE
[03:26:43.444]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.445]          // if-block "hasDormant"
[03:26:43.445]            // =>  FALSE
[03:26:43.445]          // skip if-block "hasDormant"
[03:26:43.445]        </control>
[03:26:43.445]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.445]          // if-block "!hasDormant"
[03:26:43.445]            // =>  TRUE
[03:26:43.445]          <block atomic="false" info="">
[03:26:43.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.449]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.449]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.454]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.454]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.457]          </block>
[03:26:43.457]          // end if-block "!hasDormant"
[03:26:43.457]        </control>
[03:26:43.457]        // end if-block "isSWJ"
[03:26:43.457]      </control>
[03:26:43.457]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.458]        // if-block "!isSWJ"
[03:26:43.458]          // =>  FALSE
[03:26:43.458]        // skip if-block "!isSWJ"
[03:26:43.458]      </control>
[03:26:43.458]      <block atomic="false" info="">
[03:26:43.458]        ReadDP(0x0);
[03:26:43.460]  
[03:26:43.460]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.460]  
[03:26:43.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.460]      </block>
[03:26:43.460]      // end if-block "protType == 2"
[03:26:43.460]    </control>
[03:26:43.460]  </sequence>
[03:26:43.460]  
[03:26:43.515]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.515]  
[03:26:43.515]  <debugvars>
[03:26:43.515]    // Pre-defined
[03:26:43.515]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.515]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.515]    __dp=0x00000000
[03:26:43.515]    __ap=0x00000000
[03:26:43.515]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.515]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.515]    __FlashAddr=0x00000000
[03:26:43.515]    __FlashLen=0x00000000
[03:26:43.515]    __FlashArg=0x00000000
[03:26:43.515]    __FlashOp=0x00000000
[03:26:43.515]    __Result=0x00000000
[03:26:43.515]  </debugvars>
[03:26:43.515]  
[03:26:43.515]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.515]    <block atomic="false" info="">
[03:26:43.515]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.515]        // -> [isSWJ <= 0x00000001]
[03:26:43.515]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.515]        // -> [hasDormant <= 0x00000000]
[03:26:43.515]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.515]        // -> [protType <= 0x00000002]
[03:26:43.515]    </block>
[03:26:43.515]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.515]      // if-block "protType == 1"
[03:26:43.515]        // =>  FALSE
[03:26:43.515]      // skip if-block "protType == 1"
[03:26:43.515]    </control>
[03:26:43.515]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.515]      // if-block "protType == 2"
[03:26:43.515]        // =>  TRUE
[03:26:43.519]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.519]        // if-block "isSWJ"
[03:26:43.519]          // =>  TRUE
[03:26:43.519]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.519]          // if-block "hasDormant"
[03:26:43.519]            // =>  FALSE
[03:26:43.519]          // skip if-block "hasDormant"
[03:26:43.519]        </control>
[03:26:43.519]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.519]          // if-block "!hasDormant"
[03:26:43.519]            // =>  TRUE
[03:26:43.519]          <block atomic="false" info="">
[03:26:43.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.519]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.519]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.523]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.523]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.523]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.527]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.528]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.528]          </block>
[03:26:43.528]          // end if-block "!hasDormant"
[03:26:43.528]        </control>
[03:26:43.528]        // end if-block "isSWJ"
[03:26:43.528]      </control>
[03:26:43.528]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.528]        // if-block "!isSWJ"
[03:26:43.528]          // =>  FALSE
[03:26:43.528]        // skip if-block "!isSWJ"
[03:26:43.528]      </control>
[03:26:43.528]      <block atomic="false" info="">
[03:26:43.528]        ReadDP(0x0);
[03:26:43.531]  
[03:26:43.531]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.531]  
[03:26:43.531]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.531]      </block>
[03:26:43.531]      // end if-block "protType == 2"
[03:26:43.531]    </control>
[03:26:43.531]  </sequence>
[03:26:43.531]  
[03:26:43.587]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.587]  
[03:26:43.587]  <debugvars>
[03:26:43.587]    // Pre-defined
[03:26:43.587]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.587]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.587]    __dp=0x00000000
[03:26:43.587]    __ap=0x00000000
[03:26:43.587]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.587]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.587]    __FlashAddr=0x00000000
[03:26:43.587]    __FlashLen=0x00000000
[03:26:43.587]    __FlashArg=0x00000000
[03:26:43.587]    __FlashOp=0x00000000
[03:26:43.587]    __Result=0x00000000
[03:26:43.589]  </debugvars>
[03:26:43.589]  
[03:26:43.589]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.589]    <block atomic="false" info="">
[03:26:43.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.590]        // -> [isSWJ <= 0x00000001]
[03:26:43.590]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.590]        // -> [hasDormant <= 0x00000000]
[03:26:43.590]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.590]        // -> [protType <= 0x00000002]
[03:26:43.590]    </block>
[03:26:43.590]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.590]      // if-block "protType == 1"
[03:26:43.590]        // =>  FALSE
[03:26:43.590]      // skip if-block "protType == 1"
[03:26:43.590]    </control>
[03:26:43.590]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.590]      // if-block "protType == 2"
[03:26:43.590]        // =>  TRUE
[03:26:43.592]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.592]        // if-block "isSWJ"
[03:26:43.592]          // =>  TRUE
[03:26:43.592]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.592]          // if-block "hasDormant"
[03:26:43.592]            // =>  FALSE
[03:26:43.592]          // skip if-block "hasDormant"
[03:26:43.592]        </control>
[03:26:43.592]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.592]          // if-block "!hasDormant"
[03:26:43.592]            // =>  TRUE
[03:26:43.592]          <block atomic="false" info="">
[03:26:43.592]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.592]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.596]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.600]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.604]          </block>
[03:26:43.604]          // end if-block "!hasDormant"
[03:26:43.604]        </control>
[03:26:43.604]        // end if-block "isSWJ"
[03:26:43.604]      </control>
[03:26:43.604]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.604]        // if-block "!isSWJ"
[03:26:43.604]          // =>  FALSE
[03:26:43.604]        // skip if-block "!isSWJ"
[03:26:43.604]      </control>
[03:26:43.604]      <block atomic="false" info="">
[03:26:43.604]        ReadDP(0x0);
[03:26:43.604]  
[03:26:43.604]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.604]  
[03:26:43.604]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.604]      </block>
[03:26:43.604]      // end if-block "protType == 2"
[03:26:43.604]    </control>
[03:26:43.604]  </sequence>
[03:26:43.604]  
[03:26:43.661]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.661]  
[03:26:43.661]  <debugvars>
[03:26:43.661]    // Pre-defined
[03:26:43.661]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.661]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.661]    __dp=0x00000000
[03:26:43.661]    __ap=0x00000000
[03:26:43.661]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.661]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.661]    __FlashAddr=0x00000000
[03:26:43.661]    __FlashLen=0x00000000
[03:26:43.661]    __FlashArg=0x00000000
[03:26:43.661]    __FlashOp=0x00000000
[03:26:43.661]    __Result=0x00000000
[03:26:43.661]  </debugvars>
[03:26:43.661]  
[03:26:43.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.661]    <block atomic="false" info="">
[03:26:43.661]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.661]        // -> [isSWJ <= 0x00000001]
[03:26:43.661]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.661]        // -> [hasDormant <= 0x00000000]
[03:26:43.661]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.661]        // -> [protType <= 0x00000002]
[03:26:43.661]    </block>
[03:26:43.661]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.661]      // if-block "protType == 1"
[03:26:43.661]        // =>  FALSE
[03:26:43.661]      // skip if-block "protType == 1"
[03:26:43.661]    </control>
[03:26:43.665]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.665]      // if-block "protType == 2"
[03:26:43.665]        // =>  TRUE
[03:26:43.665]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.665]        // if-block "isSWJ"
[03:26:43.665]          // =>  TRUE
[03:26:43.665]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.665]          // if-block "hasDormant"
[03:26:43.665]            // =>  FALSE
[03:26:43.665]          // skip if-block "hasDormant"
[03:26:43.665]        </control>
[03:26:43.665]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.665]          // if-block "!hasDormant"
[03:26:43.665]            // =>  TRUE
[03:26:43.665]          <block atomic="false" info="">
[03:26:43.665]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.673]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.673]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.673]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.677]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.677]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.681]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.681]          </block>
[03:26:43.681]          // end if-block "!hasDormant"
[03:26:43.681]        </control>
[03:26:43.681]        // end if-block "isSWJ"
[03:26:43.681]      </control>
[03:26:43.681]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.681]        // if-block "!isSWJ"
[03:26:43.681]          // =>  FALSE
[03:26:43.681]        // skip if-block "!isSWJ"
[03:26:43.681]      </control>
[03:26:43.681]      <block atomic="false" info="">
[03:26:43.681]        ReadDP(0x0);
[03:26:43.681]  
[03:26:43.681]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.681]  
[03:26:43.681]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.681]      </block>
[03:26:43.681]      // end if-block "protType == 2"
[03:26:43.681]    </control>
[03:26:43.681]  </sequence>
[03:26:43.685]  
[03:26:43.745]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.745]  
[03:26:43.745]  <debugvars>
[03:26:43.745]    // Pre-defined
[03:26:43.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.745]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.745]    __dp=0x00000000
[03:26:43.745]    __ap=0x00000000
[03:26:43.745]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.745]    __FlashAddr=0x00000000
[03:26:43.745]    __FlashLen=0x00000000
[03:26:43.745]    __FlashArg=0x00000000
[03:26:43.745]    __FlashOp=0x00000000
[03:26:43.745]    __Result=0x00000000
[03:26:43.745]  </debugvars>
[03:26:43.745]  
[03:26:43.745]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.745]    <block atomic="false" info="">
[03:26:43.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.745]        // -> [isSWJ <= 0x00000001]
[03:26:43.745]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.745]        // -> [hasDormant <= 0x00000000]
[03:26:43.745]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.745]        // -> [protType <= 0x00000002]
[03:26:43.745]    </block>
[03:26:43.745]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.745]      // if-block "protType == 1"
[03:26:43.745]        // =>  FALSE
[03:26:43.745]      // skip if-block "protType == 1"
[03:26:43.745]    </control>
[03:26:43.745]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.749]      // if-block "protType == 2"
[03:26:43.749]        // =>  TRUE
[03:26:43.750]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.750]        // if-block "isSWJ"
[03:26:43.750]          // =>  TRUE
[03:26:43.750]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.750]          // if-block "hasDormant"
[03:26:43.750]            // =>  FALSE
[03:26:43.750]          // skip if-block "hasDormant"
[03:26:43.750]        </control>
[03:26:43.750]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.750]          // if-block "!hasDormant"
[03:26:43.750]            // =>  TRUE
[03:26:43.750]          <block atomic="false" info="">
[03:26:43.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.751]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.751]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.758]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.762]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.766]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.767]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.767]          </block>
[03:26:43.767]          // end if-block "!hasDormant"
[03:26:43.767]        </control>
[03:26:43.767]        // end if-block "isSWJ"
[03:26:43.767]      </control>
[03:26:43.767]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.767]        // if-block "!isSWJ"
[03:26:43.767]          // =>  FALSE
[03:26:43.767]        // skip if-block "!isSWJ"
[03:26:43.767]      </control>
[03:26:43.768]      <block atomic="false" info="">
[03:26:43.768]        ReadDP(0x0);
[03:26:43.773]  
[03:26:43.773]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.773]  
[03:26:43.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.773]      </block>
[03:26:43.773]      // end if-block "protType == 2"
[03:26:43.773]    </control>
[03:26:43.773]  </sequence>
[03:26:43.773]  
[03:26:43.836]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.836]  
[03:26:43.837]  <debugvars>
[03:26:43.837]    // Pre-defined
[03:26:43.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.837]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.837]    __dp=0x00000000
[03:26:43.837]    __ap=0x00000000
[03:26:43.837]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.837]    __FlashAddr=0x00000000
[03:26:43.837]    __FlashLen=0x00000000
[03:26:43.837]    __FlashArg=0x00000000
[03:26:43.837]    __FlashOp=0x00000000
[03:26:43.837]    __Result=0x00000000
[03:26:43.837]  </debugvars>
[03:26:43.837]  
[03:26:43.837]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.837]    <block atomic="false" info="">
[03:26:43.837]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.837]        // -> [isSWJ <= 0x00000001]
[03:26:43.837]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.837]        // -> [hasDormant <= 0x00000000]
[03:26:43.837]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.837]        // -> [protType <= 0x00000002]
[03:26:43.837]    </block>
[03:26:43.837]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.837]      // if-block "protType == 1"
[03:26:43.840]        // =>  FALSE
[03:26:43.840]      // skip if-block "protType == 1"
[03:26:43.840]    </control>
[03:26:43.840]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.840]      // if-block "protType == 2"
[03:26:43.840]        // =>  TRUE
[03:26:43.840]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.840]        // if-block "isSWJ"
[03:26:43.840]          // =>  TRUE
[03:26:43.840]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.840]          // if-block "hasDormant"
[03:26:43.840]            // =>  FALSE
[03:26:43.840]          // skip if-block "hasDormant"
[03:26:43.840]        </control>
[03:26:43.840]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.840]          // if-block "!hasDormant"
[03:26:43.840]            // =>  TRUE
[03:26:43.840]          <block atomic="false" info="">
[03:26:43.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.844]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.848]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.848]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.852]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.852]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.856]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.856]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.856]          </block>
[03:26:43.856]          // end if-block "!hasDormant"
[03:26:43.856]        </control>
[03:26:43.856]        // end if-block "isSWJ"
[03:26:43.856]      </control>
[03:26:43.856]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.856]        // if-block "!isSWJ"
[03:26:43.856]          // =>  FALSE
[03:26:43.856]        // skip if-block "!isSWJ"
[03:26:43.856]      </control>
[03:26:43.856]      <block atomic="false" info="">
[03:26:43.856]        ReadDP(0x0);
[03:26:43.860]  
[03:26:43.860]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.860]  
[03:26:43.860]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.860]      </block>
[03:26:43.860]      // end if-block "protType == 2"
[03:26:43.860]    </control>
[03:26:43.860]  </sequence>
[03:26:43.860]  
[03:26:43.912]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.912]  
[03:26:43.912]  <debugvars>
[03:26:43.912]    // Pre-defined
[03:26:43.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.912]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.912]    __dp=0x00000000
[03:26:43.912]    __ap=0x00000000
[03:26:43.912]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.912]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.912]    __FlashAddr=0x00000000
[03:26:43.912]    __FlashLen=0x00000000
[03:26:43.912]    __FlashArg=0x00000000
[03:26:43.912]    __FlashOp=0x00000000
[03:26:43.912]    __Result=0x00000000
[03:26:43.912]  </debugvars>
[03:26:43.912]  
[03:26:43.912]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.912]    <block atomic="false" info="">
[03:26:43.912]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.912]        // -> [isSWJ <= 0x00000001]
[03:26:43.912]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.912]        // -> [hasDormant <= 0x00000000]
[03:26:43.912]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.912]        // -> [protType <= 0x00000002]
[03:26:43.912]    </block>
[03:26:43.912]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.912]      // if-block "protType == 1"
[03:26:43.912]        // =>  FALSE
[03:26:43.912]      // skip if-block "protType == 1"
[03:26:43.912]    </control>
[03:26:43.912]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.912]      // if-block "protType == 2"
[03:26:43.912]        // =>  TRUE
[03:26:43.916]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.916]        // if-block "isSWJ"
[03:26:43.916]          // =>  TRUE
[03:26:43.916]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.916]          // if-block "hasDormant"
[03:26:43.916]            // =>  FALSE
[03:26:43.916]          // skip if-block "hasDormant"
[03:26:43.916]        </control>
[03:26:43.916]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.916]          // if-block "!hasDormant"
[03:26:43.916]            // =>  TRUE
[03:26:43.916]          <block atomic="false" info="">
[03:26:43.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.916]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.920]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:43.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:43.926]          </block>
[03:26:43.926]          // end if-block "!hasDormant"
[03:26:43.928]        </control>
[03:26:43.928]        // end if-block "isSWJ"
[03:26:43.928]      </control>
[03:26:43.928]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:43.928]        // if-block "!isSWJ"
[03:26:43.928]          // =>  FALSE
[03:26:43.928]        // skip if-block "!isSWJ"
[03:26:43.928]      </control>
[03:26:43.928]      <block atomic="false" info="">
[03:26:43.928]        ReadDP(0x0);
[03:26:43.928]  
[03:26:43.928]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:43.928]  
[03:26:43.928]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:43.928]      </block>
[03:26:43.928]      // end if-block "protType == 2"
[03:26:43.928]    </control>
[03:26:43.928]  </sequence>
[03:26:43.928]  
[03:26:43.985]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:43.985]  
[03:26:43.985]  <debugvars>
[03:26:43.985]    // Pre-defined
[03:26:43.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:43.985]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:43.985]    __dp=0x00000000
[03:26:43.985]    __ap=0x00000000
[03:26:43.985]    __traceout=0x00000000      (Trace Disabled)
[03:26:43.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:43.985]    __FlashAddr=0x00000000
[03:26:43.985]    __FlashLen=0x00000000
[03:26:43.985]    __FlashArg=0x00000000
[03:26:43.985]    __FlashOp=0x00000000
[03:26:43.985]    __Result=0x00000000
[03:26:43.985]  </debugvars>
[03:26:43.985]  
[03:26:43.985]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:43.985]    <block atomic="false" info="">
[03:26:43.985]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:43.985]        // -> [isSWJ <= 0x00000001]
[03:26:43.985]      __var hasDormant = __protocol & 0x00020000;
[03:26:43.985]        // -> [hasDormant <= 0x00000000]
[03:26:43.985]      __var protType   = __protocol & 0x0000FFFF;
[03:26:43.985]        // -> [protType <= 0x00000002]
[03:26:43.985]    </block>
[03:26:43.985]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:43.985]      // if-block "protType == 1"
[03:26:43.985]        // =>  FALSE
[03:26:43.985]      // skip if-block "protType == 1"
[03:26:43.985]    </control>
[03:26:43.985]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:43.985]      // if-block "protType == 2"
[03:26:43.985]        // =>  TRUE
[03:26:43.989]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:43.989]        // if-block "isSWJ"
[03:26:43.989]          // =>  TRUE
[03:26:43.989]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:43.989]          // if-block "hasDormant"
[03:26:43.989]            // =>  FALSE
[03:26:43.989]          // skip if-block "hasDormant"
[03:26:43.989]        </control>
[03:26:43.989]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:43.989]          // if-block "!hasDormant"
[03:26:43.989]            // =>  TRUE
[03:26:43.989]          <block atomic="false" info="">
[03:26:43.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:43.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:43.993]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:43.993]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:43.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.993]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:43.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:43.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:43.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:43.998]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.001]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.001]          </block>
[03:26:44.001]          // end if-block "!hasDormant"
[03:26:44.001]        </control>
[03:26:44.001]        // end if-block "isSWJ"
[03:26:44.001]      </control>
[03:26:44.001]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.001]        // if-block "!isSWJ"
[03:26:44.001]          // =>  FALSE
[03:26:44.001]        // skip if-block "!isSWJ"
[03:26:44.001]      </control>
[03:26:44.001]      <block atomic="false" info="">
[03:26:44.001]        ReadDP(0x0);
[03:26:44.005]  
[03:26:44.005]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.005]  
[03:26:44.005]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.005]      </block>
[03:26:44.005]      // end if-block "protType == 2"
[03:26:44.005]    </control>
[03:26:44.005]  </sequence>
[03:26:44.005]  
[03:26:44.058]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.058]  
[03:26:44.058]  <debugvars>
[03:26:44.058]    // Pre-defined
[03:26:44.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.058]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.058]    __dp=0x00000000
[03:26:44.058]    __ap=0x00000000
[03:26:44.058]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.058]    __FlashAddr=0x00000000
[03:26:44.058]    __FlashLen=0x00000000
[03:26:44.058]    __FlashArg=0x00000000
[03:26:44.058]    __FlashOp=0x00000000
[03:26:44.058]    __Result=0x00000000
[03:26:44.058]  </debugvars>
[03:26:44.058]  
[03:26:44.058]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.058]    <block atomic="false" info="">
[03:26:44.058]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.058]        // -> [isSWJ <= 0x00000001]
[03:26:44.058]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.058]        // -> [hasDormant <= 0x00000000]
[03:26:44.058]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.058]        // -> [protType <= 0x00000002]
[03:26:44.058]    </block>
[03:26:44.058]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.058]      // if-block "protType == 1"
[03:26:44.058]        // =>  FALSE
[03:26:44.058]      // skip if-block "protType == 1"
[03:26:44.058]    </control>
[03:26:44.058]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.062]      // if-block "protType == 2"
[03:26:44.062]        // =>  TRUE
[03:26:44.062]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.062]        // if-block "isSWJ"
[03:26:44.062]          // =>  TRUE
[03:26:44.062]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.062]          // if-block "hasDormant"
[03:26:44.062]            // =>  FALSE
[03:26:44.062]          // skip if-block "hasDormant"
[03:26:44.062]        </control>
[03:26:44.062]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.062]          // if-block "!hasDormant"
[03:26:44.062]            // =>  TRUE
[03:26:44.062]          <block atomic="false" info="">
[03:26:44.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.062]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.066]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.070]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.070]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.070]          </block>
[03:26:44.070]          // end if-block "!hasDormant"
[03:26:44.070]        </control>
[03:26:44.070]        // end if-block "isSWJ"
[03:26:44.070]      </control>
[03:26:44.070]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.070]        // if-block "!isSWJ"
[03:26:44.070]          // =>  FALSE
[03:26:44.074]        // skip if-block "!isSWJ"
[03:26:44.074]      </control>
[03:26:44.074]      <block atomic="false" info="">
[03:26:44.074]        ReadDP(0x0);
[03:26:44.082]  
[03:26:44.082]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.082]  
[03:26:44.082]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.082]      </block>
[03:26:44.082]      // end if-block "protType == 2"
[03:26:44.082]    </control>
[03:26:44.082]  </sequence>
[03:26:44.082]  
[03:26:44.143]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.143]  
[03:26:44.143]  <debugvars>
[03:26:44.143]    // Pre-defined
[03:26:44.143]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.143]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.143]    __dp=0x00000000
[03:26:44.143]    __ap=0x00000000
[03:26:44.143]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.143]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.143]    __FlashAddr=0x00000000
[03:26:44.143]    __FlashLen=0x00000000
[03:26:44.143]    __FlashArg=0x00000000
[03:26:44.143]    __FlashOp=0x00000000
[03:26:44.143]    __Result=0x00000000
[03:26:44.143]  </debugvars>
[03:26:44.143]  
[03:26:44.143]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.143]    <block atomic="false" info="">
[03:26:44.143]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.143]        // -> [isSWJ <= 0x00000001]
[03:26:44.143]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.143]        // -> [hasDormant <= 0x00000000]
[03:26:44.147]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.147]        // -> [protType <= 0x00000002]
[03:26:44.147]    </block>
[03:26:44.148]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.148]      // if-block "protType == 1"
[03:26:44.148]        // =>  FALSE
[03:26:44.148]      // skip if-block "protType == 1"
[03:26:44.148]    </control>
[03:26:44.148]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.148]      // if-block "protType == 2"
[03:26:44.148]        // =>  TRUE
[03:26:44.148]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.148]        // if-block "isSWJ"
[03:26:44.148]          // =>  TRUE
[03:26:44.148]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.148]          // if-block "hasDormant"
[03:26:44.148]            // =>  FALSE
[03:26:44.148]          // skip if-block "hasDormant"
[03:26:44.148]        </control>
[03:26:44.148]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.148]          // if-block "!hasDormant"
[03:26:44.148]            // =>  TRUE
[03:26:44.148]          <block atomic="false" info="">
[03:26:44.148]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.151]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.155]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.164]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.167]          </block>
[03:26:44.167]          // end if-block "!hasDormant"
[03:26:44.167]        </control>
[03:26:44.167]        // end if-block "isSWJ"
[03:26:44.167]      </control>
[03:26:44.167]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.167]        // if-block "!isSWJ"
[03:26:44.168]          // =>  FALSE
[03:26:44.168]        // skip if-block "!isSWJ"
[03:26:44.168]      </control>
[03:26:44.168]      <block atomic="false" info="">
[03:26:44.168]        ReadDP(0x0);
[03:26:44.168]  
[03:26:44.168]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.168]  
[03:26:44.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.168]      </block>
[03:26:44.168]      // end if-block "protType == 2"
[03:26:44.168]    </control>
[03:26:44.168]  </sequence>
[03:26:44.168]  
[03:26:44.221]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.221]  
[03:26:44.221]  <debugvars>
[03:26:44.221]    // Pre-defined
[03:26:44.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.221]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.221]    __dp=0x00000000
[03:26:44.221]    __ap=0x00000000
[03:26:44.221]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.221]    __FlashAddr=0x00000000
[03:26:44.221]    __FlashLen=0x00000000
[03:26:44.221]    __FlashArg=0x00000000
[03:26:44.221]    __FlashOp=0x00000000
[03:26:44.221]    __Result=0x00000000
[03:26:44.221]  </debugvars>
[03:26:44.221]  
[03:26:44.221]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.221]    <block atomic="false" info="">
[03:26:44.221]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.224]        // -> [isSWJ <= 0x00000001]
[03:26:44.224]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.224]        // -> [hasDormant <= 0x00000000]
[03:26:44.224]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.224]        // -> [protType <= 0x00000002]
[03:26:44.224]    </block>
[03:26:44.224]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.224]      // if-block "protType == 1"
[03:26:44.224]        // =>  FALSE
[03:26:44.225]      // skip if-block "protType == 1"
[03:26:44.225]    </control>
[03:26:44.225]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.225]      // if-block "protType == 2"
[03:26:44.225]        // =>  TRUE
[03:26:44.225]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.225]        // if-block "isSWJ"
[03:26:44.225]          // =>  TRUE
[03:26:44.226]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.226]          // if-block "hasDormant"
[03:26:44.226]            // =>  FALSE
[03:26:44.226]          // skip if-block "hasDormant"
[03:26:44.226]        </control>
[03:26:44.226]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.226]          // if-block "!hasDormant"
[03:26:44.226]            // =>  TRUE
[03:26:44.226]          <block atomic="false" info="">
[03:26:44.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.229]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.235]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.244]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.244]          </block>
[03:26:44.244]          // end if-block "!hasDormant"
[03:26:44.246]        </control>
[03:26:44.246]        // end if-block "isSWJ"
[03:26:44.246]      </control>
[03:26:44.246]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.246]        // if-block "!isSWJ"
[03:26:44.246]          // =>  FALSE
[03:26:44.247]        // skip if-block "!isSWJ"
[03:26:44.247]      </control>
[03:26:44.247]      <block atomic="false" info="">
[03:26:44.247]        ReadDP(0x0);
[03:26:44.248]  
[03:26:44.248]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.248]  
[03:26:44.248]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.248]      </block>
[03:26:44.248]      // end if-block "protType == 2"
[03:26:44.248]    </control>
[03:26:44.248]  </sequence>
[03:26:44.248]  
[03:26:44.306]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.306]  
[03:26:44.308]  <debugvars>
[03:26:44.308]    // Pre-defined
[03:26:44.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.308]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.308]    __dp=0x00000000
[03:26:44.308]    __ap=0x00000000
[03:26:44.308]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.308]    __FlashAddr=0x00000000
[03:26:44.308]    __FlashLen=0x00000000
[03:26:44.308]    __FlashArg=0x00000000
[03:26:44.308]    __FlashOp=0x00000000
[03:26:44.308]    __Result=0x00000000
[03:26:44.308]  </debugvars>
[03:26:44.308]  
[03:26:44.308]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.308]    <block atomic="false" info="">
[03:26:44.308]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.308]        // -> [isSWJ <= 0x00000001]
[03:26:44.308]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.308]        // -> [hasDormant <= 0x00000000]
[03:26:44.308]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.308]        // -> [protType <= 0x00000002]
[03:26:44.308]    </block>
[03:26:44.311]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.311]      // if-block "protType == 1"
[03:26:44.311]        // =>  FALSE
[03:26:44.311]      // skip if-block "protType == 1"
[03:26:44.311]    </control>
[03:26:44.311]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.311]      // if-block "protType == 2"
[03:26:44.311]        // =>  TRUE
[03:26:44.311]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.311]        // if-block "isSWJ"
[03:26:44.311]          // =>  TRUE
[03:26:44.311]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.311]          // if-block "hasDormant"
[03:26:44.311]            // =>  FALSE
[03:26:44.311]          // skip if-block "hasDormant"
[03:26:44.311]        </control>
[03:26:44.311]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.311]          // if-block "!hasDormant"
[03:26:44.311]            // =>  TRUE
[03:26:44.313]          <block atomic="false" info="">
[03:26:44.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.318]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.323]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.327]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.327]          </block>
[03:26:44.327]          // end if-block "!hasDormant"
[03:26:44.327]        </control>
[03:26:44.327]        // end if-block "isSWJ"
[03:26:44.327]      </control>
[03:26:44.327]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.327]        // if-block "!isSWJ"
[03:26:44.327]          // =>  FALSE
[03:26:44.327]        // skip if-block "!isSWJ"
[03:26:44.327]      </control>
[03:26:44.327]      <block atomic="false" info="">
[03:26:44.327]        ReadDP(0x0);
[03:26:44.327]  
[03:26:44.327]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.327]  
[03:26:44.327]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.327]      </block>
[03:26:44.327]      // end if-block "protType == 2"
[03:26:44.327]    </control>
[03:26:44.327]  </sequence>
[03:26:44.327]  
[03:26:44.379]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.379]  
[03:26:44.379]  <debugvars>
[03:26:44.379]    // Pre-defined
[03:26:44.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.380]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.381]    __dp=0x00000000
[03:26:44.381]    __ap=0x00000000
[03:26:44.381]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.381]    __FlashAddr=0x00000000
[03:26:44.381]    __FlashLen=0x00000000
[03:26:44.381]    __FlashArg=0x00000000
[03:26:44.381]    __FlashOp=0x00000000
[03:26:44.381]    __Result=0x00000000
[03:26:44.381]  </debugvars>
[03:26:44.381]  
[03:26:44.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.382]    <block atomic="false" info="">
[03:26:44.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.382]        // -> [isSWJ <= 0x00000001]
[03:26:44.382]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.382]        // -> [hasDormant <= 0x00000000]
[03:26:44.382]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.382]        // -> [protType <= 0x00000002]
[03:26:44.382]    </block>
[03:26:44.382]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.382]      // if-block "protType == 1"
[03:26:44.382]        // =>  FALSE
[03:26:44.382]      // skip if-block "protType == 1"
[03:26:44.382]    </control>
[03:26:44.383]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.383]      // if-block "protType == 2"
[03:26:44.383]        // =>  TRUE
[03:26:44.383]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.383]        // if-block "isSWJ"
[03:26:44.383]          // =>  TRUE
[03:26:44.384]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.384]          // if-block "hasDormant"
[03:26:44.384]            // =>  FALSE
[03:26:44.384]          // skip if-block "hasDormant"
[03:26:44.385]        </control>
[03:26:44.385]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.385]          // if-block "!hasDormant"
[03:26:44.385]            // =>  TRUE
[03:26:44.385]          <block atomic="false" info="">
[03:26:44.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.396]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.400]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.400]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.400]          </block>
[03:26:44.400]          // end if-block "!hasDormant"
[03:26:44.400]        </control>
[03:26:44.400]        // end if-block "isSWJ"
[03:26:44.400]      </control>
[03:26:44.404]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.404]        // if-block "!isSWJ"
[03:26:44.404]          // =>  FALSE
[03:26:44.404]        // skip if-block "!isSWJ"
[03:26:44.404]      </control>
[03:26:44.404]      <block atomic="false" info="">
[03:26:44.404]        ReadDP(0x0);
[03:26:44.405]  
[03:26:44.405]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.405]  
[03:26:44.405]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.405]      </block>
[03:26:44.405]      // end if-block "protType == 2"
[03:26:44.405]    </control>
[03:26:44.405]  </sequence>
[03:26:44.405]  
[03:26:44.466]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.466]  
[03:26:44.466]  <debugvars>
[03:26:44.466]    // Pre-defined
[03:26:44.466]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.466]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.466]    __dp=0x00000000
[03:26:44.466]    __ap=0x00000000
[03:26:44.466]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.466]    __FlashAddr=0x00000000
[03:26:44.466]    __FlashLen=0x00000000
[03:26:44.466]    __FlashArg=0x00000000
[03:26:44.466]    __FlashOp=0x00000000
[03:26:44.466]    __Result=0x00000000
[03:26:44.466]  </debugvars>
[03:26:44.466]  
[03:26:44.466]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.466]    <block atomic="false" info="">
[03:26:44.466]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.469]        // -> [isSWJ <= 0x00000001]
[03:26:44.469]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.469]        // -> [hasDormant <= 0x00000000]
[03:26:44.469]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.469]        // -> [protType <= 0x00000002]
[03:26:44.469]    </block>
[03:26:44.469]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.469]      // if-block "protType == 1"
[03:26:44.469]        // =>  FALSE
[03:26:44.471]      // skip if-block "protType == 1"
[03:26:44.471]    </control>
[03:26:44.471]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.471]      // if-block "protType == 2"
[03:26:44.471]        // =>  TRUE
[03:26:44.471]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.471]        // if-block "isSWJ"
[03:26:44.472]          // =>  TRUE
[03:26:44.472]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.472]          // if-block "hasDormant"
[03:26:44.472]            // =>  FALSE
[03:26:44.472]          // skip if-block "hasDormant"
[03:26:44.472]        </control>
[03:26:44.472]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.472]          // if-block "!hasDormant"
[03:26:44.472]            // =>  TRUE
[03:26:44.472]          <block atomic="false" info="">
[03:26:44.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.472]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.475]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.475]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.479]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.487]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.487]          </block>
[03:26:44.487]          // end if-block "!hasDormant"
[03:26:44.487]        </control>
[03:26:44.487]        // end if-block "isSWJ"
[03:26:44.487]      </control>
[03:26:44.487]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.487]        // if-block "!isSWJ"
[03:26:44.487]          // =>  FALSE
[03:26:44.487]        // skip if-block "!isSWJ"
[03:26:44.487]      </control>
[03:26:44.487]      <block atomic="false" info="">
[03:26:44.487]        ReadDP(0x0);
[03:26:44.491]  
[03:26:44.491]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.491]  
[03:26:44.491]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.491]      </block>
[03:26:44.491]      // end if-block "protType == 2"
[03:26:44.491]    </control>
[03:26:44.491]  </sequence>
[03:26:44.491]  
[03:26:44.552]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.552]  
[03:26:44.552]  <debugvars>
[03:26:44.552]    // Pre-defined
[03:26:44.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.552]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.553]    __dp=0x00000000
[03:26:44.553]    __ap=0x00000000
[03:26:44.553]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.553]    __FlashAddr=0x00000000
[03:26:44.553]    __FlashLen=0x00000000
[03:26:44.553]    __FlashArg=0x00000000
[03:26:44.553]    __FlashOp=0x00000000
[03:26:44.553]    __Result=0x00000000
[03:26:44.553]  </debugvars>
[03:26:44.553]  
[03:26:44.553]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.554]    <block atomic="false" info="">
[03:26:44.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.554]        // -> [isSWJ <= 0x00000001]
[03:26:44.554]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.554]        // -> [hasDormant <= 0x00000000]
[03:26:44.554]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.554]        // -> [protType <= 0x00000002]
[03:26:44.554]    </block>
[03:26:44.554]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.554]      // if-block "protType == 1"
[03:26:44.554]        // =>  FALSE
[03:26:44.554]      // skip if-block "protType == 1"
[03:26:44.554]    </control>
[03:26:44.554]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.554]      // if-block "protType == 2"
[03:26:44.556]        // =>  TRUE
[03:26:44.556]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.556]        // if-block "isSWJ"
[03:26:44.556]          // =>  TRUE
[03:26:44.556]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.556]          // if-block "hasDormant"
[03:26:44.556]            // =>  FALSE
[03:26:44.556]          // skip if-block "hasDormant"
[03:26:44.556]        </control>
[03:26:44.557]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.557]          // if-block "!hasDormant"
[03:26:44.557]            // =>  TRUE
[03:26:44.557]          <block atomic="false" info="">
[03:26:44.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.560]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.560]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.563]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.563]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.564]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.565]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.565]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.565]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.565]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.568]          </block>
[03:26:44.568]          // end if-block "!hasDormant"
[03:26:44.568]        </control>
[03:26:44.568]        // end if-block "isSWJ"
[03:26:44.568]      </control>
[03:26:44.568]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.568]        // if-block "!isSWJ"
[03:26:44.568]          // =>  FALSE
[03:26:44.568]        // skip if-block "!isSWJ"
[03:26:44.568]      </control>
[03:26:44.568]      <block atomic="false" info="">
[03:26:44.569]        ReadDP(0x0);
[03:26:44.570]  
[03:26:44.570]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.570]  
[03:26:44.570]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.571]      </block>
[03:26:44.571]      // end if-block "protType == 2"
[03:26:44.571]    </control>
[03:26:44.571]  </sequence>
[03:26:44.571]  
[03:26:44.628]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.628]  
[03:26:44.628]  <debugvars>
[03:26:44.628]    // Pre-defined
[03:26:44.628]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.628]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.629]    __dp=0x00000000
[03:26:44.629]    __ap=0x00000000
[03:26:44.629]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.629]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.629]    __FlashAddr=0x00000000
[03:26:44.629]    __FlashLen=0x00000000
[03:26:44.629]    __FlashArg=0x00000000
[03:26:44.629]    __FlashOp=0x00000000
[03:26:44.629]    __Result=0x00000000
[03:26:44.629]  </debugvars>
[03:26:44.629]  
[03:26:44.629]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.629]    <block atomic="false" info="">
[03:26:44.629]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.629]        // -> [isSWJ <= 0x00000001]
[03:26:44.629]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.629]        // -> [hasDormant <= 0x00000000]
[03:26:44.629]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.629]        // -> [protType <= 0x00000002]
[03:26:44.632]    </block>
[03:26:44.632]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.632]      // if-block "protType == 1"
[03:26:44.632]        // =>  FALSE
[03:26:44.632]      // skip if-block "protType == 1"
[03:26:44.632]    </control>
[03:26:44.632]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.632]      // if-block "protType == 2"
[03:26:44.632]        // =>  TRUE
[03:26:44.632]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.632]        // if-block "isSWJ"
[03:26:44.632]          // =>  TRUE
[03:26:44.632]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.632]          // if-block "hasDormant"
[03:26:44.632]            // =>  FALSE
[03:26:44.632]          // skip if-block "hasDormant"
[03:26:44.632]        </control>
[03:26:44.632]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.632]          // if-block "!hasDormant"
[03:26:44.632]            // =>  TRUE
[03:26:44.634]          <block atomic="false" info="">
[03:26:44.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.636]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.637]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.639]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.641]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.641]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.646]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.648]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.648]          </block>
[03:26:44.648]          // end if-block "!hasDormant"
[03:26:44.648]        </control>
[03:26:44.648]        // end if-block "isSWJ"
[03:26:44.648]      </control>
[03:26:44.648]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.649]        // if-block "!isSWJ"
[03:26:44.649]          // =>  FALSE
[03:26:44.649]        // skip if-block "!isSWJ"
[03:26:44.649]      </control>
[03:26:44.649]      <block atomic="false" info="">
[03:26:44.649]        ReadDP(0x0);
[03:26:44.650]  
[03:26:44.650]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.650]  
[03:26:44.652]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.652]      </block>
[03:26:44.652]      // end if-block "protType == 2"
[03:26:44.652]    </control>
[03:26:44.652]  </sequence>
[03:26:44.652]  
[03:26:44.706]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.706]  
[03:26:44.706]  <debugvars>
[03:26:44.706]    // Pre-defined
[03:26:44.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.706]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.706]    __dp=0x00000000
[03:26:44.706]    __ap=0x00000000
[03:26:44.706]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.706]    __FlashAddr=0x00000000
[03:26:44.706]    __FlashLen=0x00000000
[03:26:44.706]    __FlashArg=0x00000000
[03:26:44.706]    __FlashOp=0x00000000
[03:26:44.706]    __Result=0x00000000
[03:26:44.706]  </debugvars>
[03:26:44.706]  
[03:26:44.706]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.706]    <block atomic="false" info="">
[03:26:44.706]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.706]        // -> [isSWJ <= 0x00000001]
[03:26:44.706]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.706]        // -> [hasDormant <= 0x00000000]
[03:26:44.706]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.706]        // -> [protType <= 0x00000002]
[03:26:44.706]    </block>
[03:26:44.706]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.706]      // if-block "protType == 1"
[03:26:44.706]        // =>  FALSE
[03:26:44.706]      // skip if-block "protType == 1"
[03:26:44.706]    </control>
[03:26:44.706]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.706]      // if-block "protType == 2"
[03:26:44.706]        // =>  TRUE
[03:26:44.710]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.710]        // if-block "isSWJ"
[03:26:44.710]          // =>  TRUE
[03:26:44.710]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.710]          // if-block "hasDormant"
[03:26:44.710]            // =>  FALSE
[03:26:44.711]          // skip if-block "hasDormant"
[03:26:44.711]        </control>
[03:26:44.711]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.711]          // if-block "!hasDormant"
[03:26:44.711]            // =>  TRUE
[03:26:44.711]          <block atomic="false" info="">
[03:26:44.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.714]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.716]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.718]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.723]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.726]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.726]          </block>
[03:26:44.726]          // end if-block "!hasDormant"
[03:26:44.726]        </control>
[03:26:44.726]        // end if-block "isSWJ"
[03:26:44.726]      </control>
[03:26:44.726]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.727]        // if-block "!isSWJ"
[03:26:44.727]          // =>  FALSE
[03:26:44.727]        // skip if-block "!isSWJ"
[03:26:44.727]      </control>
[03:26:44.727]      <block atomic="false" info="">
[03:26:44.727]        ReadDP(0x0);
[03:26:44.731]  
[03:26:44.731]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.731]  
[03:26:44.731]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.731]      </block>
[03:26:44.731]      // end if-block "protType == 2"
[03:26:44.731]    </control>
[03:26:44.731]  </sequence>
[03:26:44.731]  
[03:26:44.782]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.782]  
[03:26:44.782]  <debugvars>
[03:26:44.782]    // Pre-defined
[03:26:44.782]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.782]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.782]    __dp=0x00000000
[03:26:44.784]    __ap=0x00000000
[03:26:44.784]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.784]    __FlashAddr=0x00000000
[03:26:44.784]    __FlashLen=0x00000000
[03:26:44.784]    __FlashArg=0x00000000
[03:26:44.784]    __FlashOp=0x00000000
[03:26:44.784]    __Result=0x00000000
[03:26:44.784]  </debugvars>
[03:26:44.784]  
[03:26:44.784]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.784]    <block atomic="false" info="">
[03:26:44.784]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.784]        // -> [isSWJ <= 0x00000001]
[03:26:44.784]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.784]        // -> [hasDormant <= 0x00000000]
[03:26:44.784]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.784]        // -> [protType <= 0x00000002]
[03:26:44.784]    </block>
[03:26:44.784]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.784]      // if-block "protType == 1"
[03:26:44.784]        // =>  FALSE
[03:26:44.784]      // skip if-block "protType == 1"
[03:26:44.784]    </control>
[03:26:44.784]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.784]      // if-block "protType == 2"
[03:26:44.784]        // =>  TRUE
[03:26:44.787]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.787]        // if-block "isSWJ"
[03:26:44.787]          // =>  TRUE
[03:26:44.787]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.787]          // if-block "hasDormant"
[03:26:44.787]            // =>  FALSE
[03:26:44.787]          // skip if-block "hasDormant"
[03:26:44.787]        </control>
[03:26:44.787]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.787]          // if-block "!hasDormant"
[03:26:44.787]            // =>  TRUE
[03:26:44.787]          <block atomic="false" info="">
[03:26:44.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.787]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.795]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.795]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.799]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.799]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.803]          </block>
[03:26:44.803]          // end if-block "!hasDormant"
[03:26:44.803]        </control>
[03:26:44.803]        // end if-block "isSWJ"
[03:26:44.803]      </control>
[03:26:44.803]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.803]        // if-block "!isSWJ"
[03:26:44.803]          // =>  FALSE
[03:26:44.803]        // skip if-block "!isSWJ"
[03:26:44.803]      </control>
[03:26:44.803]      <block atomic="false" info="">
[03:26:44.803]        ReadDP(0x0);
[03:26:44.808]  
[03:26:44.808]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.808]  
[03:26:44.808]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.808]      </block>
[03:26:44.808]      // end if-block "protType == 2"
[03:26:44.808]    </control>
[03:26:44.808]  </sequence>
[03:26:44.808]  
[03:26:44.868]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.868]  
[03:26:44.868]  <debugvars>
[03:26:44.868]    // Pre-defined
[03:26:44.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.868]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.868]    __dp=0x00000000
[03:26:44.868]    __ap=0x00000000
[03:26:44.868]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.868]    __FlashAddr=0x00000000
[03:26:44.868]    __FlashLen=0x00000000
[03:26:44.868]    __FlashArg=0x00000000
[03:26:44.868]    __FlashOp=0x00000000
[03:26:44.868]    __Result=0x00000000
[03:26:44.868]  </debugvars>
[03:26:44.868]  
[03:26:44.868]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.868]    <block atomic="false" info="">
[03:26:44.868]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.868]        // -> [isSWJ <= 0x00000001]
[03:26:44.868]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.868]        // -> [hasDormant <= 0x00000000]
[03:26:44.873]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.873]        // -> [protType <= 0x00000002]
[03:26:44.873]    </block>
[03:26:44.873]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.873]      // if-block "protType == 1"
[03:26:44.873]        // =>  FALSE
[03:26:44.873]      // skip if-block "protType == 1"
[03:26:44.873]    </control>
[03:26:44.873]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.873]      // if-block "protType == 2"
[03:26:44.873]        // =>  TRUE
[03:26:44.873]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.873]        // if-block "isSWJ"
[03:26:44.873]          // =>  TRUE
[03:26:44.873]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.873]          // if-block "hasDormant"
[03:26:44.873]            // =>  FALSE
[03:26:44.873]          // skip if-block "hasDormant"
[03:26:44.873]        </control>
[03:26:44.873]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.873]          // if-block "!hasDormant"
[03:26:44.873]            // =>  TRUE
[03:26:44.873]          <block atomic="false" info="">
[03:26:44.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.877]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.877]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.877]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.881]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.893]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.897]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.897]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.897]          </block>
[03:26:44.897]          // end if-block "!hasDormant"
[03:26:44.897]        </control>
[03:26:44.897]        // end if-block "isSWJ"
[03:26:44.897]      </control>
[03:26:44.901]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.901]        // if-block "!isSWJ"
[03:26:44.901]          // =>  FALSE
[03:26:44.901]        // skip if-block "!isSWJ"
[03:26:44.901]      </control>
[03:26:44.901]      <block atomic="false" info="">
[03:26:44.901]        ReadDP(0x0);
[03:26:44.901]  
[03:26:44.901]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.901]  
[03:26:44.901]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.901]      </block>
[03:26:44.901]      // end if-block "protType == 2"
[03:26:44.901]    </control>
[03:26:44.901]  </sequence>
[03:26:44.901]  
[03:26:44.958]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:44.958]  
[03:26:44.958]  <debugvars>
[03:26:44.958]    // Pre-defined
[03:26:44.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:44.958]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:44.958]    __dp=0x00000000
[03:26:44.958]    __ap=0x00000000
[03:26:44.958]    __traceout=0x00000000      (Trace Disabled)
[03:26:44.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:44.958]    __FlashAddr=0x00000000
[03:26:44.958]    __FlashLen=0x00000000
[03:26:44.958]    __FlashArg=0x00000000
[03:26:44.958]    __FlashOp=0x00000000
[03:26:44.958]    __Result=0x00000000
[03:26:44.958]  </debugvars>
[03:26:44.958]  
[03:26:44.958]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:44.958]    <block atomic="false" info="">
[03:26:44.958]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:44.958]        // -> [isSWJ <= 0x00000001]
[03:26:44.958]      __var hasDormant = __protocol & 0x00020000;
[03:26:44.958]        // -> [hasDormant <= 0x00000000]
[03:26:44.958]      __var protType   = __protocol & 0x0000FFFF;
[03:26:44.958]        // -> [protType <= 0x00000002]
[03:26:44.958]    </block>
[03:26:44.958]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:44.958]      // if-block "protType == 1"
[03:26:44.958]        // =>  FALSE
[03:26:44.958]      // skip if-block "protType == 1"
[03:26:44.958]    </control>
[03:26:44.958]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:44.958]      // if-block "protType == 2"
[03:26:44.962]        // =>  TRUE
[03:26:44.962]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:44.962]        // if-block "isSWJ"
[03:26:44.962]          // =>  TRUE
[03:26:44.962]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:44.962]          // if-block "hasDormant"
[03:26:44.962]            // =>  FALSE
[03:26:44.962]          // skip if-block "hasDormant"
[03:26:44.962]        </control>
[03:26:44.963]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:44.963]          // if-block "!hasDormant"
[03:26:44.963]            // =>  TRUE
[03:26:44.963]          <block atomic="false" info="">
[03:26:44.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:44.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.966]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:44.966]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:44.966]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:44.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.969]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:44.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:44.972]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:44.972]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:44.972]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:44.975]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:44.975]          </block>
[03:26:44.975]          // end if-block "!hasDormant"
[03:26:44.975]        </control>
[03:26:44.975]        // end if-block "isSWJ"
[03:26:44.975]      </control>
[03:26:44.975]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:44.975]        // if-block "!isSWJ"
[03:26:44.975]          // =>  FALSE
[03:26:44.975]        // skip if-block "!isSWJ"
[03:26:44.975]      </control>
[03:26:44.975]      <block atomic="false" info="">
[03:26:44.975]        ReadDP(0x0);
[03:26:44.975]  
[03:26:44.975]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:44.975]  
[03:26:44.975]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:44.975]      </block>
[03:26:44.975]      // end if-block "protType == 2"
[03:26:44.975]    </control>
[03:26:44.979]  </sequence>
[03:26:44.979]  
[03:26:45.034]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.034]  
[03:26:45.034]  <debugvars>
[03:26:45.034]    // Pre-defined
[03:26:45.034]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.034]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.034]    __dp=0x00000000
[03:26:45.034]    __ap=0x00000000
[03:26:45.034]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.034]    __FlashAddr=0x00000000
[03:26:45.034]    __FlashLen=0x00000000
[03:26:45.034]    __FlashArg=0x00000000
[03:26:45.034]    __FlashOp=0x00000000
[03:26:45.036]    __Result=0x00000000
[03:26:45.036]  </debugvars>
[03:26:45.036]  
[03:26:45.036]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.036]    <block atomic="false" info="">
[03:26:45.036]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.036]        // -> [isSWJ <= 0x00000001]
[03:26:45.037]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.037]        // -> [hasDormant <= 0x00000000]
[03:26:45.037]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.037]        // -> [protType <= 0x00000002]
[03:26:45.037]    </block>
[03:26:45.037]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.038]      // if-block "protType == 1"
[03:26:45.038]        // =>  FALSE
[03:26:45.038]      // skip if-block "protType == 1"
[03:26:45.038]    </control>
[03:26:45.038]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.038]      // if-block "protType == 2"
[03:26:45.038]        // =>  TRUE
[03:26:45.038]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.038]        // if-block "isSWJ"
[03:26:45.038]          // =>  TRUE
[03:26:45.038]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.038]          // if-block "hasDormant"
[03:26:45.038]            // =>  FALSE
[03:26:45.038]          // skip if-block "hasDormant"
[03:26:45.038]        </control>
[03:26:45.038]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.038]          // if-block "!hasDormant"
[03:26:45.038]            // =>  TRUE
[03:26:45.040]          <block atomic="false" info="">
[03:26:45.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.041]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.048]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.050]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.059]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.063]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.063]          </block>
[03:26:45.063]          // end if-block "!hasDormant"
[03:26:45.063]        </control>
[03:26:45.063]        // end if-block "isSWJ"
[03:26:45.063]      </control>
[03:26:45.063]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.063]        // if-block "!isSWJ"
[03:26:45.065]          // =>  FALSE
[03:26:45.065]        // skip if-block "!isSWJ"
[03:26:45.065]      </control>
[03:26:45.065]      <block atomic="false" info="">
[03:26:45.065]        ReadDP(0x0);
[03:26:45.067]  
[03:26:45.067]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.067]  
[03:26:45.067]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.067]      </block>
[03:26:45.067]      // end if-block "protType == 2"
[03:26:45.067]    </control>
[03:26:45.067]  </sequence>
[03:26:45.067]  
[03:26:45.121]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.121]  
[03:26:45.122]  <debugvars>
[03:26:45.122]    // Pre-defined
[03:26:45.122]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.122]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.122]    __dp=0x00000000
[03:26:45.122]    __ap=0x00000000
[03:26:45.122]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.122]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.122]    __FlashAddr=0x00000000
[03:26:45.122]    __FlashLen=0x00000000
[03:26:45.122]    __FlashArg=0x00000000
[03:26:45.122]    __FlashOp=0x00000000
[03:26:45.124]    __Result=0x00000000
[03:26:45.124]  </debugvars>
[03:26:45.124]  
[03:26:45.124]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.124]    <block atomic="false" info="">
[03:26:45.124]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.124]        // -> [isSWJ <= 0x00000001]
[03:26:45.124]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.124]        // -> [hasDormant <= 0x00000000]
[03:26:45.124]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.124]        // -> [protType <= 0x00000002]
[03:26:45.124]    </block>
[03:26:45.125]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.125]      // if-block "protType == 1"
[03:26:45.125]        // =>  FALSE
[03:26:45.125]      // skip if-block "protType == 1"
[03:26:45.125]    </control>
[03:26:45.125]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.125]      // if-block "protType == 2"
[03:26:45.125]        // =>  TRUE
[03:26:45.125]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.125]        // if-block "isSWJ"
[03:26:45.125]          // =>  TRUE
[03:26:45.125]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.125]          // if-block "hasDormant"
[03:26:45.125]            // =>  FALSE
[03:26:45.125]          // skip if-block "hasDormant"
[03:26:45.125]        </control>
[03:26:45.125]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.125]          // if-block "!hasDormant"
[03:26:45.127]            // =>  TRUE
[03:26:45.127]          <block atomic="false" info="">
[03:26:45.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.130]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.135]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.135]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.140]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.143]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.143]          </block>
[03:26:45.143]          // end if-block "!hasDormant"
[03:26:45.143]        </control>
[03:26:45.143]        // end if-block "isSWJ"
[03:26:45.143]      </control>
[03:26:45.143]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.143]        // if-block "!isSWJ"
[03:26:45.143]          // =>  FALSE
[03:26:45.143]        // skip if-block "!isSWJ"
[03:26:45.143]      </control>
[03:26:45.143]      <block atomic="false" info="">
[03:26:45.143]        ReadDP(0x0);
[03:26:45.146]  
[03:26:45.146]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.146]  
[03:26:45.146]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.146]      </block>
[03:26:45.146]      // end if-block "protType == 2"
[03:26:45.146]    </control>
[03:26:45.146]  </sequence>
[03:26:45.146]  
[03:26:45.208]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.208]  
[03:26:45.208]  <debugvars>
[03:26:45.208]    // Pre-defined
[03:26:45.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.208]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.208]    __dp=0x00000000
[03:26:45.208]    __ap=0x00000000
[03:26:45.208]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.210]    __FlashAddr=0x00000000
[03:26:45.210]    __FlashLen=0x00000000
[03:26:45.210]    __FlashArg=0x00000000
[03:26:45.210]    __FlashOp=0x00000000
[03:26:45.210]    __Result=0x00000000
[03:26:45.210]  </debugvars>
[03:26:45.210]  
[03:26:45.210]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.210]    <block atomic="false" info="">
[03:26:45.210]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.210]        // -> [isSWJ <= 0x00000001]
[03:26:45.210]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.210]        // -> [hasDormant <= 0x00000000]
[03:26:45.210]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.210]        // -> [protType <= 0x00000002]
[03:26:45.210]    </block>
[03:26:45.210]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.210]      // if-block "protType == 1"
[03:26:45.210]        // =>  FALSE
[03:26:45.210]      // skip if-block "protType == 1"
[03:26:45.210]    </control>
[03:26:45.210]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.210]      // if-block "protType == 2"
[03:26:45.213]        // =>  TRUE
[03:26:45.213]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.213]        // if-block "isSWJ"
[03:26:45.213]          // =>  TRUE
[03:26:45.213]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.213]          // if-block "hasDormant"
[03:26:45.213]            // =>  FALSE
[03:26:45.213]          // skip if-block "hasDormant"
[03:26:45.213]        </control>
[03:26:45.213]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.214]          // if-block "!hasDormant"
[03:26:45.214]            // =>  TRUE
[03:26:45.214]          <block atomic="false" info="">
[03:26:45.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.220]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.222]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.223]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.225]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.225]          </block>
[03:26:45.225]          // end if-block "!hasDormant"
[03:26:45.225]        </control>
[03:26:45.225]        // end if-block "isSWJ"
[03:26:45.226]      </control>
[03:26:45.226]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.226]        // if-block "!isSWJ"
[03:26:45.226]          // =>  FALSE
[03:26:45.226]        // skip if-block "!isSWJ"
[03:26:45.226]      </control>
[03:26:45.226]      <block atomic="false" info="">
[03:26:45.226]        ReadDP(0x0);
[03:26:45.230]  
[03:26:45.230]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.230]  
[03:26:45.230]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.230]      </block>
[03:26:45.230]      // end if-block "protType == 2"
[03:26:45.230]    </control>
[03:26:45.231]  </sequence>
[03:26:45.231]  
[03:26:45.291]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.291]  
[03:26:45.291]  <debugvars>
[03:26:45.291]    // Pre-defined
[03:26:45.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.291]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.291]    __dp=0x00000000
[03:26:45.291]    __ap=0x00000000
[03:26:45.291]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.291]    __FlashAddr=0x00000000
[03:26:45.291]    __FlashLen=0x00000000
[03:26:45.291]    __FlashArg=0x00000000
[03:26:45.291]    __FlashOp=0x00000000
[03:26:45.291]    __Result=0x00000000
[03:26:45.291]  </debugvars>
[03:26:45.291]  
[03:26:45.291]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.291]    <block atomic="false" info="">
[03:26:45.291]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.291]        // -> [isSWJ <= 0x00000001]
[03:26:45.291]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.291]        // -> [hasDormant <= 0x00000000]
[03:26:45.291]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.291]        // -> [protType <= 0x00000002]
[03:26:45.291]    </block>
[03:26:45.291]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.291]      // if-block "protType == 1"
[03:26:45.291]        // =>  FALSE
[03:26:45.291]      // skip if-block "protType == 1"
[03:26:45.291]    </control>
[03:26:45.291]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.291]      // if-block "protType == 2"
[03:26:45.291]        // =>  TRUE
[03:26:45.291]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.295]        // if-block "isSWJ"
[03:26:45.295]          // =>  TRUE
[03:26:45.295]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.295]          // if-block "hasDormant"
[03:26:45.295]            // =>  FALSE
[03:26:45.295]          // skip if-block "hasDormant"
[03:26:45.295]        </control>
[03:26:45.295]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.295]          // if-block "!hasDormant"
[03:26:45.295]            // =>  TRUE
[03:26:45.295]          <block atomic="false" info="">
[03:26:45.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.299]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.307]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.311]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.311]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.321]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.321]          </block>
[03:26:45.321]          // end if-block "!hasDormant"
[03:26:45.321]        </control>
[03:26:45.322]        // end if-block "isSWJ"
[03:26:45.322]      </control>
[03:26:45.322]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.322]        // if-block "!isSWJ"
[03:26:45.322]          // =>  FALSE
[03:26:45.322]        // skip if-block "!isSWJ"
[03:26:45.322]      </control>
[03:26:45.322]      <block atomic="false" info="">
[03:26:45.322]        ReadDP(0x0);
[03:26:45.323]  
[03:26:45.323]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.323]  
[03:26:45.323]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.324]      </block>
[03:26:45.324]      // end if-block "protType == 2"
[03:26:45.324]    </control>
[03:26:45.324]  </sequence>
[03:26:45.324]  
[03:26:45.377]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.377]  
[03:26:45.377]  <debugvars>
[03:26:45.377]    // Pre-defined
[03:26:45.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.378]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.378]    __dp=0x00000000
[03:26:45.378]    __ap=0x00000000
[03:26:45.378]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.378]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.378]    __FlashAddr=0x00000000
[03:26:45.378]    __FlashLen=0x00000000
[03:26:45.378]    __FlashArg=0x00000000
[03:26:45.378]    __FlashOp=0x00000000
[03:26:45.378]    __Result=0x00000000
[03:26:45.378]  </debugvars>
[03:26:45.378]  
[03:26:45.378]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.379]    <block atomic="false" info="">
[03:26:45.379]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.379]        // -> [isSWJ <= 0x00000001]
[03:26:45.379]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.379]        // -> [hasDormant <= 0x00000000]
[03:26:45.379]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.379]        // -> [protType <= 0x00000002]
[03:26:45.379]    </block>
[03:26:45.379]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.379]      // if-block "protType == 1"
[03:26:45.379]        // =>  FALSE
[03:26:45.379]      // skip if-block "protType == 1"
[03:26:45.379]    </control>
[03:26:45.381]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.381]      // if-block "protType == 2"
[03:26:45.381]        // =>  TRUE
[03:26:45.381]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.381]        // if-block "isSWJ"
[03:26:45.381]          // =>  TRUE
[03:26:45.381]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.381]          // if-block "hasDormant"
[03:26:45.381]            // =>  FALSE
[03:26:45.381]          // skip if-block "hasDormant"
[03:26:45.381]        </control>
[03:26:45.381]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.381]          // if-block "!hasDormant"
[03:26:45.381]            // =>  TRUE
[03:26:45.381]          <block atomic="false" info="">
[03:26:45.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.383]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.386]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.388]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.393]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.393]          </block>
[03:26:45.393]          // end if-block "!hasDormant"
[03:26:45.393]        </control>
[03:26:45.393]        // end if-block "isSWJ"
[03:26:45.393]      </control>
[03:26:45.393]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.393]        // if-block "!isSWJ"
[03:26:45.393]          // =>  FALSE
[03:26:45.393]        // skip if-block "!isSWJ"
[03:26:45.393]      </control>
[03:26:45.393]      <block atomic="false" info="">
[03:26:45.395]        ReadDP(0x0);
[03:26:45.395]  
[03:26:45.395]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.395]  
[03:26:45.395]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.395]      </block>
[03:26:45.397]      // end if-block "protType == 2"
[03:26:45.397]    </control>
[03:26:45.397]  </sequence>
[03:26:45.397]  
[03:26:45.455]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.455]  
[03:26:45.455]  <debugvars>
[03:26:45.455]    // Pre-defined
[03:26:45.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.455]    __dp=0x00000000
[03:26:45.455]    __ap=0x00000000
[03:26:45.455]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.455]    __FlashAddr=0x00000000
[03:26:45.455]    __FlashLen=0x00000000
[03:26:45.455]    __FlashArg=0x00000000
[03:26:45.455]    __FlashOp=0x00000000
[03:26:45.455]    __Result=0x00000000
[03:26:45.455]  </debugvars>
[03:26:45.455]  
[03:26:45.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.455]    <block atomic="false" info="">
[03:26:45.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.455]        // -> [isSWJ <= 0x00000001]
[03:26:45.455]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.455]        // -> [hasDormant <= 0x00000000]
[03:26:45.455]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.455]        // -> [protType <= 0x00000002]
[03:26:45.455]    </block>
[03:26:45.455]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.455]      // if-block "protType == 1"
[03:26:45.455]        // =>  FALSE
[03:26:45.455]      // skip if-block "protType == 1"
[03:26:45.455]    </control>
[03:26:45.455]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.455]      // if-block "protType == 2"
[03:26:45.455]        // =>  TRUE
[03:26:45.459]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.459]        // if-block "isSWJ"
[03:26:45.459]          // =>  TRUE
[03:26:45.459]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.459]          // if-block "hasDormant"
[03:26:45.459]            // =>  FALSE
[03:26:45.459]          // skip if-block "hasDormant"
[03:26:45.459]        </control>
[03:26:45.459]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.459]          // if-block "!hasDormant"
[03:26:45.459]            // =>  TRUE
[03:26:45.459]          <block atomic="false" info="">
[03:26:45.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.461]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.466]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.466]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.466]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.471]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.471]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.471]          </block>
[03:26:45.471]          // end if-block "!hasDormant"
[03:26:45.471]        </control>
[03:26:45.471]        // end if-block "isSWJ"
[03:26:45.471]      </control>
[03:26:45.471]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.471]        // if-block "!isSWJ"
[03:26:45.471]          // =>  FALSE
[03:26:45.471]        // skip if-block "!isSWJ"
[03:26:45.471]      </control>
[03:26:45.471]      <block atomic="false" info="">
[03:26:45.471]        ReadDP(0x0);
[03:26:45.474]  
[03:26:45.474]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.474]  
[03:26:45.474]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.474]      </block>
[03:26:45.474]      // end if-block "protType == 2"
[03:26:45.474]    </control>
[03:26:45.474]  </sequence>
[03:26:45.474]  
[03:26:45.533]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.533]  
[03:26:45.533]  <debugvars>
[03:26:45.533]    // Pre-defined
[03:26:45.533]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.533]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.533]    __dp=0x00000000
[03:26:45.533]    __ap=0x00000000
[03:26:45.533]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.534]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.534]    __FlashAddr=0x00000000
[03:26:45.534]    __FlashLen=0x00000000
[03:26:45.534]    __FlashArg=0x00000000
[03:26:45.534]    __FlashOp=0x00000000
[03:26:45.534]    __Result=0x00000000
[03:26:45.534]  </debugvars>
[03:26:45.534]  
[03:26:45.534]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.534]    <block atomic="false" info="">
[03:26:45.534]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.534]        // -> [isSWJ <= 0x00000001]
[03:26:45.534]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.534]        // -> [hasDormant <= 0x00000000]
[03:26:45.534]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.534]        // -> [protType <= 0x00000002]
[03:26:45.534]    </block>
[03:26:45.534]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.534]      // if-block "protType == 1"
[03:26:45.534]        // =>  FALSE
[03:26:45.534]      // skip if-block "protType == 1"
[03:26:45.534]    </control>
[03:26:45.534]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.534]      // if-block "protType == 2"
[03:26:45.534]        // =>  TRUE
[03:26:45.534]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.534]        // if-block "isSWJ"
[03:26:45.534]          // =>  TRUE
[03:26:45.534]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.534]          // if-block "hasDormant"
[03:26:45.534]            // =>  FALSE
[03:26:45.534]          // skip if-block "hasDormant"
[03:26:45.534]        </control>
[03:26:45.537]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.537]          // if-block "!hasDormant"
[03:26:45.537]            // =>  TRUE
[03:26:45.537]          <block atomic="false" info="">
[03:26:45.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.540]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.541]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.544]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.554]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.555]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.555]          </block>
[03:26:45.555]          // end if-block "!hasDormant"
[03:26:45.555]        </control>
[03:26:45.555]        // end if-block "isSWJ"
[03:26:45.555]      </control>
[03:26:45.555]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.555]        // if-block "!isSWJ"
[03:26:45.555]          // =>  FALSE
[03:26:45.555]        // skip if-block "!isSWJ"
[03:26:45.555]      </control>
[03:26:45.557]      <block atomic="false" info="">
[03:26:45.557]        ReadDP(0x0);
[03:26:45.558]  
[03:26:45.558]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.558]  
[03:26:45.558]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.558]      </block>
[03:26:45.558]      // end if-block "protType == 2"
[03:26:45.558]    </control>
[03:26:45.558]  </sequence>
[03:26:45.558]  
[03:26:45.621]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.621]  
[03:26:45.621]  <debugvars>
[03:26:45.621]    // Pre-defined
[03:26:45.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.621]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.621]    __dp=0x00000000
[03:26:45.621]    __ap=0x00000000
[03:26:45.621]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.622]    __FlashAddr=0x00000000
[03:26:45.622]    __FlashLen=0x00000000
[03:26:45.622]    __FlashArg=0x00000000
[03:26:45.622]    __FlashOp=0x00000000
[03:26:45.622]    __Result=0x00000000
[03:26:45.622]  </debugvars>
[03:26:45.622]  
[03:26:45.622]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.622]    <block atomic="false" info="">
[03:26:45.622]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.622]        // -> [isSWJ <= 0x00000001]
[03:26:45.622]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.622]        // -> [hasDormant <= 0x00000000]
[03:26:45.622]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.622]        // -> [protType <= 0x00000002]
[03:26:45.622]    </block>
[03:26:45.622]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.622]      // if-block "protType == 1"
[03:26:45.622]        // =>  FALSE
[03:26:45.622]      // skip if-block "protType == 1"
[03:26:45.622]    </control>
[03:26:45.622]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.622]      // if-block "protType == 2"
[03:26:45.624]        // =>  TRUE
[03:26:45.624]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.624]        // if-block "isSWJ"
[03:26:45.624]          // =>  TRUE
[03:26:45.624]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.624]          // if-block "hasDormant"
[03:26:45.624]            // =>  FALSE
[03:26:45.624]          // skip if-block "hasDormant"
[03:26:45.624]        </control>
[03:26:45.624]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.624]          // if-block "!hasDormant"
[03:26:45.624]            // =>  TRUE
[03:26:45.625]          <block atomic="false" info="">
[03:26:45.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.629]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.631]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.631]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.633]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.637]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.637]          </block>
[03:26:45.637]          // end if-block "!hasDormant"
[03:26:45.637]        </control>
[03:26:45.637]        // end if-block "isSWJ"
[03:26:45.637]      </control>
[03:26:45.637]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.641]        // if-block "!isSWJ"
[03:26:45.642]          // =>  FALSE
[03:26:45.642]        // skip if-block "!isSWJ"
[03:26:45.642]      </control>
[03:26:45.642]      <block atomic="false" info="">
[03:26:45.642]        ReadDP(0x0);
[03:26:45.642]  
[03:26:45.642]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.642]  
[03:26:45.642]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.642]      </block>
[03:26:45.642]      // end if-block "protType == 2"
[03:26:45.642]    </control>
[03:26:45.642]  </sequence>
[03:26:45.642]  
[03:26:45.698]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.698]  
[03:26:45.698]  <debugvars>
[03:26:45.699]    // Pre-defined
[03:26:45.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.699]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.699]    __dp=0x00000000
[03:26:45.699]    __ap=0x00000000
[03:26:45.699]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.699]    __FlashAddr=0x00000000
[03:26:45.699]    __FlashLen=0x00000000
[03:26:45.699]    __FlashArg=0x00000000
[03:26:45.699]    __FlashOp=0x00000000
[03:26:45.699]    __Result=0x00000000
[03:26:45.700]  </debugvars>
[03:26:45.700]  
[03:26:45.700]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.700]    <block atomic="false" info="">
[03:26:45.700]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.700]        // -> [isSWJ <= 0x00000001]
[03:26:45.700]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.700]        // -> [hasDormant <= 0x00000000]
[03:26:45.700]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.700]        // -> [protType <= 0x00000002]
[03:26:45.700]    </block>
[03:26:45.700]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.702]      // if-block "protType == 1"
[03:26:45.702]        // =>  FALSE
[03:26:45.702]      // skip if-block "protType == 1"
[03:26:45.702]    </control>
[03:26:45.703]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.703]      // if-block "protType == 2"
[03:26:45.703]        // =>  TRUE
[03:26:45.703]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.703]        // if-block "isSWJ"
[03:26:45.703]          // =>  TRUE
[03:26:45.703]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.703]          // if-block "hasDormant"
[03:26:45.703]            // =>  FALSE
[03:26:45.703]          // skip if-block "hasDormant"
[03:26:45.703]        </control>
[03:26:45.703]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.703]          // if-block "!hasDormant"
[03:26:45.703]            // =>  TRUE
[03:26:45.703]          <block atomic="false" info="">
[03:26:45.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.706]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.706]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.706]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.706]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.710]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.713]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.713]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.716]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.716]          </block>
[03:26:45.716]          // end if-block "!hasDormant"
[03:26:45.716]        </control>
[03:26:45.716]        // end if-block "isSWJ"
[03:26:45.716]      </control>
[03:26:45.716]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.716]        // if-block "!isSWJ"
[03:26:45.716]          // =>  FALSE
[03:26:45.716]        // skip if-block "!isSWJ"
[03:26:45.716]      </control>
[03:26:45.716]      <block atomic="false" info="">
[03:26:45.716]        ReadDP(0x0);
[03:26:45.724]  
[03:26:45.724]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.724]  
[03:26:45.724]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.724]      </block>
[03:26:45.724]      // end if-block "protType == 2"
[03:26:45.726]    </control>
[03:26:45.726]  </sequence>
[03:26:45.726]  
[03:26:45.783]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.783]  
[03:26:45.783]  <debugvars>
[03:26:45.783]    // Pre-defined
[03:26:45.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.783]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.783]    __dp=0x00000000
[03:26:45.783]    __ap=0x00000000
[03:26:45.783]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.783]    __FlashAddr=0x00000000
[03:26:45.783]    __FlashLen=0x00000000
[03:26:45.783]    __FlashArg=0x00000000
[03:26:45.783]    __FlashOp=0x00000000
[03:26:45.783]    __Result=0x00000000
[03:26:45.783]  </debugvars>
[03:26:45.783]  
[03:26:45.783]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.783]    <block atomic="false" info="">
[03:26:45.783]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.783]        // -> [isSWJ <= 0x00000001]
[03:26:45.783]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.783]        // -> [hasDormant <= 0x00000000]
[03:26:45.783]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.783]        // -> [protType <= 0x00000002]
[03:26:45.783]    </block>
[03:26:45.783]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.783]      // if-block "protType == 1"
[03:26:45.783]        // =>  FALSE
[03:26:45.783]      // skip if-block "protType == 1"
[03:26:45.783]    </control>
[03:26:45.783]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.783]      // if-block "protType == 2"
[03:26:45.783]        // =>  TRUE
[03:26:45.783]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.783]        // if-block "isSWJ"
[03:26:45.787]          // =>  TRUE
[03:26:45.787]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.787]          // if-block "hasDormant"
[03:26:45.787]            // =>  FALSE
[03:26:45.787]          // skip if-block "hasDormant"
[03:26:45.787]        </control>
[03:26:45.787]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.787]          // if-block "!hasDormant"
[03:26:45.787]            // =>  TRUE
[03:26:45.787]          <block atomic="false" info="">
[03:26:45.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.787]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.795]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.799]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.799]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.799]          </block>
[03:26:45.799]          // end if-block "!hasDormant"
[03:26:45.799]        </control>
[03:26:45.799]        // end if-block "isSWJ"
[03:26:45.799]      </control>
[03:26:45.799]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.799]        // if-block "!isSWJ"
[03:26:45.799]          // =>  FALSE
[03:26:45.803]        // skip if-block "!isSWJ"
[03:26:45.803]      </control>
[03:26:45.803]      <block atomic="false" info="">
[03:26:45.803]        ReadDP(0x0);
[03:26:45.803]  
[03:26:45.803]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.803]  
[03:26:45.803]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.803]      </block>
[03:26:45.803]      // end if-block "protType == 2"
[03:26:45.803]    </control>
[03:26:45.803]  </sequence>
[03:26:45.803]  
[03:26:45.855]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.855]  
[03:26:45.855]  <debugvars>
[03:26:45.855]    // Pre-defined
[03:26:45.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.855]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.855]    __dp=0x00000000
[03:26:45.855]    __ap=0x00000000
[03:26:45.855]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.855]    __FlashAddr=0x00000000
[03:26:45.855]    __FlashLen=0x00000000
[03:26:45.855]    __FlashArg=0x00000000
[03:26:45.855]    __FlashOp=0x00000000
[03:26:45.855]    __Result=0x00000000
[03:26:45.855]  </debugvars>
[03:26:45.855]  
[03:26:45.855]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.855]    <block atomic="false" info="">
[03:26:45.855]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.855]        // -> [isSWJ <= 0x00000001]
[03:26:45.855]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.855]        // -> [hasDormant <= 0x00000000]
[03:26:45.855]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.855]        // -> [protType <= 0x00000002]
[03:26:45.855]    </block>
[03:26:45.855]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.855]      // if-block "protType == 1"
[03:26:45.855]        // =>  FALSE
[03:26:45.855]      // skip if-block "protType == 1"
[03:26:45.855]    </control>
[03:26:45.855]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.855]      // if-block "protType == 2"
[03:26:45.855]        // =>  TRUE
[03:26:45.855]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.855]        // if-block "isSWJ"
[03:26:45.855]          // =>  TRUE
[03:26:45.855]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.855]          // if-block "hasDormant"
[03:26:45.859]            // =>  FALSE
[03:26:45.859]          // skip if-block "hasDormant"
[03:26:45.859]        </control>
[03:26:45.859]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.859]          // if-block "!hasDormant"
[03:26:45.859]            // =>  TRUE
[03:26:45.859]          <block atomic="false" info="">
[03:26:45.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.859]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.863]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.863]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.863]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.867]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.867]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.867]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.867]          </block>
[03:26:45.867]          // end if-block "!hasDormant"
[03:26:45.871]        </control>
[03:26:45.871]        // end if-block "isSWJ"
[03:26:45.871]      </control>
[03:26:45.871]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.871]        // if-block "!isSWJ"
[03:26:45.871]          // =>  FALSE
[03:26:45.871]        // skip if-block "!isSWJ"
[03:26:45.871]      </control>
[03:26:45.871]      <block atomic="false" info="">
[03:26:45.871]        ReadDP(0x0);
[03:26:45.871]  
[03:26:45.871]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.871]  
[03:26:45.871]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.871]      </block>
[03:26:45.871]      // end if-block "protType == 2"
[03:26:45.871]    </control>
[03:26:45.871]  </sequence>
[03:26:45.871]  
[03:26:45.927]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.927]  
[03:26:45.927]  <debugvars>
[03:26:45.927]    // Pre-defined
[03:26:45.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.927]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.927]    __dp=0x00000000
[03:26:45.927]    __ap=0x00000000
[03:26:45.927]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.927]    __FlashAddr=0x00000000
[03:26:45.927]    __FlashLen=0x00000000
[03:26:45.927]    __FlashArg=0x00000000
[03:26:45.927]    __FlashOp=0x00000000
[03:26:45.927]    __Result=0x00000000
[03:26:45.927]  </debugvars>
[03:26:45.927]  
[03:26:45.927]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.927]    <block atomic="false" info="">
[03:26:45.927]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.927]        // -> [isSWJ <= 0x00000001]
[03:26:45.927]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.927]        // -> [hasDormant <= 0x00000000]
[03:26:45.927]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.927]        // -> [protType <= 0x00000002]
[03:26:45.927]    </block>
[03:26:45.927]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.927]      // if-block "protType == 1"
[03:26:45.927]        // =>  FALSE
[03:26:45.927]      // skip if-block "protType == 1"
[03:26:45.927]    </control>
[03:26:45.927]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.927]      // if-block "protType == 2"
[03:26:45.927]        // =>  TRUE
[03:26:45.927]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.927]        // if-block "isSWJ"
[03:26:45.927]          // =>  TRUE
[03:26:45.927]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.927]          // if-block "hasDormant"
[03:26:45.927]            // =>  FALSE
[03:26:45.931]          // skip if-block "hasDormant"
[03:26:45.931]        </control>
[03:26:45.931]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:45.931]          // if-block "!hasDormant"
[03:26:45.931]            // =>  TRUE
[03:26:45.931]          <block atomic="false" info="">
[03:26:45.931]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:45.931]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.931]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:45.931]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:45.931]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:45.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.935]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:45.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:45.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:45.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:45.939]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:45.939]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:45.939]          </block>
[03:26:45.939]          // end if-block "!hasDormant"
[03:26:45.939]        </control>
[03:26:45.939]        // end if-block "isSWJ"
[03:26:45.939]      </control>
[03:26:45.939]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:45.939]        // if-block "!isSWJ"
[03:26:45.939]          // =>  FALSE
[03:26:45.939]        // skip if-block "!isSWJ"
[03:26:45.939]      </control>
[03:26:45.939]      <block atomic="false" info="">
[03:26:45.939]        ReadDP(0x0);
[03:26:45.943]  
[03:26:45.943]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:45.943]  
[03:26:45.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:45.943]      </block>
[03:26:45.943]      // end if-block "protType == 2"
[03:26:45.943]    </control>
[03:26:45.943]  </sequence>
[03:26:45.943]  
[03:26:45.999]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:45.999]  
[03:26:45.999]  <debugvars>
[03:26:45.999]    // Pre-defined
[03:26:45.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:45.999]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:45.999]    __dp=0x00000000
[03:26:45.999]    __ap=0x00000000
[03:26:45.999]    __traceout=0x00000000      (Trace Disabled)
[03:26:45.999]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:45.999]    __FlashAddr=0x00000000
[03:26:45.999]    __FlashLen=0x00000000
[03:26:45.999]    __FlashArg=0x00000000
[03:26:45.999]    __FlashOp=0x00000000
[03:26:45.999]    __Result=0x00000000
[03:26:45.999]  </debugvars>
[03:26:45.999]  
[03:26:45.999]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:45.999]    <block atomic="false" info="">
[03:26:45.999]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:45.999]        // -> [isSWJ <= 0x00000001]
[03:26:45.999]      __var hasDormant = __protocol & 0x00020000;
[03:26:45.999]        // -> [hasDormant <= 0x00000000]
[03:26:45.999]      __var protType   = __protocol & 0x0000FFFF;
[03:26:45.999]        // -> [protType <= 0x00000002]
[03:26:45.999]    </block>
[03:26:45.999]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:45.999]      // if-block "protType == 1"
[03:26:45.999]        // =>  FALSE
[03:26:45.999]      // skip if-block "protType == 1"
[03:26:45.999]    </control>
[03:26:45.999]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:45.999]      // if-block "protType == 2"
[03:26:45.999]        // =>  TRUE
[03:26:45.999]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:45.999]        // if-block "isSWJ"
[03:26:45.999]          // =>  TRUE
[03:26:45.999]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:45.999]          // if-block "hasDormant"
[03:26:46.003]            // =>  FALSE
[03:26:46.003]          // skip if-block "hasDormant"
[03:26:46.003]        </control>
[03:26:46.003]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.003]          // if-block "!hasDormant"
[03:26:46.003]            // =>  TRUE
[03:26:46.003]          <block atomic="false" info="">
[03:26:46.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.003]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.003]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.011]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.011]          </block>
[03:26:46.011]          // end if-block "!hasDormant"
[03:26:46.011]        </control>
[03:26:46.015]        // end if-block "isSWJ"
[03:26:46.015]      </control>
[03:26:46.015]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.015]        // if-block "!isSWJ"
[03:26:46.015]          // =>  FALSE
[03:26:46.015]        // skip if-block "!isSWJ"
[03:26:46.015]      </control>
[03:26:46.015]      <block atomic="false" info="">
[03:26:46.015]        ReadDP(0x0);
[03:26:46.015]  
[03:26:46.015]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.015]  
[03:26:46.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.015]      </block>
[03:26:46.015]      // end if-block "protType == 2"
[03:26:46.015]    </control>
[03:26:46.015]  </sequence>
[03:26:46.015]  
[03:26:46.071]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.071]  
[03:26:46.071]  <debugvars>
[03:26:46.071]    // Pre-defined
[03:26:46.071]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.071]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.071]    __dp=0x00000000
[03:26:46.071]    __ap=0x00000000
[03:26:46.071]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.071]    __FlashAddr=0x00000000
[03:26:46.071]    __FlashLen=0x00000000
[03:26:46.071]    __FlashArg=0x00000000
[03:26:46.071]    __FlashOp=0x00000000
[03:26:46.071]    __Result=0x00000000
[03:26:46.071]  </debugvars>
[03:26:46.071]  
[03:26:46.071]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.071]    <block atomic="false" info="">
[03:26:46.071]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.071]        // -> [isSWJ <= 0x00000001]
[03:26:46.071]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.071]        // -> [hasDormant <= 0x00000000]
[03:26:46.071]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.071]        // -> [protType <= 0x00000002]
[03:26:46.071]    </block>
[03:26:46.071]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.071]      // if-block "protType == 1"
[03:26:46.071]        // =>  FALSE
[03:26:46.071]      // skip if-block "protType == 1"
[03:26:46.071]    </control>
[03:26:46.071]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.071]      // if-block "protType == 2"
[03:26:46.071]        // =>  TRUE
[03:26:46.075]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.075]        // if-block "isSWJ"
[03:26:46.075]          // =>  TRUE
[03:26:46.075]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.075]          // if-block "hasDormant"
[03:26:46.075]            // =>  FALSE
[03:26:46.075]          // skip if-block "hasDormant"
[03:26:46.075]        </control>
[03:26:46.075]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.075]          // if-block "!hasDormant"
[03:26:46.075]            // =>  TRUE
[03:26:46.075]          <block atomic="false" info="">
[03:26:46.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.083]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.087]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.087]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.087]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.091]          </block>
[03:26:46.091]          // end if-block "!hasDormant"
[03:26:46.091]        </control>
[03:26:46.091]        // end if-block "isSWJ"
[03:26:46.091]      </control>
[03:26:46.091]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.091]        // if-block "!isSWJ"
[03:26:46.091]          // =>  FALSE
[03:26:46.091]        // skip if-block "!isSWJ"
[03:26:46.091]      </control>
[03:26:46.091]      <block atomic="false" info="">
[03:26:46.091]        ReadDP(0x0);
[03:26:46.091]  
[03:26:46.091]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.091]  
[03:26:46.091]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.091]      </block>
[03:26:46.091]      // end if-block "protType == 2"
[03:26:46.095]    </control>
[03:26:46.095]  </sequence>
[03:26:46.095]  
[03:26:46.155]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.155]  
[03:26:46.155]  <debugvars>
[03:26:46.155]    // Pre-defined
[03:26:46.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.155]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.155]    __dp=0x00000000
[03:26:46.155]    __ap=0x00000000
[03:26:46.155]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.155]    __FlashAddr=0x00000000
[03:26:46.155]    __FlashLen=0x00000000
[03:26:46.155]    __FlashArg=0x00000000
[03:26:46.155]    __FlashOp=0x00000000
[03:26:46.155]    __Result=0x00000000
[03:26:46.155]  </debugvars>
[03:26:46.155]  
[03:26:46.155]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.155]    <block atomic="false" info="">
[03:26:46.155]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.155]        // -> [isSWJ <= 0x00000001]
[03:26:46.155]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.155]        // -> [hasDormant <= 0x00000000]
[03:26:46.155]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.155]        // -> [protType <= 0x00000002]
[03:26:46.155]    </block>
[03:26:46.155]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.155]      // if-block "protType == 1"
[03:26:46.155]        // =>  FALSE
[03:26:46.155]      // skip if-block "protType == 1"
[03:26:46.155]    </control>
[03:26:46.155]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.155]      // if-block "protType == 2"
[03:26:46.155]        // =>  TRUE
[03:26:46.155]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.155]        // if-block "isSWJ"
[03:26:46.155]          // =>  TRUE
[03:26:46.155]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.155]          // if-block "hasDormant"
[03:26:46.159]            // =>  FALSE
[03:26:46.159]          // skip if-block "hasDormant"
[03:26:46.159]        </control>
[03:26:46.159]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.159]          // if-block "!hasDormant"
[03:26:46.159]            // =>  TRUE
[03:26:46.159]          <block atomic="false" info="">
[03:26:46.159]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.159]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.159]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.163]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.163]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.167]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.171]          </block>
[03:26:46.171]          // end if-block "!hasDormant"
[03:26:46.171]        </control>
[03:26:46.171]        // end if-block "isSWJ"
[03:26:46.171]      </control>
[03:26:46.171]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.171]        // if-block "!isSWJ"
[03:26:46.171]          // =>  FALSE
[03:26:46.171]        // skip if-block "!isSWJ"
[03:26:46.171]      </control>
[03:26:46.171]      <block atomic="false" info="">
[03:26:46.171]        ReadDP(0x0);
[03:26:46.171]  
[03:26:46.171]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.171]  
[03:26:46.171]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.171]      </block>
[03:26:46.171]      // end if-block "protType == 2"
[03:26:46.171]    </control>
[03:26:46.171]  </sequence>
[03:26:46.171]  
[03:26:46.227]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.227]  
[03:26:46.227]  <debugvars>
[03:26:46.227]    // Pre-defined
[03:26:46.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.227]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.227]    __dp=0x00000000
[03:26:46.227]    __ap=0x00000000
[03:26:46.227]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.227]    __FlashAddr=0x00000000
[03:26:46.227]    __FlashLen=0x00000000
[03:26:46.227]    __FlashArg=0x00000000
[03:26:46.227]    __FlashOp=0x00000000
[03:26:46.227]    __Result=0x00000000
[03:26:46.227]  </debugvars>
[03:26:46.227]  
[03:26:46.227]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.227]    <block atomic="false" info="">
[03:26:46.227]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.227]        // -> [isSWJ <= 0x00000001]
[03:26:46.227]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.227]        // -> [hasDormant <= 0x00000000]
[03:26:46.227]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.231]        // -> [protType <= 0x00000002]
[03:26:46.231]    </block>
[03:26:46.231]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.231]      // if-block "protType == 1"
[03:26:46.231]        // =>  FALSE
[03:26:46.231]      // skip if-block "protType == 1"
[03:26:46.231]    </control>
[03:26:46.231]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.231]      // if-block "protType == 2"
[03:26:46.231]        // =>  TRUE
[03:26:46.231]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.231]        // if-block "isSWJ"
[03:26:46.231]          // =>  TRUE
[03:26:46.231]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.231]          // if-block "hasDormant"
[03:26:46.231]            // =>  FALSE
[03:26:46.231]          // skip if-block "hasDormant"
[03:26:46.231]        </control>
[03:26:46.231]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.231]          // if-block "!hasDormant"
[03:26:46.231]            // =>  TRUE
[03:26:46.231]          <block atomic="false" info="">
[03:26:46.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.231]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.235]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.239]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.239]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.243]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.243]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.247]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.247]          </block>
[03:26:46.247]          // end if-block "!hasDormant"
[03:26:46.247]        </control>
[03:26:46.247]        // end if-block "isSWJ"
[03:26:46.247]      </control>
[03:26:46.247]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.247]        // if-block "!isSWJ"
[03:26:46.247]          // =>  FALSE
[03:26:46.247]        // skip if-block "!isSWJ"
[03:26:46.247]      </control>
[03:26:46.247]      <block atomic="false" info="">
[03:26:46.247]        ReadDP(0x0);
[03:26:46.247]  
[03:26:46.247]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.247]  
[03:26:46.247]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.247]      </block>
[03:26:46.251]      // end if-block "protType == 2"
[03:26:46.251]    </control>
[03:26:46.251]  </sequence>
[03:26:46.251]  
[03:26:46.311]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.311]  
[03:26:46.311]  <debugvars>
[03:26:46.311]    // Pre-defined
[03:26:46.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.311]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.311]    __dp=0x00000000
[03:26:46.311]    __ap=0x00000000
[03:26:46.311]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.311]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.311]    __FlashAddr=0x00000000
[03:26:46.311]    __FlashLen=0x00000000
[03:26:46.311]    __FlashArg=0x00000000
[03:26:46.311]    __FlashOp=0x00000000
[03:26:46.311]    __Result=0x00000000
[03:26:46.311]  </debugvars>
[03:26:46.311]  
[03:26:46.311]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.311]    <block atomic="false" info="">
[03:26:46.311]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.311]        // -> [isSWJ <= 0x00000001]
[03:26:46.311]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.311]        // -> [hasDormant <= 0x00000000]
[03:26:46.311]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.311]        // -> [protType <= 0x00000002]
[03:26:46.311]    </block>
[03:26:46.311]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.311]      // if-block "protType == 1"
[03:26:46.311]        // =>  FALSE
[03:26:46.311]      // skip if-block "protType == 1"
[03:26:46.315]    </control>
[03:26:46.315]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.315]      // if-block "protType == 2"
[03:26:46.315]        // =>  TRUE
[03:26:46.315]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.315]        // if-block "isSWJ"
[03:26:46.315]          // =>  TRUE
[03:26:46.315]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.315]          // if-block "hasDormant"
[03:26:46.315]            // =>  FALSE
[03:26:46.315]          // skip if-block "hasDormant"
[03:26:46.315]        </control>
[03:26:46.315]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.315]          // if-block "!hasDormant"
[03:26:46.315]            // =>  TRUE
[03:26:46.315]          <block atomic="false" info="">
[03:26:46.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.315]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.319]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.319]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.323]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.323]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.327]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.327]          </block>
[03:26:46.327]          // end if-block "!hasDormant"
[03:26:46.327]        </control>
[03:26:46.327]        // end if-block "isSWJ"
[03:26:46.327]      </control>
[03:26:46.327]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.327]        // if-block "!isSWJ"
[03:26:46.327]          // =>  FALSE
[03:26:46.327]        // skip if-block "!isSWJ"
[03:26:46.327]      </control>
[03:26:46.327]      <block atomic="false" info="">
[03:26:46.327]        ReadDP(0x0);
[03:26:46.331]  
[03:26:46.331]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.331]  
[03:26:46.331]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.331]      </block>
[03:26:46.331]      // end if-block "protType == 2"
[03:26:46.331]    </control>
[03:26:46.331]  </sequence>
[03:26:46.331]  
[03:26:46.383]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.383]  
[03:26:46.383]  <debugvars>
[03:26:46.383]    // Pre-defined
[03:26:46.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.383]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.383]    __dp=0x00000000
[03:26:46.383]    __ap=0x00000000
[03:26:46.383]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.383]    __FlashAddr=0x00000000
[03:26:46.383]    __FlashLen=0x00000000
[03:26:46.383]    __FlashArg=0x00000000
[03:26:46.383]    __FlashOp=0x00000000
[03:26:46.383]    __Result=0x00000000
[03:26:46.383]  </debugvars>
[03:26:46.383]  
[03:26:46.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.383]    <block atomic="false" info="">
[03:26:46.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.383]        // -> [isSWJ <= 0x00000001]
[03:26:46.383]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.383]        // -> [hasDormant <= 0x00000000]
[03:26:46.387]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.387]        // -> [protType <= 0x00000002]
[03:26:46.387]    </block>
[03:26:46.387]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.387]      // if-block "protType == 1"
[03:26:46.387]        // =>  FALSE
[03:26:46.387]      // skip if-block "protType == 1"
[03:26:46.387]    </control>
[03:26:46.387]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.387]      // if-block "protType == 2"
[03:26:46.387]        // =>  TRUE
[03:26:46.387]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.387]        // if-block "isSWJ"
[03:26:46.387]          // =>  TRUE
[03:26:46.387]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.387]          // if-block "hasDormant"
[03:26:46.387]            // =>  FALSE
[03:26:46.387]          // skip if-block "hasDormant"
[03:26:46.387]        </control>
[03:26:46.387]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.387]          // if-block "!hasDormant"
[03:26:46.387]            // =>  TRUE
[03:26:46.387]          <block atomic="false" info="">
[03:26:46.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.391]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.391]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.391]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.395]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.403]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.403]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.403]          </block>
[03:26:46.403]          // end if-block "!hasDormant"
[03:26:46.403]        </control>
[03:26:46.403]        // end if-block "isSWJ"
[03:26:46.403]      </control>
[03:26:46.403]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.403]        // if-block "!isSWJ"
[03:26:46.403]          // =>  FALSE
[03:26:46.403]        // skip if-block "!isSWJ"
[03:26:46.403]      </control>
[03:26:46.403]      <block atomic="false" info="">
[03:26:46.403]        ReadDP(0x0);
[03:26:46.407]  
[03:26:46.407]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.407]  
[03:26:46.407]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.407]      </block>
[03:26:46.407]      // end if-block "protType == 2"
[03:26:46.407]    </control>
[03:26:46.407]  </sequence>
[03:26:46.407]  
[03:26:46.468]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.468]  
[03:26:46.468]  <debugvars>
[03:26:46.468]    // Pre-defined
[03:26:46.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.468]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.468]    __dp=0x00000000
[03:26:46.468]    __ap=0x00000000
[03:26:46.468]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.468]    __FlashAddr=0x00000000
[03:26:46.468]    __FlashLen=0x00000000
[03:26:46.468]    __FlashArg=0x00000000
[03:26:46.468]    __FlashOp=0x00000000
[03:26:46.468]    __Result=0x00000000
[03:26:46.468]  </debugvars>
[03:26:46.468]  
[03:26:46.468]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.468]    <block atomic="false" info="">
[03:26:46.468]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.468]        // -> [isSWJ <= 0x00000001]
[03:26:46.468]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.468]        // -> [hasDormant <= 0x00000000]
[03:26:46.468]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.468]        // -> [protType <= 0x00000002]
[03:26:46.468]    </block>
[03:26:46.468]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.468]      // if-block "protType == 1"
[03:26:46.468]        // =>  FALSE
[03:26:46.468]      // skip if-block "protType == 1"
[03:26:46.472]    </control>
[03:26:46.472]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.472]      // if-block "protType == 2"
[03:26:46.472]        // =>  TRUE
[03:26:46.472]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.472]        // if-block "isSWJ"
[03:26:46.472]          // =>  TRUE
[03:26:46.472]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.472]          // if-block "hasDormant"
[03:26:46.472]            // =>  FALSE
[03:26:46.472]          // skip if-block "hasDormant"
[03:26:46.472]        </control>
[03:26:46.472]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.472]          // if-block "!hasDormant"
[03:26:46.472]            // =>  TRUE
[03:26:46.472]          <block atomic="false" info="">
[03:26:46.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.472]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.476]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.476]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.476]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.481]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.481]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.482]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.482]          </block>
[03:26:46.483]          // end if-block "!hasDormant"
[03:26:46.483]        </control>
[03:26:46.483]        // end if-block "isSWJ"
[03:26:46.483]      </control>
[03:26:46.483]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.483]        // if-block "!isSWJ"
[03:26:46.484]          // =>  FALSE
[03:26:46.484]        // skip if-block "!isSWJ"
[03:26:46.484]      </control>
[03:26:46.484]      <block atomic="false" info="">
[03:26:46.484]        ReadDP(0x0);
[03:26:46.485]  
[03:26:46.485]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.485]  
[03:26:46.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.485]      </block>
[03:26:46.486]      // end if-block "protType == 2"
[03:26:46.486]    </control>
[03:26:46.486]  </sequence>
[03:26:46.486]  
[03:26:46.536]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.536]  
[03:26:46.536]  <debugvars>
[03:26:46.536]    // Pre-defined
[03:26:46.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.536]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.536]    __dp=0x00000000
[03:26:46.536]    __ap=0x00000000
[03:26:46.536]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.536]    __FlashAddr=0x00000000
[03:26:46.536]    __FlashLen=0x00000000
[03:26:46.536]    __FlashArg=0x00000000
[03:26:46.536]    __FlashOp=0x00000000
[03:26:46.536]    __Result=0x00000000
[03:26:46.536]  </debugvars>
[03:26:46.536]  
[03:26:46.536]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.536]    <block atomic="false" info="">
[03:26:46.536]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.536]        // -> [isSWJ <= 0x00000001]
[03:26:46.540]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.540]        // -> [hasDormant <= 0x00000000]
[03:26:46.540]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.540]        // -> [protType <= 0x00000002]
[03:26:46.540]    </block>
[03:26:46.540]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.540]      // if-block "protType == 1"
[03:26:46.540]        // =>  FALSE
[03:26:46.540]      // skip if-block "protType == 1"
[03:26:46.540]    </control>
[03:26:46.540]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.540]      // if-block "protType == 2"
[03:26:46.540]        // =>  TRUE
[03:26:46.540]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.540]        // if-block "isSWJ"
[03:26:46.540]          // =>  TRUE
[03:26:46.540]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.540]          // if-block "hasDormant"
[03:26:46.540]            // =>  FALSE
[03:26:46.540]          // skip if-block "hasDormant"
[03:26:46.540]        </control>
[03:26:46.540]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.540]          // if-block "!hasDormant"
[03:26:46.540]            // =>  TRUE
[03:26:46.540]          <block atomic="false" info="">
[03:26:46.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.544]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.548]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.552]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.552]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.552]          </block>
[03:26:46.552]          // end if-block "!hasDormant"
[03:26:46.552]        </control>
[03:26:46.552]        // end if-block "isSWJ"
[03:26:46.556]      </control>
[03:26:46.556]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.556]        // if-block "!isSWJ"
[03:26:46.556]          // =>  FALSE
[03:26:46.556]        // skip if-block "!isSWJ"
[03:26:46.556]      </control>
[03:26:46.556]      <block atomic="false" info="">
[03:26:46.556]        ReadDP(0x0);
[03:26:46.556]  
[03:26:46.556]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.556]  
[03:26:46.556]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.556]      </block>
[03:26:46.556]      // end if-block "protType == 2"
[03:26:46.556]    </control>
[03:26:46.556]  </sequence>
[03:26:46.556]  
[03:26:46.608]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.608]  
[03:26:46.608]  <debugvars>
[03:26:46.608]    // Pre-defined
[03:26:46.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.608]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.608]    __dp=0x00000000
[03:26:46.608]    __ap=0x00000000
[03:26:46.608]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.608]    __FlashAddr=0x00000000
[03:26:46.608]    __FlashLen=0x00000000
[03:26:46.608]    __FlashArg=0x00000000
[03:26:46.608]    __FlashOp=0x00000000
[03:26:46.608]    __Result=0x00000000
[03:26:46.608]  </debugvars>
[03:26:46.608]  
[03:26:46.608]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.608]    <block atomic="false" info="">
[03:26:46.608]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.608]        // -> [isSWJ <= 0x00000001]
[03:26:46.608]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.608]        // -> [hasDormant <= 0x00000000]
[03:26:46.608]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.608]        // -> [protType <= 0x00000002]
[03:26:46.608]    </block>
[03:26:46.608]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.608]      // if-block "protType == 1"
[03:26:46.608]        // =>  FALSE
[03:26:46.608]      // skip if-block "protType == 1"
[03:26:46.608]    </control>
[03:26:46.608]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.608]      // if-block "protType == 2"
[03:26:46.608]        // =>  TRUE
[03:26:46.608]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.608]        // if-block "isSWJ"
[03:26:46.608]          // =>  TRUE
[03:26:46.612]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.612]          // if-block "hasDormant"
[03:26:46.612]            // =>  FALSE
[03:26:46.612]          // skip if-block "hasDormant"
[03:26:46.612]        </control>
[03:26:46.612]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.612]          // if-block "!hasDormant"
[03:26:46.612]            // =>  TRUE
[03:26:46.612]          <block atomic="false" info="">
[03:26:46.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.612]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.616]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.620]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.624]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.624]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.624]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.624]          </block>
[03:26:46.624]          // end if-block "!hasDormant"
[03:26:46.624]        </control>
[03:26:46.624]        // end if-block "isSWJ"
[03:26:46.624]      </control>
[03:26:46.624]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.624]        // if-block "!isSWJ"
[03:26:46.624]          // =>  FALSE
[03:26:46.624]        // skip if-block "!isSWJ"
[03:26:46.624]      </control>
[03:26:46.624]      <block atomic="false" info="">
[03:26:46.624]        ReadDP(0x0);
[03:26:46.628]  
[03:26:46.628]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.628]  
[03:26:46.628]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.628]      </block>
[03:26:46.628]      // end if-block "protType == 2"
[03:26:46.628]    </control>
[03:26:46.628]  </sequence>
[03:26:46.628]  
[03:26:46.680]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.680]  
[03:26:46.680]  <debugvars>
[03:26:46.680]    // Pre-defined
[03:26:46.680]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.680]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.680]    __dp=0x00000000
[03:26:46.680]    __ap=0x00000000
[03:26:46.680]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.680]    __FlashAddr=0x00000000
[03:26:46.680]    __FlashLen=0x00000000
[03:26:46.680]    __FlashArg=0x00000000
[03:26:46.680]    __FlashOp=0x00000000
[03:26:46.680]    __Result=0x00000000
[03:26:46.680]  </debugvars>
[03:26:46.680]  
[03:26:46.680]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.680]    <block atomic="false" info="">
[03:26:46.680]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.680]        // -> [isSWJ <= 0x00000001]
[03:26:46.680]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.680]        // -> [hasDormant <= 0x00000000]
[03:26:46.680]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.680]        // -> [protType <= 0x00000002]
[03:26:46.680]    </block>
[03:26:46.680]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.680]      // if-block "protType == 1"
[03:26:46.680]        // =>  FALSE
[03:26:46.680]      // skip if-block "protType == 1"
[03:26:46.680]    </control>
[03:26:46.680]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.680]      // if-block "protType == 2"
[03:26:46.680]        // =>  TRUE
[03:26:46.680]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.680]        // if-block "isSWJ"
[03:26:46.680]          // =>  TRUE
[03:26:46.680]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.680]          // if-block "hasDormant"
[03:26:46.680]            // =>  FALSE
[03:26:46.684]          // skip if-block "hasDormant"
[03:26:46.684]        </control>
[03:26:46.684]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.684]          // if-block "!hasDormant"
[03:26:46.684]            // =>  TRUE
[03:26:46.684]          <block atomic="false" info="">
[03:26:46.684]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.684]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.688]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.688]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.688]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.692]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.694]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.694]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.694]          </block>
[03:26:46.694]          // end if-block "!hasDormant"
[03:26:46.694]        </control>
[03:26:46.694]        // end if-block "isSWJ"
[03:26:46.696]      </control>
[03:26:46.696]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.696]        // if-block "!isSWJ"
[03:26:46.696]          // =>  FALSE
[03:26:46.696]        // skip if-block "!isSWJ"
[03:26:46.696]      </control>
[03:26:46.696]      <block atomic="false" info="">
[03:26:46.696]        ReadDP(0x0);
[03:26:46.696]  
[03:26:46.696]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.696]  
[03:26:46.696]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.696]      </block>
[03:26:46.696]      // end if-block "protType == 2"
[03:26:46.696]    </control>
[03:26:46.696]  </sequence>
[03:26:46.696]  
[03:26:46.753]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.753]  
[03:26:46.753]  <debugvars>
[03:26:46.753]    // Pre-defined
[03:26:46.753]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.753]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.753]    __dp=0x00000000
[03:26:46.753]    __ap=0x00000000
[03:26:46.753]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.753]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.753]    __FlashAddr=0x00000000
[03:26:46.753]    __FlashLen=0x00000000
[03:26:46.753]    __FlashArg=0x00000000
[03:26:46.753]    __FlashOp=0x00000000
[03:26:46.753]    __Result=0x00000000
[03:26:46.753]  </debugvars>
[03:26:46.753]  
[03:26:46.753]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.753]    <block atomic="false" info="">
[03:26:46.753]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.753]        // -> [isSWJ <= 0x00000001]
[03:26:46.753]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.753]        // -> [hasDormant <= 0x00000000]
[03:26:46.753]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.753]        // -> [protType <= 0x00000002]
[03:26:46.753]    </block>
[03:26:46.753]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.753]      // if-block "protType == 1"
[03:26:46.753]        // =>  FALSE
[03:26:46.753]      // skip if-block "protType == 1"
[03:26:46.753]    </control>
[03:26:46.753]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.753]      // if-block "protType == 2"
[03:26:46.753]        // =>  TRUE
[03:26:46.753]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.753]        // if-block "isSWJ"
[03:26:46.753]          // =>  TRUE
[03:26:46.753]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.757]          // if-block "hasDormant"
[03:26:46.757]            // =>  FALSE
[03:26:46.757]          // skip if-block "hasDormant"
[03:26:46.757]        </control>
[03:26:46.757]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.757]          // if-block "!hasDormant"
[03:26:46.757]            // =>  TRUE
[03:26:46.757]          <block atomic="false" info="">
[03:26:46.757]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.757]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.761]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.769]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.769]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.769]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.769]          </block>
[03:26:46.769]          // end if-block "!hasDormant"
[03:26:46.773]        </control>
[03:26:46.773]        // end if-block "isSWJ"
[03:26:46.773]      </control>
[03:26:46.773]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.773]        // if-block "!isSWJ"
[03:26:46.773]          // =>  FALSE
[03:26:46.773]        // skip if-block "!isSWJ"
[03:26:46.773]      </control>
[03:26:46.773]      <block atomic="false" info="">
[03:26:46.773]        ReadDP(0x0);
[03:26:46.773]  
[03:26:46.773]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.773]  
[03:26:46.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.773]      </block>
[03:26:46.773]      // end if-block "protType == 2"
[03:26:46.773]    </control>
[03:26:46.773]  </sequence>
[03:26:46.773]  
[03:26:46.825]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.825]  
[03:26:46.825]  <debugvars>
[03:26:46.825]    // Pre-defined
[03:26:46.825]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.825]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.825]    __dp=0x00000000
[03:26:46.825]    __ap=0x00000000
[03:26:46.825]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.825]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.825]    __FlashAddr=0x00000000
[03:26:46.825]    __FlashLen=0x00000000
[03:26:46.825]    __FlashArg=0x00000000
[03:26:46.825]    __FlashOp=0x00000000
[03:26:46.825]    __Result=0x00000000
[03:26:46.825]  </debugvars>
[03:26:46.825]  
[03:26:46.825]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.825]    <block atomic="false" info="">
[03:26:46.825]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.825]        // -> [isSWJ <= 0x00000001]
[03:26:46.825]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.825]        // -> [hasDormant <= 0x00000000]
[03:26:46.825]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.829]        // -> [protType <= 0x00000002]
[03:26:46.829]    </block>
[03:26:46.829]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.829]      // if-block "protType == 1"
[03:26:46.829]        // =>  FALSE
[03:26:46.829]      // skip if-block "protType == 1"
[03:26:46.829]    </control>
[03:26:46.829]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.829]      // if-block "protType == 2"
[03:26:46.829]        // =>  TRUE
[03:26:46.829]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.829]        // if-block "isSWJ"
[03:26:46.829]          // =>  TRUE
[03:26:46.829]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.829]          // if-block "hasDormant"
[03:26:46.829]            // =>  FALSE
[03:26:46.829]          // skip if-block "hasDormant"
[03:26:46.829]        </control>
[03:26:46.829]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.829]          // if-block "!hasDormant"
[03:26:46.829]            // =>  TRUE
[03:26:46.829]          <block atomic="false" info="">
[03:26:46.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.833]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.833]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.849]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.849]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.853]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.853]          </block>
[03:26:46.853]          // end if-block "!hasDormant"
[03:26:46.853]        </control>
[03:26:46.853]        // end if-block "isSWJ"
[03:26:46.853]      </control>
[03:26:46.853]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.853]        // if-block "!isSWJ"
[03:26:46.853]          // =>  FALSE
[03:26:46.853]        // skip if-block "!isSWJ"
[03:26:46.853]      </control>
[03:26:46.853]      <block atomic="false" info="">
[03:26:46.853]        ReadDP(0x0);
[03:26:46.853]  
[03:26:46.853]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.853]  
[03:26:46.853]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.853]      </block>
[03:26:46.853]      // end if-block "protType == 2"
[03:26:46.853]    </control>
[03:26:46.853]  </sequence>
[03:26:46.853]  
[03:26:46.909]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.909]  
[03:26:46.909]  <debugvars>
[03:26:46.909]    // Pre-defined
[03:26:46.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.909]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.909]    __dp=0x00000000
[03:26:46.909]    __ap=0x00000000
[03:26:46.909]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.909]    __FlashAddr=0x00000000
[03:26:46.909]    __FlashLen=0x00000000
[03:26:46.909]    __FlashArg=0x00000000
[03:26:46.909]    __FlashOp=0x00000000
[03:26:46.909]    __Result=0x00000000
[03:26:46.909]  </debugvars>
[03:26:46.909]  
[03:26:46.909]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.909]    <block atomic="false" info="">
[03:26:46.909]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.909]        // -> [isSWJ <= 0x00000001]
[03:26:46.909]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.909]        // -> [hasDormant <= 0x00000000]
[03:26:46.909]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.913]        // -> [protType <= 0x00000002]
[03:26:46.913]    </block>
[03:26:46.913]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.913]      // if-block "protType == 1"
[03:26:46.913]        // =>  FALSE
[03:26:46.913]      // skip if-block "protType == 1"
[03:26:46.913]    </control>
[03:26:46.913]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.913]      // if-block "protType == 2"
[03:26:46.913]        // =>  TRUE
[03:26:46.913]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.913]        // if-block "isSWJ"
[03:26:46.913]          // =>  TRUE
[03:26:46.913]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.913]          // if-block "hasDormant"
[03:26:46.913]            // =>  FALSE
[03:26:46.913]          // skip if-block "hasDormant"
[03:26:46.913]        </control>
[03:26:46.913]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.913]          // if-block "!hasDormant"
[03:26:46.913]            // =>  TRUE
[03:26:46.913]          <block atomic="false" info="">
[03:26:46.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.917]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:46.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:46.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:46.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.921]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:46.921]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:46.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:46.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.925]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:46.925]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:46.925]          </block>
[03:26:46.925]          // end if-block "!hasDormant"
[03:26:46.925]        </control>
[03:26:46.925]        // end if-block "isSWJ"
[03:26:46.925]      </control>
[03:26:46.925]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:46.925]        // if-block "!isSWJ"
[03:26:46.929]          // =>  FALSE
[03:26:46.929]        // skip if-block "!isSWJ"
[03:26:46.929]      </control>
[03:26:46.929]      <block atomic="false" info="">
[03:26:46.929]        ReadDP(0x0);
[03:26:46.933]  
[03:26:46.933]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:46.933]  
[03:26:46.933]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:46.933]      </block>
[03:26:46.933]      // end if-block "protType == 2"
[03:26:46.933]    </control>
[03:26:46.933]  </sequence>
[03:26:46.933]  
[03:26:46.993]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:46.993]  
[03:26:46.993]  <debugvars>
[03:26:46.993]    // Pre-defined
[03:26:46.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:46.993]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:46.993]    __dp=0x00000000
[03:26:46.993]    __ap=0x00000000
[03:26:46.993]    __traceout=0x00000000      (Trace Disabled)
[03:26:46.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:46.993]    __FlashAddr=0x00000000
[03:26:46.993]    __FlashLen=0x00000000
[03:26:46.993]    __FlashArg=0x00000000
[03:26:46.993]    __FlashOp=0x00000000
[03:26:46.993]    __Result=0x00000000
[03:26:46.993]  </debugvars>
[03:26:46.993]  
[03:26:46.993]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:46.993]    <block atomic="false" info="">
[03:26:46.993]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:46.993]        // -> [isSWJ <= 0x00000001]
[03:26:46.993]      __var hasDormant = __protocol & 0x00020000;
[03:26:46.993]        // -> [hasDormant <= 0x00000000]
[03:26:46.993]      __var protType   = __protocol & 0x0000FFFF;
[03:26:46.993]        // -> [protType <= 0x00000002]
[03:26:46.993]    </block>
[03:26:46.993]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:46.993]      // if-block "protType == 1"
[03:26:46.993]        // =>  FALSE
[03:26:46.993]      // skip if-block "protType == 1"
[03:26:46.993]    </control>
[03:26:46.993]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:46.993]      // if-block "protType == 2"
[03:26:46.993]        // =>  TRUE
[03:26:46.993]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:46.993]        // if-block "isSWJ"
[03:26:46.997]          // =>  TRUE
[03:26:46.997]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:46.997]          // if-block "hasDormant"
[03:26:46.997]            // =>  FALSE
[03:26:46.997]          // skip if-block "hasDormant"
[03:26:46.997]        </control>
[03:26:46.997]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:46.997]          // if-block "!hasDormant"
[03:26:46.997]            // =>  TRUE
[03:26:46.997]          <block atomic="false" info="">
[03:26:46.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:46.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:46.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.001]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.001]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.001]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.005]          </block>
[03:26:47.005]          // end if-block "!hasDormant"
[03:26:47.005]        </control>
[03:26:47.005]        // end if-block "isSWJ"
[03:26:47.005]      </control>
[03:26:47.005]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.005]        // if-block "!isSWJ"
[03:26:47.005]          // =>  FALSE
[03:26:47.005]        // skip if-block "!isSWJ"
[03:26:47.005]      </control>
[03:26:47.005]      <block atomic="false" info="">
[03:26:47.005]        ReadDP(0x0);
[03:26:47.009]  
[03:26:47.009]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.009]  
[03:26:47.009]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.009]      </block>
[03:26:47.009]      // end if-block "protType == 2"
[03:26:47.009]    </control>
[03:26:47.009]  </sequence>
[03:26:47.009]  
[03:26:47.065]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.065]  
[03:26:47.065]  <debugvars>
[03:26:47.065]    // Pre-defined
[03:26:47.065]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.065]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.065]    __dp=0x00000000
[03:26:47.065]    __ap=0x00000000
[03:26:47.065]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.065]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.065]    __FlashAddr=0x00000000
[03:26:47.065]    __FlashLen=0x00000000
[03:26:47.065]    __FlashArg=0x00000000
[03:26:47.065]    __FlashOp=0x00000000
[03:26:47.065]    __Result=0x00000000
[03:26:47.065]  </debugvars>
[03:26:47.065]  
[03:26:47.065]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.065]    <block atomic="false" info="">
[03:26:47.065]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.065]        // -> [isSWJ <= 0x00000001]
[03:26:47.065]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.065]        // -> [hasDormant <= 0x00000000]
[03:26:47.065]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.065]        // -> [protType <= 0x00000002]
[03:26:47.065]    </block>
[03:26:47.065]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.065]      // if-block "protType == 1"
[03:26:47.065]        // =>  FALSE
[03:26:47.065]      // skip if-block "protType == 1"
[03:26:47.065]    </control>
[03:26:47.065]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.065]      // if-block "protType == 2"
[03:26:47.065]        // =>  TRUE
[03:26:47.065]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.065]        // if-block "isSWJ"
[03:26:47.065]          // =>  TRUE
[03:26:47.065]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.069]          // if-block "hasDormant"
[03:26:47.069]            // =>  FALSE
[03:26:47.069]          // skip if-block "hasDormant"
[03:26:47.069]        </control>
[03:26:47.069]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.069]          // if-block "!hasDormant"
[03:26:47.069]            // =>  TRUE
[03:26:47.069]          <block atomic="false" info="">
[03:26:47.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.069]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.073]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.073]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.077]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.077]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.077]          </block>
[03:26:47.077]          // end if-block "!hasDormant"
[03:26:47.077]        </control>
[03:26:47.077]        // end if-block "isSWJ"
[03:26:47.077]      </control>
[03:26:47.077]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.077]        // if-block "!isSWJ"
[03:26:47.081]          // =>  FALSE
[03:26:47.081]        // skip if-block "!isSWJ"
[03:26:47.081]      </control>
[03:26:47.081]      <block atomic="false" info="">
[03:26:47.081]        ReadDP(0x0);
[03:26:47.081]  
[03:26:47.081]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.081]  
[03:26:47.081]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.081]      </block>
[03:26:47.081]      // end if-block "protType == 2"
[03:26:47.081]    </control>
[03:26:47.081]  </sequence>
[03:26:47.081]  
[03:26:47.139]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.139]  
[03:26:47.139]  <debugvars>
[03:26:47.139]    // Pre-defined
[03:26:47.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.139]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.139]    __dp=0x00000000
[03:26:47.139]    __ap=0x00000000
[03:26:47.139]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.139]    __FlashAddr=0x00000000
[03:26:47.139]    __FlashLen=0x00000000
[03:26:47.139]    __FlashArg=0x00000000
[03:26:47.139]    __FlashOp=0x00000000
[03:26:47.139]    __Result=0x00000000
[03:26:47.141]  </debugvars>
[03:26:47.141]  
[03:26:47.141]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.141]    <block atomic="false" info="">
[03:26:47.141]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.141]        // -> [isSWJ <= 0x00000001]
[03:26:47.141]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.141]        // -> [hasDormant <= 0x00000000]
[03:26:47.141]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.141]        // -> [protType <= 0x00000002]
[03:26:47.141]    </block>
[03:26:47.141]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.141]      // if-block "protType == 1"
[03:26:47.141]        // =>  FALSE
[03:26:47.141]      // skip if-block "protType == 1"
[03:26:47.141]    </control>
[03:26:47.141]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.141]      // if-block "protType == 2"
[03:26:47.141]        // =>  TRUE
[03:26:47.141]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.141]        // if-block "isSWJ"
[03:26:47.141]          // =>  TRUE
[03:26:47.143]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.143]          // if-block "hasDormant"
[03:26:47.143]            // =>  FALSE
[03:26:47.143]          // skip if-block "hasDormant"
[03:26:47.143]        </control>
[03:26:47.143]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.143]          // if-block "!hasDormant"
[03:26:47.143]            // =>  TRUE
[03:26:47.143]          <block atomic="false" info="">
[03:26:47.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.145]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.152]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.155]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.155]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.155]          </block>
[03:26:47.155]          // end if-block "!hasDormant"
[03:26:47.155]        </control>
[03:26:47.155]        // end if-block "isSWJ"
[03:26:47.155]      </control>
[03:26:47.155]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.155]        // if-block "!isSWJ"
[03:26:47.155]          // =>  FALSE
[03:26:47.155]        // skip if-block "!isSWJ"
[03:26:47.155]      </control>
[03:26:47.159]      <block atomic="false" info="">
[03:26:47.159]        ReadDP(0x0);
[03:26:47.159]  
[03:26:47.159]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.159]  
[03:26:47.159]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.159]      </block>
[03:26:47.159]      // end if-block "protType == 2"
[03:26:47.159]    </control>
[03:26:47.159]  </sequence>
[03:26:47.159]  
[03:26:47.212]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.212]  
[03:26:47.212]  <debugvars>
[03:26:47.212]    // Pre-defined
[03:26:47.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.212]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.212]    __dp=0x00000000
[03:26:47.212]    __ap=0x00000000
[03:26:47.213]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.213]    __FlashAddr=0x00000000
[03:26:47.213]    __FlashLen=0x00000000
[03:26:47.213]    __FlashArg=0x00000000
[03:26:47.213]    __FlashOp=0x00000000
[03:26:47.213]    __Result=0x00000000
[03:26:47.213]  </debugvars>
[03:26:47.213]  
[03:26:47.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.213]    <block atomic="false" info="">
[03:26:47.215]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.215]        // -> [isSWJ <= 0x00000001]
[03:26:47.215]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.215]        // -> [hasDormant <= 0x00000000]
[03:26:47.215]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.215]        // -> [protType <= 0x00000002]
[03:26:47.215]    </block>
[03:26:47.215]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.215]      // if-block "protType == 1"
[03:26:47.215]        // =>  FALSE
[03:26:47.215]      // skip if-block "protType == 1"
[03:26:47.215]    </control>
[03:26:47.215]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.215]      // if-block "protType == 2"
[03:26:47.215]        // =>  TRUE
[03:26:47.217]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.217]        // if-block "isSWJ"
[03:26:47.217]          // =>  TRUE
[03:26:47.217]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.217]          // if-block "hasDormant"
[03:26:47.217]            // =>  FALSE
[03:26:47.217]          // skip if-block "hasDormant"
[03:26:47.217]        </control>
[03:26:47.217]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.217]          // if-block "!hasDormant"
[03:26:47.217]            // =>  TRUE
[03:26:47.217]          <block atomic="false" info="">
[03:26:47.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.217]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.221]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.225]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.225]          </block>
[03:26:47.225]          // end if-block "!hasDormant"
[03:26:47.225]        </control>
[03:26:47.225]        // end if-block "isSWJ"
[03:26:47.225]      </control>
[03:26:47.225]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.225]        // if-block "!isSWJ"
[03:26:47.225]          // =>  FALSE
[03:26:47.225]        // skip if-block "!isSWJ"
[03:26:47.225]      </control>
[03:26:47.229]      <block atomic="false" info="">
[03:26:47.229]        ReadDP(0x0);
[03:26:47.229]  
[03:26:47.229]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.229]  
[03:26:47.229]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.233]      </block>
[03:26:47.233]      // end if-block "protType == 2"
[03:26:47.233]    </control>
[03:26:47.233]  </sequence>
[03:26:47.233]  
[03:26:47.286]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.286]  
[03:26:47.286]  <debugvars>
[03:26:47.286]    // Pre-defined
[03:26:47.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.286]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.286]    __dp=0x00000000
[03:26:47.287]    __ap=0x00000000
[03:26:47.287]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.287]    __FlashAddr=0x00000000
[03:26:47.287]    __FlashLen=0x00000000
[03:26:47.287]    __FlashArg=0x00000000
[03:26:47.287]    __FlashOp=0x00000000
[03:26:47.287]    __Result=0x00000000
[03:26:47.287]  </debugvars>
[03:26:47.287]  
[03:26:47.287]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.287]    <block atomic="false" info="">
[03:26:47.287]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.287]        // -> [isSWJ <= 0x00000001]
[03:26:47.287]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.287]        // -> [hasDormant <= 0x00000000]
[03:26:47.287]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.287]        // -> [protType <= 0x00000002]
[03:26:47.287]    </block>
[03:26:47.287]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.287]      // if-block "protType == 1"
[03:26:47.287]        // =>  FALSE
[03:26:47.287]      // skip if-block "protType == 1"
[03:26:47.287]    </control>
[03:26:47.287]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.287]      // if-block "protType == 2"
[03:26:47.287]        // =>  TRUE
[03:26:47.287]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.287]        // if-block "isSWJ"
[03:26:47.287]          // =>  TRUE
[03:26:47.287]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.290]          // if-block "hasDormant"
[03:26:47.290]            // =>  FALSE
[03:26:47.290]          // skip if-block "hasDormant"
[03:26:47.290]        </control>
[03:26:47.290]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.290]          // if-block "!hasDormant"
[03:26:47.290]            // =>  TRUE
[03:26:47.290]          <block atomic="false" info="">
[03:26:47.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.291]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.291]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.294]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.294]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.298]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.298]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.300]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.300]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.300]          </block>
[03:26:47.300]          // end if-block "!hasDormant"
[03:26:47.300]        </control>
[03:26:47.302]        // end if-block "isSWJ"
[03:26:47.302]      </control>
[03:26:47.302]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.302]        // if-block "!isSWJ"
[03:26:47.302]          // =>  FALSE
[03:26:47.302]        // skip if-block "!isSWJ"
[03:26:47.302]      </control>
[03:26:47.302]      <block atomic="false" info="">
[03:26:47.302]        ReadDP(0x0);
[03:26:47.306]  
[03:26:47.306]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.306]  
[03:26:47.306]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.306]      </block>
[03:26:47.306]      // end if-block "protType == 2"
[03:26:47.306]    </control>
[03:26:47.306]  </sequence>
[03:26:47.306]  
[03:26:47.359]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.359]  
[03:26:47.359]  <debugvars>
[03:26:47.359]    // Pre-defined
[03:26:47.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.359]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.359]    __dp=0x00000000
[03:26:47.359]    __ap=0x00000000
[03:26:47.359]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.359]    __FlashAddr=0x00000000
[03:26:47.359]    __FlashLen=0x00000000
[03:26:47.359]    __FlashArg=0x00000000
[03:26:47.359]    __FlashOp=0x00000000
[03:26:47.359]    __Result=0x00000000
[03:26:47.359]  </debugvars>
[03:26:47.359]  
[03:26:47.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.359]    <block atomic="false" info="">
[03:26:47.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.359]        // -> [isSWJ <= 0x00000001]
[03:26:47.359]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.359]        // -> [hasDormant <= 0x00000000]
[03:26:47.359]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.359]        // -> [protType <= 0x00000002]
[03:26:47.359]    </block>
[03:26:47.359]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.359]      // if-block "protType == 1"
[03:26:47.359]        // =>  FALSE
[03:26:47.359]      // skip if-block "protType == 1"
[03:26:47.359]    </control>
[03:26:47.359]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.359]      // if-block "protType == 2"
[03:26:47.359]        // =>  TRUE
[03:26:47.359]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.359]        // if-block "isSWJ"
[03:26:47.359]          // =>  TRUE
[03:26:47.359]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.359]          // if-block "hasDormant"
[03:26:47.359]            // =>  FALSE
[03:26:47.359]          // skip if-block "hasDormant"
[03:26:47.363]        </control>
[03:26:47.363]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.363]          // if-block "!hasDormant"
[03:26:47.363]            // =>  TRUE
[03:26:47.363]          <block atomic="false" info="">
[03:26:47.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.363]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.368]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.375]          </block>
[03:26:47.375]          // end if-block "!hasDormant"
[03:26:47.375]        </control>
[03:26:47.375]        // end if-block "isSWJ"
[03:26:47.375]      </control>
[03:26:47.376]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.376]        // if-block "!isSWJ"
[03:26:47.376]          // =>  FALSE
[03:26:47.376]        // skip if-block "!isSWJ"
[03:26:47.376]      </control>
[03:26:47.376]      <block atomic="false" info="">
[03:26:47.376]        ReadDP(0x0);
[03:26:47.376]  
[03:26:47.376]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.376]  
[03:26:47.376]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.376]      </block>
[03:26:47.376]      // end if-block "protType == 2"
[03:26:47.376]    </control>
[03:26:47.376]  </sequence>
[03:26:47.376]  
[03:26:47.434]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.434]  
[03:26:47.434]  <debugvars>
[03:26:47.434]    // Pre-defined
[03:26:47.434]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.435]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.435]    __dp=0x00000000
[03:26:47.435]    __ap=0x00000000
[03:26:47.435]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.435]    __FlashAddr=0x00000000
[03:26:47.435]    __FlashLen=0x00000000
[03:26:47.435]    __FlashArg=0x00000000
[03:26:47.435]    __FlashOp=0x00000000
[03:26:47.435]    __Result=0x00000000
[03:26:47.435]  </debugvars>
[03:26:47.435]  
[03:26:47.435]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.435]    <block atomic="false" info="">
[03:26:47.435]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.435]        // -> [isSWJ <= 0x00000001]
[03:26:47.435]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.435]        // -> [hasDormant <= 0x00000000]
[03:26:47.435]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.435]        // -> [protType <= 0x00000002]
[03:26:47.435]    </block>
[03:26:47.435]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.435]      // if-block "protType == 1"
[03:26:47.435]        // =>  FALSE
[03:26:47.435]      // skip if-block "protType == 1"
[03:26:47.435]    </control>
[03:26:47.435]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.435]      // if-block "protType == 2"
[03:26:47.435]        // =>  TRUE
[03:26:47.435]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.435]        // if-block "isSWJ"
[03:26:47.435]          // =>  TRUE
[03:26:47.437]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.437]          // if-block "hasDormant"
[03:26:47.437]            // =>  FALSE
[03:26:47.437]          // skip if-block "hasDormant"
[03:26:47.437]        </control>
[03:26:47.437]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.437]          // if-block "!hasDormant"
[03:26:47.437]            // =>  TRUE
[03:26:47.437]          <block atomic="false" info="">
[03:26:47.438]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.438]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.438]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.460]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.461]          </block>
[03:26:47.461]          // end if-block "!hasDormant"
[03:26:47.461]        </control>
[03:26:47.461]        // end if-block "isSWJ"
[03:26:47.461]      </control>
[03:26:47.461]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.461]        // if-block "!isSWJ"
[03:26:47.462]          // =>  FALSE
[03:26:47.462]        // skip if-block "!isSWJ"
[03:26:47.462]      </control>
[03:26:47.462]      <block atomic="false" info="">
[03:26:47.462]        ReadDP(0x0);
[03:26:47.463]  
[03:26:47.463]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.463]  
[03:26:47.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.463]      </block>
[03:26:47.463]      // end if-block "protType == 2"
[03:26:47.464]    </control>
[03:26:47.464]  </sequence>
[03:26:47.464]  
[03:26:47.516]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.516]  
[03:26:47.517]  <debugvars>
[03:26:47.517]    // Pre-defined
[03:26:47.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.517]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.517]    __dp=0x00000000
[03:26:47.517]    __ap=0x00000000
[03:26:47.517]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.517]    __FlashAddr=0x00000000
[03:26:47.517]    __FlashLen=0x00000000
[03:26:47.517]    __FlashArg=0x00000000
[03:26:47.517]    __FlashOp=0x00000000
[03:26:47.517]    __Result=0x00000000
[03:26:47.517]  </debugvars>
[03:26:47.517]  
[03:26:47.517]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.517]    <block atomic="false" info="">
[03:26:47.517]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.517]        // -> [isSWJ <= 0x00000001]
[03:26:47.517]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.518]        // -> [hasDormant <= 0x00000000]
[03:26:47.518]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.518]        // -> [protType <= 0x00000002]
[03:26:47.518]    </block>
[03:26:47.518]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.518]      // if-block "protType == 1"
[03:26:47.518]        // =>  FALSE
[03:26:47.518]      // skip if-block "protType == 1"
[03:26:47.520]    </control>
[03:26:47.520]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.520]      // if-block "protType == 2"
[03:26:47.520]        // =>  TRUE
[03:26:47.520]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.520]        // if-block "isSWJ"
[03:26:47.520]          // =>  TRUE
[03:26:47.520]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.520]          // if-block "hasDormant"
[03:26:47.520]            // =>  FALSE
[03:26:47.520]          // skip if-block "hasDormant"
[03:26:47.520]        </control>
[03:26:47.521]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.521]          // if-block "!hasDormant"
[03:26:47.521]            // =>  TRUE
[03:26:47.521]          <block atomic="false" info="">
[03:26:47.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.525]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.528]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.529]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.529]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.531]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.532]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.532]          </block>
[03:26:47.532]          // end if-block "!hasDormant"
[03:26:47.532]        </control>
[03:26:47.532]        // end if-block "isSWJ"
[03:26:47.532]      </control>
[03:26:47.532]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.532]        // if-block "!isSWJ"
[03:26:47.532]          // =>  FALSE
[03:26:47.532]        // skip if-block "!isSWJ"
[03:26:47.533]      </control>
[03:26:47.533]      <block atomic="false" info="">
[03:26:47.533]        ReadDP(0x0);
[03:26:47.533]  
[03:26:47.533]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.533]  
[03:26:47.533]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.533]      </block>
[03:26:47.533]      // end if-block "protType == 2"
[03:26:47.533]    </control>
[03:26:47.533]  </sequence>
[03:26:47.533]  
[03:26:47.591]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.591]  
[03:26:47.592]  <debugvars>
[03:26:47.592]    // Pre-defined
[03:26:47.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.592]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.592]    __dp=0x00000000
[03:26:47.592]    __ap=0x00000000
[03:26:47.592]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.592]    __FlashAddr=0x00000000
[03:26:47.592]    __FlashLen=0x00000000
[03:26:47.592]    __FlashArg=0x00000000
[03:26:47.592]    __FlashOp=0x00000000
[03:26:47.592]    __Result=0x00000000
[03:26:47.592]  </debugvars>
[03:26:47.592]  
[03:26:47.592]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.592]    <block atomic="false" info="">
[03:26:47.592]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.592]        // -> [isSWJ <= 0x00000001]
[03:26:47.592]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.592]        // -> [hasDormant <= 0x00000000]
[03:26:47.594]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.594]        // -> [protType <= 0x00000002]
[03:26:47.594]    </block>
[03:26:47.594]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.594]      // if-block "protType == 1"
[03:26:47.594]        // =>  FALSE
[03:26:47.594]      // skip if-block "protType == 1"
[03:26:47.594]    </control>
[03:26:47.594]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.594]      // if-block "protType == 2"
[03:26:47.594]        // =>  TRUE
[03:26:47.594]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.594]        // if-block "isSWJ"
[03:26:47.594]          // =>  TRUE
[03:26:47.594]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.594]          // if-block "hasDormant"
[03:26:47.594]            // =>  FALSE
[03:26:47.594]          // skip if-block "hasDormant"
[03:26:47.594]        </control>
[03:26:47.594]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.594]          // if-block "!hasDormant"
[03:26:47.596]            // =>  TRUE
[03:26:47.596]          <block atomic="false" info="">
[03:26:47.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.600]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.604]          </block>
[03:26:47.604]          // end if-block "!hasDormant"
[03:26:47.607]        </control>
[03:26:47.607]        // end if-block "isSWJ"
[03:26:47.607]      </control>
[03:26:47.607]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.607]        // if-block "!isSWJ"
[03:26:47.607]          // =>  FALSE
[03:26:47.607]        // skip if-block "!isSWJ"
[03:26:47.607]      </control>
[03:26:47.607]      <block atomic="false" info="">
[03:26:47.607]        ReadDP(0x0);
[03:26:47.608]  
[03:26:47.608]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.608]  
[03:26:47.608]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.609]      </block>
[03:26:47.609]      // end if-block "protType == 2"
[03:26:47.609]    </control>
[03:26:47.609]  </sequence>
[03:26:47.609]  
[03:26:47.666]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.666]  
[03:26:47.666]  <debugvars>
[03:26:47.666]    // Pre-defined
[03:26:47.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.667]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.667]    __dp=0x00000000
[03:26:47.667]    __ap=0x00000000
[03:26:47.667]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.667]    __FlashAddr=0x00000000
[03:26:47.667]    __FlashLen=0x00000000
[03:26:47.667]    __FlashArg=0x00000000
[03:26:47.667]    __FlashOp=0x00000000
[03:26:47.667]    __Result=0x00000000
[03:26:47.667]  </debugvars>
[03:26:47.667]  
[03:26:47.667]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.667]    <block atomic="false" info="">
[03:26:47.667]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.667]        // -> [isSWJ <= 0x00000001]
[03:26:47.667]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.667]        // -> [hasDormant <= 0x00000000]
[03:26:47.667]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.667]        // -> [protType <= 0x00000002]
[03:26:47.667]    </block>
[03:26:47.667]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.667]      // if-block "protType == 1"
[03:26:47.669]        // =>  FALSE
[03:26:47.669]      // skip if-block "protType == 1"
[03:26:47.669]    </control>
[03:26:47.669]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.669]      // if-block "protType == 2"
[03:26:47.669]        // =>  TRUE
[03:26:47.669]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.669]        // if-block "isSWJ"
[03:26:47.669]          // =>  TRUE
[03:26:47.669]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.671]          // if-block "hasDormant"
[03:26:47.671]            // =>  FALSE
[03:26:47.671]          // skip if-block "hasDormant"
[03:26:47.671]        </control>
[03:26:47.671]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.671]          // if-block "!hasDormant"
[03:26:47.671]            // =>  TRUE
[03:26:47.671]          <block atomic="false" info="">
[03:26:47.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.673]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.679]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.679]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.681]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.681]          </block>
[03:26:47.681]          // end if-block "!hasDormant"
[03:26:47.681]        </control>
[03:26:47.681]        // end if-block "isSWJ"
[03:26:47.681]      </control>
[03:26:47.681]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.681]        // if-block "!isSWJ"
[03:26:47.681]          // =>  FALSE
[03:26:47.681]        // skip if-block "!isSWJ"
[03:26:47.681]      </control>
[03:26:47.681]      <block atomic="false" info="">
[03:26:47.681]        ReadDP(0x0);
[03:26:47.684]  
[03:26:47.684]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.684]  
[03:26:47.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.684]      </block>
[03:26:47.684]      // end if-block "protType == 2"
[03:26:47.684]    </control>
[03:26:47.684]  </sequence>
[03:26:47.684]  
[03:26:47.740]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.740]  
[03:26:47.740]  <debugvars>
[03:26:47.740]    // Pre-defined
[03:26:47.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.740]    __dp=0x00000000
[03:26:47.740]    __ap=0x00000000
[03:26:47.741]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.742]    __FlashAddr=0x00000000
[03:26:47.742]    __FlashLen=0x00000000
[03:26:47.742]    __FlashArg=0x00000000
[03:26:47.742]    __FlashOp=0x00000000
[03:26:47.742]    __Result=0x00000000
[03:26:47.742]  </debugvars>
[03:26:47.742]  
[03:26:47.742]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.742]    <block atomic="false" info="">
[03:26:47.742]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.742]        // -> [isSWJ <= 0x00000001]
[03:26:47.743]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.743]        // -> [hasDormant <= 0x00000000]
[03:26:47.743]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.743]        // -> [protType <= 0x00000002]
[03:26:47.743]    </block>
[03:26:47.743]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.743]      // if-block "protType == 1"
[03:26:47.743]        // =>  FALSE
[03:26:47.744]      // skip if-block "protType == 1"
[03:26:47.744]    </control>
[03:26:47.744]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.744]      // if-block "protType == 2"
[03:26:47.744]        // =>  TRUE
[03:26:47.744]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.744]        // if-block "isSWJ"
[03:26:47.744]          // =>  TRUE
[03:26:47.744]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.744]          // if-block "hasDormant"
[03:26:47.744]            // =>  FALSE
[03:26:47.744]          // skip if-block "hasDormant"
[03:26:47.744]        </control>
[03:26:47.744]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.744]          // if-block "!hasDormant"
[03:26:47.744]            // =>  TRUE
[03:26:47.744]          <block atomic="false" info="">
[03:26:47.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.750]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.751]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.753]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.754]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.754]          </block>
[03:26:47.754]          // end if-block "!hasDormant"
[03:26:47.754]        </control>
[03:26:47.754]        // end if-block "isSWJ"
[03:26:47.754]      </control>
[03:26:47.754]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.754]        // if-block "!isSWJ"
[03:26:47.754]          // =>  FALSE
[03:26:47.754]        // skip if-block "!isSWJ"
[03:26:47.754]      </control>
[03:26:47.757]      <block atomic="false" info="">
[03:26:47.757]        ReadDP(0x0);
[03:26:47.758]  
[03:26:47.758]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.758]  
[03:26:47.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.758]      </block>
[03:26:47.758]      // end if-block "protType == 2"
[03:26:47.758]    </control>
[03:26:47.758]  </sequence>
[03:26:47.758]  
[03:26:47.814]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.814]  
[03:26:47.814]  <debugvars>
[03:26:47.814]    // Pre-defined
[03:26:47.814]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.814]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.814]    __dp=0x00000000
[03:26:47.815]    __ap=0x00000000
[03:26:47.815]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.815]    __FlashAddr=0x00000000
[03:26:47.815]    __FlashLen=0x00000000
[03:26:47.815]    __FlashArg=0x00000000
[03:26:47.815]    __FlashOp=0x00000000
[03:26:47.815]    __Result=0x00000000
[03:26:47.815]  </debugvars>
[03:26:47.815]  
[03:26:47.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.815]    <block atomic="false" info="">
[03:26:47.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.815]        // -> [isSWJ <= 0x00000001]
[03:26:47.815]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.815]        // -> [hasDormant <= 0x00000000]
[03:26:47.817]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.817]        // -> [protType <= 0x00000002]
[03:26:47.817]    </block>
[03:26:47.817]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.817]      // if-block "protType == 1"
[03:26:47.817]        // =>  FALSE
[03:26:47.817]      // skip if-block "protType == 1"
[03:26:47.817]    </control>
[03:26:47.817]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.819]      // if-block "protType == 2"
[03:26:47.819]        // =>  TRUE
[03:26:47.819]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.819]        // if-block "isSWJ"
[03:26:47.819]          // =>  TRUE
[03:26:47.819]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.819]          // if-block "hasDormant"
[03:26:47.819]            // =>  FALSE
[03:26:47.819]          // skip if-block "hasDormant"
[03:26:47.819]        </control>
[03:26:47.819]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.819]          // if-block "!hasDormant"
[03:26:47.819]            // =>  TRUE
[03:26:47.819]          <block atomic="false" info="">
[03:26:47.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.821]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.823]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.829]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.829]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.832]          </block>
[03:26:47.832]          // end if-block "!hasDormant"
[03:26:47.832]        </control>
[03:26:47.832]        // end if-block "isSWJ"
[03:26:47.832]      </control>
[03:26:47.832]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.832]        // if-block "!isSWJ"
[03:26:47.832]          // =>  FALSE
[03:26:47.832]        // skip if-block "!isSWJ"
[03:26:47.832]      </control>
[03:26:47.833]      <block atomic="false" info="">
[03:26:47.833]        ReadDP(0x0);
[03:26:47.834]  
[03:26:47.834]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.834]  
[03:26:47.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.834]      </block>
[03:26:47.834]      // end if-block "protType == 2"
[03:26:47.834]    </control>
[03:26:47.834]  </sequence>
[03:26:47.834]  
[03:26:47.892]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.892]  
[03:26:47.892]  <debugvars>
[03:26:47.892]    // Pre-defined
[03:26:47.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.892]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.892]    __dp=0x00000000
[03:26:47.892]    __ap=0x00000000
[03:26:47.892]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.892]    __FlashAddr=0x00000000
[03:26:47.892]    __FlashLen=0x00000000
[03:26:47.892]    __FlashArg=0x00000000
[03:26:47.892]    __FlashOp=0x00000000
[03:26:47.892]    __Result=0x00000000
[03:26:47.892]  </debugvars>
[03:26:47.892]  
[03:26:47.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.892]    <block atomic="false" info="">
[03:26:47.892]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.892]        // -> [isSWJ <= 0x00000001]
[03:26:47.892]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.892]        // -> [hasDormant <= 0x00000000]
[03:26:47.892]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.892]        // -> [protType <= 0x00000002]
[03:26:47.892]    </block>
[03:26:47.892]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.892]      // if-block "protType == 1"
[03:26:47.892]        // =>  FALSE
[03:26:47.892]      // skip if-block "protType == 1"
[03:26:47.892]    </control>
[03:26:47.892]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.892]      // if-block "protType == 2"
[03:26:47.896]        // =>  TRUE
[03:26:47.896]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.896]        // if-block "isSWJ"
[03:26:47.896]          // =>  TRUE
[03:26:47.896]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.896]          // if-block "hasDormant"
[03:26:47.896]            // =>  FALSE
[03:26:47.896]          // skip if-block "hasDormant"
[03:26:47.896]        </control>
[03:26:47.896]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.896]          // if-block "!hasDormant"
[03:26:47.896]            // =>  TRUE
[03:26:47.896]          <block atomic="false" info="">
[03:26:47.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.900]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.900]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.904]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.904]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.908]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.912]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.912]          </block>
[03:26:47.912]          // end if-block "!hasDormant"
[03:26:47.912]        </control>
[03:26:47.912]        // end if-block "isSWJ"
[03:26:47.912]      </control>
[03:26:47.912]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.912]        // if-block "!isSWJ"
[03:26:47.912]          // =>  FALSE
[03:26:47.912]        // skip if-block "!isSWJ"
[03:26:47.912]      </control>
[03:26:47.912]      <block atomic="false" info="">
[03:26:47.912]        ReadDP(0x0);
[03:26:47.915]  
[03:26:47.915]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.915]  
[03:26:47.916]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.916]      </block>
[03:26:47.917]      // end if-block "protType == 2"
[03:26:47.917]    </control>
[03:26:47.917]  </sequence>
[03:26:47.917]  
[03:26:47.971]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:47.971]  
[03:26:47.972]  <debugvars>
[03:26:47.972]    // Pre-defined
[03:26:47.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:47.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:47.972]    __dp=0x00000000
[03:26:47.972]    __ap=0x00000000
[03:26:47.972]    __traceout=0x00000000      (Trace Disabled)
[03:26:47.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:47.972]    __FlashAddr=0x00000000
[03:26:47.973]    __FlashLen=0x00000000
[03:26:47.973]    __FlashArg=0x00000000
[03:26:47.973]    __FlashOp=0x00000000
[03:26:47.973]    __Result=0x00000000
[03:26:47.973]  </debugvars>
[03:26:47.973]  
[03:26:47.973]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:47.973]    <block atomic="false" info="">
[03:26:47.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:47.974]        // -> [isSWJ <= 0x00000001]
[03:26:47.974]      __var hasDormant = __protocol & 0x00020000;
[03:26:47.974]        // -> [hasDormant <= 0x00000000]
[03:26:47.974]      __var protType   = __protocol & 0x0000FFFF;
[03:26:47.974]        // -> [protType <= 0x00000002]
[03:26:47.974]    </block>
[03:26:47.974]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:47.974]      // if-block "protType == 1"
[03:26:47.974]        // =>  FALSE
[03:26:47.975]      // skip if-block "protType == 1"
[03:26:47.975]    </control>
[03:26:47.975]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:47.975]      // if-block "protType == 2"
[03:26:47.975]        // =>  TRUE
[03:26:47.975]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:47.975]        // if-block "isSWJ"
[03:26:47.975]          // =>  TRUE
[03:26:47.975]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:47.976]          // if-block "hasDormant"
[03:26:47.976]            // =>  FALSE
[03:26:47.976]          // skip if-block "hasDormant"
[03:26:47.976]        </control>
[03:26:47.976]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:47.976]          // if-block "!hasDormant"
[03:26:47.976]            // =>  TRUE
[03:26:47.976]          <block atomic="false" info="">
[03:26:47.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:47.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.978]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:47.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:47.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:47.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.981]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:47.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:47.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:47.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:47.984]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:47.986]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:47.986]          </block>
[03:26:47.986]          // end if-block "!hasDormant"
[03:26:47.986]        </control>
[03:26:47.986]        // end if-block "isSWJ"
[03:26:47.986]      </control>
[03:26:47.987]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:47.987]        // if-block "!isSWJ"
[03:26:47.987]          // =>  FALSE
[03:26:47.987]        // skip if-block "!isSWJ"
[03:26:47.987]      </control>
[03:26:47.987]      <block atomic="false" info="">
[03:26:47.987]        ReadDP(0x0);
[03:26:47.988]  
[03:26:47.988]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:47.988]  
[03:26:47.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:47.989]      </block>
[03:26:47.989]      // end if-block "protType == 2"
[03:26:47.989]    </control>
[03:26:47.989]  </sequence>
[03:26:47.989]  
[03:26:48.049]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.049]  
[03:26:48.049]  <debugvars>
[03:26:48.049]    // Pre-defined
[03:26:48.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.049]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.049]    __dp=0x00000000
[03:26:48.049]    __ap=0x00000000
[03:26:48.049]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.049]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.049]    __FlashAddr=0x00000000
[03:26:48.049]    __FlashLen=0x00000000
[03:26:48.049]    __FlashArg=0x00000000
[03:26:48.049]    __FlashOp=0x00000000
[03:26:48.049]    __Result=0x00000000
[03:26:48.049]  </debugvars>
[03:26:48.049]  
[03:26:48.049]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.049]    <block atomic="false" info="">
[03:26:48.049]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.049]        // -> [isSWJ <= 0x00000001]
[03:26:48.049]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.049]        // -> [hasDormant <= 0x00000000]
[03:26:48.049]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.049]        // -> [protType <= 0x00000002]
[03:26:48.049]    </block>
[03:26:48.049]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.049]      // if-block "protType == 1"
[03:26:48.049]        // =>  FALSE
[03:26:48.049]      // skip if-block "protType == 1"
[03:26:48.049]    </control>
[03:26:48.049]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.049]      // if-block "protType == 2"
[03:26:48.053]        // =>  TRUE
[03:26:48.053]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.053]        // if-block "isSWJ"
[03:26:48.053]          // =>  TRUE
[03:26:48.053]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.053]          // if-block "hasDormant"
[03:26:48.053]            // =>  FALSE
[03:26:48.053]          // skip if-block "hasDormant"
[03:26:48.053]        </control>
[03:26:48.053]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.053]          // if-block "!hasDormant"
[03:26:48.053]            // =>  TRUE
[03:26:48.053]          <block atomic="false" info="">
[03:26:48.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.053]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.053]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.057]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.057]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.057]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.061]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.061]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.061]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.061]          </block>
[03:26:48.061]          // end if-block "!hasDormant"
[03:26:48.061]        </control>
[03:26:48.061]        // end if-block "isSWJ"
[03:26:48.061]      </control>
[03:26:48.061]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.065]        // if-block "!isSWJ"
[03:26:48.065]          // =>  FALSE
[03:26:48.065]        // skip if-block "!isSWJ"
[03:26:48.065]      </control>
[03:26:48.065]      <block atomic="false" info="">
[03:26:48.065]        ReadDP(0x0);
[03:26:48.065]  
[03:26:48.065]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.065]  
[03:26:48.065]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.065]      </block>
[03:26:48.065]      // end if-block "protType == 2"
[03:26:48.065]    </control>
[03:26:48.065]  </sequence>
[03:26:48.065]  
[03:26:48.121]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.121]  
[03:26:48.121]  <debugvars>
[03:26:48.121]    // Pre-defined
[03:26:48.121]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.121]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.121]    __dp=0x00000000
[03:26:48.121]    __ap=0x00000000
[03:26:48.121]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.121]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.121]    __FlashAddr=0x00000000
[03:26:48.121]    __FlashLen=0x00000000
[03:26:48.121]    __FlashArg=0x00000000
[03:26:48.121]    __FlashOp=0x00000000
[03:26:48.121]    __Result=0x00000000
[03:26:48.121]  </debugvars>
[03:26:48.121]  
[03:26:48.121]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.121]    <block atomic="false" info="">
[03:26:48.121]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.121]        // -> [isSWJ <= 0x00000001]
[03:26:48.121]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.121]        // -> [hasDormant <= 0x00000000]
[03:26:48.121]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.121]        // -> [protType <= 0x00000002]
[03:26:48.121]    </block>
[03:26:48.121]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.121]      // if-block "protType == 1"
[03:26:48.121]        // =>  FALSE
[03:26:48.121]      // skip if-block "protType == 1"
[03:26:48.121]    </control>
[03:26:48.121]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.121]      // if-block "protType == 2"
[03:26:48.121]        // =>  TRUE
[03:26:48.121]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.121]        // if-block "isSWJ"
[03:26:48.121]          // =>  TRUE
[03:26:48.121]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.121]          // if-block "hasDormant"
[03:26:48.121]            // =>  FALSE
[03:26:48.125]          // skip if-block "hasDormant"
[03:26:48.125]        </control>
[03:26:48.125]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.125]          // if-block "!hasDormant"
[03:26:48.125]            // =>  TRUE
[03:26:48.125]          <block atomic="false" info="">
[03:26:48.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.129]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.129]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.129]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.133]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.137]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.137]          </block>
[03:26:48.137]          // end if-block "!hasDormant"
[03:26:48.137]        </control>
[03:26:48.137]        // end if-block "isSWJ"
[03:26:48.141]      </control>
[03:26:48.141]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.141]        // if-block "!isSWJ"
[03:26:48.141]          // =>  FALSE
[03:26:48.141]        // skip if-block "!isSWJ"
[03:26:48.141]      </control>
[03:26:48.141]      <block atomic="false" info="">
[03:26:48.141]        ReadDP(0x0);
[03:26:48.141]  
[03:26:48.141]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.141]  
[03:26:48.141]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.141]      </block>
[03:26:48.141]      // end if-block "protType == 2"
[03:26:48.145]    </control>
[03:26:48.145]  </sequence>
[03:26:48.145]  
[03:26:48.205]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.205]  
[03:26:48.205]  <debugvars>
[03:26:48.205]    // Pre-defined
[03:26:48.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.205]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.205]    __dp=0x00000000
[03:26:48.205]    __ap=0x00000000
[03:26:48.205]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.205]    __FlashAddr=0x00000000
[03:26:48.205]    __FlashLen=0x00000000
[03:26:48.205]    __FlashArg=0x00000000
[03:26:48.205]    __FlashOp=0x00000000
[03:26:48.205]    __Result=0x00000000
[03:26:48.205]  </debugvars>
[03:26:48.205]  
[03:26:48.205]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.205]    <block atomic="false" info="">
[03:26:48.205]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.205]        // -> [isSWJ <= 0x00000001]
[03:26:48.205]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.205]        // -> [hasDormant <= 0x00000000]
[03:26:48.205]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.205]        // -> [protType <= 0x00000002]
[03:26:48.205]    </block>
[03:26:48.205]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.205]      // if-block "protType == 1"
[03:26:48.205]        // =>  FALSE
[03:26:48.205]      // skip if-block "protType == 1"
[03:26:48.209]    </control>
[03:26:48.209]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.209]      // if-block "protType == 2"
[03:26:48.209]        // =>  TRUE
[03:26:48.209]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.209]        // if-block "isSWJ"
[03:26:48.209]          // =>  TRUE
[03:26:48.209]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.209]          // if-block "hasDormant"
[03:26:48.209]            // =>  FALSE
[03:26:48.209]          // skip if-block "hasDormant"
[03:26:48.209]        </control>
[03:26:48.209]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.209]          // if-block "!hasDormant"
[03:26:48.209]            // =>  TRUE
[03:26:48.209]          <block atomic="false" info="">
[03:26:48.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.213]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.225]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.229]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.229]          </block>
[03:26:48.229]          // end if-block "!hasDormant"
[03:26:48.229]        </control>
[03:26:48.229]        // end if-block "isSWJ"
[03:26:48.229]      </control>
[03:26:48.229]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.229]        // if-block "!isSWJ"
[03:26:48.229]          // =>  FALSE
[03:26:48.229]        // skip if-block "!isSWJ"
[03:26:48.229]      </control>
[03:26:48.229]      <block atomic="false" info="">
[03:26:48.229]        ReadDP(0x0);
[03:26:48.233]  
[03:26:48.233]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.233]  
[03:26:48.233]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.233]      </block>
[03:26:48.233]      // end if-block "protType == 2"
[03:26:48.233]    </control>
[03:26:48.233]  </sequence>
[03:26:48.233]  
[03:26:48.289]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.289]  
[03:26:48.289]  <debugvars>
[03:26:48.289]    // Pre-defined
[03:26:48.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.289]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.289]    __dp=0x00000000
[03:26:48.289]    __ap=0x00000000
[03:26:48.289]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.289]    __FlashAddr=0x00000000
[03:26:48.289]    __FlashLen=0x00000000
[03:26:48.289]    __FlashArg=0x00000000
[03:26:48.289]    __FlashOp=0x00000000
[03:26:48.289]    __Result=0x00000000
[03:26:48.289]  </debugvars>
[03:26:48.289]  
[03:26:48.289]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.289]    <block atomic="false" info="">
[03:26:48.289]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.289]        // -> [isSWJ <= 0x00000001]
[03:26:48.289]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.289]        // -> [hasDormant <= 0x00000000]
[03:26:48.289]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.289]        // -> [protType <= 0x00000002]
[03:26:48.289]    </block>
[03:26:48.289]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.289]      // if-block "protType == 1"
[03:26:48.289]        // =>  FALSE
[03:26:48.289]      // skip if-block "protType == 1"
[03:26:48.289]    </control>
[03:26:48.289]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.289]      // if-block "protType == 2"
[03:26:48.289]        // =>  TRUE
[03:26:48.289]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.289]        // if-block "isSWJ"
[03:26:48.289]          // =>  TRUE
[03:26:48.289]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.289]          // if-block "hasDormant"
[03:26:48.293]            // =>  FALSE
[03:26:48.293]          // skip if-block "hasDormant"
[03:26:48.293]        </control>
[03:26:48.293]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.293]          // if-block "!hasDormant"
[03:26:48.293]            // =>  TRUE
[03:26:48.293]          <block atomic="false" info="">
[03:26:48.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.297]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.301]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.305]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.305]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.305]          </block>
[03:26:48.305]          // end if-block "!hasDormant"
[03:26:48.305]        </control>
[03:26:48.305]        // end if-block "isSWJ"
[03:26:48.305]      </control>
[03:26:48.305]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.305]        // if-block "!isSWJ"
[03:26:48.305]          // =>  FALSE
[03:26:48.305]        // skip if-block "!isSWJ"
[03:26:48.305]      </control>
[03:26:48.305]      <block atomic="false" info="">
[03:26:48.305]        ReadDP(0x0);
[03:26:48.309]  
[03:26:48.309]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.309]  
[03:26:48.309]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.309]      </block>
[03:26:48.309]      // end if-block "protType == 2"
[03:26:48.309]    </control>
[03:26:48.309]  </sequence>
[03:26:48.309]  
[03:26:48.368]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.368]  
[03:26:48.368]  <debugvars>
[03:26:48.368]    // Pre-defined
[03:26:48.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.368]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.368]    __dp=0x00000000
[03:26:48.368]    __ap=0x00000000
[03:26:48.368]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.368]    __FlashAddr=0x00000000
[03:26:48.368]    __FlashLen=0x00000000
[03:26:48.368]    __FlashArg=0x00000000
[03:26:48.368]    __FlashOp=0x00000000
[03:26:48.368]    __Result=0x00000000
[03:26:48.368]  </debugvars>
[03:26:48.368]  
[03:26:48.368]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.368]    <block atomic="false" info="">
[03:26:48.368]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.368]        // -> [isSWJ <= 0x00000001]
[03:26:48.368]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.368]        // -> [hasDormant <= 0x00000000]
[03:26:48.368]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.368]        // -> [protType <= 0x00000002]
[03:26:48.368]    </block>
[03:26:48.368]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.368]      // if-block "protType == 1"
[03:26:48.368]        // =>  FALSE
[03:26:48.368]      // skip if-block "protType == 1"
[03:26:48.368]    </control>
[03:26:48.368]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.368]      // if-block "protType == 2"
[03:26:48.368]        // =>  TRUE
[03:26:48.368]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.368]        // if-block "isSWJ"
[03:26:48.368]          // =>  TRUE
[03:26:48.368]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.368]          // if-block "hasDormant"
[03:26:48.368]            // =>  FALSE
[03:26:48.368]          // skip if-block "hasDormant"
[03:26:48.368]        </control>
[03:26:48.372]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.372]          // if-block "!hasDormant"
[03:26:48.372]            // =>  TRUE
[03:26:48.372]          <block atomic="false" info="">
[03:26:48.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.372]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.376]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.380]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.384]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.384]          </block>
[03:26:48.384]          // end if-block "!hasDormant"
[03:26:48.384]        </control>
[03:26:48.384]        // end if-block "isSWJ"
[03:26:48.384]      </control>
[03:26:48.384]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.384]        // if-block "!isSWJ"
[03:26:48.384]          // =>  FALSE
[03:26:48.384]        // skip if-block "!isSWJ"
[03:26:48.384]      </control>
[03:26:48.384]      <block atomic="false" info="">
[03:26:48.384]        ReadDP(0x0);
[03:26:48.388]  
[03:26:48.388]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.388]  
[03:26:48.388]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.388]      </block>
[03:26:48.388]      // end if-block "protType == 2"
[03:26:48.388]    </control>
[03:26:48.388]  </sequence>
[03:26:48.388]  
[03:26:48.448]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.448]  
[03:26:48.448]  <debugvars>
[03:26:48.448]    // Pre-defined
[03:26:48.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.448]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.448]    __dp=0x00000000
[03:26:48.448]    __ap=0x00000000
[03:26:48.448]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.448]    __FlashAddr=0x00000000
[03:26:48.448]    __FlashLen=0x00000000
[03:26:48.448]    __FlashArg=0x00000000
[03:26:48.448]    __FlashOp=0x00000000
[03:26:48.448]    __Result=0x00000000
[03:26:48.448]  </debugvars>
[03:26:48.448]  
[03:26:48.448]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.448]    <block atomic="false" info="">
[03:26:48.448]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.448]        // -> [isSWJ <= 0x00000001]
[03:26:48.448]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.448]        // -> [hasDormant <= 0x00000000]
[03:26:48.448]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.448]        // -> [protType <= 0x00000002]
[03:26:48.448]    </block>
[03:26:48.448]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.448]      // if-block "protType == 1"
[03:26:48.448]        // =>  FALSE
[03:26:48.448]      // skip if-block "protType == 1"
[03:26:48.448]    </control>
[03:26:48.448]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.448]      // if-block "protType == 2"
[03:26:48.448]        // =>  TRUE
[03:26:48.452]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.452]        // if-block "isSWJ"
[03:26:48.452]          // =>  TRUE
[03:26:48.452]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.452]          // if-block "hasDormant"
[03:26:48.452]            // =>  FALSE
[03:26:48.452]          // skip if-block "hasDormant"
[03:26:48.452]        </control>
[03:26:48.452]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.452]          // if-block "!hasDormant"
[03:26:48.452]            // =>  TRUE
[03:26:48.452]          <block atomic="false" info="">
[03:26:48.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.452]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.456]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.460]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.460]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.460]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.460]          </block>
[03:26:48.460]          // end if-block "!hasDormant"
[03:26:48.460]        </control>
[03:26:48.464]        // end if-block "isSWJ"
[03:26:48.464]      </control>
[03:26:48.464]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.464]        // if-block "!isSWJ"
[03:26:48.464]          // =>  FALSE
[03:26:48.464]        // skip if-block "!isSWJ"
[03:26:48.464]      </control>
[03:26:48.464]      <block atomic="false" info="">
[03:26:48.464]        ReadDP(0x0);
[03:26:48.464]  
[03:26:48.464]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.464]  
[03:26:48.464]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.464]      </block>
[03:26:48.464]      // end if-block "protType == 2"
[03:26:48.464]    </control>
[03:26:48.464]  </sequence>
[03:26:48.464]  
[03:26:48.521]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.521]  
[03:26:48.521]  <debugvars>
[03:26:48.521]    // Pre-defined
[03:26:48.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.521]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.522]    __dp=0x00000000
[03:26:48.522]    __ap=0x00000000
[03:26:48.522]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.522]    __FlashAddr=0x00000000
[03:26:48.522]    __FlashLen=0x00000000
[03:26:48.522]    __FlashArg=0x00000000
[03:26:48.522]    __FlashOp=0x00000000
[03:26:48.522]    __Result=0x00000000
[03:26:48.522]  </debugvars>
[03:26:48.522]  
[03:26:48.523]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.523]    <block atomic="false" info="">
[03:26:48.523]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.523]        // -> [isSWJ <= 0x00000001]
[03:26:48.523]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.523]        // -> [hasDormant <= 0x00000000]
[03:26:48.523]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.523]        // -> [protType <= 0x00000002]
[03:26:48.523]    </block>
[03:26:48.523]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.523]      // if-block "protType == 1"
[03:26:48.523]        // =>  FALSE
[03:26:48.523]      // skip if-block "protType == 1"
[03:26:48.523]    </control>
[03:26:48.523]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.523]      // if-block "protType == 2"
[03:26:48.523]        // =>  TRUE
[03:26:48.525]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.525]        // if-block "isSWJ"
[03:26:48.525]          // =>  TRUE
[03:26:48.525]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.525]          // if-block "hasDormant"
[03:26:48.525]            // =>  FALSE
[03:26:48.525]          // skip if-block "hasDormant"
[03:26:48.525]        </control>
[03:26:48.525]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.525]          // if-block "!hasDormant"
[03:26:48.525]            // =>  TRUE
[03:26:48.525]          <block atomic="false" info="">
[03:26:48.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.525]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.530]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.530]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.532]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.533]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.535]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.536]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.537]          </block>
[03:26:48.537]          // end if-block "!hasDormant"
[03:26:48.537]        </control>
[03:26:48.537]        // end if-block "isSWJ"
[03:26:48.537]      </control>
[03:26:48.537]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.537]        // if-block "!isSWJ"
[03:26:48.537]          // =>  FALSE
[03:26:48.537]        // skip if-block "!isSWJ"
[03:26:48.537]      </control>
[03:26:48.537]      <block atomic="false" info="">
[03:26:48.537]        ReadDP(0x0);
[03:26:48.541]  
[03:26:48.541]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.541]  
[03:26:48.541]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.541]      </block>
[03:26:48.541]      // end if-block "protType == 2"
[03:26:48.541]    </control>
[03:26:48.541]  </sequence>
[03:26:48.541]  
[03:26:48.595]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.595]  
[03:26:48.595]  <debugvars>
[03:26:48.595]    // Pre-defined
[03:26:48.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.595]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.595]    __dp=0x00000000
[03:26:48.595]    __ap=0x00000000
[03:26:48.595]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.596]    __FlashAddr=0x00000000
[03:26:48.596]    __FlashLen=0x00000000
[03:26:48.596]    __FlashArg=0x00000000
[03:26:48.596]    __FlashOp=0x00000000
[03:26:48.596]    __Result=0x00000000
[03:26:48.596]  </debugvars>
[03:26:48.596]  
[03:26:48.596]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.596]    <block atomic="false" info="">
[03:26:48.596]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.596]        // -> [isSWJ <= 0x00000001]
[03:26:48.596]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.596]        // -> [hasDormant <= 0x00000000]
[03:26:48.596]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.596]        // -> [protType <= 0x00000002]
[03:26:48.596]    </block>
[03:26:48.596]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.596]      // if-block "protType == 1"
[03:26:48.596]        // =>  FALSE
[03:26:48.596]      // skip if-block "protType == 1"
[03:26:48.596]    </control>
[03:26:48.596]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.596]      // if-block "protType == 2"
[03:26:48.598]        // =>  TRUE
[03:26:48.598]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.598]        // if-block "isSWJ"
[03:26:48.598]          // =>  TRUE
[03:26:48.598]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.598]          // if-block "hasDormant"
[03:26:48.598]            // =>  FALSE
[03:26:48.598]          // skip if-block "hasDormant"
[03:26:48.598]        </control>
[03:26:48.598]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.599]          // if-block "!hasDormant"
[03:26:48.599]            // =>  TRUE
[03:26:48.599]          <block atomic="false" info="">
[03:26:48.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.601]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.607]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.607]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.611]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.615]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.615]          </block>
[03:26:48.615]          // end if-block "!hasDormant"
[03:26:48.615]        </control>
[03:26:48.615]        // end if-block "isSWJ"
[03:26:48.615]      </control>
[03:26:48.615]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.615]        // if-block "!isSWJ"
[03:26:48.615]          // =>  FALSE
[03:26:48.615]        // skip if-block "!isSWJ"
[03:26:48.615]      </control>
[03:26:48.615]      <block atomic="false" info="">
[03:26:48.615]        ReadDP(0x0);
[03:26:48.617]  
[03:26:48.617]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.617]  
[03:26:48.617]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.617]      </block>
[03:26:48.617]      // end if-block "protType == 2"
[03:26:48.617]    </control>
[03:26:48.617]  </sequence>
[03:26:48.617]  
[03:26:48.681]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.681]  
[03:26:48.681]  <debugvars>
[03:26:48.681]    // Pre-defined
[03:26:48.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.681]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.681]    __dp=0x00000000
[03:26:48.681]    __ap=0x00000000
[03:26:48.681]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.681]    __FlashAddr=0x00000000
[03:26:48.681]    __FlashLen=0x00000000
[03:26:48.681]    __FlashArg=0x00000000
[03:26:48.681]    __FlashOp=0x00000000
[03:26:48.681]    __Result=0x00000000
[03:26:48.681]  </debugvars>
[03:26:48.681]  
[03:26:48.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.681]    <block atomic="false" info="">
[03:26:48.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.681]        // -> [isSWJ <= 0x00000001]
[03:26:48.681]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.681]        // -> [hasDormant <= 0x00000000]
[03:26:48.681]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.681]        // -> [protType <= 0x00000002]
[03:26:48.681]    </block>
[03:26:48.681]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.681]      // if-block "protType == 1"
[03:26:48.681]        // =>  FALSE
[03:26:48.681]      // skip if-block "protType == 1"
[03:26:48.681]    </control>
[03:26:48.685]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.685]      // if-block "protType == 2"
[03:26:48.685]        // =>  TRUE
[03:26:48.685]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.685]        // if-block "isSWJ"
[03:26:48.685]          // =>  TRUE
[03:26:48.685]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.685]          // if-block "hasDormant"
[03:26:48.685]            // =>  FALSE
[03:26:48.685]          // skip if-block "hasDormant"
[03:26:48.685]        </control>
[03:26:48.685]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.685]          // if-block "!hasDormant"
[03:26:48.685]            // =>  TRUE
[03:26:48.685]          <block atomic="false" info="">
[03:26:48.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.685]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.689]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.689]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.694]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.696]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.696]          </block>
[03:26:48.696]          // end if-block "!hasDormant"
[03:26:48.696]        </control>
[03:26:48.696]        // end if-block "isSWJ"
[03:26:48.696]      </control>
[03:26:48.696]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.696]        // if-block "!isSWJ"
[03:26:48.696]          // =>  FALSE
[03:26:48.696]        // skip if-block "!isSWJ"
[03:26:48.696]      </control>
[03:26:48.697]      <block atomic="false" info="">
[03:26:48.697]        ReadDP(0x0);
[03:26:48.700]  
[03:26:48.700]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.700]  
[03:26:48.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.702]      </block>
[03:26:48.702]      // end if-block "protType == 2"
[03:26:48.702]    </control>
[03:26:48.702]  </sequence>
[03:26:48.702]  
[03:26:48.755]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.755]  
[03:26:48.755]  <debugvars>
[03:26:48.755]    // Pre-defined
[03:26:48.755]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.755]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.755]    __dp=0x00000000
[03:26:48.755]    __ap=0x00000000
[03:26:48.755]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.755]    __FlashAddr=0x00000000
[03:26:48.755]    __FlashLen=0x00000000
[03:26:48.755]    __FlashArg=0x00000000
[03:26:48.755]    __FlashOp=0x00000000
[03:26:48.755]    __Result=0x00000000
[03:26:48.755]  </debugvars>
[03:26:48.755]  
[03:26:48.755]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.755]    <block atomic="false" info="">
[03:26:48.755]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.755]        // -> [isSWJ <= 0x00000001]
[03:26:48.755]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.755]        // -> [hasDormant <= 0x00000000]
[03:26:48.755]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.755]        // -> [protType <= 0x00000002]
[03:26:48.755]    </block>
[03:26:48.755]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.755]      // if-block "protType == 1"
[03:26:48.755]        // =>  FALSE
[03:26:48.755]      // skip if-block "protType == 1"
[03:26:48.755]    </control>
[03:26:48.755]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.755]      // if-block "protType == 2"
[03:26:48.755]        // =>  TRUE
[03:26:48.755]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.759]        // if-block "isSWJ"
[03:26:48.759]          // =>  TRUE
[03:26:48.759]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.759]          // if-block "hasDormant"
[03:26:48.759]            // =>  FALSE
[03:26:48.759]          // skip if-block "hasDormant"
[03:26:48.759]        </control>
[03:26:48.759]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.759]          // if-block "!hasDormant"
[03:26:48.759]            // =>  TRUE
[03:26:48.759]          <block atomic="false" info="">
[03:26:48.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.759]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.763]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.767]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.767]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.767]          </block>
[03:26:48.767]          // end if-block "!hasDormant"
[03:26:48.767]        </control>
[03:26:48.767]        // end if-block "isSWJ"
[03:26:48.767]      </control>
[03:26:48.767]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.767]        // if-block "!isSWJ"
[03:26:48.767]          // =>  FALSE
[03:26:48.767]        // skip if-block "!isSWJ"
[03:26:48.771]      </control>
[03:26:48.771]      <block atomic="false" info="">
[03:26:48.771]        ReadDP(0x0);
[03:26:48.771]  
[03:26:48.771]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.771]  
[03:26:48.771]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.771]      </block>
[03:26:48.771]      // end if-block "protType == 2"
[03:26:48.771]    </control>
[03:26:48.771]  </sequence>
[03:26:48.771]  
[03:26:48.827]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.827]  
[03:26:48.827]  <debugvars>
[03:26:48.827]    // Pre-defined
[03:26:48.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.827]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.827]    __dp=0x00000000
[03:26:48.827]    __ap=0x00000000
[03:26:48.827]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.827]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.827]    __FlashAddr=0x00000000
[03:26:48.827]    __FlashLen=0x00000000
[03:26:48.827]    __FlashArg=0x00000000
[03:26:48.827]    __FlashOp=0x00000000
[03:26:48.827]    __Result=0x00000000
[03:26:48.827]  </debugvars>
[03:26:48.827]  
[03:26:48.827]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.827]    <block atomic="false" info="">
[03:26:48.827]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.827]        // -> [isSWJ <= 0x00000001]
[03:26:48.827]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.827]        // -> [hasDormant <= 0x00000000]
[03:26:48.827]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.827]        // -> [protType <= 0x00000002]
[03:26:48.827]    </block>
[03:26:48.827]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.827]      // if-block "protType == 1"
[03:26:48.827]        // =>  FALSE
[03:26:48.827]      // skip if-block "protType == 1"
[03:26:48.827]    </control>
[03:26:48.827]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.827]      // if-block "protType == 2"
[03:26:48.827]        // =>  TRUE
[03:26:48.827]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.827]        // if-block "isSWJ"
[03:26:48.827]          // =>  TRUE
[03:26:48.827]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.827]          // if-block "hasDormant"
[03:26:48.831]            // =>  FALSE
[03:26:48.831]          // skip if-block "hasDormant"
[03:26:48.831]        </control>
[03:26:48.831]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.831]          // if-block "!hasDormant"
[03:26:48.831]            // =>  TRUE
[03:26:48.831]          <block atomic="false" info="">
[03:26:48.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.839]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.839]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.843]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.847]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.847]          </block>
[03:26:48.847]          // end if-block "!hasDormant"
[03:26:48.847]        </control>
[03:26:48.847]        // end if-block "isSWJ"
[03:26:48.847]      </control>
[03:26:48.847]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.847]        // if-block "!isSWJ"
[03:26:48.847]          // =>  FALSE
[03:26:48.847]        // skip if-block "!isSWJ"
[03:26:48.847]      </control>
[03:26:48.847]      <block atomic="false" info="">
[03:26:48.847]        ReadDP(0x0);
[03:26:48.847]  
[03:26:48.847]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.847]  
[03:26:48.847]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.847]      </block>
[03:26:48.847]      // end if-block "protType == 2"
[03:26:48.847]    </control>
[03:26:48.851]  </sequence>
[03:26:48.851]  
[03:26:48.911]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.911]  
[03:26:48.911]  <debugvars>
[03:26:48.911]    // Pre-defined
[03:26:48.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.911]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.911]    __dp=0x00000000
[03:26:48.911]    __ap=0x00000000
[03:26:48.911]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.911]    __FlashAddr=0x00000000
[03:26:48.911]    __FlashLen=0x00000000
[03:26:48.911]    __FlashArg=0x00000000
[03:26:48.911]    __FlashOp=0x00000000
[03:26:48.911]    __Result=0x00000000
[03:26:48.911]  </debugvars>
[03:26:48.911]  
[03:26:48.911]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.911]    <block atomic="false" info="">
[03:26:48.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.911]        // -> [isSWJ <= 0x00000001]
[03:26:48.911]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.911]        // -> [hasDormant <= 0x00000000]
[03:26:48.911]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.911]        // -> [protType <= 0x00000002]
[03:26:48.911]    </block>
[03:26:48.911]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.911]      // if-block "protType == 1"
[03:26:48.911]        // =>  FALSE
[03:26:48.911]      // skip if-block "protType == 1"
[03:26:48.911]    </control>
[03:26:48.911]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.915]      // if-block "protType == 2"
[03:26:48.915]        // =>  TRUE
[03:26:48.915]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.915]        // if-block "isSWJ"
[03:26:48.915]          // =>  TRUE
[03:26:48.915]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.915]          // if-block "hasDormant"
[03:26:48.915]            // =>  FALSE
[03:26:48.915]          // skip if-block "hasDormant"
[03:26:48.915]        </control>
[03:26:48.915]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.915]          // if-block "!hasDormant"
[03:26:48.915]            // =>  TRUE
[03:26:48.915]          <block atomic="false" info="">
[03:26:48.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:48.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.919]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:48.919]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:48.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:48.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.923]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:48.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:48.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:48.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:48.927]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:48.931]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:48.931]          </block>
[03:26:48.931]          // end if-block "!hasDormant"
[03:26:48.931]        </control>
[03:26:48.931]        // end if-block "isSWJ"
[03:26:48.931]      </control>
[03:26:48.931]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:48.931]        // if-block "!isSWJ"
[03:26:48.931]          // =>  FALSE
[03:26:48.931]        // skip if-block "!isSWJ"
[03:26:48.931]      </control>
[03:26:48.931]      <block atomic="false" info="">
[03:26:48.931]        ReadDP(0x0);
[03:26:48.931]  
[03:26:48.931]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:48.931]  
[03:26:48.931]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:48.931]      </block>
[03:26:48.931]      // end if-block "protType == 2"
[03:26:48.931]    </control>
[03:26:48.931]  </sequence>
[03:26:48.931]  
[03:26:48.995]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:48.995]  
[03:26:48.995]  <debugvars>
[03:26:48.995]    // Pre-defined
[03:26:48.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:48.995]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:48.995]    __dp=0x00000000
[03:26:48.995]    __ap=0x00000000
[03:26:48.995]    __traceout=0x00000000      (Trace Disabled)
[03:26:48.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:48.995]    __FlashAddr=0x00000000
[03:26:48.995]    __FlashLen=0x00000000
[03:26:48.995]    __FlashArg=0x00000000
[03:26:48.995]    __FlashOp=0x00000000
[03:26:48.995]    __Result=0x00000000
[03:26:48.995]  </debugvars>
[03:26:48.995]  
[03:26:48.995]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:48.995]    <block atomic="false" info="">
[03:26:48.995]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:48.995]        // -> [isSWJ <= 0x00000001]
[03:26:48.995]      __var hasDormant = __protocol & 0x00020000;
[03:26:48.995]        // -> [hasDormant <= 0x00000000]
[03:26:48.995]      __var protType   = __protocol & 0x0000FFFF;
[03:26:48.995]        // -> [protType <= 0x00000002]
[03:26:48.995]    </block>
[03:26:48.995]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:48.995]      // if-block "protType == 1"
[03:26:48.995]        // =>  FALSE
[03:26:48.995]      // skip if-block "protType == 1"
[03:26:48.995]    </control>
[03:26:48.995]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:48.995]      // if-block "protType == 2"
[03:26:48.995]        // =>  TRUE
[03:26:48.995]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:48.995]        // if-block "isSWJ"
[03:26:48.995]          // =>  TRUE
[03:26:48.995]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:48.995]          // if-block "hasDormant"
[03:26:48.995]            // =>  FALSE
[03:26:48.999]          // skip if-block "hasDormant"
[03:26:48.999]        </control>
[03:26:48.999]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:48.999]          // if-block "!hasDormant"
[03:26:48.999]            // =>  TRUE
[03:26:48.999]          <block atomic="false" info="">
[03:26:48.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.003]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.003]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.011]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.011]          </block>
[03:26:49.011]          // end if-block "!hasDormant"
[03:26:49.011]        </control>
[03:26:49.011]        // end if-block "isSWJ"
[03:26:49.011]      </control>
[03:26:49.011]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.011]        // if-block "!isSWJ"
[03:26:49.011]          // =>  FALSE
[03:26:49.011]        // skip if-block "!isSWJ"
[03:26:49.015]      </control>
[03:26:49.015]      <block atomic="false" info="">
[03:26:49.015]        ReadDP(0x0);
[03:26:49.015]  
[03:26:49.015]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.015]  
[03:26:49.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.015]      </block>
[03:26:49.015]      // end if-block "protType == 2"
[03:26:49.015]    </control>
[03:26:49.015]  </sequence>
[03:26:49.015]  
[03:26:49.067]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.067]  
[03:26:49.067]  <debugvars>
[03:26:49.067]    // Pre-defined
[03:26:49.067]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.067]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.067]    __dp=0x00000000
[03:26:49.067]    __ap=0x00000000
[03:26:49.067]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.067]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.067]    __FlashAddr=0x00000000
[03:26:49.067]    __FlashLen=0x00000000
[03:26:49.067]    __FlashArg=0x00000000
[03:26:49.067]    __FlashOp=0x00000000
[03:26:49.067]    __Result=0x00000000
[03:26:49.067]  </debugvars>
[03:26:49.067]  
[03:26:49.067]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.067]    <block atomic="false" info="">
[03:26:49.067]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.067]        // -> [isSWJ <= 0x00000001]
[03:26:49.067]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.067]        // -> [hasDormant <= 0x00000000]
[03:26:49.067]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.067]        // -> [protType <= 0x00000002]
[03:26:49.067]    </block>
[03:26:49.067]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.067]      // if-block "protType == 1"
[03:26:49.067]        // =>  FALSE
[03:26:49.067]      // skip if-block "protType == 1"
[03:26:49.067]    </control>
[03:26:49.067]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.067]      // if-block "protType == 2"
[03:26:49.071]        // =>  TRUE
[03:26:49.071]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.071]        // if-block "isSWJ"
[03:26:49.071]          // =>  TRUE
[03:26:49.071]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.071]          // if-block "hasDormant"
[03:26:49.071]            // =>  FALSE
[03:26:49.071]          // skip if-block "hasDormant"
[03:26:49.071]        </control>
[03:26:49.071]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.071]          // if-block "!hasDormant"
[03:26:49.071]            // =>  TRUE
[03:26:49.071]          <block atomic="false" info="">
[03:26:49.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.071]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.071]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.079]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.079]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.079]          </block>
[03:26:49.079]          // end if-block "!hasDormant"
[03:26:49.079]        </control>
[03:26:49.079]        // end if-block "isSWJ"
[03:26:49.079]      </control>
[03:26:49.079]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.083]        // if-block "!isSWJ"
[03:26:49.083]          // =>  FALSE
[03:26:49.083]        // skip if-block "!isSWJ"
[03:26:49.083]      </control>
[03:26:49.083]      <block atomic="false" info="">
[03:26:49.083]        ReadDP(0x0);
[03:26:49.083]  
[03:26:49.083]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.083]  
[03:26:49.083]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.083]      </block>
[03:26:49.083]      // end if-block "protType == 2"
[03:26:49.083]    </control>
[03:26:49.083]  </sequence>
[03:26:49.083]  
[03:26:49.139]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.139]  
[03:26:49.139]  <debugvars>
[03:26:49.139]    // Pre-defined
[03:26:49.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.139]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.139]    __dp=0x00000000
[03:26:49.139]    __ap=0x00000000
[03:26:49.139]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.139]    __FlashAddr=0x00000000
[03:26:49.139]    __FlashLen=0x00000000
[03:26:49.139]    __FlashArg=0x00000000
[03:26:49.139]    __FlashOp=0x00000000
[03:26:49.139]    __Result=0x00000000
[03:26:49.139]  </debugvars>
[03:26:49.139]  
[03:26:49.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.139]    <block atomic="false" info="">
[03:26:49.139]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.139]        // -> [isSWJ <= 0x00000001]
[03:26:49.139]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.139]        // -> [hasDormant <= 0x00000000]
[03:26:49.139]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.139]        // -> [protType <= 0x00000002]
[03:26:49.139]    </block>
[03:26:49.139]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.139]      // if-block "protType == 1"
[03:26:49.139]        // =>  FALSE
[03:26:49.139]      // skip if-block "protType == 1"
[03:26:49.139]    </control>
[03:26:49.139]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.139]      // if-block "protType == 2"
[03:26:49.139]        // =>  TRUE
[03:26:49.139]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.139]        // if-block "isSWJ"
[03:26:49.139]          // =>  TRUE
[03:26:49.139]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.139]          // if-block "hasDormant"
[03:26:49.143]            // =>  FALSE
[03:26:49.143]          // skip if-block "hasDormant"
[03:26:49.143]        </control>
[03:26:49.143]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.143]          // if-block "!hasDormant"
[03:26:49.143]            // =>  TRUE
[03:26:49.143]          <block atomic="false" info="">
[03:26:49.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.143]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.143]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.151]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.151]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.155]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.155]          </block>
[03:26:49.155]          // end if-block "!hasDormant"
[03:26:49.155]        </control>
[03:26:49.155]        // end if-block "isSWJ"
[03:26:49.155]      </control>
[03:26:49.155]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.155]        // if-block "!isSWJ"
[03:26:49.155]          // =>  FALSE
[03:26:49.155]        // skip if-block "!isSWJ"
[03:26:49.155]      </control>
[03:26:49.155]      <block atomic="false" info="">
[03:26:49.155]        ReadDP(0x0);
[03:26:49.155]  
[03:26:49.155]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.155]  
[03:26:49.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.155]      </block>
[03:26:49.155]      // end if-block "protType == 2"
[03:26:49.155]    </control>
[03:26:49.155]  </sequence>
[03:26:49.155]  
[03:26:49.211]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.211]  
[03:26:49.211]  <debugvars>
[03:26:49.211]    // Pre-defined
[03:26:49.211]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.211]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.211]    __dp=0x00000000
[03:26:49.211]    __ap=0x00000000
[03:26:49.211]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.211]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.211]    __FlashAddr=0x00000000
[03:26:49.211]    __FlashLen=0x00000000
[03:26:49.211]    __FlashArg=0x00000000
[03:26:49.211]    __FlashOp=0x00000000
[03:26:49.211]    __Result=0x00000000
[03:26:49.211]  </debugvars>
[03:26:49.211]  
[03:26:49.211]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.211]    <block atomic="false" info="">
[03:26:49.211]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.211]        // -> [isSWJ <= 0x00000001]
[03:26:49.211]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.211]        // -> [hasDormant <= 0x00000000]
[03:26:49.211]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.211]        // -> [protType <= 0x00000002]
[03:26:49.211]    </block>
[03:26:49.211]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.211]      // if-block "protType == 1"
[03:26:49.211]        // =>  FALSE
[03:26:49.211]      // skip if-block "protType == 1"
[03:26:49.211]    </control>
[03:26:49.211]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.215]      // if-block "protType == 2"
[03:26:49.215]        // =>  TRUE
[03:26:49.215]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.215]        // if-block "isSWJ"
[03:26:49.215]          // =>  TRUE
[03:26:49.215]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.215]          // if-block "hasDormant"
[03:26:49.215]            // =>  FALSE
[03:26:49.215]          // skip if-block "hasDormant"
[03:26:49.215]        </control>
[03:26:49.215]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.215]          // if-block "!hasDormant"
[03:26:49.215]            // =>  TRUE
[03:26:49.215]          <block atomic="false" info="">
[03:26:49.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.215]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.227]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.227]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.231]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.231]          </block>
[03:26:49.231]          // end if-block "!hasDormant"
[03:26:49.231]        </control>
[03:26:49.231]        // end if-block "isSWJ"
[03:26:49.231]      </control>
[03:26:49.231]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.231]        // if-block "!isSWJ"
[03:26:49.231]          // =>  FALSE
[03:26:49.231]        // skip if-block "!isSWJ"
[03:26:49.231]      </control>
[03:26:49.231]      <block atomic="false" info="">
[03:26:49.231]        ReadDP(0x0);
[03:26:49.235]  
[03:26:49.235]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.235]  
[03:26:49.235]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.235]      </block>
[03:26:49.235]      // end if-block "protType == 2"
[03:26:49.235]    </control>
[03:26:49.235]  </sequence>
[03:26:49.235]  
[03:26:49.295]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.295]  
[03:26:49.295]  <debugvars>
[03:26:49.295]    // Pre-defined
[03:26:49.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.295]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.295]    __dp=0x00000000
[03:26:49.295]    __ap=0x00000000
[03:26:49.295]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.295]    __FlashAddr=0x00000000
[03:26:49.295]    __FlashLen=0x00000000
[03:26:49.295]    __FlashArg=0x00000000
[03:26:49.295]    __FlashOp=0x00000000
[03:26:49.295]    __Result=0x00000000
[03:26:49.295]  </debugvars>
[03:26:49.295]  
[03:26:49.295]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.295]    <block atomic="false" info="">
[03:26:49.295]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.295]        // -> [isSWJ <= 0x00000001]
[03:26:49.295]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.295]        // -> [hasDormant <= 0x00000000]
[03:26:49.295]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.295]        // -> [protType <= 0x00000002]
[03:26:49.295]    </block>
[03:26:49.295]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.295]      // if-block "protType == 1"
[03:26:49.295]        // =>  FALSE
[03:26:49.295]      // skip if-block "protType == 1"
[03:26:49.295]    </control>
[03:26:49.295]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.295]      // if-block "protType == 2"
[03:26:49.295]        // =>  TRUE
[03:26:49.295]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.295]        // if-block "isSWJ"
[03:26:49.295]          // =>  TRUE
[03:26:49.295]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.295]          // if-block "hasDormant"
[03:26:49.299]            // =>  FALSE
[03:26:49.299]          // skip if-block "hasDormant"
[03:26:49.299]        </control>
[03:26:49.299]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.299]          // if-block "!hasDormant"
[03:26:49.299]            // =>  TRUE
[03:26:49.299]          <block atomic="false" info="">
[03:26:49.299]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.299]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.303]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.303]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.303]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.311]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.311]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.311]          </block>
[03:26:49.311]          // end if-block "!hasDormant"
[03:26:49.311]        </control>
[03:26:49.311]        // end if-block "isSWJ"
[03:26:49.311]      </control>
[03:26:49.311]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.311]        // if-block "!isSWJ"
[03:26:49.311]          // =>  FALSE
[03:26:49.315]        // skip if-block "!isSWJ"
[03:26:49.315]      </control>
[03:26:49.315]      <block atomic="false" info="">
[03:26:49.315]        ReadDP(0x0);
[03:26:49.315]  
[03:26:49.315]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.315]  
[03:26:49.315]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.315]      </block>
[03:26:49.315]      // end if-block "protType == 2"
[03:26:49.315]    </control>
[03:26:49.315]  </sequence>
[03:26:49.315]  
[03:26:49.367]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.367]  
[03:26:49.367]  <debugvars>
[03:26:49.367]    // Pre-defined
[03:26:49.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.367]    __dp=0x00000000
[03:26:49.367]    __ap=0x00000000
[03:26:49.367]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.367]    __FlashAddr=0x00000000
[03:26:49.367]    __FlashLen=0x00000000
[03:26:49.367]    __FlashArg=0x00000000
[03:26:49.367]    __FlashOp=0x00000000
[03:26:49.367]    __Result=0x00000000
[03:26:49.367]  </debugvars>
[03:26:49.367]  
[03:26:49.367]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.367]    <block atomic="false" info="">
[03:26:49.367]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.367]        // -> [isSWJ <= 0x00000001]
[03:26:49.367]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.367]        // -> [hasDormant <= 0x00000000]
[03:26:49.367]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.367]        // -> [protType <= 0x00000002]
[03:26:49.367]    </block>
[03:26:49.367]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.367]      // if-block "protType == 1"
[03:26:49.367]        // =>  FALSE
[03:26:49.367]      // skip if-block "protType == 1"
[03:26:49.367]    </control>
[03:26:49.367]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.371]      // if-block "protType == 2"
[03:26:49.371]        // =>  TRUE
[03:26:49.371]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.371]        // if-block "isSWJ"
[03:26:49.371]          // =>  TRUE
[03:26:49.371]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.371]          // if-block "hasDormant"
[03:26:49.371]            // =>  FALSE
[03:26:49.371]          // skip if-block "hasDormant"
[03:26:49.371]        </control>
[03:26:49.371]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.371]          // if-block "!hasDormant"
[03:26:49.371]            // =>  TRUE
[03:26:49.371]          <block atomic="false" info="">
[03:26:49.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.375]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.379]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.379]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.379]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.379]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.383]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.383]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.383]          </block>
[03:26:49.383]          // end if-block "!hasDormant"
[03:26:49.383]        </control>
[03:26:49.383]        // end if-block "isSWJ"
[03:26:49.383]      </control>
[03:26:49.383]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.383]        // if-block "!isSWJ"
[03:26:49.383]          // =>  FALSE
[03:26:49.383]        // skip if-block "!isSWJ"
[03:26:49.383]      </control>
[03:26:49.383]      <block atomic="false" info="">
[03:26:49.387]        ReadDP(0x0);
[03:26:49.387]  
[03:26:49.387]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.387]  
[03:26:49.387]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.387]      </block>
[03:26:49.387]      // end if-block "protType == 2"
[03:26:49.387]    </control>
[03:26:49.387]  </sequence>
[03:26:49.387]  
[03:26:49.439]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.439]  
[03:26:49.439]  <debugvars>
[03:26:49.439]    // Pre-defined
[03:26:49.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.439]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.439]    __dp=0x00000000
[03:26:49.439]    __ap=0x00000000
[03:26:49.439]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.439]    __FlashAddr=0x00000000
[03:26:49.439]    __FlashLen=0x00000000
[03:26:49.439]    __FlashArg=0x00000000
[03:26:49.439]    __FlashOp=0x00000000
[03:26:49.439]    __Result=0x00000000
[03:26:49.439]  </debugvars>
[03:26:49.439]  
[03:26:49.439]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.439]    <block atomic="false" info="">
[03:26:49.439]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.439]        // -> [isSWJ <= 0x00000001]
[03:26:49.439]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.439]        // -> [hasDormant <= 0x00000000]
[03:26:49.439]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.439]        // -> [protType <= 0x00000002]
[03:26:49.439]    </block>
[03:26:49.439]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.439]      // if-block "protType == 1"
[03:26:49.439]        // =>  FALSE
[03:26:49.439]      // skip if-block "protType == 1"
[03:26:49.439]    </control>
[03:26:49.443]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.443]      // if-block "protType == 2"
[03:26:49.443]        // =>  TRUE
[03:26:49.443]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.443]        // if-block "isSWJ"
[03:26:49.443]          // =>  TRUE
[03:26:49.443]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.443]          // if-block "hasDormant"
[03:26:49.443]            // =>  FALSE
[03:26:49.443]          // skip if-block "hasDormant"
[03:26:49.443]        </control>
[03:26:49.443]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.443]          // if-block "!hasDormant"
[03:26:49.443]            // =>  TRUE
[03:26:49.443]          <block atomic="false" info="">
[03:26:49.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.443]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.447]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.447]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.451]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.455]          </block>
[03:26:49.455]          // end if-block "!hasDormant"
[03:26:49.455]        </control>
[03:26:49.455]        // end if-block "isSWJ"
[03:26:49.455]      </control>
[03:26:49.455]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.455]        // if-block "!isSWJ"
[03:26:49.455]          // =>  FALSE
[03:26:49.455]        // skip if-block "!isSWJ"
[03:26:49.455]      </control>
[03:26:49.455]      <block atomic="false" info="">
[03:26:49.455]        ReadDP(0x0);
[03:26:49.455]  
[03:26:49.455]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.455]  
[03:26:49.455]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.455]      </block>
[03:26:49.455]      // end if-block "protType == 2"
[03:26:49.455]    </control>
[03:26:49.455]  </sequence>
[03:26:49.455]  
[03:26:49.511]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.511]  
[03:26:49.511]  <debugvars>
[03:26:49.511]    // Pre-defined
[03:26:49.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.511]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.511]    __dp=0x00000000
[03:26:49.511]    __ap=0x00000000
[03:26:49.511]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.511]    __FlashAddr=0x00000000
[03:26:49.511]    __FlashLen=0x00000000
[03:26:49.511]    __FlashArg=0x00000000
[03:26:49.511]    __FlashOp=0x00000000
[03:26:49.511]    __Result=0x00000000
[03:26:49.511]  </debugvars>
[03:26:49.511]  
[03:26:49.511]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.511]    <block atomic="false" info="">
[03:26:49.511]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.511]        // -> [isSWJ <= 0x00000001]
[03:26:49.511]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.511]        // -> [hasDormant <= 0x00000000]
[03:26:49.511]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.511]        // -> [protType <= 0x00000002]
[03:26:49.511]    </block>
[03:26:49.511]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.511]      // if-block "protType == 1"
[03:26:49.511]        // =>  FALSE
[03:26:49.511]      // skip if-block "protType == 1"
[03:26:49.511]    </control>
[03:26:49.511]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.511]      // if-block "protType == 2"
[03:26:49.511]        // =>  TRUE
[03:26:49.511]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.511]        // if-block "isSWJ"
[03:26:49.511]          // =>  TRUE
[03:26:49.511]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.511]          // if-block "hasDormant"
[03:26:49.511]            // =>  FALSE
[03:26:49.511]          // skip if-block "hasDormant"
[03:26:49.511]        </control>
[03:26:49.511]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.511]          // if-block "!hasDormant"
[03:26:49.511]            // =>  TRUE
[03:26:49.515]          <block atomic="false" info="">
[03:26:49.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.515]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.515]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.519]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.519]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.519]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.519]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.523]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.523]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.523]          </block>
[03:26:49.523]          // end if-block "!hasDormant"
[03:26:49.523]        </control>
[03:26:49.523]        // end if-block "isSWJ"
[03:26:49.523]      </control>
[03:26:49.523]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.523]        // if-block "!isSWJ"
[03:26:49.523]          // =>  FALSE
[03:26:49.523]        // skip if-block "!isSWJ"
[03:26:49.523]      </control>
[03:26:49.523]      <block atomic="false" info="">
[03:26:49.523]        ReadDP(0x0);
[03:26:49.527]  
[03:26:49.527]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.527]  
[03:26:49.527]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.527]      </block>
[03:26:49.527]      // end if-block "protType == 2"
[03:26:49.527]    </control>
[03:26:49.527]  </sequence>
[03:26:49.527]  
[03:26:49.584]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.584]  
[03:26:49.584]  <debugvars>
[03:26:49.584]    // Pre-defined
[03:26:49.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.584]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.584]    __dp=0x00000000
[03:26:49.584]    __ap=0x00000000
[03:26:49.584]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.584]    __FlashAddr=0x00000000
[03:26:49.584]    __FlashLen=0x00000000
[03:26:49.584]    __FlashArg=0x00000000
[03:26:49.584]    __FlashOp=0x00000000
[03:26:49.584]    __Result=0x00000000
[03:26:49.584]  </debugvars>
[03:26:49.584]  
[03:26:49.584]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.584]    <block atomic="false" info="">
[03:26:49.584]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.584]        // -> [isSWJ <= 0x00000001]
[03:26:49.584]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.584]        // -> [hasDormant <= 0x00000000]
[03:26:49.584]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.584]        // -> [protType <= 0x00000002]
[03:26:49.584]    </block>
[03:26:49.584]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.584]      // if-block "protType == 1"
[03:26:49.584]        // =>  FALSE
[03:26:49.588]      // skip if-block "protType == 1"
[03:26:49.588]    </control>
[03:26:49.588]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.588]      // if-block "protType == 2"
[03:26:49.588]        // =>  TRUE
[03:26:49.588]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.588]        // if-block "isSWJ"
[03:26:49.588]          // =>  TRUE
[03:26:49.588]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.588]          // if-block "hasDormant"
[03:26:49.588]            // =>  FALSE
[03:26:49.588]          // skip if-block "hasDormant"
[03:26:49.588]        </control>
[03:26:49.588]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.588]          // if-block "!hasDormant"
[03:26:49.588]            // =>  TRUE
[03:26:49.588]          <block atomic="false" info="">
[03:26:49.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.592]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.596]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.596]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.600]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.600]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.600]          </block>
[03:26:49.600]          // end if-block "!hasDormant"
[03:26:49.600]        </control>
[03:26:49.600]        // end if-block "isSWJ"
[03:26:49.600]      </control>
[03:26:49.600]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.600]        // if-block "!isSWJ"
[03:26:49.600]          // =>  FALSE
[03:26:49.600]        // skip if-block "!isSWJ"
[03:26:49.600]      </control>
[03:26:49.600]      <block atomic="false" info="">
[03:26:49.600]        ReadDP(0x0);
[03:26:49.604]  
[03:26:49.604]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.604]  
[03:26:49.604]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.604]      </block>
[03:26:49.604]      // end if-block "protType == 2"
[03:26:49.604]    </control>
[03:26:49.604]  </sequence>
[03:26:49.604]  
[03:26:49.656]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.656]  
[03:26:49.656]  <debugvars>
[03:26:49.656]    // Pre-defined
[03:26:49.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.656]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.656]    __dp=0x00000000
[03:26:49.656]    __ap=0x00000000
[03:26:49.657]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.657]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.657]    __FlashAddr=0x00000000
[03:26:49.657]    __FlashLen=0x00000000
[03:26:49.657]    __FlashArg=0x00000000
[03:26:49.657]    __FlashOp=0x00000000
[03:26:49.657]    __Result=0x00000000
[03:26:49.657]  </debugvars>
[03:26:49.657]  
[03:26:49.657]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.658]    <block atomic="false" info="">
[03:26:49.658]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.658]        // -> [isSWJ <= 0x00000001]
[03:26:49.658]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.658]        // -> [hasDormant <= 0x00000000]
[03:26:49.658]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.658]        // -> [protType <= 0x00000002]
[03:26:49.658]    </block>
[03:26:49.659]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.659]      // if-block "protType == 1"
[03:26:49.659]        // =>  FALSE
[03:26:49.659]      // skip if-block "protType == 1"
[03:26:49.659]    </control>
[03:26:49.659]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.659]      // if-block "protType == 2"
[03:26:49.659]        // =>  TRUE
[03:26:49.659]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.659]        // if-block "isSWJ"
[03:26:49.659]          // =>  TRUE
[03:26:49.660]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.660]          // if-block "hasDormant"
[03:26:49.660]            // =>  FALSE
[03:26:49.660]          // skip if-block "hasDormant"
[03:26:49.660]        </control>
[03:26:49.660]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.660]          // if-block "!hasDormant"
[03:26:49.660]            // =>  TRUE
[03:26:49.660]          <block atomic="false" info="">
[03:26:49.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.662]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.664]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.667]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.669]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.671]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.672]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.672]          </block>
[03:26:49.672]          // end if-block "!hasDormant"
[03:26:49.672]        </control>
[03:26:49.673]        // end if-block "isSWJ"
[03:26:49.673]      </control>
[03:26:49.673]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.673]        // if-block "!isSWJ"
[03:26:49.673]          // =>  FALSE
[03:26:49.673]        // skip if-block "!isSWJ"
[03:26:49.673]      </control>
[03:26:49.673]      <block atomic="false" info="">
[03:26:49.673]        ReadDP(0x0);
[03:26:49.675]  
[03:26:49.675]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.675]  
[03:26:49.675]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.676]      </block>
[03:26:49.676]      // end if-block "protType == 2"
[03:26:49.676]    </control>
[03:26:49.676]  </sequence>
[03:26:49.676]  
[03:26:49.733]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.733]  
[03:26:49.733]  <debugvars>
[03:26:49.733]    // Pre-defined
[03:26:49.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.733]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.733]    __dp=0x00000000
[03:26:49.733]    __ap=0x00000000
[03:26:49.733]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.733]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.733]    __FlashAddr=0x00000000
[03:26:49.733]    __FlashLen=0x00000000
[03:26:49.733]    __FlashArg=0x00000000
[03:26:49.733]    __FlashOp=0x00000000
[03:26:49.733]    __Result=0x00000000
[03:26:49.733]  </debugvars>
[03:26:49.733]  
[03:26:49.733]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.733]    <block atomic="false" info="">
[03:26:49.733]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.733]        // -> [isSWJ <= 0x00000001]
[03:26:49.733]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.733]        // -> [hasDormant <= 0x00000000]
[03:26:49.733]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.733]        // -> [protType <= 0x00000002]
[03:26:49.733]    </block>
[03:26:49.733]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.733]      // if-block "protType == 1"
[03:26:49.733]        // =>  FALSE
[03:26:49.733]      // skip if-block "protType == 1"
[03:26:49.733]    </control>
[03:26:49.733]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.733]      // if-block "protType == 2"
[03:26:49.733]        // =>  TRUE
[03:26:49.733]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.733]        // if-block "isSWJ"
[03:26:49.737]          // =>  TRUE
[03:26:49.737]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.737]          // if-block "hasDormant"
[03:26:49.737]            // =>  FALSE
[03:26:49.737]          // skip if-block "hasDormant"
[03:26:49.737]        </control>
[03:26:49.737]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.737]          // if-block "!hasDormant"
[03:26:49.737]            // =>  TRUE
[03:26:49.737]          <block atomic="false" info="">
[03:26:49.737]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.737]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.741]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.741]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.746]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.750]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.750]          </block>
[03:26:49.750]          // end if-block "!hasDormant"
[03:26:49.750]        </control>
[03:26:49.750]        // end if-block "isSWJ"
[03:26:49.750]      </control>
[03:26:49.750]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.750]        // if-block "!isSWJ"
[03:26:49.750]          // =>  FALSE
[03:26:49.750]        // skip if-block "!isSWJ"
[03:26:49.750]      </control>
[03:26:49.750]      <block atomic="false" info="">
[03:26:49.750]        ReadDP(0x0);
[03:26:49.754]  
[03:26:49.754]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.754]  
[03:26:49.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.758]      </block>
[03:26:49.758]      // end if-block "protType == 2"
[03:26:49.758]    </control>
[03:26:49.758]  </sequence>
[03:26:49.758]  
[03:26:49.818]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.818]  
[03:26:49.818]  <debugvars>
[03:26:49.818]    // Pre-defined
[03:26:49.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.818]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.818]    __dp=0x00000000
[03:26:49.818]    __ap=0x00000000
[03:26:49.818]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.818]    __FlashAddr=0x00000000
[03:26:49.818]    __FlashLen=0x00000000
[03:26:49.818]    __FlashArg=0x00000000
[03:26:49.818]    __FlashOp=0x00000000
[03:26:49.818]    __Result=0x00000000
[03:26:49.818]  </debugvars>
[03:26:49.818]  
[03:26:49.818]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.818]    <block atomic="false" info="">
[03:26:49.818]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.818]        // -> [isSWJ <= 0x00000001]
[03:26:49.818]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.818]        // -> [hasDormant <= 0x00000000]
[03:26:49.818]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.818]        // -> [protType <= 0x00000002]
[03:26:49.818]    </block>
[03:26:49.818]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.818]      // if-block "protType == 1"
[03:26:49.818]        // =>  FALSE
[03:26:49.818]      // skip if-block "protType == 1"
[03:26:49.818]    </control>
[03:26:49.818]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.818]      // if-block "protType == 2"
[03:26:49.818]        // =>  TRUE
[03:26:49.818]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.818]        // if-block "isSWJ"
[03:26:49.818]          // =>  TRUE
[03:26:49.818]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.822]          // if-block "hasDormant"
[03:26:49.822]            // =>  FALSE
[03:26:49.822]          // skip if-block "hasDormant"
[03:26:49.822]        </control>
[03:26:49.822]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.822]          // if-block "!hasDormant"
[03:26:49.822]            // =>  TRUE
[03:26:49.822]          <block atomic="false" info="">
[03:26:49.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.822]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.830]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.830]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.830]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.834]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.834]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.838]          </block>
[03:26:49.838]          // end if-block "!hasDormant"
[03:26:49.838]        </control>
[03:26:49.838]        // end if-block "isSWJ"
[03:26:49.838]      </control>
[03:26:49.838]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.838]        // if-block "!isSWJ"
[03:26:49.838]          // =>  FALSE
[03:26:49.838]        // skip if-block "!isSWJ"
[03:26:49.838]      </control>
[03:26:49.838]      <block atomic="false" info="">
[03:26:49.838]        ReadDP(0x0);
[03:26:49.842]  
[03:26:49.842]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.842]  
[03:26:49.842]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.842]      </block>
[03:26:49.842]      // end if-block "protType == 2"
[03:26:49.842]    </control>
[03:26:49.842]  </sequence>
[03:26:49.842]  
[03:26:49.902]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.902]  
[03:26:49.902]  <debugvars>
[03:26:49.902]    // Pre-defined
[03:26:49.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.902]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.902]    __dp=0x00000000
[03:26:49.902]    __ap=0x00000000
[03:26:49.902]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.902]    __FlashAddr=0x00000000
[03:26:49.902]    __FlashLen=0x00000000
[03:26:49.902]    __FlashArg=0x00000000
[03:26:49.902]    __FlashOp=0x00000000
[03:26:49.902]    __Result=0x00000000
[03:26:49.902]  </debugvars>
[03:26:49.902]  
[03:26:49.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.902]    <block atomic="false" info="">
[03:26:49.902]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.902]        // -> [isSWJ <= 0x00000001]
[03:26:49.902]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.902]        // -> [hasDormant <= 0x00000000]
[03:26:49.902]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.902]        // -> [protType <= 0x00000002]
[03:26:49.902]    </block>
[03:26:49.902]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.902]      // if-block "protType == 1"
[03:26:49.902]        // =>  FALSE
[03:26:49.902]      // skip if-block "protType == 1"
[03:26:49.902]    </control>
[03:26:49.902]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.902]      // if-block "protType == 2"
[03:26:49.902]        // =>  TRUE
[03:26:49.902]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.902]        // if-block "isSWJ"
[03:26:49.902]          // =>  TRUE
[03:26:49.902]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.906]          // if-block "hasDormant"
[03:26:49.906]            // =>  FALSE
[03:26:49.906]          // skip if-block "hasDormant"
[03:26:49.906]        </control>
[03:26:49.906]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.906]          // if-block "!hasDormant"
[03:26:49.906]            // =>  TRUE
[03:26:49.906]          <block atomic="false" info="">
[03:26:49.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.906]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.910]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.918]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.918]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.918]          </block>
[03:26:49.918]          // end if-block "!hasDormant"
[03:26:49.918]        </control>
[03:26:49.918]        // end if-block "isSWJ"
[03:26:49.918]      </control>
[03:26:49.918]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.918]        // if-block "!isSWJ"
[03:26:49.922]          // =>  FALSE
[03:26:49.922]        // skip if-block "!isSWJ"
[03:26:49.922]      </control>
[03:26:49.922]      <block atomic="false" info="">
[03:26:49.922]        ReadDP(0x0);
[03:26:49.922]  
[03:26:49.922]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.922]  
[03:26:49.922]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.922]      </block>
[03:26:49.922]      // end if-block "protType == 2"
[03:26:49.922]    </control>
[03:26:49.922]  </sequence>
[03:26:49.922]  
[03:26:49.974]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:49.974]  
[03:26:49.974]  <debugvars>
[03:26:49.974]    // Pre-defined
[03:26:49.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:49.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:49.974]    __dp=0x00000000
[03:26:49.974]    __ap=0x00000000
[03:26:49.974]    __traceout=0x00000000      (Trace Disabled)
[03:26:49.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:49.974]    __FlashAddr=0x00000000
[03:26:49.974]    __FlashLen=0x00000000
[03:26:49.974]    __FlashArg=0x00000000
[03:26:49.974]    __FlashOp=0x00000000
[03:26:49.974]    __Result=0x00000000
[03:26:49.974]  </debugvars>
[03:26:49.974]  
[03:26:49.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:49.974]    <block atomic="false" info="">
[03:26:49.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:49.974]        // -> [isSWJ <= 0x00000001]
[03:26:49.974]      __var hasDormant = __protocol & 0x00020000;
[03:26:49.974]        // -> [hasDormant <= 0x00000000]
[03:26:49.974]      __var protType   = __protocol & 0x0000FFFF;
[03:26:49.974]        // -> [protType <= 0x00000002]
[03:26:49.974]    </block>
[03:26:49.974]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:49.974]      // if-block "protType == 1"
[03:26:49.974]        // =>  FALSE
[03:26:49.974]      // skip if-block "protType == 1"
[03:26:49.974]    </control>
[03:26:49.974]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:49.974]      // if-block "protType == 2"
[03:26:49.974]        // =>  TRUE
[03:26:49.974]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:49.974]        // if-block "isSWJ"
[03:26:49.974]          // =>  TRUE
[03:26:49.974]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:49.978]          // if-block "hasDormant"
[03:26:49.978]            // =>  FALSE
[03:26:49.978]          // skip if-block "hasDormant"
[03:26:49.978]        </control>
[03:26:49.978]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:49.978]          // if-block "!hasDormant"
[03:26:49.978]            // =>  TRUE
[03:26:49.978]          <block atomic="false" info="">
[03:26:49.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:49.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.978]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:49.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:49.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:49.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.982]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:49.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:49.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:49.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:49.986]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:49.986]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:49.986]          </block>
[03:26:49.986]          // end if-block "!hasDormant"
[03:26:49.986]        </control>
[03:26:49.986]        // end if-block "isSWJ"
[03:26:49.990]      </control>
[03:26:49.990]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:49.990]        // if-block "!isSWJ"
[03:26:49.990]          // =>  FALSE
[03:26:49.990]        // skip if-block "!isSWJ"
[03:26:49.990]      </control>
[03:26:49.990]      <block atomic="false" info="">
[03:26:49.990]        ReadDP(0x0);
[03:26:49.990]  
[03:26:49.990]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:49.990]  
[03:26:49.990]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:49.990]      </block>
[03:26:49.990]      // end if-block "protType == 2"
[03:26:49.990]    </control>
[03:26:49.990]  </sequence>
[03:26:49.990]  
[03:26:50.046]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.046]  
[03:26:50.046]  <debugvars>
[03:26:50.046]    // Pre-defined
[03:26:50.046]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.046]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.046]    __dp=0x00000000
[03:26:50.046]    __ap=0x00000000
[03:26:50.046]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.046]    __FlashAddr=0x00000000
[03:26:50.046]    __FlashLen=0x00000000
[03:26:50.046]    __FlashArg=0x00000000
[03:26:50.046]    __FlashOp=0x00000000
[03:26:50.046]    __Result=0x00000000
[03:26:50.046]  </debugvars>
[03:26:50.046]  
[03:26:50.046]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.046]    <block atomic="false" info="">
[03:26:50.046]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.046]        // -> [isSWJ <= 0x00000001]
[03:26:50.046]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.046]        // -> [hasDormant <= 0x00000000]
[03:26:50.046]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.046]        // -> [protType <= 0x00000002]
[03:26:50.046]    </block>
[03:26:50.046]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.046]      // if-block "protType == 1"
[03:26:50.046]        // =>  FALSE
[03:26:50.046]      // skip if-block "protType == 1"
[03:26:50.046]    </control>
[03:26:50.046]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.046]      // if-block "protType == 2"
[03:26:50.046]        // =>  TRUE
[03:26:50.046]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.046]        // if-block "isSWJ"
[03:26:50.050]          // =>  TRUE
[03:26:50.050]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.050]          // if-block "hasDormant"
[03:26:50.050]            // =>  FALSE
[03:26:50.050]          // skip if-block "hasDormant"
[03:26:50.050]        </control>
[03:26:50.050]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.050]          // if-block "!hasDormant"
[03:26:50.050]            // =>  TRUE
[03:26:50.050]          <block atomic="false" info="">
[03:26:50.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.050]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.058]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.058]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.062]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.062]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.062]          </block>
[03:26:50.062]          // end if-block "!hasDormant"
[03:26:50.062]        </control>
[03:26:50.062]        // end if-block "isSWJ"
[03:26:50.062]      </control>
[03:26:50.062]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.062]        // if-block "!isSWJ"
[03:26:50.062]          // =>  FALSE
[03:26:50.062]        // skip if-block "!isSWJ"
[03:26:50.062]      </control>
[03:26:50.062]      <block atomic="false" info="">
[03:26:50.062]        ReadDP(0x0);
[03:26:50.066]  
[03:26:50.066]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.066]  
[03:26:50.066]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.066]      </block>
[03:26:50.066]      // end if-block "protType == 2"
[03:26:50.066]    </control>
[03:26:50.066]  </sequence>
[03:26:50.066]  
[03:26:50.119]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.119]  
[03:26:50.119]  <debugvars>
[03:26:50.119]    // Pre-defined
[03:26:50.119]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.119]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.119]    __dp=0x00000000
[03:26:50.119]    __ap=0x00000000
[03:26:50.119]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.119]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.119]    __FlashAddr=0x00000000
[03:26:50.119]    __FlashLen=0x00000000
[03:26:50.119]    __FlashArg=0x00000000
[03:26:50.119]    __FlashOp=0x00000000
[03:26:50.119]    __Result=0x00000000
[03:26:50.119]  </debugvars>
[03:26:50.119]  
[03:26:50.119]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.119]    <block atomic="false" info="">
[03:26:50.119]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.119]        // -> [isSWJ <= 0x00000001]
[03:26:50.119]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.119]        // -> [hasDormant <= 0x00000000]
[03:26:50.119]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.119]        // -> [protType <= 0x00000002]
[03:26:50.119]    </block>
[03:26:50.119]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.119]      // if-block "protType == 1"
[03:26:50.119]        // =>  FALSE
[03:26:50.119]      // skip if-block "protType == 1"
[03:26:50.119]    </control>
[03:26:50.119]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.119]      // if-block "protType == 2"
[03:26:50.119]        // =>  TRUE
[03:26:50.119]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.119]        // if-block "isSWJ"
[03:26:50.119]          // =>  TRUE
[03:26:50.119]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.119]          // if-block "hasDormant"
[03:26:50.119]            // =>  FALSE
[03:26:50.119]          // skip if-block "hasDormant"
[03:26:50.123]        </control>
[03:26:50.123]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.123]          // if-block "!hasDormant"
[03:26:50.123]            // =>  TRUE
[03:26:50.123]          <block atomic="false" info="">
[03:26:50.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.127]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.127]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.131]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.131]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.131]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.131]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.131]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.135]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.135]          </block>
[03:26:50.135]          // end if-block "!hasDormant"
[03:26:50.135]        </control>
[03:26:50.135]        // end if-block "isSWJ"
[03:26:50.135]      </control>
[03:26:50.135]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.135]        // if-block "!isSWJ"
[03:26:50.135]          // =>  FALSE
[03:26:50.135]        // skip if-block "!isSWJ"
[03:26:50.135]      </control>
[03:26:50.135]      <block atomic="false" info="">
[03:26:50.135]        ReadDP(0x0);
[03:26:50.135]  
[03:26:50.135]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.135]  
[03:26:50.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.135]      </block>
[03:26:50.135]      // end if-block "protType == 2"
[03:26:50.135]    </control>
[03:26:50.135]  </sequence>
[03:26:50.135]  
[03:26:50.192]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.192]  
[03:26:50.192]  <debugvars>
[03:26:50.192]    // Pre-defined
[03:26:50.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.192]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.192]    __dp=0x00000000
[03:26:50.192]    __ap=0x00000000
[03:26:50.192]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.192]    __FlashAddr=0x00000000
[03:26:50.192]    __FlashLen=0x00000000
[03:26:50.192]    __FlashArg=0x00000000
[03:26:50.192]    __FlashOp=0x00000000
[03:26:50.192]    __Result=0x00000000
[03:26:50.192]  </debugvars>
[03:26:50.192]  
[03:26:50.192]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.192]    <block atomic="false" info="">
[03:26:50.192]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.192]        // -> [isSWJ <= 0x00000001]
[03:26:50.192]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.192]        // -> [hasDormant <= 0x00000000]
[03:26:50.195]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.195]        // -> [protType <= 0x00000002]
[03:26:50.195]    </block>
[03:26:50.195]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.195]      // if-block "protType == 1"
[03:26:50.195]        // =>  FALSE
[03:26:50.195]      // skip if-block "protType == 1"
[03:26:50.195]    </control>
[03:26:50.195]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.195]      // if-block "protType == 2"
[03:26:50.195]        // =>  TRUE
[03:26:50.195]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.195]        // if-block "isSWJ"
[03:26:50.195]          // =>  TRUE
[03:26:50.195]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.195]          // if-block "hasDormant"
[03:26:50.195]            // =>  FALSE
[03:26:50.195]          // skip if-block "hasDormant"
[03:26:50.195]        </control>
[03:26:50.195]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.195]          // if-block "!hasDormant"
[03:26:50.195]            // =>  TRUE
[03:26:50.195]          <block atomic="false" info="">
[03:26:50.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.195]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.199]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.199]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.199]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.203]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.203]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.203]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.203]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.207]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.207]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.207]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.207]          </block>
[03:26:50.207]          // end if-block "!hasDormant"
[03:26:50.207]        </control>
[03:26:50.207]        // end if-block "isSWJ"
[03:26:50.207]      </control>
[03:26:50.207]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.207]        // if-block "!isSWJ"
[03:26:50.207]          // =>  FALSE
[03:26:50.207]        // skip if-block "!isSWJ"
[03:26:50.207]      </control>
[03:26:50.207]      <block atomic="false" info="">
[03:26:50.207]        ReadDP(0x0);
[03:26:50.211]  
[03:26:50.211]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.211]  
[03:26:50.211]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.211]      </block>
[03:26:50.211]      // end if-block "protType == 2"
[03:26:50.211]    </control>
[03:26:50.211]  </sequence>
[03:26:50.211]  
[03:26:50.263]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.263]  
[03:26:50.263]  <debugvars>
[03:26:50.263]    // Pre-defined
[03:26:50.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.263]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.263]    __dp=0x00000000
[03:26:50.263]    __ap=0x00000000
[03:26:50.263]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.263]    __FlashAddr=0x00000000
[03:26:50.263]    __FlashLen=0x00000000
[03:26:50.263]    __FlashArg=0x00000000
[03:26:50.263]    __FlashOp=0x00000000
[03:26:50.263]    __Result=0x00000000
[03:26:50.263]  </debugvars>
[03:26:50.263]  
[03:26:50.263]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.263]    <block atomic="false" info="">
[03:26:50.263]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.263]        // -> [isSWJ <= 0x00000001]
[03:26:50.263]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.263]        // -> [hasDormant <= 0x00000000]
[03:26:50.263]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.263]        // -> [protType <= 0x00000002]
[03:26:50.263]    </block>
[03:26:50.263]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.263]      // if-block "protType == 1"
[03:26:50.263]        // =>  FALSE
[03:26:50.263]      // skip if-block "protType == 1"
[03:26:50.263]    </control>
[03:26:50.263]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.263]      // if-block "protType == 2"
[03:26:50.263]        // =>  TRUE
[03:26:50.263]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.263]        // if-block "isSWJ"
[03:26:50.263]          // =>  TRUE
[03:26:50.263]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.263]          // if-block "hasDormant"
[03:26:50.263]            // =>  FALSE
[03:26:50.263]          // skip if-block "hasDormant"
[03:26:50.267]        </control>
[03:26:50.267]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.267]          // if-block "!hasDormant"
[03:26:50.267]            // =>  TRUE
[03:26:50.267]          <block atomic="false" info="">
[03:26:50.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.267]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.275]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.275]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.275]          </block>
[03:26:50.275]          // end if-block "!hasDormant"
[03:26:50.275]        </control>
[03:26:50.275]        // end if-block "isSWJ"
[03:26:50.275]      </control>
[03:26:50.275]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.275]        // if-block "!isSWJ"
[03:26:50.275]          // =>  FALSE
[03:26:50.275]        // skip if-block "!isSWJ"
[03:26:50.275]      </control>
[03:26:50.275]      <block atomic="false" info="">
[03:26:50.275]        ReadDP(0x0);
[03:26:50.279]  
[03:26:50.279]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.279]  
[03:26:50.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.279]      </block>
[03:26:50.279]      // end if-block "protType == 2"
[03:26:50.279]    </control>
[03:26:50.279]  </sequence>
[03:26:50.279]  
[03:26:50.335]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.335]  
[03:26:50.335]  <debugvars>
[03:26:50.335]    // Pre-defined
[03:26:50.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.335]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.335]    __dp=0x00000000
[03:26:50.335]    __ap=0x00000000
[03:26:50.335]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.335]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.335]    __FlashAddr=0x00000000
[03:26:50.335]    __FlashLen=0x00000000
[03:26:50.335]    __FlashArg=0x00000000
[03:26:50.335]    __FlashOp=0x00000000
[03:26:50.335]    __Result=0x00000000
[03:26:50.335]  </debugvars>
[03:26:50.335]  
[03:26:50.335]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.335]    <block atomic="false" info="">
[03:26:50.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.335]        // -> [isSWJ <= 0x00000001]
[03:26:50.335]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.335]        // -> [hasDormant <= 0x00000000]
[03:26:50.335]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.335]        // -> [protType <= 0x00000002]
[03:26:50.335]    </block>
[03:26:50.335]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.335]      // if-block "protType == 1"
[03:26:50.335]        // =>  FALSE
[03:26:50.335]      // skip if-block "protType == 1"
[03:26:50.335]    </control>
[03:26:50.335]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.335]      // if-block "protType == 2"
[03:26:50.335]        // =>  TRUE
[03:26:50.335]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.335]        // if-block "isSWJ"
[03:26:50.335]          // =>  TRUE
[03:26:50.335]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.339]          // if-block "hasDormant"
[03:26:50.339]            // =>  FALSE
[03:26:50.339]          // skip if-block "hasDormant"
[03:26:50.339]        </control>
[03:26:50.339]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.339]          // if-block "!hasDormant"
[03:26:50.339]            // =>  TRUE
[03:26:50.339]          <block atomic="false" info="">
[03:26:50.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.339]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.343]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.347]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.347]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.347]          </block>
[03:26:50.347]          // end if-block "!hasDormant"
[03:26:50.347]        </control>
[03:26:50.347]        // end if-block "isSWJ"
[03:26:50.351]      </control>
[03:26:50.351]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.351]        // if-block "!isSWJ"
[03:26:50.351]          // =>  FALSE
[03:26:50.351]        // skip if-block "!isSWJ"
[03:26:50.351]      </control>
[03:26:50.351]      <block atomic="false" info="">
[03:26:50.351]        ReadDP(0x0);
[03:26:50.351]  
[03:26:50.351]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.351]  
[03:26:50.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.351]      </block>
[03:26:50.351]      // end if-block "protType == 2"
[03:26:50.351]    </control>
[03:26:50.351]  </sequence>
[03:26:50.351]  
[03:26:50.407]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.407]  
[03:26:50.407]  <debugvars>
[03:26:50.407]    // Pre-defined
[03:26:50.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.407]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.407]    __dp=0x00000000
[03:26:50.407]    __ap=0x00000000
[03:26:50.407]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.407]    __FlashAddr=0x00000000
[03:26:50.407]    __FlashLen=0x00000000
[03:26:50.407]    __FlashArg=0x00000000
[03:26:50.407]    __FlashOp=0x00000000
[03:26:50.407]    __Result=0x00000000
[03:26:50.407]  </debugvars>
[03:26:50.407]  
[03:26:50.407]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.407]    <block atomic="false" info="">
[03:26:50.407]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.407]        // -> [isSWJ <= 0x00000001]
[03:26:50.407]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.407]        // -> [hasDormant <= 0x00000000]
[03:26:50.407]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.407]        // -> [protType <= 0x00000002]
[03:26:50.411]    </block>
[03:26:50.411]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.411]      // if-block "protType == 1"
[03:26:50.411]        // =>  FALSE
[03:26:50.411]      // skip if-block "protType == 1"
[03:26:50.411]    </control>
[03:26:50.411]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.411]      // if-block "protType == 2"
[03:26:50.411]        // =>  TRUE
[03:26:50.411]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.411]        // if-block "isSWJ"
[03:26:50.411]          // =>  TRUE
[03:26:50.411]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.411]          // if-block "hasDormant"
[03:26:50.411]            // =>  FALSE
[03:26:50.411]          // skip if-block "hasDormant"
[03:26:50.411]        </control>
[03:26:50.411]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.411]          // if-block "!hasDormant"
[03:26:50.411]            // =>  TRUE
[03:26:50.411]          <block atomic="false" info="">
[03:26:50.411]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.411]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.415]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.419]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.419]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.419]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.419]          </block>
[03:26:50.419]          // end if-block "!hasDormant"
[03:26:50.419]        </control>
[03:26:50.423]        // end if-block "isSWJ"
[03:26:50.423]      </control>
[03:26:50.423]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.423]        // if-block "!isSWJ"
[03:26:50.423]          // =>  FALSE
[03:26:50.423]        // skip if-block "!isSWJ"
[03:26:50.423]      </control>
[03:26:50.423]      <block atomic="false" info="">
[03:26:50.423]        ReadDP(0x0);
[03:26:50.423]  
[03:26:50.423]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.423]  
[03:26:50.423]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.423]      </block>
[03:26:50.423]      // end if-block "protType == 2"
[03:26:50.423]    </control>
[03:26:50.423]  </sequence>
[03:26:50.423]  
[03:26:50.479]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.479]  
[03:26:50.479]  <debugvars>
[03:26:50.479]    // Pre-defined
[03:26:50.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.479]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.479]    __dp=0x00000000
[03:26:50.479]    __ap=0x00000000
[03:26:50.479]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.479]    __FlashAddr=0x00000000
[03:26:50.479]    __FlashLen=0x00000000
[03:26:50.479]    __FlashArg=0x00000000
[03:26:50.479]    __FlashOp=0x00000000
[03:26:50.479]    __Result=0x00000000
[03:26:50.479]  </debugvars>
[03:26:50.479]  
[03:26:50.479]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.479]    <block atomic="false" info="">
[03:26:50.479]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.479]        // -> [isSWJ <= 0x00000001]
[03:26:50.479]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.479]        // -> [hasDormant <= 0x00000000]
[03:26:50.479]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.479]        // -> [protType <= 0x00000002]
[03:26:50.479]    </block>
[03:26:50.479]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.479]      // if-block "protType == 1"
[03:26:50.479]        // =>  FALSE
[03:26:50.479]      // skip if-block "protType == 1"
[03:26:50.479]    </control>
[03:26:50.479]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.479]      // if-block "protType == 2"
[03:26:50.479]        // =>  TRUE
[03:26:50.479]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.479]        // if-block "isSWJ"
[03:26:50.483]          // =>  TRUE
[03:26:50.483]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.483]          // if-block "hasDormant"
[03:26:50.483]            // =>  FALSE
[03:26:50.483]          // skip if-block "hasDormant"
[03:26:50.483]        </control>
[03:26:50.483]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.483]          // if-block "!hasDormant"
[03:26:50.483]            // =>  TRUE
[03:26:50.483]          <block atomic="false" info="">
[03:26:50.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.491]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.491]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.491]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.491]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.491]          </block>
[03:26:50.491]          // end if-block "!hasDormant"
[03:26:50.491]        </control>
[03:26:50.495]        // end if-block "isSWJ"
[03:26:50.495]      </control>
[03:26:50.495]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.495]        // if-block "!isSWJ"
[03:26:50.495]          // =>  FALSE
[03:26:50.495]        // skip if-block "!isSWJ"
[03:26:50.495]      </control>
[03:26:50.495]      <block atomic="false" info="">
[03:26:50.495]        ReadDP(0x0);
[03:26:50.495]  
[03:26:50.495]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.495]  
[03:26:50.495]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.495]      </block>
[03:26:50.495]      // end if-block "protType == 2"
[03:26:50.495]    </control>
[03:26:50.495]  </sequence>
[03:26:50.495]  
[03:26:50.551]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.551]  
[03:26:50.551]  <debugvars>
[03:26:50.551]    // Pre-defined
[03:26:50.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.551]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.551]    __dp=0x00000000
[03:26:50.551]    __ap=0x00000000
[03:26:50.551]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.551]    __FlashAddr=0x00000000
[03:26:50.551]    __FlashLen=0x00000000
[03:26:50.551]    __FlashArg=0x00000000
[03:26:50.551]    __FlashOp=0x00000000
[03:26:50.551]    __Result=0x00000000
[03:26:50.551]  </debugvars>
[03:26:50.551]  
[03:26:50.551]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.551]    <block atomic="false" info="">
[03:26:50.551]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.551]        // -> [isSWJ <= 0x00000001]
[03:26:50.551]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.551]        // -> [hasDormant <= 0x00000000]
[03:26:50.551]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.551]        // -> [protType <= 0x00000002]
[03:26:50.551]    </block>
[03:26:50.551]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.551]      // if-block "protType == 1"
[03:26:50.551]        // =>  FALSE
[03:26:50.551]      // skip if-block "protType == 1"
[03:26:50.551]    </control>
[03:26:50.551]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.551]      // if-block "protType == 2"
[03:26:50.555]        // =>  TRUE
[03:26:50.555]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.555]        // if-block "isSWJ"
[03:26:50.555]          // =>  TRUE
[03:26:50.555]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.555]          // if-block "hasDormant"
[03:26:50.555]            // =>  FALSE
[03:26:50.555]          // skip if-block "hasDormant"
[03:26:50.555]        </control>
[03:26:50.555]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.555]          // if-block "!hasDormant"
[03:26:50.555]            // =>  TRUE
[03:26:50.555]          <block atomic="false" info="">
[03:26:50.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.559]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.563]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.563]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.563]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.563]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.563]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.563]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.567]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.571]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.571]          </block>
[03:26:50.571]          // end if-block "!hasDormant"
[03:26:50.571]        </control>
[03:26:50.571]        // end if-block "isSWJ"
[03:26:50.571]      </control>
[03:26:50.571]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.571]        // if-block "!isSWJ"
[03:26:50.571]          // =>  FALSE
[03:26:50.571]        // skip if-block "!isSWJ"
[03:26:50.571]      </control>
[03:26:50.571]      <block atomic="false" info="">
[03:26:50.571]        ReadDP(0x0);
[03:26:50.571]  
[03:26:50.571]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.571]  
[03:26:50.571]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.571]      </block>
[03:26:50.571]      // end if-block "protType == 2"
[03:26:50.571]    </control>
[03:26:50.575]  </sequence>
[03:26:50.575]  
[03:26:50.635]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.635]  
[03:26:50.635]  <debugvars>
[03:26:50.635]    // Pre-defined
[03:26:50.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.635]    __dp=0x00000000
[03:26:50.635]    __ap=0x00000000
[03:26:50.635]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.635]    __FlashAddr=0x00000000
[03:26:50.635]    __FlashLen=0x00000000
[03:26:50.635]    __FlashArg=0x00000000
[03:26:50.635]    __FlashOp=0x00000000
[03:26:50.635]    __Result=0x00000000
[03:26:50.635]  </debugvars>
[03:26:50.635]  
[03:26:50.635]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.635]    <block atomic="false" info="">
[03:26:50.635]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.635]        // -> [isSWJ <= 0x00000001]
[03:26:50.635]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.635]        // -> [hasDormant <= 0x00000000]
[03:26:50.635]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.635]        // -> [protType <= 0x00000002]
[03:26:50.635]    </block>
[03:26:50.635]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.635]      // if-block "protType == 1"
[03:26:50.635]        // =>  FALSE
[03:26:50.635]      // skip if-block "protType == 1"
[03:26:50.635]    </control>
[03:26:50.635]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.635]      // if-block "protType == 2"
[03:26:50.635]        // =>  TRUE
[03:26:50.635]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.635]        // if-block "isSWJ"
[03:26:50.635]          // =>  TRUE
[03:26:50.635]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.635]          // if-block "hasDormant"
[03:26:50.635]            // =>  FALSE
[03:26:50.635]          // skip if-block "hasDormant"
[03:26:50.635]        </control>
[03:26:50.635]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.639]          // if-block "!hasDormant"
[03:26:50.639]            // =>  TRUE
[03:26:50.639]          <block atomic="false" info="">
[03:26:50.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.643]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.651]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.651]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.655]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.655]          </block>
[03:26:50.655]          // end if-block "!hasDormant"
[03:26:50.655]        </control>
[03:26:50.655]        // end if-block "isSWJ"
[03:26:50.655]      </control>
[03:26:50.655]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.655]        // if-block "!isSWJ"
[03:26:50.655]          // =>  FALSE
[03:26:50.655]        // skip if-block "!isSWJ"
[03:26:50.655]      </control>
[03:26:50.655]      <block atomic="false" info="">
[03:26:50.655]        ReadDP(0x0);
[03:26:50.659]  
[03:26:50.659]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.659]  
[03:26:50.659]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.659]      </block>
[03:26:50.659]      // end if-block "protType == 2"
[03:26:50.659]    </control>
[03:26:50.659]  </sequence>
[03:26:50.659]  
[03:26:50.711]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.711]  
[03:26:50.711]  <debugvars>
[03:26:50.711]    // Pre-defined
[03:26:50.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.711]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.711]    __dp=0x00000000
[03:26:50.711]    __ap=0x00000000
[03:26:50.711]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.711]    __FlashAddr=0x00000000
[03:26:50.711]    __FlashLen=0x00000000
[03:26:50.711]    __FlashArg=0x00000000
[03:26:50.711]    __FlashOp=0x00000000
[03:26:50.711]    __Result=0x00000000
[03:26:50.711]  </debugvars>
[03:26:50.711]  
[03:26:50.711]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.711]    <block atomic="false" info="">
[03:26:50.711]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.711]        // -> [isSWJ <= 0x00000001]
[03:26:50.711]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.711]        // -> [hasDormant <= 0x00000000]
[03:26:50.711]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.711]        // -> [protType <= 0x00000002]
[03:26:50.711]    </block>
[03:26:50.711]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.711]      // if-block "protType == 1"
[03:26:50.711]        // =>  FALSE
[03:26:50.711]      // skip if-block "protType == 1"
[03:26:50.711]    </control>
[03:26:50.711]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.715]      // if-block "protType == 2"
[03:26:50.715]        // =>  TRUE
[03:26:50.715]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.715]        // if-block "isSWJ"
[03:26:50.715]          // =>  TRUE
[03:26:50.715]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.715]          // if-block "hasDormant"
[03:26:50.715]            // =>  FALSE
[03:26:50.715]          // skip if-block "hasDormant"
[03:26:50.715]        </control>
[03:26:50.715]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.715]          // if-block "!hasDormant"
[03:26:50.715]            // =>  TRUE
[03:26:50.715]          <block atomic="false" info="">
[03:26:50.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.719]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.719]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.727]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.727]          </block>
[03:26:50.727]          // end if-block "!hasDormant"
[03:26:50.727]        </control>
[03:26:50.727]        // end if-block "isSWJ"
[03:26:50.727]      </control>
[03:26:50.727]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.727]        // if-block "!isSWJ"
[03:26:50.727]          // =>  FALSE
[03:26:50.727]        // skip if-block "!isSWJ"
[03:26:50.727]      </control>
[03:26:50.727]      <block atomic="false" info="">
[03:26:50.727]        ReadDP(0x0);
[03:26:50.731]  
[03:26:50.731]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.731]  
[03:26:50.731]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.731]      </block>
[03:26:50.731]      // end if-block "protType == 2"
[03:26:50.731]    </control>
[03:26:50.731]  </sequence>
[03:26:50.731]  
[03:26:50.783]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.783]  
[03:26:50.783]  <debugvars>
[03:26:50.783]    // Pre-defined
[03:26:50.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.783]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.783]    __dp=0x00000000
[03:26:50.783]    __ap=0x00000000
[03:26:50.783]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.783]    __FlashAddr=0x00000000
[03:26:50.783]    __FlashLen=0x00000000
[03:26:50.783]    __FlashArg=0x00000000
[03:26:50.783]    __FlashOp=0x00000000
[03:26:50.783]    __Result=0x00000000
[03:26:50.783]  </debugvars>
[03:26:50.783]  
[03:26:50.783]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.783]    <block atomic="false" info="">
[03:26:50.783]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.783]        // -> [isSWJ <= 0x00000001]
[03:26:50.783]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.783]        // -> [hasDormant <= 0x00000000]
[03:26:50.783]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.783]        // -> [protType <= 0x00000002]
[03:26:50.783]    </block>
[03:26:50.783]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.783]      // if-block "protType == 1"
[03:26:50.783]        // =>  FALSE
[03:26:50.783]      // skip if-block "protType == 1"
[03:26:50.783]    </control>
[03:26:50.787]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.787]      // if-block "protType == 2"
[03:26:50.787]        // =>  TRUE
[03:26:50.787]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.787]        // if-block "isSWJ"
[03:26:50.787]          // =>  TRUE
[03:26:50.787]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.787]          // if-block "hasDormant"
[03:26:50.787]            // =>  FALSE
[03:26:50.787]          // skip if-block "hasDormant"
[03:26:50.787]        </control>
[03:26:50.787]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.787]          // if-block "!hasDormant"
[03:26:50.787]            // =>  TRUE
[03:26:50.787]          <block atomic="false" info="">
[03:26:50.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.787]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.795]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.799]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.803]          </block>
[03:26:50.803]          // end if-block "!hasDormant"
[03:26:50.803]        </control>
[03:26:50.803]        // end if-block "isSWJ"
[03:26:50.803]      </control>
[03:26:50.803]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.803]        // if-block "!isSWJ"
[03:26:50.803]          // =>  FALSE
[03:26:50.803]        // skip if-block "!isSWJ"
[03:26:50.803]      </control>
[03:26:50.803]      <block atomic="false" info="">
[03:26:50.803]        ReadDP(0x0);
[03:26:50.803]  
[03:26:50.803]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.803]  
[03:26:50.803]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.803]      </block>
[03:26:50.803]      // end if-block "protType == 2"
[03:26:50.803]    </control>
[03:26:50.803]  </sequence>
[03:26:50.803]  
[03:26:50.867]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.867]  
[03:26:50.867]  <debugvars>
[03:26:50.867]    // Pre-defined
[03:26:50.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.867]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.867]    __dp=0x00000000
[03:26:50.867]    __ap=0x00000000
[03:26:50.867]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.867]    __FlashAddr=0x00000000
[03:26:50.867]    __FlashLen=0x00000000
[03:26:50.867]    __FlashArg=0x00000000
[03:26:50.867]    __FlashOp=0x00000000
[03:26:50.867]    __Result=0x00000000
[03:26:50.867]  </debugvars>
[03:26:50.867]  
[03:26:50.867]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.867]    <block atomic="false" info="">
[03:26:50.867]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.867]        // -> [isSWJ <= 0x00000001]
[03:26:50.867]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.867]        // -> [hasDormant <= 0x00000000]
[03:26:50.867]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.867]        // -> [protType <= 0x00000002]
[03:26:50.867]    </block>
[03:26:50.867]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.867]      // if-block "protType == 1"
[03:26:50.867]        // =>  FALSE
[03:26:50.867]      // skip if-block "protType == 1"
[03:26:50.867]    </control>
[03:26:50.867]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.867]      // if-block "protType == 2"
[03:26:50.867]        // =>  TRUE
[03:26:50.867]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.867]        // if-block "isSWJ"
[03:26:50.867]          // =>  TRUE
[03:26:50.867]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.871]          // if-block "hasDormant"
[03:26:50.871]            // =>  FALSE
[03:26:50.871]          // skip if-block "hasDormant"
[03:26:50.871]        </control>
[03:26:50.871]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.871]          // if-block "!hasDormant"
[03:26:50.871]            // =>  TRUE
[03:26:50.871]          <block atomic="false" info="">
[03:26:50.871]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.875]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.879]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.883]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.883]          </block>
[03:26:50.883]          // end if-block "!hasDormant"
[03:26:50.883]        </control>
[03:26:50.887]        // end if-block "isSWJ"
[03:26:50.887]      </control>
[03:26:50.887]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.887]        // if-block "!isSWJ"
[03:26:50.887]          // =>  FALSE
[03:26:50.887]        // skip if-block "!isSWJ"
[03:26:50.887]      </control>
[03:26:50.887]      <block atomic="false" info="">
[03:26:50.887]        ReadDP(0x0);
[03:26:50.887]  
[03:26:50.887]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.887]  
[03:26:50.887]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.887]      </block>
[03:26:50.887]      // end if-block "protType == 2"
[03:26:50.887]    </control>
[03:26:50.887]  </sequence>
[03:26:50.887]  
[03:26:50.939]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:50.939]  
[03:26:50.939]  <debugvars>
[03:26:50.939]    // Pre-defined
[03:26:50.939]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:50.939]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:50.939]    __dp=0x00000000
[03:26:50.939]    __ap=0x00000000
[03:26:50.939]    __traceout=0x00000000      (Trace Disabled)
[03:26:50.939]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:50.939]    __FlashAddr=0x00000000
[03:26:50.939]    __FlashLen=0x00000000
[03:26:50.939]    __FlashArg=0x00000000
[03:26:50.939]    __FlashOp=0x00000000
[03:26:50.939]    __Result=0x00000000
[03:26:50.939]  </debugvars>
[03:26:50.939]  
[03:26:50.939]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:50.939]    <block atomic="false" info="">
[03:26:50.939]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:50.939]        // -> [isSWJ <= 0x00000001]
[03:26:50.939]      __var hasDormant = __protocol & 0x00020000;
[03:26:50.939]        // -> [hasDormant <= 0x00000000]
[03:26:50.939]      __var protType   = __protocol & 0x0000FFFF;
[03:26:50.943]        // -> [protType <= 0x00000002]
[03:26:50.943]    </block>
[03:26:50.943]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:50.943]      // if-block "protType == 1"
[03:26:50.943]        // =>  FALSE
[03:26:50.943]      // skip if-block "protType == 1"
[03:26:50.943]    </control>
[03:26:50.943]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:50.943]      // if-block "protType == 2"
[03:26:50.943]        // =>  TRUE
[03:26:50.943]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:50.943]        // if-block "isSWJ"
[03:26:50.943]          // =>  TRUE
[03:26:50.943]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:50.943]          // if-block "hasDormant"
[03:26:50.943]            // =>  FALSE
[03:26:50.943]          // skip if-block "hasDormant"
[03:26:50.943]        </control>
[03:26:50.943]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:50.943]          // if-block "!hasDormant"
[03:26:50.943]            // =>  TRUE
[03:26:50.943]          <block atomic="false" info="">
[03:26:50.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:50.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.951]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:50.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:50.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:50.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.955]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:50.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:50.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:50.959]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:50.959]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:50.959]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:50.959]          </block>
[03:26:50.959]          // end if-block "!hasDormant"
[03:26:50.959]        </control>
[03:26:50.959]        // end if-block "isSWJ"
[03:26:50.963]      </control>
[03:26:50.963]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:50.963]        // if-block "!isSWJ"
[03:26:50.963]          // =>  FALSE
[03:26:50.963]        // skip if-block "!isSWJ"
[03:26:50.963]      </control>
[03:26:50.963]      <block atomic="false" info="">
[03:26:50.963]        ReadDP(0x0);
[03:26:50.963]  
[03:26:50.963]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:50.963]  
[03:26:50.963]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:50.963]      </block>
[03:26:50.963]      // end if-block "protType == 2"
[03:26:50.963]    </control>
[03:26:50.963]  </sequence>
[03:26:50.963]  
[03:26:51.023]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.023]  
[03:26:51.023]  <debugvars>
[03:26:51.023]    // Pre-defined
[03:26:51.023]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.023]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.023]    __dp=0x00000000
[03:26:51.023]    __ap=0x00000000
[03:26:51.023]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.023]    __FlashAddr=0x00000000
[03:26:51.023]    __FlashLen=0x00000000
[03:26:51.023]    __FlashArg=0x00000000
[03:26:51.023]    __FlashOp=0x00000000
[03:26:51.023]    __Result=0x00000000
[03:26:51.023]  </debugvars>
[03:26:51.023]  
[03:26:51.023]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.023]    <block atomic="false" info="">
[03:26:51.023]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.023]        // -> [isSWJ <= 0x00000001]
[03:26:51.023]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.023]        // -> [hasDormant <= 0x00000000]
[03:26:51.023]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.023]        // -> [protType <= 0x00000002]
[03:26:51.023]    </block>
[03:26:51.023]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.023]      // if-block "protType == 1"
[03:26:51.023]        // =>  FALSE
[03:26:51.023]      // skip if-block "protType == 1"
[03:26:51.023]    </control>
[03:26:51.023]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.027]      // if-block "protType == 2"
[03:26:51.027]        // =>  TRUE
[03:26:51.027]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.027]        // if-block "isSWJ"
[03:26:51.027]          // =>  TRUE
[03:26:51.027]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.027]          // if-block "hasDormant"
[03:26:51.027]            // =>  FALSE
[03:26:51.027]          // skip if-block "hasDormant"
[03:26:51.027]        </control>
[03:26:51.027]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.027]          // if-block "!hasDormant"
[03:26:51.027]            // =>  TRUE
[03:26:51.027]          <block atomic="false" info="">
[03:26:51.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.031]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.035]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.043]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.043]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.043]          </block>
[03:26:51.043]          // end if-block "!hasDormant"
[03:26:51.043]        </control>
[03:26:51.043]        // end if-block "isSWJ"
[03:26:51.043]      </control>
[03:26:51.043]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.043]        // if-block "!isSWJ"
[03:26:51.043]          // =>  FALSE
[03:26:51.043]        // skip if-block "!isSWJ"
[03:26:51.043]      </control>
[03:26:51.043]      <block atomic="false" info="">
[03:26:51.043]        ReadDP(0x0);
[03:26:51.047]  
[03:26:51.047]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.047]  
[03:26:51.047]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.047]      </block>
[03:26:51.047]      // end if-block "protType == 2"
[03:26:51.047]    </control>
[03:26:51.047]  </sequence>
[03:26:51.047]  
[03:26:51.107]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.107]  
[03:26:51.107]  <debugvars>
[03:26:51.107]    // Pre-defined
[03:26:51.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.107]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.107]    __dp=0x00000000
[03:26:51.107]    __ap=0x00000000
[03:26:51.107]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.107]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.107]    __FlashAddr=0x00000000
[03:26:51.107]    __FlashLen=0x00000000
[03:26:51.107]    __FlashArg=0x00000000
[03:26:51.107]    __FlashOp=0x00000000
[03:26:51.107]    __Result=0x00000000
[03:26:51.107]  </debugvars>
[03:26:51.107]  
[03:26:51.107]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.107]    <block atomic="false" info="">
[03:26:51.107]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.107]        // -> [isSWJ <= 0x00000001]
[03:26:51.107]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.107]        // -> [hasDormant <= 0x00000000]
[03:26:51.107]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.107]        // -> [protType <= 0x00000002]
[03:26:51.107]    </block>
[03:26:51.107]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.107]      // if-block "protType == 1"
[03:26:51.107]        // =>  FALSE
[03:26:51.107]      // skip if-block "protType == 1"
[03:26:51.107]    </control>
[03:26:51.107]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.107]      // if-block "protType == 2"
[03:26:51.107]        // =>  TRUE
[03:26:51.107]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.107]        // if-block "isSWJ"
[03:26:51.107]          // =>  TRUE
[03:26:51.111]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.111]          // if-block "hasDormant"
[03:26:51.111]            // =>  FALSE
[03:26:51.111]          // skip if-block "hasDormant"
[03:26:51.111]        </control>
[03:26:51.111]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.111]          // if-block "!hasDormant"
[03:26:51.111]            // =>  TRUE
[03:26:51.111]          <block atomic="false" info="">
[03:26:51.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.111]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.111]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.119]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.119]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.119]          </block>
[03:26:51.119]          // end if-block "!hasDormant"
[03:26:51.119]        </control>
[03:26:51.119]        // end if-block "isSWJ"
[03:26:51.119]      </control>
[03:26:51.119]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.119]        // if-block "!isSWJ"
[03:26:51.119]          // =>  FALSE
[03:26:51.119]        // skip if-block "!isSWJ"
[03:26:51.119]      </control>
[03:26:51.119]      <block atomic="false" info="">
[03:26:51.119]        ReadDP(0x0);
[03:26:51.123]  
[03:26:51.123]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.123]  
[03:26:51.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.123]      </block>
[03:26:51.123]      // end if-block "protType == 2"
[03:26:51.123]    </control>
[03:26:51.123]  </sequence>
[03:26:51.123]  
[03:26:51.184]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.184]  
[03:26:51.184]  <debugvars>
[03:26:51.184]    // Pre-defined
[03:26:51.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.185]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.185]    __dp=0x00000000
[03:26:51.185]    __ap=0x00000000
[03:26:51.185]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.185]    __FlashAddr=0x00000000
[03:26:51.185]    __FlashLen=0x00000000
[03:26:51.185]    __FlashArg=0x00000000
[03:26:51.185]    __FlashOp=0x00000000
[03:26:51.185]    __Result=0x00000000
[03:26:51.185]  </debugvars>
[03:26:51.185]  
[03:26:51.185]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.185]    <block atomic="false" info="">
[03:26:51.185]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.185]        // -> [isSWJ <= 0x00000001]
[03:26:51.185]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.185]        // -> [hasDormant <= 0x00000000]
[03:26:51.185]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.185]        // -> [protType <= 0x00000002]
[03:26:51.185]    </block>
[03:26:51.185]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.185]      // if-block "protType == 1"
[03:26:51.185]        // =>  FALSE
[03:26:51.185]      // skip if-block "protType == 1"
[03:26:51.185]    </control>
[03:26:51.185]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.185]      // if-block "protType == 2"
[03:26:51.187]        // =>  TRUE
[03:26:51.188]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.188]        // if-block "isSWJ"
[03:26:51.188]          // =>  TRUE
[03:26:51.188]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.188]          // if-block "hasDormant"
[03:26:51.188]            // =>  FALSE
[03:26:51.188]          // skip if-block "hasDormant"
[03:26:51.188]        </control>
[03:26:51.188]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.188]          // if-block "!hasDormant"
[03:26:51.188]            // =>  TRUE
[03:26:51.188]          <block atomic="false" info="">
[03:26:51.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.188]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.191]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.195]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.195]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.195]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.199]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.199]          </block>
[03:26:51.199]          // end if-block "!hasDormant"
[03:26:51.199]        </control>
[03:26:51.199]        // end if-block "isSWJ"
[03:26:51.199]      </control>
[03:26:51.199]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.199]        // if-block "!isSWJ"
[03:26:51.199]          // =>  FALSE
[03:26:51.199]        // skip if-block "!isSWJ"
[03:26:51.199]      </control>
[03:26:51.199]      <block atomic="false" info="">
[03:26:51.199]        ReadDP(0x0);
[03:26:51.199]  
[03:26:51.199]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.199]  
[03:26:51.199]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.199]      </block>
[03:26:51.199]      // end if-block "protType == 2"
[03:26:51.199]    </control>
[03:26:51.204]  </sequence>
[03:26:51.204]  
[03:26:51.258]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.258]  
[03:26:51.258]  <debugvars>
[03:26:51.258]    // Pre-defined
[03:26:51.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.258]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.258]    __dp=0x00000000
[03:26:51.258]    __ap=0x00000000
[03:26:51.258]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.258]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.258]    __FlashAddr=0x00000000
[03:26:51.258]    __FlashLen=0x00000000
[03:26:51.258]    __FlashArg=0x00000000
[03:26:51.258]    __FlashOp=0x00000000
[03:26:51.258]    __Result=0x00000000
[03:26:51.258]  </debugvars>
[03:26:51.258]  
[03:26:51.258]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.258]    <block atomic="false" info="">
[03:26:51.260]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.260]        // -> [isSWJ <= 0x00000001]
[03:26:51.260]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.260]        // -> [hasDormant <= 0x00000000]
[03:26:51.260]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.260]        // -> [protType <= 0x00000002]
[03:26:51.260]    </block>
[03:26:51.260]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.260]      // if-block "protType == 1"
[03:26:51.260]        // =>  FALSE
[03:26:51.260]      // skip if-block "protType == 1"
[03:26:51.260]    </control>
[03:26:51.260]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.260]      // if-block "protType == 2"
[03:26:51.260]        // =>  TRUE
[03:26:51.260]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.260]        // if-block "isSWJ"
[03:26:51.260]          // =>  TRUE
[03:26:51.260]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.260]          // if-block "hasDormant"
[03:26:51.260]            // =>  FALSE
[03:26:51.260]          // skip if-block "hasDormant"
[03:26:51.260]        </control>
[03:26:51.260]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.260]          // if-block "!hasDormant"
[03:26:51.260]            // =>  TRUE
[03:26:51.260]          <block atomic="false" info="">
[03:26:51.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.260]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.264]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.268]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.268]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.268]          </block>
[03:26:51.268]          // end if-block "!hasDormant"
[03:26:51.272]        </control>
[03:26:51.272]        // end if-block "isSWJ"
[03:26:51.272]      </control>
[03:26:51.272]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.272]        // if-block "!isSWJ"
[03:26:51.272]          // =>  FALSE
[03:26:51.272]        // skip if-block "!isSWJ"
[03:26:51.272]      </control>
[03:26:51.272]      <block atomic="false" info="">
[03:26:51.272]        ReadDP(0x0);
[03:26:51.272]  
[03:26:51.272]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.272]  
[03:26:51.272]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.272]      </block>
[03:26:51.272]      // end if-block "protType == 2"
[03:26:51.272]    </control>
[03:26:51.272]  </sequence>
[03:26:51.272]  
[03:26:51.333]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.333]  
[03:26:51.333]  <debugvars>
[03:26:51.333]    // Pre-defined
[03:26:51.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.333]    __dp=0x00000000
[03:26:51.333]    __ap=0x00000000
[03:26:51.333]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.333]    __FlashAddr=0x00000000
[03:26:51.333]    __FlashLen=0x00000000
[03:26:51.333]    __FlashArg=0x00000000
[03:26:51.335]    __FlashOp=0x00000000
[03:26:51.335]    __Result=0x00000000
[03:26:51.335]  </debugvars>
[03:26:51.335]  
[03:26:51.335]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.335]    <block atomic="false" info="">
[03:26:51.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.335]        // -> [isSWJ <= 0x00000001]
[03:26:51.335]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.335]        // -> [hasDormant <= 0x00000000]
[03:26:51.335]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.335]        // -> [protType <= 0x00000002]
[03:26:51.335]    </block>
[03:26:51.335]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.335]      // if-block "protType == 1"
[03:26:51.335]        // =>  FALSE
[03:26:51.335]      // skip if-block "protType == 1"
[03:26:51.335]    </control>
[03:26:51.335]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.335]      // if-block "protType == 2"
[03:26:51.335]        // =>  TRUE
[03:26:51.335]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.337]        // if-block "isSWJ"
[03:26:51.337]          // =>  TRUE
[03:26:51.337]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.337]          // if-block "hasDormant"
[03:26:51.337]            // =>  FALSE
[03:26:51.337]          // skip if-block "hasDormant"
[03:26:51.337]        </control>
[03:26:51.337]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.337]          // if-block "!hasDormant"
[03:26:51.337]            // =>  TRUE
[03:26:51.337]          <block atomic="false" info="">
[03:26:51.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.338]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.349]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.352]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.353]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.353]          </block>
[03:26:51.353]          // end if-block "!hasDormant"
[03:26:51.353]        </control>
[03:26:51.353]        // end if-block "isSWJ"
[03:26:51.354]      </control>
[03:26:51.354]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.354]        // if-block "!isSWJ"
[03:26:51.354]          // =>  FALSE
[03:26:51.354]        // skip if-block "!isSWJ"
[03:26:51.354]      </control>
[03:26:51.354]      <block atomic="false" info="">
[03:26:51.354]        ReadDP(0x0);
[03:26:51.356]  
[03:26:51.356]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.356]  
[03:26:51.356]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.356]      </block>
[03:26:51.356]      // end if-block "protType == 2"
[03:26:51.356]    </control>
[03:26:51.356]  </sequence>
[03:26:51.356]  
[03:26:51.412]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.412]  
[03:26:51.412]  <debugvars>
[03:26:51.412]    // Pre-defined
[03:26:51.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.412]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.412]    __dp=0x00000000
[03:26:51.412]    __ap=0x00000000
[03:26:51.412]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.412]    __FlashAddr=0x00000000
[03:26:51.412]    __FlashLen=0x00000000
[03:26:51.412]    __FlashArg=0x00000000
[03:26:51.412]    __FlashOp=0x00000000
[03:26:51.412]    __Result=0x00000000
[03:26:51.412]  </debugvars>
[03:26:51.412]  
[03:26:51.412]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.412]    <block atomic="false" info="">
[03:26:51.412]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.412]        // -> [isSWJ <= 0x00000001]
[03:26:51.412]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.412]        // -> [hasDormant <= 0x00000000]
[03:26:51.412]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.412]        // -> [protType <= 0x00000002]
[03:26:51.412]    </block>
[03:26:51.412]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.412]      // if-block "protType == 1"
[03:26:51.412]        // =>  FALSE
[03:26:51.416]      // skip if-block "protType == 1"
[03:26:51.416]    </control>
[03:26:51.416]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.416]      // if-block "protType == 2"
[03:26:51.416]        // =>  TRUE
[03:26:51.416]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.416]        // if-block "isSWJ"
[03:26:51.416]          // =>  TRUE
[03:26:51.416]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.416]          // if-block "hasDormant"
[03:26:51.416]            // =>  FALSE
[03:26:51.416]          // skip if-block "hasDormant"
[03:26:51.416]        </control>
[03:26:51.416]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.416]          // if-block "!hasDormant"
[03:26:51.416]            // =>  TRUE
[03:26:51.416]          <block atomic="false" info="">
[03:26:51.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.416]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.423]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.426]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.426]          </block>
[03:26:51.426]          // end if-block "!hasDormant"
[03:26:51.426]        </control>
[03:26:51.426]        // end if-block "isSWJ"
[03:26:51.426]      </control>
[03:26:51.426]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.426]        // if-block "!isSWJ"
[03:26:51.426]          // =>  FALSE
[03:26:51.428]        // skip if-block "!isSWJ"
[03:26:51.428]      </control>
[03:26:51.428]      <block atomic="false" info="">
[03:26:51.428]        ReadDP(0x0);
[03:26:51.429]  
[03:26:51.429]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.429]  
[03:26:51.429]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.429]      </block>
[03:26:51.429]      // end if-block "protType == 2"
[03:26:51.429]    </control>
[03:26:51.429]  </sequence>
[03:26:51.429]  
[03:26:51.486]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.486]  
[03:26:51.486]  <debugvars>
[03:26:51.486]    // Pre-defined
[03:26:51.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.486]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.486]    __dp=0x00000000
[03:26:51.486]    __ap=0x00000000
[03:26:51.486]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.486]    __FlashAddr=0x00000000
[03:26:51.486]    __FlashLen=0x00000000
[03:26:51.486]    __FlashArg=0x00000000
[03:26:51.486]    __FlashOp=0x00000000
[03:26:51.486]    __Result=0x00000000
[03:26:51.486]  </debugvars>
[03:26:51.486]  
[03:26:51.486]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.486]    <block atomic="false" info="">
[03:26:51.486]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.486]        // -> [isSWJ <= 0x00000001]
[03:26:51.486]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.486]        // -> [hasDormant <= 0x00000000]
[03:26:51.486]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.486]        // -> [protType <= 0x00000002]
[03:26:51.486]    </block>
[03:26:51.486]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.486]      // if-block "protType == 1"
[03:26:51.486]        // =>  FALSE
[03:26:51.490]      // skip if-block "protType == 1"
[03:26:51.490]    </control>
[03:26:51.490]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.490]      // if-block "protType == 2"
[03:26:51.490]        // =>  TRUE
[03:26:51.490]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.490]        // if-block "isSWJ"
[03:26:51.490]          // =>  TRUE
[03:26:51.490]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.490]          // if-block "hasDormant"
[03:26:51.490]            // =>  FALSE
[03:26:51.490]          // skip if-block "hasDormant"
[03:26:51.490]        </control>
[03:26:51.490]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.490]          // if-block "!hasDormant"
[03:26:51.490]            // =>  TRUE
[03:26:51.490]          <block atomic="false" info="">
[03:26:51.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.490]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.494]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.498]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.498]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.502]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.502]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.502]          </block>
[03:26:51.502]          // end if-block "!hasDormant"
[03:26:51.502]        </control>
[03:26:51.502]        // end if-block "isSWJ"
[03:26:51.502]      </control>
[03:26:51.502]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.502]        // if-block "!isSWJ"
[03:26:51.502]          // =>  FALSE
[03:26:51.502]        // skip if-block "!isSWJ"
[03:26:51.502]      </control>
[03:26:51.502]      <block atomic="false" info="">
[03:26:51.502]        ReadDP(0x0);
[03:26:51.510]  
[03:26:51.510]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.510]  
[03:26:51.510]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.510]      </block>
[03:26:51.510]      // end if-block "protType == 2"
[03:26:51.510]    </control>
[03:26:51.510]  </sequence>
[03:26:51.510]  
[03:26:51.571]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.571]  
[03:26:51.571]  <debugvars>
[03:26:51.571]    // Pre-defined
[03:26:51.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.572]    __dp=0x00000000
[03:26:51.572]    __ap=0x00000000
[03:26:51.572]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.572]    __FlashAddr=0x00000000
[03:26:51.572]    __FlashLen=0x00000000
[03:26:51.572]    __FlashArg=0x00000000
[03:26:51.572]    __FlashOp=0x00000000
[03:26:51.572]    __Result=0x00000000
[03:26:51.572]  </debugvars>
[03:26:51.572]  
[03:26:51.573]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.573]    <block atomic="false" info="">
[03:26:51.573]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.573]        // -> [isSWJ <= 0x00000001]
[03:26:51.573]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.573]        // -> [hasDormant <= 0x00000000]
[03:26:51.573]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.573]        // -> [protType <= 0x00000002]
[03:26:51.573]    </block>
[03:26:51.573]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.573]      // if-block "protType == 1"
[03:26:51.573]        // =>  FALSE
[03:26:51.573]      // skip if-block "protType == 1"
[03:26:51.573]    </control>
[03:26:51.573]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.573]      // if-block "protType == 2"
[03:26:51.573]        // =>  TRUE
[03:26:51.573]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.573]        // if-block "isSWJ"
[03:26:51.573]          // =>  TRUE
[03:26:51.575]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.575]          // if-block "hasDormant"
[03:26:51.575]            // =>  FALSE
[03:26:51.575]          // skip if-block "hasDormant"
[03:26:51.575]        </control>
[03:26:51.575]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.575]          // if-block "!hasDormant"
[03:26:51.575]            // =>  TRUE
[03:26:51.575]          <block atomic="false" info="">
[03:26:51.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.575]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.575]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.575]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.579]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.579]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.579]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.583]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.587]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.587]          </block>
[03:26:51.587]          // end if-block "!hasDormant"
[03:26:51.587]        </control>
[03:26:51.587]        // end if-block "isSWJ"
[03:26:51.587]      </control>
[03:26:51.587]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.587]        // if-block "!isSWJ"
[03:26:51.587]          // =>  FALSE
[03:26:51.587]        // skip if-block "!isSWJ"
[03:26:51.587]      </control>
[03:26:51.587]      <block atomic="false" info="">
[03:26:51.587]        ReadDP(0x0);
[03:26:51.591]  
[03:26:51.591]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.591]  
[03:26:51.591]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.591]      </block>
[03:26:51.591]      // end if-block "protType == 2"
[03:26:51.591]    </control>
[03:26:51.591]  </sequence>
[03:26:51.591]  
[03:26:51.645]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.645]  
[03:26:51.645]  <debugvars>
[03:26:51.645]    // Pre-defined
[03:26:51.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.645]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.645]    __dp=0x00000000
[03:26:51.646]    __ap=0x00000000
[03:26:51.646]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.646]    __FlashAddr=0x00000000
[03:26:51.646]    __FlashLen=0x00000000
[03:26:51.646]    __FlashArg=0x00000000
[03:26:51.646]    __FlashOp=0x00000000
[03:26:51.646]    __Result=0x00000000
[03:26:51.646]  </debugvars>
[03:26:51.646]  
[03:26:51.646]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.646]    <block atomic="false" info="">
[03:26:51.646]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.646]        // -> [isSWJ <= 0x00000001]
[03:26:51.646]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.646]        // -> [hasDormant <= 0x00000000]
[03:26:51.646]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.646]        // -> [protType <= 0x00000002]
[03:26:51.646]    </block>
[03:26:51.646]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.646]      // if-block "protType == 1"
[03:26:51.646]        // =>  FALSE
[03:26:51.646]      // skip if-block "protType == 1"
[03:26:51.646]    </control>
[03:26:51.646]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.646]      // if-block "protType == 2"
[03:26:51.646]        // =>  TRUE
[03:26:51.646]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.646]        // if-block "isSWJ"
[03:26:51.646]          // =>  TRUE
[03:26:51.649]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.649]          // if-block "hasDormant"
[03:26:51.649]            // =>  FALSE
[03:26:51.649]          // skip if-block "hasDormant"
[03:26:51.649]        </control>
[03:26:51.649]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.649]          // if-block "!hasDormant"
[03:26:51.649]            // =>  TRUE
[03:26:51.649]          <block atomic="false" info="">
[03:26:51.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.658]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.660]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.666]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.666]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.670]          </block>
[03:26:51.670]          // end if-block "!hasDormant"
[03:26:51.670]        </control>
[03:26:51.670]        // end if-block "isSWJ"
[03:26:51.670]      </control>
[03:26:51.670]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.670]        // if-block "!isSWJ"
[03:26:51.670]          // =>  FALSE
[03:26:51.670]        // skip if-block "!isSWJ"
[03:26:51.670]      </control>
[03:26:51.670]      <block atomic="false" info="">
[03:26:51.670]        ReadDP(0x0);
[03:26:51.670]  
[03:26:51.670]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.670]  
[03:26:51.674]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.674]      </block>
[03:26:51.674]      // end if-block "protType == 2"
[03:26:51.674]    </control>
[03:26:51.674]  </sequence>
[03:26:51.674]  
[03:26:51.730]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.730]  
[03:26:51.730]  <debugvars>
[03:26:51.730]    // Pre-defined
[03:26:51.730]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.730]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.730]    __dp=0x00000000
[03:26:51.730]    __ap=0x00000000
[03:26:51.730]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.730]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.731]    __FlashAddr=0x00000000
[03:26:51.731]    __FlashLen=0x00000000
[03:26:51.731]    __FlashArg=0x00000000
[03:26:51.731]    __FlashOp=0x00000000
[03:26:51.731]    __Result=0x00000000
[03:26:51.731]  </debugvars>
[03:26:51.731]  
[03:26:51.731]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.731]    <block atomic="false" info="">
[03:26:51.731]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.731]        // -> [isSWJ <= 0x00000001]
[03:26:51.731]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.731]        // -> [hasDormant <= 0x00000000]
[03:26:51.731]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.731]        // -> [protType <= 0x00000002]
[03:26:51.731]    </block>
[03:26:51.731]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.731]      // if-block "protType == 1"
[03:26:51.731]        // =>  FALSE
[03:26:51.731]      // skip if-block "protType == 1"
[03:26:51.731]    </control>
[03:26:51.731]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.731]      // if-block "protType == 2"
[03:26:51.731]        // =>  TRUE
[03:26:51.731]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.731]        // if-block "isSWJ"
[03:26:51.734]          // =>  TRUE
[03:26:51.734]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.734]          // if-block "hasDormant"
[03:26:51.734]            // =>  FALSE
[03:26:51.734]          // skip if-block "hasDormant"
[03:26:51.734]        </control>
[03:26:51.734]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.734]          // if-block "!hasDormant"
[03:26:51.734]            // =>  TRUE
[03:26:51.734]          <block atomic="false" info="">
[03:26:51.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.734]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.738]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.742]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.742]          </block>
[03:26:51.742]          // end if-block "!hasDormant"
[03:26:51.742]        </control>
[03:26:51.742]        // end if-block "isSWJ"
[03:26:51.742]      </control>
[03:26:51.742]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.742]        // if-block "!isSWJ"
[03:26:51.742]          // =>  FALSE
[03:26:51.742]        // skip if-block "!isSWJ"
[03:26:51.742]      </control>
[03:26:51.742]      <block atomic="false" info="">
[03:26:51.742]        ReadDP(0x0);
[03:26:51.746]  
[03:26:51.746]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.746]  
[03:26:51.746]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.746]      </block>
[03:26:51.746]      // end if-block "protType == 2"
[03:26:51.746]    </control>
[03:26:51.746]  </sequence>
[03:26:51.746]  
[03:26:51.803]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.803]  
[03:26:51.803]  <debugvars>
[03:26:51.803]    // Pre-defined
[03:26:51.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.803]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.803]    __dp=0x00000000
[03:26:51.803]    __ap=0x00000000
[03:26:51.803]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.804]    __FlashAddr=0x00000000
[03:26:51.804]    __FlashLen=0x00000000
[03:26:51.804]    __FlashArg=0x00000000
[03:26:51.804]    __FlashOp=0x00000000
[03:26:51.805]    __Result=0x00000000
[03:26:51.805]  </debugvars>
[03:26:51.805]  
[03:26:51.805]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.805]    <block atomic="false" info="">
[03:26:51.805]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.805]        // -> [isSWJ <= 0x00000001]
[03:26:51.805]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.805]        // -> [hasDormant <= 0x00000000]
[03:26:51.805]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.805]        // -> [protType <= 0x00000002]
[03:26:51.805]    </block>
[03:26:51.805]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.805]      // if-block "protType == 1"
[03:26:51.807]        // =>  FALSE
[03:26:51.807]      // skip if-block "protType == 1"
[03:26:51.807]    </control>
[03:26:51.807]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.807]      // if-block "protType == 2"
[03:26:51.807]        // =>  TRUE
[03:26:51.807]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.807]        // if-block "isSWJ"
[03:26:51.807]          // =>  TRUE
[03:26:51.807]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.807]          // if-block "hasDormant"
[03:26:51.807]            // =>  FALSE
[03:26:51.807]          // skip if-block "hasDormant"
[03:26:51.807]        </control>
[03:26:51.807]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.807]          // if-block "!hasDormant"
[03:26:51.807]            // =>  TRUE
[03:26:51.807]          <block atomic="false" info="">
[03:26:51.807]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.813]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.816]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.820]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.822]          </block>
[03:26:51.822]          // end if-block "!hasDormant"
[03:26:51.822]        </control>
[03:26:51.822]        // end if-block "isSWJ"
[03:26:51.823]      </control>
[03:26:51.823]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.823]        // if-block "!isSWJ"
[03:26:51.823]          // =>  FALSE
[03:26:51.823]        // skip if-block "!isSWJ"
[03:26:51.824]      </control>
[03:26:51.824]      <block atomic="false" info="">
[03:26:51.824]        ReadDP(0x0);
[03:26:51.825]  
[03:26:51.825]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.825]  
[03:26:51.825]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.825]      </block>
[03:26:51.826]      // end if-block "protType == 2"
[03:26:51.826]    </control>
[03:26:51.826]  </sequence>
[03:26:51.826]  
[03:26:51.886]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.886]  
[03:26:51.886]  <debugvars>
[03:26:51.886]    // Pre-defined
[03:26:51.886]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.886]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.886]    __dp=0x00000000
[03:26:51.887]    __ap=0x00000000
[03:26:51.887]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.887]    __FlashAddr=0x00000000
[03:26:51.887]    __FlashLen=0x00000000
[03:26:51.887]    __FlashArg=0x00000000
[03:26:51.887]    __FlashOp=0x00000000
[03:26:51.887]    __Result=0x00000000
[03:26:51.887]  </debugvars>
[03:26:51.887]  
[03:26:51.887]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.887]    <block atomic="false" info="">
[03:26:51.887]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.887]        // -> [isSWJ <= 0x00000001]
[03:26:51.887]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.887]        // -> [hasDormant <= 0x00000000]
[03:26:51.887]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.887]        // -> [protType <= 0x00000002]
[03:26:51.887]    </block>
[03:26:51.887]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.887]      // if-block "protType == 1"
[03:26:51.887]        // =>  FALSE
[03:26:51.887]      // skip if-block "protType == 1"
[03:26:51.887]    </control>
[03:26:51.887]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.887]      // if-block "protType == 2"
[03:26:51.887]        // =>  TRUE
[03:26:51.890]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.890]        // if-block "isSWJ"
[03:26:51.890]          // =>  TRUE
[03:26:51.890]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.890]          // if-block "hasDormant"
[03:26:51.890]            // =>  FALSE
[03:26:51.890]          // skip if-block "hasDormant"
[03:26:51.890]        </control>
[03:26:51.891]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.891]          // if-block "!hasDormant"
[03:26:51.891]            // =>  TRUE
[03:26:51.891]          <block atomic="false" info="">
[03:26:51.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.893]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.896]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.900]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.900]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.902]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.902]          </block>
[03:26:51.902]          // end if-block "!hasDormant"
[03:26:51.903]        </control>
[03:26:51.903]        // end if-block "isSWJ"
[03:26:51.903]      </control>
[03:26:51.903]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.903]        // if-block "!isSWJ"
[03:26:51.903]          // =>  FALSE
[03:26:51.903]        // skip if-block "!isSWJ"
[03:26:51.903]      </control>
[03:26:51.903]      <block atomic="false" info="">
[03:26:51.904]        ReadDP(0x0);
[03:26:51.905]  
[03:26:51.905]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.905]  
[03:26:51.905]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.905]      </block>
[03:26:51.905]      // end if-block "protType == 2"
[03:26:51.905]    </control>
[03:26:51.905]  </sequence>
[03:26:51.905]  
[03:26:51.957]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:51.957]  
[03:26:51.957]  <debugvars>
[03:26:51.957]    // Pre-defined
[03:26:51.957]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:51.957]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:51.957]    __dp=0x00000000
[03:26:51.957]    __ap=0x00000000
[03:26:51.957]    __traceout=0x00000000      (Trace Disabled)
[03:26:51.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:51.957]    __FlashAddr=0x00000000
[03:26:51.957]    __FlashLen=0x00000000
[03:26:51.957]    __FlashArg=0x00000000
[03:26:51.957]    __FlashOp=0x00000000
[03:26:51.957]    __Result=0x00000000
[03:26:51.957]  </debugvars>
[03:26:51.957]  
[03:26:51.957]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:51.957]    <block atomic="false" info="">
[03:26:51.957]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:51.957]        // -> [isSWJ <= 0x00000001]
[03:26:51.957]      __var hasDormant = __protocol & 0x00020000;
[03:26:51.957]        // -> [hasDormant <= 0x00000000]
[03:26:51.957]      __var protType   = __protocol & 0x0000FFFF;
[03:26:51.957]        // -> [protType <= 0x00000002]
[03:26:51.961]    </block>
[03:26:51.961]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:51.961]      // if-block "protType == 1"
[03:26:51.961]        // =>  FALSE
[03:26:51.961]      // skip if-block "protType == 1"
[03:26:51.961]    </control>
[03:26:51.961]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:51.961]      // if-block "protType == 2"
[03:26:51.961]        // =>  TRUE
[03:26:51.961]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:51.961]        // if-block "isSWJ"
[03:26:51.961]          // =>  TRUE
[03:26:51.961]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:51.961]          // if-block "hasDormant"
[03:26:51.961]            // =>  FALSE
[03:26:51.961]          // skip if-block "hasDormant"
[03:26:51.961]        </control>
[03:26:51.961]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:51.961]          // if-block "!hasDormant"
[03:26:51.961]            // =>  TRUE
[03:26:51.961]          <block atomic="false" info="">
[03:26:51.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:51.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.965]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:51.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:51.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:51.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.969]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:51.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:51.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:51.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:51.973]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:51.973]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:51.973]          </block>
[03:26:51.973]          // end if-block "!hasDormant"
[03:26:51.973]        </control>
[03:26:51.973]        // end if-block "isSWJ"
[03:26:51.973]      </control>
[03:26:51.973]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:51.973]        // if-block "!isSWJ"
[03:26:51.973]          // =>  FALSE
[03:26:51.973]        // skip if-block "!isSWJ"
[03:26:51.973]      </control>
[03:26:51.973]      <block atomic="false" info="">
[03:26:51.973]        ReadDP(0x0);
[03:26:51.977]  
[03:26:51.977]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:51.977]  
[03:26:51.977]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:51.977]      </block>
[03:26:51.977]      // end if-block "protType == 2"
[03:26:51.977]    </control>
[03:26:51.977]  </sequence>
[03:26:51.977]  
[03:26:52.029]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.029]  
[03:26:52.029]  <debugvars>
[03:26:52.029]    // Pre-defined
[03:26:52.029]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.029]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.029]    __dp=0x00000000
[03:26:52.029]    __ap=0x00000000
[03:26:52.029]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.029]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.029]    __FlashAddr=0x00000000
[03:26:52.029]    __FlashLen=0x00000000
[03:26:52.029]    __FlashArg=0x00000000
[03:26:52.029]    __FlashOp=0x00000000
[03:26:52.029]    __Result=0x00000000
[03:26:52.029]  </debugvars>
[03:26:52.029]  
[03:26:52.029]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.029]    <block atomic="false" info="">
[03:26:52.029]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.029]        // -> [isSWJ <= 0x00000001]
[03:26:52.029]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.029]        // -> [hasDormant <= 0x00000000]
[03:26:52.029]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.029]        // -> [protType <= 0x00000002]
[03:26:52.029]    </block>
[03:26:52.029]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.029]      // if-block "protType == 1"
[03:26:52.029]        // =>  FALSE
[03:26:52.029]      // skip if-block "protType == 1"
[03:26:52.029]    </control>
[03:26:52.029]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.029]      // if-block "protType == 2"
[03:26:52.029]        // =>  TRUE
[03:26:52.029]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.029]        // if-block "isSWJ"
[03:26:52.029]          // =>  TRUE
[03:26:52.029]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.029]          // if-block "hasDormant"
[03:26:52.029]            // =>  FALSE
[03:26:52.029]          // skip if-block "hasDormant"
[03:26:52.029]        </control>
[03:26:52.029]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.033]          // if-block "!hasDormant"
[03:26:52.033]            // =>  TRUE
[03:26:52.033]          <block atomic="false" info="">
[03:26:52.033]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.033]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.037]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.037]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.037]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.037]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.037]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.041]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.041]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.041]          </block>
[03:26:52.041]          // end if-block "!hasDormant"
[03:26:52.041]        </control>
[03:26:52.043]        // end if-block "isSWJ"
[03:26:52.043]      </control>
[03:26:52.043]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.043]        // if-block "!isSWJ"
[03:26:52.043]          // =>  FALSE
[03:26:52.043]        // skip if-block "!isSWJ"
[03:26:52.043]      </control>
[03:26:52.043]      <block atomic="false" info="">
[03:26:52.044]        ReadDP(0x0);
[03:26:52.044]  
[03:26:52.044]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.044]  
[03:26:52.044]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.044]      </block>
[03:26:52.044]      // end if-block "protType == 2"
[03:26:52.044]    </control>
[03:26:52.044]  </sequence>
[03:26:52.044]  
[03:26:52.104]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.104]  
[03:26:52.104]  <debugvars>
[03:26:52.104]    // Pre-defined
[03:26:52.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.104]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.104]    __dp=0x00000000
[03:26:52.104]    __ap=0x00000000
[03:26:52.104]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.104]    __FlashAddr=0x00000000
[03:26:52.104]    __FlashLen=0x00000000
[03:26:52.104]    __FlashArg=0x00000000
[03:26:52.104]    __FlashOp=0x00000000
[03:26:52.104]    __Result=0x00000000
[03:26:52.104]  </debugvars>
[03:26:52.104]  
[03:26:52.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.104]    <block atomic="false" info="">
[03:26:52.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.104]        // -> [isSWJ <= 0x00000001]
[03:26:52.104]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.104]        // -> [hasDormant <= 0x00000000]
[03:26:52.104]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.104]        // -> [protType <= 0x00000002]
[03:26:52.104]    </block>
[03:26:52.104]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.108]      // if-block "protType == 1"
[03:26:52.108]        // =>  FALSE
[03:26:52.108]      // skip if-block "protType == 1"
[03:26:52.108]    </control>
[03:26:52.108]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.108]      // if-block "protType == 2"
[03:26:52.108]        // =>  TRUE
[03:26:52.108]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.108]        // if-block "isSWJ"
[03:26:52.108]          // =>  TRUE
[03:26:52.108]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.108]          // if-block "hasDormant"
[03:26:52.108]            // =>  FALSE
[03:26:52.108]          // skip if-block "hasDormant"
[03:26:52.108]        </control>
[03:26:52.108]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.108]          // if-block "!hasDormant"
[03:26:52.108]            // =>  TRUE
[03:26:52.108]          <block atomic="false" info="">
[03:26:52.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.108]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.112]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.112]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.112]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.116]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.116]          </block>
[03:26:52.116]          // end if-block "!hasDormant"
[03:26:52.116]        </control>
[03:26:52.116]        // end if-block "isSWJ"
[03:26:52.116]      </control>
[03:26:52.116]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.116]        // if-block "!isSWJ"
[03:26:52.116]          // =>  FALSE
[03:26:52.116]        // skip if-block "!isSWJ"
[03:26:52.116]      </control>
[03:26:52.120]      <block atomic="false" info="">
[03:26:52.120]        ReadDP(0x0);
[03:26:52.120]  
[03:26:52.120]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.120]  
[03:26:52.120]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.120]      </block>
[03:26:52.120]      // end if-block "protType == 2"
[03:26:52.120]    </control>
[03:26:52.120]  </sequence>
[03:26:52.120]  
[03:26:52.177]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.177]  
[03:26:52.177]  <debugvars>
[03:26:52.177]    // Pre-defined
[03:26:52.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.177]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.177]    __dp=0x00000000
[03:26:52.177]    __ap=0x00000000
[03:26:52.177]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.177]    __FlashAddr=0x00000000
[03:26:52.177]    __FlashLen=0x00000000
[03:26:52.177]    __FlashArg=0x00000000
[03:26:52.177]    __FlashOp=0x00000000
[03:26:52.177]    __Result=0x00000000
[03:26:52.177]  </debugvars>
[03:26:52.177]  
[03:26:52.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.177]    <block atomic="false" info="">
[03:26:52.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.177]        // -> [isSWJ <= 0x00000001]
[03:26:52.177]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.177]        // -> [hasDormant <= 0x00000000]
[03:26:52.177]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.177]        // -> [protType <= 0x00000002]
[03:26:52.177]    </block>
[03:26:52.177]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.177]      // if-block "protType == 1"
[03:26:52.177]        // =>  FALSE
[03:26:52.177]      // skip if-block "protType == 1"
[03:26:52.177]    </control>
[03:26:52.177]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.177]      // if-block "protType == 2"
[03:26:52.177]        // =>  TRUE
[03:26:52.177]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.177]        // if-block "isSWJ"
[03:26:52.181]          // =>  TRUE
[03:26:52.181]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.181]          // if-block "hasDormant"
[03:26:52.181]            // =>  FALSE
[03:26:52.181]          // skip if-block "hasDormant"
[03:26:52.181]        </control>
[03:26:52.181]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.181]          // if-block "!hasDormant"
[03:26:52.181]            // =>  TRUE
[03:26:52.181]          <block atomic="false" info="">
[03:26:52.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.181]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.185]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.189]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.192]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.192]          </block>
[03:26:52.192]          // end if-block "!hasDormant"
[03:26:52.192]        </control>
[03:26:52.192]        // end if-block "isSWJ"
[03:26:52.192]      </control>
[03:26:52.192]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.192]        // if-block "!isSWJ"
[03:26:52.192]          // =>  FALSE
[03:26:52.192]        // skip if-block "!isSWJ"
[03:26:52.192]      </control>
[03:26:52.192]      <block atomic="false" info="">
[03:26:52.192]        ReadDP(0x0);
[03:26:52.196]  
[03:26:52.196]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.196]  
[03:26:52.196]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.196]      </block>
[03:26:52.196]      // end if-block "protType == 2"
[03:26:52.196]    </control>
[03:26:52.196]  </sequence>
[03:26:52.196]  
[03:26:52.249]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.249]  
[03:26:52.249]  <debugvars>
[03:26:52.249]    // Pre-defined
[03:26:52.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.249]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.249]    __dp=0x00000000
[03:26:52.249]    __ap=0x00000000
[03:26:52.249]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.249]    __FlashAddr=0x00000000
[03:26:52.249]    __FlashLen=0x00000000
[03:26:52.249]    __FlashArg=0x00000000
[03:26:52.249]    __FlashOp=0x00000000
[03:26:52.249]    __Result=0x00000000
[03:26:52.249]  </debugvars>
[03:26:52.249]  
[03:26:52.249]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.249]    <block atomic="false" info="">
[03:26:52.249]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.249]        // -> [isSWJ <= 0x00000001]
[03:26:52.249]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.249]        // -> [hasDormant <= 0x00000000]
[03:26:52.249]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.249]        // -> [protType <= 0x00000002]
[03:26:52.249]    </block>
[03:26:52.249]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.249]      // if-block "protType == 1"
[03:26:52.249]        // =>  FALSE
[03:26:52.249]      // skip if-block "protType == 1"
[03:26:52.249]    </control>
[03:26:52.249]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.249]      // if-block "protType == 2"
[03:26:52.249]        // =>  TRUE
[03:26:52.249]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.249]        // if-block "isSWJ"
[03:26:52.249]          // =>  TRUE
[03:26:52.249]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.249]          // if-block "hasDormant"
[03:26:52.249]            // =>  FALSE
[03:26:52.249]          // skip if-block "hasDormant"
[03:26:52.253]        </control>
[03:26:52.253]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.253]          // if-block "!hasDormant"
[03:26:52.253]            // =>  TRUE
[03:26:52.253]          <block atomic="false" info="">
[03:26:52.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.257]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.265]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.265]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.265]          </block>
[03:26:52.265]          // end if-block "!hasDormant"
[03:26:52.265]        </control>
[03:26:52.265]        // end if-block "isSWJ"
[03:26:52.265]      </control>
[03:26:52.265]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.265]        // if-block "!isSWJ"
[03:26:52.265]          // =>  FALSE
[03:26:52.265]        // skip if-block "!isSWJ"
[03:26:52.265]      </control>
[03:26:52.265]      <block atomic="false" info="">
[03:26:52.265]        ReadDP(0x0);
[03:26:52.269]  
[03:26:52.269]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.269]  
[03:26:52.269]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.269]      </block>
[03:26:52.269]      // end if-block "protType == 2"
[03:26:52.269]    </control>
[03:26:52.273]  </sequence>
[03:26:52.273]  
[03:26:52.333]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.333]  
[03:26:52.333]  <debugvars>
[03:26:52.333]    // Pre-defined
[03:26:52.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.333]    __dp=0x00000000
[03:26:52.333]    __ap=0x00000000
[03:26:52.333]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.333]    __FlashAddr=0x00000000
[03:26:52.333]    __FlashLen=0x00000000
[03:26:52.333]    __FlashArg=0x00000000
[03:26:52.333]    __FlashOp=0x00000000
[03:26:52.333]    __Result=0x00000000
[03:26:52.335]  </debugvars>
[03:26:52.335]  
[03:26:52.335]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.335]    <block atomic="false" info="">
[03:26:52.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.335]        // -> [isSWJ <= 0x00000001]
[03:26:52.335]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.335]        // -> [hasDormant <= 0x00000000]
[03:26:52.335]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.335]        // -> [protType <= 0x00000002]
[03:26:52.335]    </block>
[03:26:52.335]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.335]      // if-block "protType == 1"
[03:26:52.335]        // =>  FALSE
[03:26:52.335]      // skip if-block "protType == 1"
[03:26:52.335]    </control>
[03:26:52.335]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.335]      // if-block "protType == 2"
[03:26:52.335]        // =>  TRUE
[03:26:52.335]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.335]        // if-block "isSWJ"
[03:26:52.335]          // =>  TRUE
[03:26:52.335]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.335]          // if-block "hasDormant"
[03:26:52.335]            // =>  FALSE
[03:26:52.337]          // skip if-block "hasDormant"
[03:26:52.337]        </control>
[03:26:52.337]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.337]          // if-block "!hasDormant"
[03:26:52.337]            // =>  TRUE
[03:26:52.337]          <block atomic="false" info="">
[03:26:52.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.337]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.337]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.348]          </block>
[03:26:52.348]          // end if-block "!hasDormant"
[03:26:52.348]        </control>
[03:26:52.350]        // end if-block "isSWJ"
[03:26:52.350]      </control>
[03:26:52.350]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.350]        // if-block "!isSWJ"
[03:26:52.350]          // =>  FALSE
[03:26:52.350]        // skip if-block "!isSWJ"
[03:26:52.350]      </control>
[03:26:52.350]      <block atomic="false" info="">
[03:26:52.350]        ReadDP(0x0);
[03:26:52.351]  
[03:26:52.351]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.351]  
[03:26:52.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.351]      </block>
[03:26:52.351]      // end if-block "protType == 2"
[03:26:52.351]    </control>
[03:26:52.351]  </sequence>
[03:26:52.351]  
[03:26:52.408]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.408]  
[03:26:52.408]  <debugvars>
[03:26:52.408]    // Pre-defined
[03:26:52.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.408]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.408]    __dp=0x00000000
[03:26:52.408]    __ap=0x00000000
[03:26:52.408]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.408]    __FlashAddr=0x00000000
[03:26:52.408]    __FlashLen=0x00000000
[03:26:52.408]    __FlashArg=0x00000000
[03:26:52.408]    __FlashOp=0x00000000
[03:26:52.408]    __Result=0x00000000
[03:26:52.408]  </debugvars>
[03:26:52.408]  
[03:26:52.408]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.408]    <block atomic="false" info="">
[03:26:52.408]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.408]        // -> [isSWJ <= 0x00000001]
[03:26:52.408]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.408]        // -> [hasDormant <= 0x00000000]
[03:26:52.408]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.408]        // -> [protType <= 0x00000002]
[03:26:52.408]    </block>
[03:26:52.408]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.408]      // if-block "protType == 1"
[03:26:52.408]        // =>  FALSE
[03:26:52.408]      // skip if-block "protType == 1"
[03:26:52.408]    </control>
[03:26:52.408]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.408]      // if-block "protType == 2"
[03:26:52.408]        // =>  TRUE
[03:26:52.408]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.408]        // if-block "isSWJ"
[03:26:52.408]          // =>  TRUE
[03:26:52.412]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.413]          // if-block "hasDormant"
[03:26:52.413]            // =>  FALSE
[03:26:52.413]          // skip if-block "hasDormant"
[03:26:52.413]        </control>
[03:26:52.413]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.413]          // if-block "!hasDormant"
[03:26:52.413]            // =>  TRUE
[03:26:52.413]          <block atomic="false" info="">
[03:26:52.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.424]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.424]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.424]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.424]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.424]          </block>
[03:26:52.424]          // end if-block "!hasDormant"
[03:26:52.424]        </control>
[03:26:52.424]        // end if-block "isSWJ"
[03:26:52.424]      </control>
[03:26:52.424]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.424]        // if-block "!isSWJ"
[03:26:52.424]          // =>  FALSE
[03:26:52.424]        // skip if-block "!isSWJ"
[03:26:52.424]      </control>
[03:26:52.428]      <block atomic="false" info="">
[03:26:52.428]        ReadDP(0x0);
[03:26:52.428]  
[03:26:52.428]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.428]  
[03:26:52.428]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.428]      </block>
[03:26:52.428]      // end if-block "protType == 2"
[03:26:52.428]    </control>
[03:26:52.428]  </sequence>
[03:26:52.428]  
[03:26:52.482]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.482]  
[03:26:52.482]  <debugvars>
[03:26:52.482]    // Pre-defined
[03:26:52.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.482]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.482]    __dp=0x00000000
[03:26:52.482]    __ap=0x00000000
[03:26:52.482]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.482]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.482]    __FlashAddr=0x00000000
[03:26:52.482]    __FlashLen=0x00000000
[03:26:52.482]    __FlashArg=0x00000000
[03:26:52.482]    __FlashOp=0x00000000
[03:26:52.482]    __Result=0x00000000
[03:26:52.482]  </debugvars>
[03:26:52.482]  
[03:26:52.482]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.482]    <block atomic="false" info="">
[03:26:52.482]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.482]        // -> [isSWJ <= 0x00000001]
[03:26:52.482]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.482]        // -> [hasDormant <= 0x00000000]
[03:26:52.482]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.482]        // -> [protType <= 0x00000002]
[03:26:52.482]    </block>
[03:26:52.482]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.482]      // if-block "protType == 1"
[03:26:52.482]        // =>  FALSE
[03:26:52.482]      // skip if-block "protType == 1"
[03:26:52.482]    </control>
[03:26:52.482]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.482]      // if-block "protType == 2"
[03:26:52.482]        // =>  TRUE
[03:26:52.482]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.486]        // if-block "isSWJ"
[03:26:52.486]          // =>  TRUE
[03:26:52.486]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.486]          // if-block "hasDormant"
[03:26:52.486]            // =>  FALSE
[03:26:52.486]          // skip if-block "hasDormant"
[03:26:52.486]        </control>
[03:26:52.486]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.486]          // if-block "!hasDormant"
[03:26:52.486]            // =>  TRUE
[03:26:52.486]          <block atomic="false" info="">
[03:26:52.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.486]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.490]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.496]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.496]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.496]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.498]          </block>
[03:26:52.498]          // end if-block "!hasDormant"
[03:26:52.498]        </control>
[03:26:52.498]        // end if-block "isSWJ"
[03:26:52.498]      </control>
[03:26:52.498]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.498]        // if-block "!isSWJ"
[03:26:52.498]          // =>  FALSE
[03:26:52.498]        // skip if-block "!isSWJ"
[03:26:52.498]      </control>
[03:26:52.498]      <block atomic="false" info="">
[03:26:52.498]        ReadDP(0x0);
[03:26:52.498]  
[03:26:52.498]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.498]  
[03:26:52.498]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.502]      </block>
[03:26:52.502]      // end if-block "protType == 2"
[03:26:52.502]    </control>
[03:26:52.502]  </sequence>
[03:26:52.502]  
[03:26:52.554]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.554]  
[03:26:52.554]  <debugvars>
[03:26:52.554]    // Pre-defined
[03:26:52.554]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.554]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.554]    __dp=0x00000000
[03:26:52.554]    __ap=0x00000000
[03:26:52.554]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.554]    __FlashAddr=0x00000000
[03:26:52.554]    __FlashLen=0x00000000
[03:26:52.554]    __FlashArg=0x00000000
[03:26:52.554]    __FlashOp=0x00000000
[03:26:52.554]    __Result=0x00000000
[03:26:52.554]  </debugvars>
[03:26:52.554]  
[03:26:52.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.554]    <block atomic="false" info="">
[03:26:52.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.554]        // -> [isSWJ <= 0x00000001]
[03:26:52.554]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.554]        // -> [hasDormant <= 0x00000000]
[03:26:52.554]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.554]        // -> [protType <= 0x00000002]
[03:26:52.554]    </block>
[03:26:52.554]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.554]      // if-block "protType == 1"
[03:26:52.554]        // =>  FALSE
[03:26:52.554]      // skip if-block "protType == 1"
[03:26:52.554]    </control>
[03:26:52.558]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.558]      // if-block "protType == 2"
[03:26:52.558]        // =>  TRUE
[03:26:52.558]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.558]        // if-block "isSWJ"
[03:26:52.558]          // =>  TRUE
[03:26:52.558]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.558]          // if-block "hasDormant"
[03:26:52.558]            // =>  FALSE
[03:26:52.558]          // skip if-block "hasDormant"
[03:26:52.558]        </control>
[03:26:52.558]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.558]          // if-block "!hasDormant"
[03:26:52.558]            // =>  TRUE
[03:26:52.558]          <block atomic="false" info="">
[03:26:52.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.558]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.562]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.567]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.567]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.567]          </block>
[03:26:52.567]          // end if-block "!hasDormant"
[03:26:52.567]        </control>
[03:26:52.570]        // end if-block "isSWJ"
[03:26:52.570]      </control>
[03:26:52.570]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.570]        // if-block "!isSWJ"
[03:26:52.570]          // =>  FALSE
[03:26:52.570]        // skip if-block "!isSWJ"
[03:26:52.570]      </control>
[03:26:52.570]      <block atomic="false" info="">
[03:26:52.570]        ReadDP(0x0);
[03:26:52.570]  
[03:26:52.570]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.570]  
[03:26:52.570]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.570]      </block>
[03:26:52.570]      // end if-block "protType == 2"
[03:26:52.574]    </control>
[03:26:52.574]  </sequence>
[03:26:52.574]  
[03:26:52.627]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.627]  
[03:26:52.627]  <debugvars>
[03:26:52.627]    // Pre-defined
[03:26:52.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.627]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.627]    __dp=0x00000000
[03:26:52.627]    __ap=0x00000000
[03:26:52.627]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.627]    __FlashAddr=0x00000000
[03:26:52.627]    __FlashLen=0x00000000
[03:26:52.627]    __FlashArg=0x00000000
[03:26:52.627]    __FlashOp=0x00000000
[03:26:52.627]    __Result=0x00000000
[03:26:52.627]  </debugvars>
[03:26:52.627]  
[03:26:52.627]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.631]    <block atomic="false" info="">
[03:26:52.631]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.631]        // -> [isSWJ <= 0x00000001]
[03:26:52.631]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.631]        // -> [hasDormant <= 0x00000000]
[03:26:52.631]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.631]        // -> [protType <= 0x00000002]
[03:26:52.631]    </block>
[03:26:52.631]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.631]      // if-block "protType == 1"
[03:26:52.631]        // =>  FALSE
[03:26:52.631]      // skip if-block "protType == 1"
[03:26:52.631]    </control>
[03:26:52.631]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.631]      // if-block "protType == 2"
[03:26:52.631]        // =>  TRUE
[03:26:52.631]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.631]        // if-block "isSWJ"
[03:26:52.631]          // =>  TRUE
[03:26:52.631]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.631]          // if-block "hasDormant"
[03:26:52.631]            // =>  FALSE
[03:26:52.631]          // skip if-block "hasDormant"
[03:26:52.631]        </control>
[03:26:52.631]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.631]          // if-block "!hasDormant"
[03:26:52.631]            // =>  TRUE
[03:26:52.631]          <block atomic="false" info="">
[03:26:52.631]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.635]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.635]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.639]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.639]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.643]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.643]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.643]          </block>
[03:26:52.643]          // end if-block "!hasDormant"
[03:26:52.643]        </control>
[03:26:52.643]        // end if-block "isSWJ"
[03:26:52.643]      </control>
[03:26:52.643]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.643]        // if-block "!isSWJ"
[03:26:52.643]          // =>  FALSE
[03:26:52.647]        // skip if-block "!isSWJ"
[03:26:52.647]      </control>
[03:26:52.647]      <block atomic="false" info="">
[03:26:52.647]        ReadDP(0x0);
[03:26:52.647]  
[03:26:52.647]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.647]  
[03:26:52.647]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.647]      </block>
[03:26:52.647]      // end if-block "protType == 2"
[03:26:52.647]    </control>
[03:26:52.647]  </sequence>
[03:26:52.647]  
[03:26:52.705]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.705]  
[03:26:52.705]  <debugvars>
[03:26:52.705]    // Pre-defined
[03:26:52.705]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.705]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.705]    __dp=0x00000000
[03:26:52.705]    __ap=0x00000000
[03:26:52.705]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.705]    __FlashAddr=0x00000000
[03:26:52.705]    __FlashLen=0x00000000
[03:26:52.705]    __FlashArg=0x00000000
[03:26:52.705]    __FlashOp=0x00000000
[03:26:52.705]    __Result=0x00000000
[03:26:52.705]  </debugvars>
[03:26:52.705]  
[03:26:52.705]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.705]    <block atomic="false" info="">
[03:26:52.705]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.705]        // -> [isSWJ <= 0x00000001]
[03:26:52.705]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.708]        // -> [hasDormant <= 0x00000000]
[03:26:52.708]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.708]        // -> [protType <= 0x00000002]
[03:26:52.708]    </block>
[03:26:52.708]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.709]      // if-block "protType == 1"
[03:26:52.709]        // =>  FALSE
[03:26:52.709]      // skip if-block "protType == 1"
[03:26:52.709]    </control>
[03:26:52.709]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.709]      // if-block "protType == 2"
[03:26:52.709]        // =>  TRUE
[03:26:52.709]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.709]        // if-block "isSWJ"
[03:26:52.709]          // =>  TRUE
[03:26:52.710]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.710]          // if-block "hasDormant"
[03:26:52.710]            // =>  FALSE
[03:26:52.710]          // skip if-block "hasDormant"
[03:26:52.710]        </control>
[03:26:52.710]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.710]          // if-block "!hasDormant"
[03:26:52.710]            // =>  TRUE
[03:26:52.710]          <block atomic="false" info="">
[03:26:52.710]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.710]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.718]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.726]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.726]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.730]          </block>
[03:26:52.730]          // end if-block "!hasDormant"
[03:26:52.730]        </control>
[03:26:52.730]        // end if-block "isSWJ"
[03:26:52.730]      </control>
[03:26:52.730]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.730]        // if-block "!isSWJ"
[03:26:52.730]          // =>  FALSE
[03:26:52.730]        // skip if-block "!isSWJ"
[03:26:52.730]      </control>
[03:26:52.730]      <block atomic="false" info="">
[03:26:52.730]        ReadDP(0x0);
[03:26:52.730]  
[03:26:52.730]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.730]  
[03:26:52.730]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.730]      </block>
[03:26:52.734]      // end if-block "protType == 2"
[03:26:52.734]    </control>
[03:26:52.734]  </sequence>
[03:26:52.734]  
[03:26:52.790]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.790]  
[03:26:52.790]  <debugvars>
[03:26:52.790]    // Pre-defined
[03:26:52.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.790]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.790]    __dp=0x00000000
[03:26:52.790]    __ap=0x00000000
[03:26:52.790]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.790]    __FlashAddr=0x00000000
[03:26:52.790]    __FlashLen=0x00000000
[03:26:52.790]    __FlashArg=0x00000000
[03:26:52.790]    __FlashOp=0x00000000
[03:26:52.790]    __Result=0x00000000
[03:26:52.790]  </debugvars>
[03:26:52.790]  
[03:26:52.790]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.790]    <block atomic="false" info="">
[03:26:52.790]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.790]        // -> [isSWJ <= 0x00000001]
[03:26:52.790]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.790]        // -> [hasDormant <= 0x00000000]
[03:26:52.790]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.790]        // -> [protType <= 0x00000002]
[03:26:52.795]    </block>
[03:26:52.795]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.795]      // if-block "protType == 1"
[03:26:52.795]        // =>  FALSE
[03:26:52.795]      // skip if-block "protType == 1"
[03:26:52.795]    </control>
[03:26:52.795]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.795]      // if-block "protType == 2"
[03:26:52.795]        // =>  TRUE
[03:26:52.795]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.795]        // if-block "isSWJ"
[03:26:52.795]          // =>  TRUE
[03:26:52.795]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.795]          // if-block "hasDormant"
[03:26:52.795]            // =>  FALSE
[03:26:52.795]          // skip if-block "hasDormant"
[03:26:52.795]        </control>
[03:26:52.795]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.795]          // if-block "!hasDormant"
[03:26:52.795]            // =>  TRUE
[03:26:52.795]          <block atomic="false" info="">
[03:26:52.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.799]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.799]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.803]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.807]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.807]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.811]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.811]          </block>
[03:26:52.811]          // end if-block "!hasDormant"
[03:26:52.815]        </control>
[03:26:52.815]        // end if-block "isSWJ"
[03:26:52.815]      </control>
[03:26:52.815]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.815]        // if-block "!isSWJ"
[03:26:52.815]          // =>  FALSE
[03:26:52.815]        // skip if-block "!isSWJ"
[03:26:52.815]      </control>
[03:26:52.815]      <block atomic="false" info="">
[03:26:52.815]        ReadDP(0x0);
[03:26:52.823]  
[03:26:52.823]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.823]  
[03:26:52.823]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.823]      </block>
[03:26:52.823]      // end if-block "protType == 2"
[03:26:52.823]    </control>
[03:26:52.823]  </sequence>
[03:26:52.823]  
[03:26:52.875]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.875]  
[03:26:52.875]  <debugvars>
[03:26:52.875]    // Pre-defined
[03:26:52.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.875]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.875]    __dp=0x00000000
[03:26:52.875]    __ap=0x00000000
[03:26:52.877]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.877]    __FlashAddr=0x00000000
[03:26:52.877]    __FlashLen=0x00000000
[03:26:52.877]    __FlashArg=0x00000000
[03:26:52.877]    __FlashOp=0x00000000
[03:26:52.877]    __Result=0x00000000
[03:26:52.877]  </debugvars>
[03:26:52.877]  
[03:26:52.877]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.877]    <block atomic="false" info="">
[03:26:52.877]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.877]        // -> [isSWJ <= 0x00000001]
[03:26:52.877]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.877]        // -> [hasDormant <= 0x00000000]
[03:26:52.877]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.877]        // -> [protType <= 0x00000002]
[03:26:52.877]    </block>
[03:26:52.877]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.877]      // if-block "protType == 1"
[03:26:52.877]        // =>  FALSE
[03:26:52.877]      // skip if-block "protType == 1"
[03:26:52.877]    </control>
[03:26:52.877]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.877]      // if-block "protType == 2"
[03:26:52.877]        // =>  TRUE
[03:26:52.877]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.877]        // if-block "isSWJ"
[03:26:52.877]          // =>  TRUE
[03:26:52.877]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.880]          // if-block "hasDormant"
[03:26:52.880]            // =>  FALSE
[03:26:52.880]          // skip if-block "hasDormant"
[03:26:52.880]        </control>
[03:26:52.880]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.880]          // if-block "!hasDormant"
[03:26:52.880]            // =>  TRUE
[03:26:52.880]          <block atomic="false" info="">
[03:26:52.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.887]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.891]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.892]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.898]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.898]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.900]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.900]          </block>
[03:26:52.900]          // end if-block "!hasDormant"
[03:26:52.900]        </control>
[03:26:52.900]        // end if-block "isSWJ"
[03:26:52.900]      </control>
[03:26:52.900]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.900]        // if-block "!isSWJ"
[03:26:52.900]          // =>  FALSE
[03:26:52.900]        // skip if-block "!isSWJ"
[03:26:52.900]      </control>
[03:26:52.900]      <block atomic="false" info="">
[03:26:52.900]        ReadDP(0x0);
[03:26:52.904]  
[03:26:52.904]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.904]  
[03:26:52.904]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.905]      </block>
[03:26:52.905]      // end if-block "protType == 2"
[03:26:52.905]    </control>
[03:26:52.905]  </sequence>
[03:26:52.905]  
[03:26:52.955]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:52.955]  
[03:26:52.955]  <debugvars>
[03:26:52.959]    // Pre-defined
[03:26:52.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:52.959]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:52.959]    __dp=0x00000000
[03:26:52.959]    __ap=0x00000000
[03:26:52.959]    __traceout=0x00000000      (Trace Disabled)
[03:26:52.959]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:52.959]    __FlashAddr=0x00000000
[03:26:52.961]    __FlashLen=0x00000000
[03:26:52.961]    __FlashArg=0x00000000
[03:26:52.961]    __FlashOp=0x00000000
[03:26:52.961]    __Result=0x00000000
[03:26:52.961]  </debugvars>
[03:26:52.961]  
[03:26:52.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:52.961]    <block atomic="false" info="">
[03:26:52.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:52.961]        // -> [isSWJ <= 0x00000001]
[03:26:52.961]      __var hasDormant = __protocol & 0x00020000;
[03:26:52.961]        // -> [hasDormant <= 0x00000000]
[03:26:52.962]      __var protType   = __protocol & 0x0000FFFF;
[03:26:52.962]        // -> [protType <= 0x00000002]
[03:26:52.962]    </block>
[03:26:52.962]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:52.963]      // if-block "protType == 1"
[03:26:52.963]        // =>  FALSE
[03:26:52.963]      // skip if-block "protType == 1"
[03:26:52.963]    </control>
[03:26:52.963]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:52.963]      // if-block "protType == 2"
[03:26:52.963]        // =>  TRUE
[03:26:52.963]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:52.964]        // if-block "isSWJ"
[03:26:52.964]          // =>  TRUE
[03:26:52.964]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:52.964]          // if-block "hasDormant"
[03:26:52.964]            // =>  FALSE
[03:26:52.964]          // skip if-block "hasDormant"
[03:26:52.964]        </control>
[03:26:52.964]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:52.964]          // if-block "!hasDormant"
[03:26:52.964]            // =>  TRUE
[03:26:52.964]          <block atomic="false" info="">
[03:26:52.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:52.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.966]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:52.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:52.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:52.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.969]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:52.971]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:52.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:52.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:52.973]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:52.973]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:52.973]          </block>
[03:26:52.973]          // end if-block "!hasDormant"
[03:26:52.973]        </control>
[03:26:52.973]        // end if-block "isSWJ"
[03:26:52.973]      </control>
[03:26:52.973]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:52.973]        // if-block "!isSWJ"
[03:26:52.973]          // =>  FALSE
[03:26:52.973]        // skip if-block "!isSWJ"
[03:26:52.976]      </control>
[03:26:52.976]      <block atomic="false" info="">
[03:26:52.976]        ReadDP(0x0);
[03:26:52.977]  
[03:26:52.977]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:52.977]  
[03:26:52.977]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:52.977]      </block>
[03:26:52.977]      // end if-block "protType == 2"
[03:26:52.977]    </control>
[03:26:52.978]  </sequence>
[03:26:52.978]  
[03:26:53.032]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:53.032]  
[03:26:53.032]  <debugvars>
[03:26:53.032]    // Pre-defined
[03:26:53.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:53.032]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:53.032]    __dp=0x00000000
[03:26:53.032]    __ap=0x00000000
[03:26:53.032]    __traceout=0x00000000      (Trace Disabled)
[03:26:53.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:53.032]    __FlashAddr=0x00000000
[03:26:53.032]    __FlashLen=0x00000000
[03:26:53.032]    __FlashArg=0x00000000
[03:26:53.032]    __FlashOp=0x00000000
[03:26:53.032]    __Result=0x00000000
[03:26:53.032]  </debugvars>
[03:26:53.032]  
[03:26:53.032]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:53.032]    <block atomic="false" info="">
[03:26:53.032]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:53.032]        // -> [isSWJ <= 0x00000001]
[03:26:53.032]      __var hasDormant = __protocol & 0x00020000;
[03:26:53.032]        // -> [hasDormant <= 0x00000000]
[03:26:53.032]      __var protType   = __protocol & 0x0000FFFF;
[03:26:53.032]        // -> [protType <= 0x00000002]
[03:26:53.032]    </block>
[03:26:53.032]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:53.036]      // if-block "protType == 1"
[03:26:53.036]        // =>  FALSE
[03:26:53.036]      // skip if-block "protType == 1"
[03:26:53.036]    </control>
[03:26:53.036]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:53.036]      // if-block "protType == 2"
[03:26:53.036]        // =>  TRUE
[03:26:53.036]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:53.036]        // if-block "isSWJ"
[03:26:53.036]          // =>  TRUE
[03:26:53.036]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:53.036]          // if-block "hasDormant"
[03:26:53.036]            // =>  FALSE
[03:26:53.036]          // skip if-block "hasDormant"
[03:26:53.036]        </control>
[03:26:53.036]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:53.036]          // if-block "!hasDormant"
[03:26:53.036]            // =>  TRUE
[03:26:53.036]          <block atomic="false" info="">
[03:26:53.036]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:53.036]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.036]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:53.040]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:53.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:53.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.043]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:53.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:53.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:53.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.045]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:53.048]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:53.048]          </block>
[03:26:53.048]          // end if-block "!hasDormant"
[03:26:53.048]        </control>
[03:26:53.048]        // end if-block "isSWJ"
[03:26:53.048]      </control>
[03:26:53.048]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:53.048]        // if-block "!isSWJ"
[03:26:53.048]          // =>  FALSE
[03:26:53.048]        // skip if-block "!isSWJ"
[03:26:53.048]      </control>
[03:26:53.048]      <block atomic="false" info="">
[03:26:53.048]        ReadDP(0x0);
[03:26:53.052]  
[03:26:53.052]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:53.052]  
[03:26:53.052]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:53.052]      </block>
[03:26:53.052]      // end if-block "protType == 2"
[03:26:53.052]    </control>
[03:26:53.052]  </sequence>
[03:26:53.052]  
[03:26:53.108]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:53.108]  
[03:26:53.108]  <debugvars>
[03:26:53.108]    // Pre-defined
[03:26:53.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:53.108]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:53.108]    __dp=0x00000000
[03:26:53.108]    __ap=0x00000000
[03:26:53.108]    __traceout=0x00000000      (Trace Disabled)
[03:26:53.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:53.108]    __FlashAddr=0x00000000
[03:26:53.108]    __FlashLen=0x00000000
[03:26:53.108]    __FlashArg=0x00000000
[03:26:53.108]    __FlashOp=0x00000000
[03:26:53.108]    __Result=0x00000000
[03:26:53.108]  </debugvars>
[03:26:53.108]  
[03:26:53.108]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:53.108]    <block atomic="false" info="">
[03:26:53.108]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:53.108]        // -> [isSWJ <= 0x00000001]
[03:26:53.108]      __var hasDormant = __protocol & 0x00020000;
[03:26:53.108]        // -> [hasDormant <= 0x00000000]
[03:26:53.108]      __var protType   = __protocol & 0x0000FFFF;
[03:26:53.108]        // -> [protType <= 0x00000002]
[03:26:53.108]    </block>
[03:26:53.108]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:53.108]      // if-block "protType == 1"
[03:26:53.108]        // =>  FALSE
[03:26:53.108]      // skip if-block "protType == 1"
[03:26:53.112]    </control>
[03:26:53.112]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:53.112]      // if-block "protType == 2"
[03:26:53.112]        // =>  TRUE
[03:26:53.112]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:53.112]        // if-block "isSWJ"
[03:26:53.112]          // =>  TRUE
[03:26:53.112]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:53.112]          // if-block "hasDormant"
[03:26:53.112]            // =>  FALSE
[03:26:53.112]          // skip if-block "hasDormant"
[03:26:53.112]        </control>
[03:26:53.112]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:53.112]          // if-block "!hasDormant"
[03:26:53.112]            // =>  TRUE
[03:26:53.112]          <block atomic="false" info="">
[03:26:53.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:53.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.116]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:53.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:53.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:53.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.120]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:53.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:53.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:53.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.125]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:53.125]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:53.125]          </block>
[03:26:53.125]          // end if-block "!hasDormant"
[03:26:53.125]        </control>
[03:26:53.125]        // end if-block "isSWJ"
[03:26:53.125]      </control>
[03:26:53.125]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:53.125]        // if-block "!isSWJ"
[03:26:53.125]          // =>  FALSE
[03:26:53.125]        // skip if-block "!isSWJ"
[03:26:53.129]      </control>
[03:26:53.129]      <block atomic="false" info="">
[03:26:53.129]        ReadDP(0x0);
[03:26:53.129]  
[03:26:53.129]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:53.129]  
[03:26:53.129]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:53.129]      </block>
[03:26:53.129]      // end if-block "protType == 2"
[03:26:53.129]    </control>
[03:26:53.129]  </sequence>
[03:26:53.129]  
[03:26:53.182]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:53.182]  
[03:26:53.182]  <debugvars>
[03:26:53.183]    // Pre-defined
[03:26:53.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:53.183]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:53.183]    __dp=0x00000000
[03:26:53.183]    __ap=0x00000000
[03:26:53.183]    __traceout=0x00000000      (Trace Disabled)
[03:26:53.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:53.183]    __FlashAddr=0x00000000
[03:26:53.183]    __FlashLen=0x00000000
[03:26:53.183]    __FlashArg=0x00000000
[03:26:53.183]    __FlashOp=0x00000000
[03:26:53.184]    __Result=0x00000000
[03:26:53.184]  </debugvars>
[03:26:53.184]  
[03:26:53.184]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:53.184]    <block atomic="false" info="">
[03:26:53.184]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:53.184]        // -> [isSWJ <= 0x00000001]
[03:26:53.184]      __var hasDormant = __protocol & 0x00020000;
[03:26:53.184]        // -> [hasDormant <= 0x00000000]
[03:26:53.184]      __var protType   = __protocol & 0x0000FFFF;
[03:26:53.184]        // -> [protType <= 0x00000002]
[03:26:53.184]    </block>
[03:26:53.184]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:53.184]      // if-block "protType == 1"
[03:26:53.184]        // =>  FALSE
[03:26:53.184]      // skip if-block "protType == 1"
[03:26:53.184]    </control>
[03:26:53.184]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:53.184]      // if-block "protType == 2"
[03:26:53.184]        // =>  TRUE
[03:26:53.184]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:53.184]        // if-block "isSWJ"
[03:26:53.184]          // =>  TRUE
[03:26:53.184]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:53.184]          // if-block "hasDormant"
[03:26:53.184]            // =>  FALSE
[03:26:53.184]          // skip if-block "hasDormant"
[03:26:53.184]        </control>
[03:26:53.186]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:53.186]          // if-block "!hasDormant"
[03:26:53.186]            // =>  TRUE
[03:26:53.186]          <block atomic="false" info="">
[03:26:53.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:53.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.186]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:53.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:53.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:53.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.198]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:53.202]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:53.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:53.202]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.202]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:53.206]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:53.207]          </block>
[03:26:53.207]          // end if-block "!hasDormant"
[03:26:53.207]        </control>
[03:26:53.207]        // end if-block "isSWJ"
[03:26:53.207]      </control>
[03:26:53.208]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:53.208]        // if-block "!isSWJ"
[03:26:53.208]          // =>  FALSE
[03:26:53.208]        // skip if-block "!isSWJ"
[03:26:53.208]      </control>
[03:26:53.208]      <block atomic="false" info="">
[03:26:53.208]        ReadDP(0x0);
[03:26:53.210]  
[03:26:53.210]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:53.210]  
[03:26:53.210]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:53.210]      </block>
[03:26:53.210]      // end if-block "protType == 2"
[03:26:53.210]    </control>
[03:26:53.210]  </sequence>
[03:26:53.210]  
[03:26:53.267]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:53.267]  
[03:26:53.267]  <debugvars>
[03:26:53.267]    // Pre-defined
[03:26:53.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:53.267]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:53.267]    __dp=0x00000000
[03:26:53.267]    __ap=0x00000000
[03:26:53.267]    __traceout=0x00000000      (Trace Disabled)
[03:26:53.267]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:53.267]    __FlashAddr=0x00000000
[03:26:53.267]    __FlashLen=0x00000000
[03:26:53.269]    __FlashArg=0x00000000
[03:26:53.269]    __FlashOp=0x00000000
[03:26:53.269]    __Result=0x00000000
[03:26:53.269]  </debugvars>
[03:26:53.269]  
[03:26:53.269]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:53.269]    <block atomic="false" info="">
[03:26:53.269]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:53.269]        // -> [isSWJ <= 0x00000001]
[03:26:53.269]      __var hasDormant = __protocol & 0x00020000;
[03:26:53.269]        // -> [hasDormant <= 0x00000000]
[03:26:53.269]      __var protType   = __protocol & 0x0000FFFF;
[03:26:53.269]        // -> [protType <= 0x00000002]
[03:26:53.269]    </block>
[03:26:53.269]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:53.269]      // if-block "protType == 1"
[03:26:53.269]        // =>  FALSE
[03:26:53.269]      // skip if-block "protType == 1"
[03:26:53.269]    </control>
[03:26:53.269]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:53.271]      // if-block "protType == 2"
[03:26:53.271]        // =>  TRUE
[03:26:53.271]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:53.271]        // if-block "isSWJ"
[03:26:53.271]          // =>  TRUE
[03:26:53.271]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:53.271]          // if-block "hasDormant"
[03:26:53.271]            // =>  FALSE
[03:26:53.271]          // skip if-block "hasDormant"
[03:26:53.271]        </control>
[03:26:53.271]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:53.271]          // if-block "!hasDormant"
[03:26:53.271]            // =>  TRUE
[03:26:53.271]          <block atomic="false" info="">
[03:26:53.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:53.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.271]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:53.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:53.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:53.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.276]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:53.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:53.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:53.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:53.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:53.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:53.279]          </block>
[03:26:53.279]          // end if-block "!hasDormant"
[03:26:53.279]        </control>
[03:26:53.279]        // end if-block "isSWJ"
[03:26:53.279]      </control>
[03:26:53.279]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:53.279]        // if-block "!isSWJ"
[03:26:53.279]          // =>  FALSE
[03:26:53.279]        // skip if-block "!isSWJ"
[03:26:53.279]      </control>
[03:26:53.279]      <block atomic="false" info="">
[03:26:53.279]        ReadDP(0x0);
[03:26:53.283]  
[03:26:53.283]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:26:53.283]  
[03:26:53.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:57.613]      </block>
[03:26:57.613]      // end if-block "protType == 2"
[03:26:57.617]    </control>
[03:26:57.617]  </sequence>
[03:26:57.617]  
[03:26:57.675]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[03:26:57.675]  
[03:26:57.675]  <debugvars>
[03:26:57.675]    // Pre-defined
[03:26:57.675]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:57.675]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:26:57.675]    __dp=0x00000000
[03:26:57.675]    __ap=0x00000000
[03:26:57.675]    __traceout=0x00000000      (Trace Disabled)
[03:26:57.676]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:57.676]    __FlashAddr=0x00000000
[03:26:57.676]    __FlashLen=0x00000000
[03:26:57.676]    __FlashArg=0x00000000
[03:26:57.676]    __FlashOp=0x00000000
[03:26:57.676]    __Result=0x00000000
[03:26:57.676]  </debugvars>
[03:26:57.676]  
[03:26:57.676]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:57.676]    <block atomic="false" info="">
[03:26:57.677]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:57.677]        // -> [isSWJ <= 0x00000001]
[03:26:57.677]      __var hasDormant = __protocol & 0x00020000;
[03:26:57.677]        // -> [hasDormant <= 0x00000000]
[03:26:57.677]      __var protType   = __protocol & 0x0000FFFF;
[03:26:57.677]        // -> [protType <= 0x00000002]
[03:26:57.677]    </block>
[03:26:57.677]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:57.677]      // if-block "protType == 1"
[03:26:57.677]        // =>  FALSE
[03:26:57.677]      // skip if-block "protType == 1"
[03:26:57.679]    </control>
[03:26:57.679]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:57.679]      // if-block "protType == 2"
[03:26:57.679]        // =>  TRUE
[03:26:57.679]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:57.679]        // if-block "isSWJ"
[03:26:57.679]          // =>  TRUE
[03:26:57.679]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:57.679]          // if-block "hasDormant"
[03:26:57.679]            // =>  FALSE
[03:26:57.681]          // skip if-block "hasDormant"
[03:26:57.681]        </control>
[03:26:57.681]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:57.681]          // if-block "!hasDormant"
[03:26:57.681]            // =>  TRUE
[03:26:57.681]          <block atomic="false" info="">
[03:26:57.681]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
