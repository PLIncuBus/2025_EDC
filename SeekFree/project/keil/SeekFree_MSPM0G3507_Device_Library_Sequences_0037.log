/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : F:\Code\2025_EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0037.log
 *  Created     : 20:04:08 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : F:/keil/package/TexasInstruments/MSPM0G1X0X_G3X0X_DFP/1.3.1/TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:04:08.361]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:04:08.361]  
[20:04:08.363]  <debugvars>
[20:04:08.365]    // Pre-defined
[20:04:08.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:08.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:08.369]    __dp=0x00000000
[20:04:08.369]    __ap=0x00000000
[20:04:08.369]    __traceout=0x00000000      (Trace Disabled)
[20:04:08.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:08.369]    __FlashAddr=0x00000000
[20:04:08.369]    __FlashLen=0x00000000
[20:04:08.371]    __FlashArg=0x00000000
[20:04:08.371]    __FlashOp=0x00000000
[20:04:08.371]    __Result=0x00000000
[20:04:08.371]  </debugvars>
[20:04:08.371]  
[20:04:08.371]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:04:08.371]    <block atomic="false" info="">
[20:04:08.371]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:04:08.371]        // -> [isSWJ <= 0x00000001]
[20:04:08.371]      __var hasDormant = __protocol & 0x00020000;
[20:04:08.371]        // -> [hasDormant <= 0x00000000]
[20:04:08.371]      __var protType   = __protocol & 0x0000FFFF;
[20:04:08.371]        // -> [protType <= 0x00000002]
[20:04:08.371]    </block>
[20:04:08.371]    <control if="protType == 1" while="" timeout="0" info="">
[20:04:08.371]      // if-block "protType == 1"
[20:04:08.371]        // =>  FALSE
[20:04:08.371]      // skip if-block "protType == 1"
[20:04:08.371]    </control>
[20:04:08.372]    <control if="protType == 2" while="" timeout="0" info="">
[20:04:08.372]      // if-block "protType == 2"
[20:04:08.372]        // =>  TRUE
[20:04:08.372]      <control if="isSWJ" while="" timeout="0" info="">
[20:04:08.372]        // if-block "isSWJ"
[20:04:08.372]          // =>  TRUE
[20:04:08.372]        <control if="hasDormant" while="" timeout="0" info="">
[20:04:08.372]          // if-block "hasDormant"
[20:04:08.372]            // =>  FALSE
[20:04:08.372]          // skip if-block "hasDormant"
[20:04:08.372]        </control>
[20:04:08.372]        <control if="!hasDormant" while="" timeout="0" info="">
[20:04:08.372]          // if-block "!hasDormant"
[20:04:08.372]            // =>  TRUE
[20:04:08.373]          <block atomic="false" info="">
[20:04:08.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:04:08.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:08.374]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:04:08.376]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:04:08.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:04:08.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:08.377]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:04:08.378]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:04:08.378]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:04:08.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:08.380]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:04:08.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:04:08.381]          </block>
[20:04:08.381]          // end if-block "!hasDormant"
[20:04:08.381]        </control>
[20:04:08.381]        // end if-block "isSWJ"
[20:04:08.381]      </control>
[20:04:08.381]      <control if="!isSWJ" while="" timeout="0" info="">
[20:04:08.381]        // if-block "!isSWJ"
[20:04:08.381]          // =>  FALSE
[20:04:08.381]        // skip if-block "!isSWJ"
[20:04:08.381]      </control>
[20:04:08.381]      <block atomic="false" info="">
[20:04:08.381]        ReadDP(0x0);
[20:04:08.383]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:04:08.383]      </block>
[20:04:08.383]      // end if-block "protType == 2"
[20:04:08.383]    </control>
[20:04:08.383]  </sequence>
[20:04:08.383]  
[20:04:08.386]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:04:08.386]  
[20:04:08.386]  <debugvars>
[20:04:08.386]    // Pre-defined
[20:04:08.386]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:08.386]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:08.386]    __dp=0x00000000
[20:04:08.386]    __ap=0x00000000
[20:04:08.386]    __traceout=0x00000000      (Trace Disabled)
[20:04:08.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:08.386]    __FlashAddr=0x00000000
[20:04:08.386]    __FlashLen=0x00000000
[20:04:08.386]    __FlashArg=0x00000000
[20:04:08.386]    __FlashOp=0x00000000
[20:04:08.386]    __Result=0x00000000
[20:04:08.386]  </debugvars>
[20:04:08.386]  
[20:04:08.386]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:04:08.386]    <block atomic="false" info="">
[20:04:08.386]      __var SW_DP_ABORT       = 0x0;
[20:04:08.386]        // -> [SW_DP_ABORT <= 0x00000000]
[20:04:08.387]      __var DP_CTRL_STAT      = 0x4;
[20:04:08.387]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:04:08.387]      __var DP_SELECT         = 0x8;
[20:04:08.387]        // -> [DP_SELECT <= 0x00000008]
[20:04:08.387]      __var powered_down      = 0;
[20:04:08.387]        // -> [powered_down <= 0x00000000]
[20:04:08.387]      WriteDP(DP_SELECT, 0x00000000);
[20:04:08.388]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:04:08.388]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:04:08.390]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:04:08.390]        // -> [powered_down <= 0x00000001]
[20:04:08.390]    </block>
[20:04:08.390]    <control if="powered_down" while="" timeout="0" info="">
[20:04:08.390]      // if-block "powered_down"
[20:04:08.390]        // =>  TRUE
[20:04:08.390]      <block atomic="false" info="">
[20:04:08.390]        Message(0, "Debug/System power-up request sent");
[20:04:08.394]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:04:08.395]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:04:08.395]      </block>
[20:04:08.395]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:04:08.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:04:08.397]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:04:08.397]        // while-condition  =>  FALSE
[20:04:08.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:04:08.398]      </control>
[20:04:08.398]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:04:08.398]        // if-block "(__protocol & 0xFFFF) == 1"
[20:04:08.398]          // =>  FALSE
[20:04:08.398]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:04:08.398]      </control>
[20:04:08.398]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:04:08.398]        // if-block "(__protocol & 0xFFFF) == 2"
[20:04:08.398]          // =>  TRUE
[20:04:08.398]        <block atomic="false" info="">
[20:04:08.398]          Message(0, "executing SWD power up");
[20:04:08.399]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:04:08.401]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:04:08.401]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:04:08.403]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:04:08.403]        </block>
[20:04:08.403]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:04:08.403]      </control>
[20:04:08.403]      // end if-block "powered_down"
[20:04:08.403]    </control>
[20:04:08.403]    <block atomic="false" info="">
[20:04:08.403]      __var DEBUG_PORT_VAL    = 0;
[20:04:08.403]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:04:08.404]      __var ACCESS_POINT_VAL  = 0;
[20:04:08.404]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:04:08.404]      __ap = 1; 
[20:04:08.404]        // -> [__ap <= 0x00000001]
[20:04:08.404]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:04:08.407]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:04:08.408]      __ap = 4;
[20:04:08.408]        // -> [__ap <= 0x00000004]
[20:04:08.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:08.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:04:08.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:04:08.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:08.412]    </block>
[20:04:08.412]    <block atomic="false" info="">
[20:04:08.412]      __var nReset = 0x80;
[20:04:08.412]        // -> [nReset <= 0x00000080]
[20:04:08.413]      __var canReadPins = 0;
[20:04:08.413]        // -> [canReadPins <= 0x00000000]
[20:04:08.413]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:04:08.414]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:04:08.414]        // -> [canReadPins <= 0x00000001]
[20:04:08.414]    </block>
[20:04:08.414]    <control if="" while="1" timeout="200" info="">
[20:04:08.414]      // while "1"  (timeout="200")
[20:04:08.414]      // while-condition  =>  TRUE
[20:04:08.414]      // while "1"  (timeout="200")
[20:04:08.414]      // while-condition  =>  TRUE
[20:04:08.414]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.415]      // while-condition  =>  TRUE
[20:04:08.415]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.416]      // while-condition  =>  TRUE
[20:04:08.416]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.417]      // while-condition  =>  TRUE
[20:04:08.417]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.418]      // while-condition  =>  TRUE
[20:04:08.418]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.419]      // while-condition  =>  TRUE
[20:04:08.419]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.421]      // while-condition  =>  TRUE
[20:04:08.421]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.422]      // while-condition  =>  TRUE
[20:04:08.422]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.423]      // while "1"  (timeout="200")
[20:04:08.423]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.424]      // while "1"  (timeout="200")
[20:04:08.424]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.425]      // while-condition  =>  TRUE
[20:04:08.425]      // while "1"  (timeout="200")
[20:04:08.426]      // while-condition  =>  TRUE
[20:04:08.426]      // while "1"  (timeout="200")
[20:04:08.426]      // while  =>  TIMEOUT
[20:04:08.426]      // end while "1"
[20:04:08.426]    </control>
[20:04:08.426]    <control if="canReadPins" while="" timeout="0" info="">
[20:04:08.426]      // if-block "canReadPins"
[20:04:08.426]        // =>  TRUE
[20:04:08.426]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:04:08.426]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:04:08.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:04:08.428]        // while-condition  =>  FALSE
[20:04:08.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:04:08.428]      </control>
[20:04:08.428]      // end if-block "canReadPins"
[20:04:08.428]    </control>
[20:04:08.428]    <control if="!canReadPins" while="" timeout="0" info="">
[20:04:08.428]      // if-block "!canReadPins"
[20:04:08.428]        // =>  FALSE
[20:04:08.428]      // skip if-block "!canReadPins"
[20:04:08.428]    </control>
[20:04:08.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:04:08.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:08.428]        // =>  TRUE
[20:04:08.428]      <block atomic="false" info="">
[20:04:08.428]        WriteAP(0x00, 0x190008);
[20:04:08.429]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:08.431]        WriteAP(0xF0, 0x01);
[20:04:08.434]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:08.434]      </block>
[20:04:08.434]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:08.434]    </control>
[20:04:08.434]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:04:08.434]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:08.434]        // =>  FALSE
[20:04:08.434]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:08.434]    </control>
[20:04:08.434]    <block atomic="false" info="">
[20:04:08.434]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:08.438]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:04:08.438]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:04:08.438]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:08.440]      __ap = 0; //lets make sure we reset the access point selection
[20:04:08.440]        // -> [__ap <= 0x00000000]
[20:04:08.440]    </block>
[20:04:08.440]  </sequence>
[20:04:08.440]  
[20:04:08.457]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:04:08.457]  
[20:04:08.457]  <debugvars>
[20:04:08.457]    // Pre-defined
[20:04:08.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:08.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:08.457]    __dp=0x00000000
[20:04:08.457]    __ap=0x00000000
[20:04:08.457]    __traceout=0x00000000      (Trace Disabled)
[20:04:08.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:08.457]    __FlashAddr=0x00000000
[20:04:08.457]    __FlashLen=0x00000000
[20:04:08.457]    __FlashArg=0x00000000
[20:04:08.457]    __FlashOp=0x00000000
[20:04:08.457]    __Result=0x00000000
[20:04:08.457]  </debugvars>
[20:04:08.457]  
[20:04:08.457]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:04:08.457]    <block atomic="false" info="">
[20:04:08.457]      __var deviceID = 0;
[20:04:08.457]        // -> [deviceID <= 0x00000000]
[20:04:08.457]      __var version = 0;
[20:04:08.458]        // -> [version <= 0x00000000]
[20:04:08.458]      __var partNum = 0;
[20:04:08.458]        // -> [partNum <= 0x00000000]
[20:04:08.458]      __var manuf = 0;
[20:04:08.458]        // -> [manuf <= 0x00000000]
[20:04:08.458]      __var isMSPM0G1X0X_G3X0X = 0;
[20:04:08.458]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:04:08.458]      __var isProduction = 0;
[20:04:08.458]        // -> [isProduction <= 0x00000000]
[20:04:08.458]      __var continueId = 0;
[20:04:08.458]        // -> [continueId <= 0x00000000]
[20:04:08.458]      deviceID =   Read32(0x41C40004);
[20:04:08.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:04:08.463]        // -> [deviceID <= 0x2BB8802F]
[20:04:08.463]      version = deviceID >> 28;
[20:04:08.463]        // -> [version <= 0x00000002]
[20:04:08.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:04:08.463]        // -> [partNum <= 0x0000BB88]
[20:04:08.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:04:08.463]        // -> [manuf <= 0x00000017]
[20:04:08.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:04:08.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:04:08.463]      isProduction = (version > 0);
[20:04:08.463]        // -> [isProduction <= 0x00000001]
[20:04:08.463]    </block>
[20:04:08.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:04:08.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:04:08.463]        // =>  FALSE
[20:04:08.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:04:08.464]    </control>
[20:04:08.464]    <control if="continueId == 4" while="" timeout="0" info="">
[20:04:08.464]      // if-block "continueId == 4"
[20:04:08.464]        // =>  FALSE
[20:04:08.464]      // skip if-block "continueId == 4"
[20:04:08.464]    </control>
[20:04:08.464]    <control if="!isProduction" while="" timeout="0" info="">
[20:04:08.464]      // if-block "!isProduction"
[20:04:08.464]        // =>  FALSE
[20:04:08.464]      // skip if-block "!isProduction"
[20:04:08.464]    </control>
[20:04:08.464]  </sequence>
[20:04:08.464]  
[20:04:15.102]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:04:15.102]  
[20:04:15.102]  <debugvars>
[20:04:15.102]    // Pre-defined
[20:04:15.102]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:15.102]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:04:15.102]    __dp=0x00000000
[20:04:15.102]    __ap=0x00000000
[20:04:15.102]    __traceout=0x00000000      (Trace Disabled)
[20:04:15.102]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:15.102]    __FlashAddr=0x00000000
[20:04:15.102]    __FlashLen=0x00000000
[20:04:15.102]    __FlashArg=0x00000000
[20:04:15.102]    __FlashOp=0x00000000
[20:04:15.103]    __Result=0x00000000
[20:04:15.103]  </debugvars>
[20:04:15.103]  
[20:04:15.103]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:04:15.103]    <block atomic="false" info="">
[20:04:15.103]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:04:15.103]        // -> [isSWJ <= 0x00000001]
[20:04:15.103]      __var hasDormant = __protocol & 0x00020000;
[20:04:15.103]        // -> [hasDormant <= 0x00000000]
[20:04:15.103]      __var protType   = __protocol & 0x0000FFFF;
[20:04:15.103]        // -> [protType <= 0x00000002]
[20:04:15.103]    </block>
[20:04:15.103]    <control if="protType == 1" while="" timeout="0" info="">
[20:04:15.103]      // if-block "protType == 1"
[20:04:15.103]        // =>  FALSE
[20:04:15.103]      // skip if-block "protType == 1"
[20:04:15.103]    </control>
[20:04:15.103]    <control if="protType == 2" while="" timeout="0" info="">
[20:04:15.103]      // if-block "protType == 2"
[20:04:15.103]        // =>  TRUE
[20:04:15.103]      <control if="isSWJ" while="" timeout="0" info="">
[20:04:15.103]        // if-block "isSWJ"
[20:04:15.103]          // =>  TRUE
[20:04:15.103]        <control if="hasDormant" while="" timeout="0" info="">
[20:04:15.103]          // if-block "hasDormant"
[20:04:15.103]            // =>  FALSE
[20:04:15.104]          // skip if-block "hasDormant"
[20:04:15.104]        </control>
[20:04:15.104]        <control if="!hasDormant" while="" timeout="0" info="">
[20:04:15.104]          // if-block "!hasDormant"
[20:04:15.104]            // =>  TRUE
[20:04:15.104]          <block atomic="false" info="">
[20:04:15.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:04:15.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:15.105]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:04:15.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:04:15.107]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:04:15.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:15.108]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:04:15.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:04:15.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:04:15.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:15.111]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:04:15.114]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:04:15.114]          </block>
[20:04:15.114]          // end if-block "!hasDormant"
[20:04:15.114]        </control>
[20:04:15.114]        // end if-block "isSWJ"
[20:04:15.114]      </control>
[20:04:15.114]      <control if="!isSWJ" while="" timeout="0" info="">
[20:04:15.114]        // if-block "!isSWJ"
[20:04:15.114]          // =>  FALSE
[20:04:15.114]        // skip if-block "!isSWJ"
[20:04:15.114]      </control>
[20:04:15.114]      <block atomic="false" info="">
[20:04:15.114]        ReadDP(0x0);
[20:04:15.116]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:04:15.116]      </block>
[20:04:15.116]      // end if-block "protType == 2"
[20:04:15.116]    </control>
[20:04:15.116]  </sequence>
[20:04:15.116]  
[20:04:15.119]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:04:15.119]  
[20:04:15.119]  <debugvars>
[20:04:15.119]    // Pre-defined
[20:04:15.119]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:15.119]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:04:15.119]    __dp=0x00000000
[20:04:15.119]    __ap=0x00000000
[20:04:15.119]    __traceout=0x00000000      (Trace Disabled)
[20:04:15.119]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:15.119]    __FlashAddr=0x00000000
[20:04:15.120]    __FlashLen=0x00000000
[20:04:15.120]    __FlashArg=0x00000000
[20:04:15.120]    __FlashOp=0x00000000
[20:04:15.120]    __Result=0x00000000
[20:04:15.120]  </debugvars>
[20:04:15.120]  
[20:04:15.120]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:04:15.120]    <block atomic="false" info="">
[20:04:15.120]      __var SW_DP_ABORT       = 0x0;
[20:04:15.120]        // -> [SW_DP_ABORT <= 0x00000000]
[20:04:15.120]      __var DP_CTRL_STAT      = 0x4;
[20:04:15.120]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:04:15.120]      __var DP_SELECT         = 0x8;
[20:04:15.120]        // -> [DP_SELECT <= 0x00000008]
[20:04:15.120]      __var powered_down      = 0;
[20:04:15.120]        // -> [powered_down <= 0x00000000]
[20:04:15.120]      WriteDP(DP_SELECT, 0x00000000);
[20:04:15.122]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:04:15.122]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:04:15.124]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:04:15.124]        // -> [powered_down <= 0x00000001]
[20:04:15.124]    </block>
[20:04:15.124]    <control if="powered_down" while="" timeout="0" info="">
[20:04:15.124]      // if-block "powered_down"
[20:04:15.124]        // =>  TRUE
[20:04:15.125]      <block atomic="false" info="">
[20:04:15.125]        Message(0, "Debug/System power-up request sent");
[20:04:15.126]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:04:15.128]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:04:15.128]      </block>
[20:04:15.128]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:04:15.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:04:15.130]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:04:15.130]        // while-condition  =>  FALSE
[20:04:15.130]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:04:15.130]      </control>
[20:04:15.130]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:04:15.130]        // if-block "(__protocol & 0xFFFF) == 1"
[20:04:15.130]          // =>  FALSE
[20:04:15.130]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:04:15.130]      </control>
[20:04:15.130]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:04:15.130]        // if-block "(__protocol & 0xFFFF) == 2"
[20:04:15.130]          // =>  TRUE
[20:04:15.130]        <block atomic="false" info="">
[20:04:15.130]          Message(0, "executing SWD power up");
[20:04:15.132]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:04:15.133]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:04:15.133]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:04:15.135]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:04:15.135]        </block>
[20:04:15.135]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:04:15.135]      </control>
[20:04:15.135]      // end if-block "powered_down"
[20:04:15.135]    </control>
[20:04:15.135]    <block atomic="false" info="">
[20:04:15.135]      __var DEBUG_PORT_VAL    = 0;
[20:04:15.135]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:04:15.135]      __var ACCESS_POINT_VAL  = 0;
[20:04:15.135]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:04:15.135]      __ap = 1; 
[20:04:15.135]        // -> [__ap <= 0x00000001]
[20:04:15.135]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:04:15.138]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:04:15.138]      __ap = 4;
[20:04:15.138]        // -> [__ap <= 0x00000004]
[20:04:15.138]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:15.142]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:04:15.142]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:04:15.142]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:15.143]    </block>
[20:04:15.143]    <block atomic="false" info="">
[20:04:15.143]      __var nReset = 0x80;
[20:04:15.143]        // -> [nReset <= 0x00000080]
[20:04:15.143]      __var canReadPins = 0;
[20:04:15.143]        // -> [canReadPins <= 0x00000000]
[20:04:15.143]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:04:15.145]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:04:15.145]        // -> [canReadPins <= 0x00000001]
[20:04:15.145]    </block>
[20:04:15.145]    <control if="" while="1" timeout="200" info="">
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.145]      // while-condition  =>  TRUE
[20:04:15.145]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.146]      // while-condition  =>  TRUE
[20:04:15.146]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.147]      // while-condition  =>  TRUE
[20:04:15.147]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.148]      // while-condition  =>  TRUE
[20:04:15.148]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.149]      // while-condition  =>  TRUE
[20:04:15.149]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.150]      // while-condition  =>  TRUE
[20:04:15.150]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.151]      // while-condition  =>  TRUE
[20:04:15.151]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.152]      // while-condition  =>  TRUE
[20:04:15.152]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.153]      // while-condition  =>  TRUE
[20:04:15.153]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.154]      // while-condition  =>  TRUE
[20:04:15.154]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.155]      // while-condition  =>  TRUE
[20:04:15.155]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.156]      // while "1"  (timeout="200")
[20:04:15.156]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.157]      // while "1"  (timeout="200")
[20:04:15.157]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.158]      // while "1"  (timeout="200")
[20:04:15.158]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.159]      // while "1"  (timeout="200")
[20:04:15.159]      // while-condition  =>  TRUE
[20:04:15.160]      // while "1"  (timeout="200")
[20:04:15.160]      // while  =>  TIMEOUT
[20:04:15.160]      // end while "1"
[20:04:15.160]    </control>
[20:04:15.160]    <control if="canReadPins" while="" timeout="0" info="">
[20:04:15.160]      // if-block "canReadPins"
[20:04:15.160]        // =>  TRUE
[20:04:15.160]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:04:15.160]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:04:15.161]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:04:15.161]        // while-condition  =>  FALSE
[20:04:15.161]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:04:15.161]      </control>
[20:04:15.161]      // end if-block "canReadPins"
[20:04:15.161]    </control>
[20:04:15.161]    <control if="!canReadPins" while="" timeout="0" info="">
[20:04:15.161]      // if-block "!canReadPins"
[20:04:15.162]        // =>  FALSE
[20:04:15.162]      // skip if-block "!canReadPins"
[20:04:15.162]    </control>
[20:04:15.162]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:04:15.162]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:15.162]        // =>  TRUE
[20:04:15.162]      <block atomic="false" info="">
[20:04:15.162]        WriteAP(0x00, 0x190008);
[20:04:15.163]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:15.164]        WriteAP(0xF0, 0x01);
[20:04:15.168]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:15.168]      </block>
[20:04:15.168]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:15.168]    </control>
[20:04:15.168]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:04:15.168]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:15.168]        // =>  FALSE
[20:04:15.168]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:15.169]    </control>
[20:04:15.169]    <block atomic="false" info="">
[20:04:15.169]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:15.172]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:04:15.172]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:04:15.172]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:15.173]      __ap = 0; //lets make sure we reset the access point selection
[20:04:15.173]        // -> [__ap <= 0x00000000]
[20:04:15.173]    </block>
[20:04:15.173]  </sequence>
[20:04:15.173]  
[20:04:15.190]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:04:15.190]  
[20:04:15.190]  <debugvars>
[20:04:15.190]    // Pre-defined
[20:04:15.190]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:15.190]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:04:15.190]    __dp=0x00000000
[20:04:15.190]    __ap=0x00000000
[20:04:15.190]    __traceout=0x00000000      (Trace Disabled)
[20:04:15.190]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:15.190]    __FlashAddr=0x00000000
[20:04:15.191]    __FlashLen=0x00000000
[20:04:15.191]    __FlashArg=0x00000000
[20:04:15.191]    __FlashOp=0x00000000
[20:04:15.191]    __Result=0x00000000
[20:04:15.191]  </debugvars>
[20:04:15.191]  
[20:04:15.191]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:04:15.191]    <block atomic="false" info="">
[20:04:15.191]      __var deviceID = 0;
[20:04:15.191]        // -> [deviceID <= 0x00000000]
[20:04:15.191]      __var version = 0;
[20:04:15.191]        // -> [version <= 0x00000000]
[20:04:15.191]      __var partNum = 0;
[20:04:15.191]        // -> [partNum <= 0x00000000]
[20:04:15.191]      __var manuf = 0;
[20:04:15.191]        // -> [manuf <= 0x00000000]
[20:04:15.191]      __var isMSPM0G1X0X_G3X0X = 0;
[20:04:15.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:04:15.191]      __var isProduction = 0;
[20:04:15.191]        // -> [isProduction <= 0x00000000]
[20:04:15.191]      __var continueId = 0;
[20:04:15.191]        // -> [continueId <= 0x00000000]
[20:04:15.191]      deviceID =   Read32(0x41C40004);
[20:04:15.196]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:04:15.196]        // -> [deviceID <= 0x2BB8802F]
[20:04:15.196]      version = deviceID >> 28;
[20:04:15.196]        // -> [version <= 0x00000002]
[20:04:15.196]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:04:15.196]        // -> [partNum <= 0x0000BB88]
[20:04:15.196]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:04:15.196]        // -> [manuf <= 0x00000017]
[20:04:15.196]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:04:15.196]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:04:15.196]      isProduction = (version > 0);
[20:04:15.196]        // -> [isProduction <= 0x00000001]
[20:04:15.196]    </block>
[20:04:15.196]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:04:15.196]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:04:15.196]        // =>  FALSE
[20:04:15.196]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:04:15.197]    </control>
[20:04:15.197]    <control if="continueId == 4" while="" timeout="0" info="">
[20:04:15.197]      // if-block "continueId == 4"
[20:04:15.197]        // =>  FALSE
[20:04:15.197]      // skip if-block "continueId == 4"
[20:04:15.197]    </control>
[20:04:15.197]    <control if="!isProduction" while="" timeout="0" info="">
[20:04:15.197]      // if-block "!isProduction"
[20:04:15.197]        // =>  FALSE
[20:04:15.197]      // skip if-block "!isProduction"
[20:04:15.197]    </control>
[20:04:15.197]  </sequence>
[20:04:15.197]  
[20:07:34.929]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:07:34.929]  
[20:07:34.929]  <debugvars>
[20:07:34.929]    // Pre-defined
[20:07:34.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:34.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:34.929]    __dp=0x00000000
[20:07:34.929]    __ap=0x00000000
[20:07:34.929]    __traceout=0x00000000      (Trace Disabled)
[20:07:34.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:34.930]    __FlashAddr=0x00000000
[20:07:34.930]    __FlashLen=0x00000000
[20:07:34.930]    __FlashArg=0x00000000
[20:07:34.930]    __FlashOp=0x00000000
[20:07:34.930]    __Result=0x00000000
[20:07:34.930]  </debugvars>
[20:07:34.930]  
[20:07:34.930]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:07:34.930]    <block atomic="false" info="">
[20:07:34.930]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:07:34.931]        // -> [isSWJ <= 0x00000001]
[20:07:34.931]      __var hasDormant = __protocol & 0x00020000;
[20:07:34.931]        // -> [hasDormant <= 0x00000000]
[20:07:34.931]      __var protType   = __protocol & 0x0000FFFF;
[20:07:34.931]        // -> [protType <= 0x00000002]
[20:07:34.931]    </block>
[20:07:34.931]    <control if="protType == 1" while="" timeout="0" info="">
[20:07:34.931]      // if-block "protType == 1"
[20:07:34.931]        // =>  FALSE
[20:07:34.931]      // skip if-block "protType == 1"
[20:07:34.931]    </control>
[20:07:34.931]    <control if="protType == 2" while="" timeout="0" info="">
[20:07:34.931]      // if-block "protType == 2"
[20:07:34.931]        // =>  TRUE
[20:07:34.931]      <control if="isSWJ" while="" timeout="0" info="">
[20:07:34.932]        // if-block "isSWJ"
[20:07:34.932]          // =>  TRUE
[20:07:34.932]        <control if="hasDormant" while="" timeout="0" info="">
[20:07:34.932]          // if-block "hasDormant"
[20:07:34.932]            // =>  FALSE
[20:07:34.932]          // skip if-block "hasDormant"
[20:07:34.932]        </control>
[20:07:34.932]        <control if="!hasDormant" while="" timeout="0" info="">
[20:07:34.932]          // if-block "!hasDormant"
[20:07:34.932]            // =>  TRUE
[20:07:34.932]          <block atomic="false" info="">
[20:07:34.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:07:34.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:34.934]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:07:34.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:07:34.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:07:34.937]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:34.937]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:07:34.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:07:34.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:07:34.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:34.939]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:07:34.941]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:07:34.941]          </block>
[20:07:34.941]          // end if-block "!hasDormant"
[20:07:34.941]        </control>
[20:07:34.941]        // end if-block "isSWJ"
[20:07:34.941]      </control>
[20:07:34.942]      <control if="!isSWJ" while="" timeout="0" info="">
[20:07:34.942]        // if-block "!isSWJ"
[20:07:34.942]          // =>  FALSE
[20:07:34.942]        // skip if-block "!isSWJ"
[20:07:34.942]      </control>
[20:07:34.942]      <block atomic="false" info="">
[20:07:34.942]        ReadDP(0x0);
[20:07:34.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:07:34.943]      </block>
[20:07:34.944]      // end if-block "protType == 2"
[20:07:34.944]    </control>
[20:07:34.944]  </sequence>
[20:07:34.944]  
[20:07:34.947]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:07:34.947]  
[20:07:34.947]  <debugvars>
[20:07:34.947]    // Pre-defined
[20:07:34.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:34.947]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:34.947]    __dp=0x00000000
[20:07:34.948]    __ap=0x00000000
[20:07:34.948]    __traceout=0x00000000      (Trace Disabled)
[20:07:34.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:34.948]    __FlashAddr=0x00000000
[20:07:34.948]    __FlashLen=0x00000000
[20:07:34.948]    __FlashArg=0x00000000
[20:07:34.948]    __FlashOp=0x00000000
[20:07:34.948]    __Result=0x00000000
[20:07:34.948]  </debugvars>
[20:07:34.948]  
[20:07:34.948]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:07:34.949]    <block atomic="false" info="">
[20:07:34.949]      __var SW_DP_ABORT       = 0x0;
[20:07:34.949]        // -> [SW_DP_ABORT <= 0x00000000]
[20:07:34.949]      __var DP_CTRL_STAT      = 0x4;
[20:07:34.949]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:07:34.949]      __var DP_SELECT         = 0x8;
[20:07:34.949]        // -> [DP_SELECT <= 0x00000008]
[20:07:34.949]      __var powered_down      = 0;
[20:07:34.949]        // -> [powered_down <= 0x00000000]
[20:07:34.949]      WriteDP(DP_SELECT, 0x00000000);
[20:07:34.951]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:07:34.951]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:07:34.952]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:07:34.952]        // -> [powered_down <= 0x00000001]
[20:07:34.952]    </block>
[20:07:34.953]    <control if="powered_down" while="" timeout="0" info="">
[20:07:34.953]      // if-block "powered_down"
[20:07:34.953]        // =>  TRUE
[20:07:34.953]      <block atomic="false" info="">
[20:07:34.953]        Message(0, "Debug/System power-up request sent");
[20:07:34.956]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:07:34.957]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:07:34.957]      </block>
[20:07:34.957]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:07:34.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:07:34.960]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:07:34.960]        // while-condition  =>  FALSE
[20:07:34.960]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:07:34.960]      </control>
[20:07:34.960]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:07:34.960]        // if-block "(__protocol & 0xFFFF) == 1"
[20:07:34.961]          // =>  FALSE
[20:07:34.961]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:07:34.961]      </control>
[20:07:34.961]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:07:34.961]        // if-block "(__protocol & 0xFFFF) == 2"
[20:07:34.961]          // =>  TRUE
[20:07:34.961]        <block atomic="false" info="">
[20:07:34.961]          Message(0, "executing SWD power up");
[20:07:34.963]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:07:34.965]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:07:34.965]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:07:34.967]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:07:34.967]        </block>
[20:07:34.967]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:07:34.967]      </control>
[20:07:34.967]      // end if-block "powered_down"
[20:07:34.967]    </control>
[20:07:34.967]    <block atomic="false" info="">
[20:07:34.967]      __var DEBUG_PORT_VAL    = 0;
[20:07:34.967]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:07:34.968]      __var ACCESS_POINT_VAL  = 0;
[20:07:34.968]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:07:34.968]      __ap = 1; 
[20:07:34.968]        // -> [__ap <= 0x00000001]
[20:07:34.968]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:07:34.971]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:07:34.971]      __ap = 4;
[20:07:34.971]        // -> [__ap <= 0x00000004]
[20:07:34.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:34.974]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:07:34.974]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:07:34.975]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:34.976]    </block>
[20:07:34.976]    <block atomic="false" info="">
[20:07:34.976]      __var nReset = 0x80;
[20:07:34.976]        // -> [nReset <= 0x00000080]
[20:07:34.976]      __var canReadPins = 0;
[20:07:34.976]        // -> [canReadPins <= 0x00000000]
[20:07:34.976]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:07:34.978]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:07:34.978]        // -> [canReadPins <= 0x00000001]
[20:07:34.978]    </block>
[20:07:34.978]    <control if="" while="1" timeout="200" info="">
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.978]      // while "1"  (timeout="200")
[20:07:34.978]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.979]      // while-condition  =>  TRUE
[20:07:34.979]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.980]      // while-condition  =>  TRUE
[20:07:34.980]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.981]      // while-condition  =>  TRUE
[20:07:34.981]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.982]      // while "1"  (timeout="200")
[20:07:34.982]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.983]      // while "1"  (timeout="200")
[20:07:34.983]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.984]      // while "1"  (timeout="200")
[20:07:34.984]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.985]      // while-condition  =>  TRUE
[20:07:34.985]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.986]      // while "1"  (timeout="200")
[20:07:34.986]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.987]      // while-condition  =>  TRUE
[20:07:34.987]      // while "1"  (timeout="200")
[20:07:34.988]      // while-condition  =>  TRUE
[20:07:34.988]      // while "1"  (timeout="200")
[20:07:34.988]      // while  =>  TIMEOUT
[20:07:34.988]      // end while "1"
[20:07:34.988]    </control>
[20:07:34.988]    <control if="canReadPins" while="" timeout="0" info="">
[20:07:34.988]      // if-block "canReadPins"
[20:07:34.988]        // =>  TRUE
[20:07:34.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:07:34.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:07:34.990]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:07:34.990]        // while-condition  =>  FALSE
[20:07:34.990]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:07:34.990]      </control>
[20:07:34.990]      // end if-block "canReadPins"
[20:07:34.990]    </control>
[20:07:34.990]    <control if="!canReadPins" while="" timeout="0" info="">
[20:07:34.990]      // if-block "!canReadPins"
[20:07:34.990]        // =>  FALSE
[20:07:34.990]      // skip if-block "!canReadPins"
[20:07:34.990]    </control>
[20:07:34.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:07:34.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:34.990]        // =>  TRUE
[20:07:34.990]      <block atomic="false" info="">
[20:07:34.990]        WriteAP(0x00, 0x190008);
[20:07:34.992]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:34.992]        WriteAP(0xF0, 0x01);
[20:07:34.995]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:34.996]      </block>
[20:07:34.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:34.996]    </control>
[20:07:34.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:07:34.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:34.996]        // =>  FALSE
[20:07:34.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:34.996]    </control>
[20:07:34.996]    <block atomic="false" info="">
[20:07:34.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:34.999]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:07:35.000]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:07:35.000]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:35.001]      __ap = 0; //lets make sure we reset the access point selection
[20:07:35.001]        // -> [__ap <= 0x00000000]
[20:07:35.001]    </block>
[20:07:35.001]  </sequence>
[20:07:35.001]  
[20:07:35.017]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:07:35.017]  
[20:07:35.017]  <debugvars>
[20:07:35.017]    // Pre-defined
[20:07:35.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:35.017]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:35.017]    __dp=0x00000000
[20:07:35.017]    __ap=0x00000000
[20:07:35.017]    __traceout=0x00000000      (Trace Disabled)
[20:07:35.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:35.017]    __FlashAddr=0x00000000
[20:07:35.017]    __FlashLen=0x00000000
[20:07:35.017]    __FlashArg=0x00000000
[20:07:35.017]    __FlashOp=0x00000000
[20:07:35.017]    __Result=0x00000000
[20:07:35.017]  </debugvars>
[20:07:35.017]  
[20:07:35.017]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:07:35.017]    <block atomic="false" info="">
[20:07:35.017]      __var deviceID = 0;
[20:07:35.017]        // -> [deviceID <= 0x00000000]
[20:07:35.018]      __var version = 0;
[20:07:35.018]        // -> [version <= 0x00000000]
[20:07:35.018]      __var partNum = 0;
[20:07:35.018]        // -> [partNum <= 0x00000000]
[20:07:35.018]      __var manuf = 0;
[20:07:35.018]        // -> [manuf <= 0x00000000]
[20:07:35.018]      __var isMSPM0G1X0X_G3X0X = 0;
[20:07:35.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:07:35.018]      __var isProduction = 0;
[20:07:35.018]        // -> [isProduction <= 0x00000000]
[20:07:35.018]      __var continueId = 0;
[20:07:35.018]        // -> [continueId <= 0x00000000]
[20:07:35.018]      deviceID =   Read32(0x41C40004);
[20:07:35.023]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:07:35.023]        // -> [deviceID <= 0x2BB8802F]
[20:07:35.023]      version = deviceID >> 28;
[20:07:35.023]        // -> [version <= 0x00000002]
[20:07:35.023]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:07:35.023]        // -> [partNum <= 0x0000BB88]
[20:07:35.023]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:07:35.023]        // -> [manuf <= 0x00000017]
[20:07:35.023]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:07:35.023]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:07:35.024]      isProduction = (version > 0);
[20:07:35.024]        // -> [isProduction <= 0x00000001]
[20:07:35.024]    </block>
[20:07:35.024]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:07:35.024]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:07:35.024]        // =>  FALSE
[20:07:35.024]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:07:35.024]    </control>
[20:07:35.024]    <control if="continueId == 4" while="" timeout="0" info="">
[20:07:35.024]      // if-block "continueId == 4"
[20:07:35.024]        // =>  FALSE
[20:07:35.024]      // skip if-block "continueId == 4"
[20:07:35.024]    </control>
[20:07:35.024]    <control if="!isProduction" while="" timeout="0" info="">
[20:07:35.024]      // if-block "!isProduction"
[20:07:35.024]        // =>  FALSE
[20:07:35.024]      // skip if-block "!isProduction"
[20:07:35.024]    </control>
[20:07:35.024]  </sequence>
[20:07:35.025]  
[20:21:22.344]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:21:22.344]  
[20:21:22.344]  <debugvars>
[20:21:22.344]    // Pre-defined
[20:21:22.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:22.344]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:22.344]    __dp=0x00000000
[20:21:22.344]    __ap=0x00000000
[20:21:22.344]    __traceout=0x00000000      (Trace Disabled)
[20:21:22.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:22.344]    __FlashAddr=0x00000000
[20:21:22.344]    __FlashLen=0x00000000
[20:21:22.344]    __FlashArg=0x00000000
[20:21:22.344]    __FlashOp=0x00000000
[20:21:22.344]    __Result=0x00000000
[20:21:22.344]  </debugvars>
[20:21:22.344]  
[20:21:22.344]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:21:22.345]    <block atomic="false" info="">
[20:21:22.345]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:21:22.345]        // -> [isSWJ <= 0x00000001]
[20:21:22.345]      __var hasDormant = __protocol & 0x00020000;
[20:21:22.345]        // -> [hasDormant <= 0x00000000]
[20:21:22.345]      __var protType   = __protocol & 0x0000FFFF;
[20:21:22.345]        // -> [protType <= 0x00000002]
[20:21:22.345]    </block>
[20:21:22.345]    <control if="protType == 1" while="" timeout="0" info="">
[20:21:22.345]      // if-block "protType == 1"
[20:21:22.345]        // =>  FALSE
[20:21:22.346]      // skip if-block "protType == 1"
[20:21:22.346]    </control>
[20:21:22.346]    <control if="protType == 2" while="" timeout="0" info="">
[20:21:22.346]      // if-block "protType == 2"
[20:21:22.346]        // =>  TRUE
[20:21:22.346]      <control if="isSWJ" while="" timeout="0" info="">
[20:21:22.346]        // if-block "isSWJ"
[20:21:22.346]          // =>  TRUE
[20:21:22.346]        <control if="hasDormant" while="" timeout="0" info="">
[20:21:22.346]          // if-block "hasDormant"
[20:21:22.346]            // =>  FALSE
[20:21:22.346]          // skip if-block "hasDormant"
[20:21:22.346]        </control>
[20:21:22.346]        <control if="!hasDormant" while="" timeout="0" info="">
[20:21:22.346]          // if-block "!hasDormant"
[20:21:22.346]            // =>  TRUE
[20:21:22.346]          <block atomic="false" info="">
[20:21:22.346]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:21:22.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:22.347]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:21:22.351]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:21:22.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:21:22.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:22.353]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:21:22.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:21:22.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:21:22.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:22.356]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:21:22.357]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:21:22.358]          </block>
[20:21:22.358]          // end if-block "!hasDormant"
[20:21:22.358]        </control>
[20:21:22.358]        // end if-block "isSWJ"
[20:21:22.358]      </control>
[20:21:22.358]      <control if="!isSWJ" while="" timeout="0" info="">
[20:21:22.358]        // if-block "!isSWJ"
[20:21:22.358]          // =>  FALSE
[20:21:22.358]        // skip if-block "!isSWJ"
[20:21:22.358]      </control>
[20:21:22.358]      <block atomic="false" info="">
[20:21:22.358]        ReadDP(0x0);
[20:21:22.359]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:21:22.360]      </block>
[20:21:22.360]      // end if-block "protType == 2"
[20:21:22.360]    </control>
[20:21:22.360]  </sequence>
[20:21:22.360]  
[20:21:22.362]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:21:22.362]  
[20:21:22.362]  <debugvars>
[20:21:22.362]    // Pre-defined
[20:21:22.362]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:22.362]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:22.362]    __dp=0x00000000
[20:21:22.362]    __ap=0x00000000
[20:21:22.362]    __traceout=0x00000000      (Trace Disabled)
[20:21:22.362]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:22.363]    __FlashAddr=0x00000000
[20:21:22.363]    __FlashLen=0x00000000
[20:21:22.363]    __FlashArg=0x00000000
[20:21:22.363]    __FlashOp=0x00000000
[20:21:22.363]    __Result=0x00000000
[20:21:22.363]  </debugvars>
[20:21:22.363]  
[20:21:22.363]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:21:22.363]    <block atomic="false" info="">
[20:21:22.363]      __var SW_DP_ABORT       = 0x0;
[20:21:22.363]        // -> [SW_DP_ABORT <= 0x00000000]
[20:21:22.363]      __var DP_CTRL_STAT      = 0x4;
[20:21:22.363]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:21:22.363]      __var DP_SELECT         = 0x8;
[20:21:22.363]        // -> [DP_SELECT <= 0x00000008]
[20:21:22.363]      __var powered_down      = 0;
[20:21:22.363]        // -> [powered_down <= 0x00000000]
[20:21:22.363]      WriteDP(DP_SELECT, 0x00000000);
[20:21:22.365]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:21:22.365]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:21:22.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:21:22.367]        // -> [powered_down <= 0x00000001]
[20:21:22.367]    </block>
[20:21:22.367]    <control if="powered_down" while="" timeout="0" info="">
[20:21:22.367]      // if-block "powered_down"
[20:21:22.367]        // =>  TRUE
[20:21:22.367]      <block atomic="false" info="">
[20:21:22.367]        Message(0, "Debug/System power-up request sent");
[20:21:22.368]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:21:22.370]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:21:22.370]      </block>
[20:21:22.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:21:22.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:21:22.372]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:21:22.372]        // while-condition  =>  FALSE
[20:21:22.372]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:21:22.372]      </control>
[20:21:22.372]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:21:22.372]        // if-block "(__protocol & 0xFFFF) == 1"
[20:21:22.372]          // =>  FALSE
[20:21:22.372]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:21:22.372]      </control>
[20:21:22.372]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:21:22.372]        // if-block "(__protocol & 0xFFFF) == 2"
[20:21:22.373]          // =>  TRUE
[20:21:22.373]        <block atomic="false" info="">
[20:21:22.373]          Message(0, "executing SWD power up");
[20:21:22.379]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:21:22.381]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:21:22.381]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:21:22.382]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:21:22.383]        </block>
[20:21:22.383]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:21:22.383]      </control>
[20:21:22.383]      // end if-block "powered_down"
[20:21:22.383]    </control>
[20:21:22.383]    <block atomic="false" info="">
[20:21:22.383]      __var DEBUG_PORT_VAL    = 0;
[20:21:22.383]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:21:22.383]      __var ACCESS_POINT_VAL  = 0;
[20:21:22.383]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:21:22.383]      __ap = 1; 
[20:21:22.383]        // -> [__ap <= 0x00000001]
[20:21:22.383]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:21:22.386]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:21:22.386]      __ap = 4;
[20:21:22.386]        // -> [__ap <= 0x00000004]
[20:21:22.386]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:22.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:21:22.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:21:22.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:22.396]    </block>
[20:21:22.396]    <block atomic="false" info="">
[20:21:22.396]      __var nReset = 0x80;
[20:21:22.396]        // -> [nReset <= 0x00000080]
[20:21:22.396]      __var canReadPins = 0;
[20:21:22.396]        // -> [canReadPins <= 0x00000000]
[20:21:22.396]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:21:22.397]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:21:22.398]        // -> [canReadPins <= 0x00000001]
[20:21:22.398]    </block>
[20:21:22.398]    <control if="" while="1" timeout="200" info="">
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.398]      // while "1"  (timeout="200")
[20:21:22.398]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.399]      // while-condition  =>  TRUE
[20:21:22.399]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.400]      // while "1"  (timeout="200")
[20:21:22.400]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.401]      // while-condition  =>  TRUE
[20:21:22.401]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.402]      // while-condition  =>  TRUE
[20:21:22.402]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.403]      // while-condition  =>  TRUE
[20:21:22.403]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.404]      // while "1"  (timeout="200")
[20:21:22.404]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.405]      // while-condition  =>  TRUE
[20:21:22.405]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.406]      // while-condition  =>  TRUE
[20:21:22.406]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.407]      // while-condition  =>  TRUE
[20:21:22.407]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.408]      // while-condition  =>  TRUE
[20:21:22.408]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.409]      // while-condition  =>  TRUE
[20:21:22.409]      // while "1"  (timeout="200")
[20:21:22.410]      // while-condition  =>  TRUE
[20:21:22.410]      // while "1"  (timeout="200")
[20:21:22.410]      // while  =>  TIMEOUT
[20:21:22.410]      // end while "1"
[20:21:22.410]    </control>
[20:21:22.410]    <control if="canReadPins" while="" timeout="0" info="">
[20:21:22.410]      // if-block "canReadPins"
[20:21:22.410]        // =>  TRUE
[20:21:22.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:21:22.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:21:22.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:21:22.411]        // while-condition  =>  FALSE
[20:21:22.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:21:22.412]      </control>
[20:21:22.412]      // end if-block "canReadPins"
[20:21:22.412]    </control>
[20:21:22.412]    <control if="!canReadPins" while="" timeout="0" info="">
[20:21:22.412]      // if-block "!canReadPins"
[20:21:22.412]        // =>  FALSE
[20:21:22.412]      // skip if-block "!canReadPins"
[20:21:22.412]    </control>
[20:21:22.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:21:22.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:22.412]        // =>  TRUE
[20:21:22.412]      <block atomic="false" info="">
[20:21:22.412]        WriteAP(0x00, 0x190008);
[20:21:22.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:22.414]        WriteAP(0xF0, 0x01);
[20:21:22.417]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:22.417]      </block>
[20:21:22.417]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:22.417]    </control>
[20:21:22.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:21:22.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:22.417]        // =>  FALSE
[20:21:22.417]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:22.417]    </control>
[20:21:22.417]    <block atomic="false" info="">
[20:21:22.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:22.421]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:21:22.421]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:21:22.421]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:22.422]      __ap = 0; //lets make sure we reset the access point selection
[20:21:22.422]        // -> [__ap <= 0x00000000]
[20:21:22.422]    </block>
[20:21:22.422]  </sequence>
[20:21:22.422]  
[20:21:22.442]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:21:22.442]  
[20:21:22.442]  <debugvars>
[20:21:22.442]    // Pre-defined
[20:21:22.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:22.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:22.442]    __dp=0x00000000
[20:21:22.442]    __ap=0x00000000
[20:21:22.442]    __traceout=0x00000000      (Trace Disabled)
[20:21:22.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:22.442]    __FlashAddr=0x00000000
[20:21:22.442]    __FlashLen=0x00000000
[20:21:22.442]    __FlashArg=0x00000000
[20:21:22.443]    __FlashOp=0x00000000
[20:21:22.443]    __Result=0x00000000
[20:21:22.443]  </debugvars>
[20:21:22.443]  
[20:21:22.443]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:21:22.443]    <block atomic="false" info="">
[20:21:22.443]      __var deviceID = 0;
[20:21:22.443]        // -> [deviceID <= 0x00000000]
[20:21:22.443]      __var version = 0;
[20:21:22.443]        // -> [version <= 0x00000000]
[20:21:22.443]      __var partNum = 0;
[20:21:22.443]        // -> [partNum <= 0x00000000]
[20:21:22.443]      __var manuf = 0;
[20:21:22.443]        // -> [manuf <= 0x00000000]
[20:21:22.443]      __var isMSPM0G1X0X_G3X0X = 0;
[20:21:22.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:21:22.443]      __var isProduction = 0;
[20:21:22.443]        // -> [isProduction <= 0x00000000]
[20:21:22.443]      __var continueId = 0;
[20:21:22.443]        // -> [continueId <= 0x00000000]
[20:21:22.443]      deviceID =   Read32(0x41C40004);
[20:21:22.449]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:21:22.449]        // -> [deviceID <= 0x2BB8802F]
[20:21:22.449]      version = deviceID >> 28;
[20:21:22.449]        // -> [version <= 0x00000002]
[20:21:22.449]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:21:22.449]        // -> [partNum <= 0x0000BB88]
[20:21:22.449]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:21:22.449]        // -> [manuf <= 0x00000017]
[20:21:22.449]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:21:22.449]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:21:22.449]      isProduction = (version > 0);
[20:21:22.449]        // -> [isProduction <= 0x00000001]
[20:21:22.449]    </block>
[20:21:22.450]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:21:22.450]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:21:22.450]        // =>  FALSE
[20:21:22.450]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:21:22.450]    </control>
[20:21:22.450]    <control if="continueId == 4" while="" timeout="0" info="">
[20:21:22.450]      // if-block "continueId == 4"
[20:21:22.450]        // =>  FALSE
[20:21:22.450]      // skip if-block "continueId == 4"
[20:21:22.450]    </control>
[20:21:22.450]    <control if="!isProduction" while="" timeout="0" info="">
[20:21:22.450]      // if-block "!isProduction"
[20:21:22.450]        // =>  FALSE
[20:21:22.450]      // skip if-block "!isProduction"
[20:21:22.450]    </control>
[20:21:22.450]  </sequence>
[20:21:22.450]  
